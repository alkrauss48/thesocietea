-- MySQL dump 10.13  Distrib 5.5.40, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: the_societea_2
-- ------------------------------------------------------
-- Server version	5.5.40-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_cfs_sessions`
--

DROP TABLE IF EXISTS `wp_cfs_sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_sessions` (
  `id` varchar(32) NOT NULL DEFAULT '',
  `data` text,
  `expires` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_sessions`
--

LOCK TABLES `wp_cfs_sessions` WRITE;
/*!40000 ALTER TABLE `wp_cfs_sessions` DISABLE KEYS */;
INSERT INTO `wp_cfs_sessions` VALUES ('1d23af01ec42c1b590ee7c875dd78fa9','a:7:{s:7:\"post_id\";i:4;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:139;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424904648'),('21e01ac7dfbaa5ccdc47d27d4adfe4ed','a:7:{s:7:\"post_id\";i:67;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:37;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424888973'),('2b92d09fe93330c616bb4d0bc3b978e6','a:7:{s:7:\"post_id\";i:67;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:37;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424888967'),('3a4e5516050f70474e2cbd5020374162','a:7:{s:7:\"post_id\";i:4;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:139;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424889235'),('662c9a7d94a06099f6b27cc15e31da5a','a:7:{s:7:\"post_id\";i:66;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:37;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424888942'),('70c19a510a4fd724c45f3bcc1f0b473e','a:7:{s:7:\"post_id\";i:30;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:8;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424887734'),('9119ccd8b9c9d087a1838f0bc99b3f99','a:7:{s:7:\"post_id\";i:4;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:139;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424889197'),('9e1ec7b33d0ca23bacf589d4ae57e6aa','a:7:{s:7:\"post_id\";i:66;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:37;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424888954'),('c6854349f261486f827565f73c698660','a:7:{s:7:\"post_id\";i:4;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:139;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424889000'),('fe1c571e22bbba81723ca20399b490ef','a:7:{s:7:\"post_id\";i:30;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:8;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1424887725');
/*!40000 ALTER TABLE `wp_cfs_sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_cfs_values`
--

DROP TABLE IF EXISTS `wp_cfs_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_values` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `field_id` int(10) unsigned DEFAULT NULL,
  `meta_id` int(10) unsigned DEFAULT NULL,
  `post_id` int(10) unsigned DEFAULT NULL,
  `base_field_id` int(10) unsigned DEFAULT '0',
  `hierarchy` text,
  `depth` int(10) unsigned DEFAULT '0',
  `weight` int(10) unsigned DEFAULT '0',
  `sub_weight` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `field_id_idx` (`field_id`),
  KEY `post_id_idx` (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3488 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_values`
--

LOCK TABLES `wp_cfs_values` WRITE;
/*!40000 ALTER TABLE `wp_cfs_values` DISABLE KEYS */;
INSERT INTO `wp_cfs_values` VALUES (3,1,148,6,0,'',0,0,0),(2422,1,2870,16,0,'',0,0,0),(2423,16,2871,16,0,'',0,0,0),(2538,7,3048,252,0,'',0,0,0),(2539,6,3049,252,0,'',0,0,0),(2540,8,3050,252,0,'',0,0,0),(2541,9,3051,252,0,'',0,0,0),(2542,10,3052,252,0,'',0,0,0),(2543,11,3053,252,0,'',0,0,0),(2544,3,3054,252,2,'2:0:3',1,0,0),(2545,4,3055,252,2,'2:0:4',1,0,0),(2546,5,3056,252,2,'2:0:5',1,0,0),(2547,3,3057,252,2,'2:1:3',1,1,0),(2548,4,3058,252,2,'2:1:4',1,1,0),(2549,5,3059,252,2,'2:1:5',1,1,0),(2550,3,3060,252,2,'2:2:3',1,2,0),(2551,4,3061,252,2,'2:2:4',1,2,0),(2552,5,3062,252,2,'2:2:5',1,2,0),(2553,3,3063,252,2,'2:3:3',1,3,0),(2554,4,3064,252,2,'2:3:4',1,3,0),(2555,5,3065,252,2,'2:3:5',1,3,0),(2556,7,3066,63,0,'',0,0,0),(2557,6,3067,63,0,'',0,0,0),(2558,8,3068,63,0,'',0,0,0),(2559,9,3069,63,0,'',0,0,0),(2560,10,3070,63,0,'',0,0,0),(2561,11,3071,63,0,'',0,0,0),(2562,3,3072,63,2,'2:0:3',1,0,0),(2563,4,3073,63,2,'2:0:4',1,0,0),(2564,5,3074,63,2,'2:0:5',1,0,0),(2565,3,3075,63,2,'2:1:3',1,1,0),(2566,4,3076,63,2,'2:1:4',1,1,0),(2567,5,3077,63,2,'2:1:5',1,1,0),(2568,3,3078,63,2,'2:2:3',1,2,0),(2569,4,3079,63,2,'2:2:4',1,2,0),(2570,5,3080,63,2,'2:2:5',1,2,0),(2571,3,3081,63,2,'2:3:3',1,3,0),(2572,4,3082,63,2,'2:3:4',1,3,0),(2573,5,3083,63,2,'2:3:5',1,3,0),(2574,7,3084,64,0,'',0,0,0),(2575,6,3085,64,0,'',0,0,0),(2576,8,3086,64,0,'',0,0,0),(2577,9,3087,64,0,'',0,0,0),(2578,10,3088,64,0,'',0,0,0),(2579,11,3089,64,0,'',0,0,0),(2580,3,3090,64,2,'2:0:3',1,0,0),(2581,4,3091,64,2,'2:0:4',1,0,0),(2582,5,3092,64,2,'2:0:5',1,0,0),(2583,3,3093,64,2,'2:1:3',1,1,0),(2584,4,3094,64,2,'2:1:4',1,1,0),(2585,5,3095,64,2,'2:1:5',1,1,0),(2586,3,3096,64,2,'2:2:3',1,2,0),(2587,4,3097,64,2,'2:2:4',1,2,0),(2588,5,3098,64,2,'2:2:5',1,2,0),(2589,3,3099,64,2,'2:3:3',1,3,0),(2590,4,3100,64,2,'2:3:4',1,3,0),(2591,5,3101,64,2,'2:3:5',1,3,0),(2610,7,3120,214,0,'',0,0,0),(2611,6,3121,214,0,'',0,0,0),(2612,8,3122,214,0,'',0,0,0),(2613,9,3123,214,0,'',0,0,0),(2614,10,3124,214,0,'',0,0,0),(2615,11,3125,214,0,'',0,0,0),(2616,3,3126,214,2,'2:0:3',1,0,0),(2617,4,3127,214,2,'2:0:4',1,0,0),(2618,5,3128,214,2,'2:0:5',1,0,0),(2619,3,3129,214,2,'2:1:3',1,1,0),(2620,4,3130,214,2,'2:1:4',1,1,0),(2621,5,3131,214,2,'2:1:5',1,1,0),(2622,3,3132,214,2,'2:2:3',1,2,0),(2623,4,3133,214,2,'2:2:4',1,2,0),(2624,5,3134,214,2,'2:2:5',1,2,0),(2625,3,3135,214,2,'2:3:3',1,3,0),(2626,4,3136,214,2,'2:3:4',1,3,0),(2627,5,3137,214,2,'2:3:5',1,3,0),(2628,7,3138,68,0,'',0,0,0),(2629,6,3139,68,0,'',0,0,0),(2630,8,3140,68,0,'',0,0,0),(2631,9,3141,68,0,'',0,0,0),(2632,10,3142,68,0,'',0,0,0),(2633,11,3143,68,0,'',0,0,0),(2634,3,3144,68,2,'2:0:3',1,0,0),(2635,4,3145,68,2,'2:0:4',1,0,0),(2636,5,3146,68,2,'2:0:5',1,0,0),(2637,3,3147,68,2,'2:1:3',1,1,0),(2638,4,3148,68,2,'2:1:4',1,1,0),(2639,5,3149,68,2,'2:1:5',1,1,0),(2640,7,3150,38,0,'',0,0,0),(2641,6,3151,38,0,'',0,0,0),(2642,8,3152,38,0,'',0,0,0),(2643,9,3153,38,0,'',0,0,0),(2644,10,3154,38,0,'',0,0,0),(2645,11,3155,38,0,'',0,0,0),(2646,3,3156,38,2,'2:0:3',1,0,0),(2647,4,3157,38,2,'2:0:4',1,0,0),(2648,5,3158,38,2,'2:0:5',1,0,0),(2649,3,3159,38,2,'2:1:3',1,1,0),(2650,4,3160,38,2,'2:1:4',1,1,0),(2651,5,3161,38,2,'2:1:5',1,1,0),(2652,3,3162,38,2,'2:2:3',1,2,0),(2653,4,3163,38,2,'2:2:4',1,2,0),(2654,5,3164,38,2,'2:2:5',1,2,0),(2655,3,3165,38,2,'2:3:3',1,3,0),(2656,4,3166,38,2,'2:3:4',1,3,0),(2657,5,3167,38,2,'2:3:5',1,3,0),(3041,7,5361,336,0,'',0,0,0),(3042,6,5362,336,0,'',0,0,0),(3043,8,5363,336,0,'',0,0,0),(3044,9,5364,336,0,'',0,0,0),(3045,10,5365,336,0,'',0,0,0),(3046,11,5366,336,0,'',0,0,0),(3047,3,5367,336,2,'2:0:3',1,0,0),(3048,4,5368,336,2,'2:0:4',1,0,0),(3049,5,5369,336,2,'2:0:5',1,0,0),(3050,3,5370,336,2,'2:1:3',1,1,0),(3051,4,5371,336,2,'2:1:4',1,1,0),(3052,5,5372,336,2,'2:1:5',1,1,0),(3053,3,5373,336,2,'2:2:3',1,2,0),(3054,4,5374,336,2,'2:2:4',1,2,0),(3055,5,5375,336,2,'2:2:5',1,2,0),(3056,3,5376,336,2,'2:3:3',1,3,0),(3057,4,5377,336,2,'2:3:4',1,3,0),(3058,5,5378,336,2,'2:3:5',1,3,0),(3059,7,5379,65,0,'',0,0,0),(3060,6,5380,65,0,'',0,0,0),(3061,8,5381,65,0,'',0,0,0),(3062,9,5382,65,0,'',0,0,0),(3063,10,5383,65,0,'',0,0,0),(3064,11,5384,65,0,'',0,0,0),(3065,3,5385,65,2,'2:0:3',1,0,0),(3066,4,5386,65,2,'2:0:4',1,0,0),(3067,5,5387,65,2,'2:0:5',1,0,0),(3068,3,5388,65,2,'2:1:3',1,1,0),(3069,4,5389,65,2,'2:1:4',1,1,0),(3070,5,5390,65,2,'2:1:5',1,1,0),(3071,3,5391,65,2,'2:2:3',1,2,0),(3072,4,5392,65,2,'2:2:4',1,2,0),(3073,5,5393,65,2,'2:2:5',1,2,0),(3074,3,5394,65,2,'2:3:3',1,3,0),(3075,4,5395,65,2,'2:3:4',1,3,0),(3076,5,5396,65,2,'2:3:5',1,3,0),(3223,1,7264,13,0,'',0,0,0),(3224,16,7265,13,0,'',0,0,0),(3225,18,7266,13,17,'17:0:18',1,0,0),(3226,22,7267,13,17,'17:0:22',1,0,0),(3227,20,7268,13,17,'17:0:19:0:20',2,0,0),(3228,21,7269,13,17,'17:0:19:0:21',2,0,0),(3229,20,7270,13,17,'17:0:19:1:20',2,1,0),(3230,21,7271,13,17,'17:0:19:1:21',2,1,0),(3231,20,7272,13,17,'17:0:19:2:20',2,2,0),(3232,21,7273,13,17,'17:0:19:2:21',2,2,0),(3233,20,7274,13,17,'17:0:19:3:20',2,3,0),(3234,21,7275,13,17,'17:0:19:3:21',2,3,0),(3235,20,7276,13,17,'17:0:19:4:20',2,4,0),(3236,21,7277,13,17,'17:0:19:4:21',2,4,0),(3237,20,7278,13,17,'17:0:19:5:20',2,5,0),(3238,21,7279,13,17,'17:0:19:5:21',2,5,0),(3239,20,7280,13,17,'17:0:19:6:20',2,6,0),(3240,21,7281,13,17,'17:0:19:6:21',2,6,0),(3241,20,7282,13,17,'17:0:19:7:20',2,7,0),(3242,21,7283,13,17,'17:0:19:7:21',2,7,0),(3243,20,7284,13,17,'17:0:19:8:20',2,8,0),(3244,21,7285,13,17,'17:0:19:8:21',2,8,0),(3245,20,7286,13,17,'17:0:19:9:20',2,9,0),(3246,21,7287,13,17,'17:0:19:9:21',2,9,0),(3247,20,7288,13,17,'17:0:19:10:20',2,10,0),(3248,21,7289,13,17,'17:0:19:10:21',2,10,0),(3249,18,7290,13,17,'17:1:18',1,1,0),(3250,22,7291,13,17,'17:1:22',1,1,0),(3251,20,7292,13,17,'17:1:19:0:20',2,0,0),(3252,21,7293,13,17,'17:1:19:0:21',2,0,0),(3253,20,7294,13,17,'17:1:19:1:20',2,1,0),(3254,21,7295,13,17,'17:1:19:1:21',2,1,0),(3255,20,7296,13,17,'17:1:19:2:20',2,2,0),(3256,21,7297,13,17,'17:1:19:2:21',2,2,0),(3257,20,7298,13,17,'17:1:19:3:20',2,3,0),(3258,21,7299,13,17,'17:1:19:3:21',2,3,0),(3259,20,7300,13,17,'17:1:19:4:20',2,4,0),(3260,21,7301,13,17,'17:1:19:4:21',2,4,0),(3261,20,7302,13,17,'17:1:19:5:20',2,5,0),(3262,21,7303,13,17,'17:1:19:5:21',2,5,0),(3263,20,7304,13,17,'17:1:19:6:20',2,6,0),(3264,21,7305,13,17,'17:1:19:6:21',2,6,0),(3265,20,7306,13,17,'17:1:19:7:20',2,7,0),(3266,21,7307,13,17,'17:1:19:7:21',2,7,0),(3267,20,7308,13,17,'17:1:19:8:20',2,8,0),(3268,21,7309,13,17,'17:1:19:8:21',2,8,0),(3269,20,7310,13,17,'17:1:19:9:20',2,9,0),(3270,21,7311,13,17,'17:1:19:9:21',2,9,0),(3271,20,7312,13,17,'17:1:19:11:20',2,11,0),(3272,21,7313,13,17,'17:1:19:11:21',2,11,0),(3273,18,7314,13,17,'17:2:18',1,2,0),(3274,22,7315,13,17,'17:2:22',1,2,0),(3275,20,7316,13,17,'17:2:19:0:20',2,0,0),(3276,21,7317,13,17,'17:2:19:0:21',2,0,0),(3277,20,7318,13,17,'17:2:19:1:20',2,1,0),(3278,21,7319,13,17,'17:2:19:1:21',2,1,0),(3279,20,7320,13,17,'17:2:19:2:20',2,2,0),(3280,21,7321,13,17,'17:2:19:2:21',2,2,0),(3281,20,7322,13,17,'17:2:19:3:20',2,3,0),(3282,21,7323,13,17,'17:2:19:3:21',2,3,0),(3283,20,7324,13,17,'17:2:19:4:20',2,4,0),(3284,21,7325,13,17,'17:2:19:4:21',2,4,0),(3285,20,7326,13,17,'17:2:19:5:20',2,5,0),(3286,21,7327,13,17,'17:2:19:5:21',2,5,0),(3287,20,7328,13,17,'17:2:19:6:20',2,6,0),(3288,21,7329,13,17,'17:2:19:6:21',2,6,0),(3289,20,7330,13,17,'17:2:19:7:20',2,7,0),(3290,21,7331,13,17,'17:2:19:7:21',2,7,0),(3291,20,7332,13,17,'17:2:19:8:20',2,8,0),(3292,21,7333,13,17,'17:2:19:8:21',2,8,0),(3293,20,7334,13,17,'17:2:19:9:20',2,9,0),(3294,21,7335,13,17,'17:2:19:9:21',2,9,0),(3295,20,7336,13,17,'17:2:19:10:20',2,10,0),(3296,21,7337,13,17,'17:2:19:10:21',2,10,0),(3387,7,8924,429,0,'',0,0,0),(3388,6,8925,429,0,'',0,0,0),(3389,8,8926,429,0,'',0,0,0),(3390,9,8927,429,0,'',0,0,0),(3391,10,8928,429,0,'',0,0,0),(3392,11,8929,429,0,'',0,0,0),(3393,3,8930,429,2,'2:0:3',1,0,0),(3394,4,8931,429,2,'2:0:4',1,0,0),(3395,5,8932,429,2,'2:0:5',1,0,0),(3396,3,8933,429,2,'2:1:3',1,1,0),(3397,4,8934,429,2,'2:1:4',1,1,0),(3398,5,8935,429,2,'2:1:5',1,1,0),(3399,3,8936,429,2,'2:2:3',1,2,0),(3400,4,8937,429,2,'2:2:4',1,2,0),(3401,5,8938,429,2,'2:2:5',1,2,0),(3402,3,8939,429,2,'2:3:3',1,3,0),(3403,4,8940,429,2,'2:3:4',1,3,0),(3404,5,8941,429,2,'2:3:5',1,3,0),(3405,1,9315,30,0,'',0,0,0),(3406,16,9316,30,0,'',0,0,0),(3407,7,9317,66,0,'',0,0,0),(3408,6,9318,66,0,'',0,0,0),(3409,8,9319,66,0,'',0,0,0),(3410,9,9320,66,0,'',0,0,0),(3411,10,9321,66,0,'',0,0,0),(3412,11,9322,66,0,'',0,0,0),(3413,3,9323,66,2,'2:0:3',1,0,0),(3414,4,9324,66,2,'2:0:4',1,0,0),(3415,5,9325,66,2,'2:0:5',1,0,0),(3416,3,9326,66,2,'2:1:3',1,1,0),(3417,4,9327,66,2,'2:1:4',1,1,0),(3418,5,9328,66,2,'2:1:5',1,1,0),(3419,3,9329,66,2,'2:2:3',1,2,0),(3420,4,9330,66,2,'2:2:4',1,2,0),(3421,5,9331,66,2,'2:2:5',1,2,0),(3422,3,9332,66,2,'2:3:3',1,3,0),(3423,4,9333,66,2,'2:3:4',1,3,0),(3424,5,9334,66,2,'2:3:5',1,3,0),(3425,7,9335,67,0,'',0,0,0),(3426,6,9336,67,0,'',0,0,0),(3427,8,9337,67,0,'',0,0,0),(3428,9,9338,67,0,'',0,0,0),(3429,10,9339,67,0,'',0,0,0),(3430,11,9340,67,0,'',0,0,0),(3431,3,9341,67,2,'2:0:3',1,0,0),(3432,4,9342,67,2,'2:0:4',1,0,0),(3433,5,9343,67,2,'2:0:5',1,0,0),(3434,3,9344,67,2,'2:1:3',1,1,0),(3435,4,9345,67,2,'2:1:4',1,1,0),(3436,5,9346,67,2,'2:1:5',1,1,0),(3437,3,9347,67,2,'2:2:3',1,2,0),(3438,4,9348,67,2,'2:2:4',1,2,0),(3439,5,9349,67,2,'2:2:5',1,2,0),(3464,13,9376,4,12,'12:0:13',1,0,0),(3465,14,9377,4,12,'12:0:14',1,0,0),(3466,15,9378,4,12,'12:0:15',1,0,0),(3467,13,9379,4,12,'12:1:13',1,1,0),(3468,14,9380,4,12,'12:1:14',1,1,0),(3469,15,9381,4,12,'12:1:15',1,1,0),(3470,13,9382,4,12,'12:2:13',1,2,0),(3471,14,9383,4,12,'12:2:14',1,2,0),(3472,15,9384,4,12,'12:2:15',1,2,0),(3473,13,9385,4,12,'12:3:13',1,3,0),(3474,14,9386,4,12,'12:3:14',1,3,0),(3475,15,9387,4,12,'12:3:15',1,3,0),(3476,13,9388,4,12,'12:4:13',1,4,0),(3477,14,9389,4,12,'12:4:14',1,4,0),(3478,15,9390,4,12,'12:4:15',1,4,0),(3479,13,9391,4,12,'12:5:13',1,5,0),(3480,14,9392,4,12,'12:5:14',1,5,0),(3481,15,9393,4,12,'12:5:15',1,5,0),(3482,13,9394,4,12,'12:6:13',1,6,0),(3483,14,9395,4,12,'12:6:14',1,6,0),(3484,15,9396,4,12,'12:6:15',1,6,0),(3485,13,9397,4,12,'12:7:13',1,7,0),(3486,14,9398,4,12,'12:7:14',1,7,0),(3487,15,9399,4,12,'12:7:15',1,7,0);
/*!40000 ALTER TABLE `wp_cfs_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`),
  KEY `disqus_dupecheck` (`meta_key`,`meta_value`(11))
) ENGINE=InnoDB AUTO_INCREMENT=62 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
INSERT INTO `wp_commentmeta` VALUES (1,4,'akismet_result','false'),(2,4,'akismet_history','a:4:{s:4:\"time\";d:1406225895.7898979;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(4,4,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9390969;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(5,3,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9453449;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(6,2,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9560931;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(7,5,'dsq_parent_post_id',''),(8,5,'dsq_post_id','1546242956'),(9,6,'akismet_result','false'),(10,6,'akismet_history','a:4:{s:4:\"time\";d:1409235610.7454171;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(12,7,'akismet_result','false'),(13,7,'akismet_history','a:4:{s:4:\"time\";d:1409270553.9715359;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(15,8,'dsq_parent_post_id',''),(16,8,'dsq_post_id','1575120066'),(17,9,'dsq_parent_post_id',''),(18,9,'dsq_post_id','1592261029'),(19,10,'dsq_parent_post_id','1592261029'),(20,10,'dsq_post_id','1592265397'),(21,11,'akismet_result','false'),(22,11,'akismet_history','a:4:{s:4:\"time\";d:1411050709.575835;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(24,12,'dsq_parent_post_id',''),(25,12,'dsq_post_id','1619594919'),(26,13,'dsq_parent_post_id','1619594919'),(27,13,'dsq_post_id','1619602546'),(28,14,'dsq_parent_post_id',''),(29,14,'dsq_post_id','1654439967'),(30,15,'dsq_parent_post_id',''),(31,15,'dsq_post_id','1719891759'),(32,16,'dsq_parent_post_id','1719891759'),(33,16,'dsq_post_id','1726170541'),(34,17,'dsq_parent_post_id','1726170541'),(35,17,'dsq_post_id','1726923924'),(36,18,'dsq_parent_post_id','1726923924'),(37,18,'dsq_post_id','1727291516'),(38,19,'dsq_parent_post_id','1727291516'),(39,19,'dsq_post_id','1727701359'),(40,20,'dsq_parent_post_id','1726170541'),(41,20,'dsq_post_id','1799847916'),(42,21,'dsq_parent_post_id','1799847916'),(43,21,'dsq_post_id','1802415250'),(44,22,'dsq_parent_post_id','1802415250'),(45,22,'dsq_post_id','1802955843'),(46,23,'dsq_parent_post_id',''),(47,23,'dsq_post_id','1867210725'),(48,24,'dsq_parent_post_id','1867210725'),(49,24,'dsq_post_id','1867214616'),(50,25,'dsq_parent_post_id',''),(51,25,'dsq_post_id','1867491120'),(52,26,'dsq_parent_post_id','1867491120'),(53,26,'dsq_post_id','1868108751'),(54,27,'dsq_parent_post_id',''),(55,27,'dsq_post_id','1874850312'),(56,28,'dsq_parent_post_id','1874850312'),(57,28,'dsq_post_id','1874855902'),(58,29,'dsq_parent_post_id','1874855902'),(59,29,'dsq_post_id','1874908991'),(60,30,'dsq_parent_post_id','1874908991'),(61,30,'dsq_post_id','1875039091');
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (2,158,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:11:27','2014-06-30 18:11:27','[&#8230;] we&#8217;ve established that this site is running on WordPress (wondering why I made that choice? Read about it), I want to delve in further to talk about what else I&#8217;m using, and the tools I used to build [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(3,6,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:15:26','2014-06-30 18:15:26','[&#8230;] About [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(4,154,'How to Learn Vim | Aaron Krauss','','http://thesocietea.org/2014/07/how-to-learn-vim/','162.243.14.224','2014-07-24 18:18:15','2014-07-24 18:18:15','[&#8230;] 7 months later, I&#8217;m following up with my first vim blog post about why you should use vim. If you&#8217;ve made it here, then you&#8217;re either seriously interested in learning vim (which [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(5,142,'Guest','anonymized-1546242956@disqus.com','','72.198.54.181','2014-08-17 04:25:00','2014-08-17 04:25:00','Test',0,'1','Disqus/1.1(2.77):1546242956','',0,0),(6,233,'Building Javascript with Grunt, Bower, Browserify | Aaron Krauss','','http://thesocietea.org/2014/08/building-javascript-with-grunt-bower-browserify/','162.243.14.224','2014-08-28 14:20:10','2014-08-28 14:20:10','[&#8230;] bower and browserify; if you haven&#8217;t read it yet, I highly recommend you start off by reading Getting Familiar with Bower and Browserify before starting here. Let&#8217;s review our goals regarding javascript building that we landed [&#8230;]',0,'0','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(7,220,'Vim as Your Editor? | Aaron Krauss','','http://thesocietea.org/2014/06/vim-as-your-editor/','162.243.14.224','2014-08-29 00:02:33','2014-08-29 00:02:33','[&#8230;] and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there&#8217;s a bunch of [&#8230;]',0,'0','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(8,305,'OleTange','disqus.com@tange.dk','','130.225.254.30','2014-09-05 11:28:00','2014-09-05 11:28:00','\'ls | xargs -0\' should not work. You need \'find -print0\' or you could use GNU Parallel and skip the -0 as GNU Parallel deals correctly with space, \' and \". GNU Parallel would also make some of the commands more readable:  ls | parallel echo {}\" is a file\"nnLearn more: nn* https://www.youtube.com/playlist?list=PL284C9FF2488BC6D1n* http://www.gnu.org/software/parallel/parallel_tutorial.htmln* http://www.gnu.org/software/parallel/man.html',0,'1','Disqus/1.1(2.77):1575120066','',0,0),(9,305,'somebodyelse','derrich@gmail.com','','209.6.202.77','2014-09-16 23:01:00','2014-09-16 23:01:00','I don\'t know why you felt the need to make this more complicated, since doing this as a one-liner in sed is about as simple as a sed invocation can get:\n\n$ sed -i \'s/vim/v/g\' ',0,'1','Disqus/1.1(2.77):1592261029','',0,0),(10,305,'alkrauss48','alkrauss48@gmail.com','','198.102.159.200','2014-09-16 23:05:00','2014-09-16 23:05:00','You\'re right, and I mention that in my closing paragraph. I use all of these tools but had the least familiarity with sed, and after learning more about it, I wanted to write about it. That turned into wanting to include some tools that you can often times use along with it, and I figured that there are probably other devs out there that may be unfamiliar with some of these tools.\n\n\nErgo, blog post was born!',0,'1','Disqus/1.1(2.77):1592265397','',9,0),(11,142,'Using GeoJSON files with Google Maps API | Aaron Krauss','','http://thesocietea.org/2014/09/using-geojson-files-with-google-maps-api/','162.243.14.224','2014-09-18 14:31:49','2014-09-18 14:31:49','[&#8230;] visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, I am guilty here). By just using the naked Google Maps API libraries, this is impossible. But we don&#8217;t like to [&#8230;]',0,'0','The Incutio XML-RPC PHP Library -- WordPress/4.0','pingback',0,0),(12,158,'Xavier Combelle','xavier.combelle@gmail.com','','109.223.180.251','2014-10-04 16:57:00','2014-10-04 16:57:00','One could say Wordpress means PHP means very bad code',0,'1','Disqus/1.1(2.77):1619594919','',0,0),(13,158,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2014-10-04 17:04:00','2014-10-04 17:04:00','One could say that, but I don\'t think it\'s a very valid argument. PHP can be written poorly, as can any language, but Wordpress has done a very impressive job of modularizing their logic and allowing for themes to be cleanly built. I\'ve been very happy with it so far - and it still holds true that I\'m using it strictly to manage content. No actual design has been wordpress-theme influenced.',0,'1','Disqus/1.1(2.77):1619602546','',12,0),(14,357,'Egon Elbre','egonelbre@gmail.com','','194.126.102.221','2014-10-26 14:26:00','2014-10-26 14:26:00','go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\n\nRunning that in goroutine isn\'t necessary, that call only registers the handlers... but it doesn\'t do any handling itself.\n\n&gt; Go Wiki uses MongoDB, and there’s a very well-built ORM for Go that I chose to use called mgo.\n\nmgo is not an ORM, at least not by standard usages of ORM.\n\n    import \"../globals\"\n\nDon\'t use relative imports.\n\nglobals - I\'m not sure that package is a good design decision.\n\nhelpers - that code can be organized much better, try to get rid of utils/helpers packages. Also read [Your coding conventions are hurting you](http://www.carlopescio.com/2011/04/your-coding-conventions-are-hurting-you.html).',0,'1','Disqus/1.1(2.77):1654439967','',0,0),(15,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.108.247','2014-12-01 06:34:00','2014-12-01 06:34:00','Is there any way to automatically fetch all dependencies from bower? For example one of my projects uses a lot of external libraries, including jquery, react, noty, etc. It is going to be a little bit hard to import all those dependencies via browserify-shim.',0,'1','Disqus/1.1(2.77):1719891759','',0,0),(16,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-04 22:16:00','2014-12-04 22:16:00','Not yet I don\'t think, but this shouldn\'t be difficult to implement. One option if you are using a common lib like jquery or react is to use the node module version and include it in your package.json as normal, which would skip browserify-shim altogether. Browserify will see it in there and know how to compile it.\n\nBut more realistically for smaller libs, you should only have to add a line like this to the browser key in your package.json file like:\n\n    \"jquery\": \"./vendor/bower_components/jquery/jquery.js\",\n\nsubbing the parts out to be specific to your plugin. That should be all you need to add.',0,'1','Disqus/1.1(2.77):1726170541','',15,0),(17,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.107.189','2014-12-05 10:50:00','2014-12-05 10:50:00','A lot of packages on bower comes in compliance with CommonJS standard, but you still have to import them trough package.json, which is not cool.',0,'1','Disqus/1.1(2.77):1726923924','',16,0),(18,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-05 15:56:00','2014-12-05 15:56:00','Really? Maybe I\'ve just gotten lucky, but if I download a CommonJS dependency through bower, then I just have to \"require\" the actual file path in my pre-browserified javascript and it all seems to work. Additionally, if you want to load a non-CommonJS plugin into the general scope like you would a normal javascript file (and not assign it to a variable), you could also just require the file path as well and not assign it to anything in your pre-browserified javascript.\n\n\nHave you run into any problems using it like that? I\'m not sure what the best practices are about that, seeing as how browserify is ideally used for CommonJS modules.',0,'1','Disqus/1.1(2.77):1727291516','',17,0),(19,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','119.42.89.129','2014-12-05 19:58:00','2014-12-05 19:58:00','I actually don\'t know what are the best standards here, because I just started to use browserify with Flux/React. But actually after reading trough bunch of source code I think I\'m finally got the idea behind browserify. There is no difference between frontend and server side, your code can be executed anywhere and produce same result. That\'s why they use npm instead of browserify.',0,'1','Disqus/1.1(2.77):1727701359','',18,0),(20,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-18 17:40:00','2015-01-18 17:40:00','Considering browserify is all about requires in front-end code, wouldn\'t it be useful for it to traverse bower packages similar to node_modules for installed dependencies? This way one could easily use a lib from bower or npm with just the package name.',0,'1','Disqus/1.1(2.77):1799847916','',16,0),(21,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-01-19 15:12:00','2015-01-19 15:12:00','That would be very nice, but I haven\'t seen any tools that do that. Browserify-shim, while still very awesome, requires you to list out the file locations in your `packcage.json` of your non-CommonJS files. One thing to keep in mind too though is that a lot of front-end packages these days are being written in CommonJS style anyway, so you don\'t even need browserify-shim for those. So for your larger JS libs, you really shouldn\'t have much problem requiring them with plain browserify - but for the smaller libs, I just stick them in the browserify-shim section of the package.json',0,'1','Disqus/1.1(2.77):1802415250','',20,0),(22,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-19 20:44:00','2015-01-19 20:44:00','debowerify seems to do the trick for now https://github.com/eugeneware/debowerify, but ideally this would be built into browserify',0,'1','Disqus/1.1(2.77):1802955843','',21,0),(23,381,'Nate McGuire','natemcguire+disqus@gmail.com','','172.2.16.46','2015-02-21 04:19:00','2015-02-21 04:19:00','Very clean, nicely done. Have been thinking more about using rails like this and backbone/react on the front end. ',0,'1','Disqus/1.1(2.84):1867210725','',0,0),(24,381,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-02-21 04:23:00','2015-02-21 04:23:00','Thank you! We barely just got our feet wet here, so check back in a couple weeks as we continue on. I\'ve built 2 large projects using rails-api (one angular, one ember), and it is so, so nice and super developer friendly (just like the full Rails framework).',0,'1','Disqus/1.1(2.84):1867214616','',23,0),(25,381,'cappie013','besnard.nicolas@gmail.com','','37.228.234.210','2015-02-21 10:58:00','2015-02-21 10:58:00','And as always, no testing ...',0,'1','Disqus/1.1(2.84):1867491120','',0,0),(26,381,'alkrauss48','alkrauss48@gmail.com','','98.162.206.130','2015-02-21 19:35:00','2015-02-21 19:35:00','I wasn\'t originally planning to cover testing, but that\'s a great idea for another post. Testing is SUPER simple with an API; I mean think about it, you don\'t have any html views so you don\'t have to do any integration testing which means less complex tests that run quicker (especially if you normally use a JavaScript driver for your integration tests). My latest rails API project has over 430 tests, and the whole suite runs regularly in 12 seconds!\n\nIf you scaffold API resources like we did here, then you actually have some tests already written for you using TestUnit (though I prefer using RSpec). I\'ll add testing as part 4 - thanks for the motivation!',0,'1','Disqus/1.1(2.84):1868108751','',25,0),(27,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 15:34:00','2015-02-25 15:34:00','Your second to last screenshot \"And then add this to your package.json:\" isn\'t that actually your Gruntfile.js?',0,'1','Disqus/1.1(2.84):1874850312','',0,0),(28,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 15:37:00','2015-02-25 15:37:00','No, that\'s the package.json. Those keys (browser, browserify, and browserify-shim) are all valid keys that browserify and browserify-shim will look for. Grunt just handles the automation - both of those packages still require config in the package.json because they are both node modules.',0,'1','Disqus/1.1(2.84):1874855902','',27,0),(29,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 16:08:00','2015-02-25 16:08:00','Thanks, just learning this. How do I browserify both bower_components (jquery, bootstrap, etc.) AND application javascript files (main.js, etc.)? My goal is for all js to end up in one minified file than will work with browserify requires....',0,'1','Disqus/1.1(2.84):1874908991','',28,0),(30,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 17:23:00','2015-02-25 17:23:00','If you look at that last code block in this post, you\'ll see I both require jquery and modernizr (both of which are bower_components with paths set in the package.json). Just as you require those modules, you can also require custom modules that you write as well, and use the path of the file inside the require quotes. Now you might think \"I\'m not writing modules, I just have regular client-side code;\" if that\'s the case, I suggest you look at how to write a CommonJS style module to house your javascript. It\'s just a great way to structure your javascript, even if it\'s all client-side logic. If you do any Node.js too, that\'s the same style that node modules use too.\n\nAlternatively, if you don\'t want to write CommonJS-style javascript, then you can \'require\' the physical path of those files too, but you\'ll probably need to use browserify-shim and update your package.json to do that like we discuss in this post. Some javascript code is still \'requireable\' even if it\'s not CommonJS-style, but it\'s best to keep it CommonJS such when you use browserify with custom JS code.\n\nTo show you an example project, Staplegun (my company) has a starter-template that browserifies both vendor javascript and custom javascript in the same file:\n\nhttps://github.com/Staplegun-US/site-start/blob/master/src/js/app.js\n\n\n\nCheck out the full github repo to see how everything fits, but that repo is a full example that uses everything discussed in this blog post.',0,'1','Disqus/1.1(2.84):1875039091','',29,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_album`
--

DROP TABLE IF EXISTS `wp_ngg_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_album` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `albumdesc` mediumtext,
  `sortorder` longtext NOT NULL,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_album`
--

LOCK TABLES `wp_ngg_album` WRITE;
/*!40000 ALTER TABLE `wp_ngg_album` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_ngg_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_gallery`
--

DROP TABLE IF EXISTS `wp_ngg_gallery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_gallery` (
  `gid` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `path` mediumtext,
  `title` mediumtext,
  `galdesc` mediumtext,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `author` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`gid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_gallery`
--

LOCK TABLES `wp_ngg_gallery` WRITE;
/*!40000 ALTER TABLE `wp_ngg_gallery` DISABLE KEYS */;
INSERT INTO `wp_ngg_gallery` VALUES (1,'test','test','/wp-content/gallery/test','Test','',0,1,1,410),(2,'test2','test2','wp-content/gallery/test2','Test2','',0,0,1,0);
/*!40000 ALTER TABLE `wp_ngg_gallery` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_pictures`
--

DROP TABLE IF EXISTS `wp_ngg_pictures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_pictures` (
  `pid` bigint(20) NOT NULL AUTO_INCREMENT,
  `image_slug` varchar(255) NOT NULL,
  `post_id` bigint(20) NOT NULL DEFAULT '0',
  `galleryid` bigint(20) NOT NULL DEFAULT '0',
  `filename` varchar(255) NOT NULL,
  `description` mediumtext,
  `alttext` mediumtext,
  `imagedate` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `exclude` tinyint(4) DEFAULT '0',
  `sortorder` bigint(20) NOT NULL DEFAULT '0',
  `meta_data` longtext,
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  `updated_at` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`pid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_pictures`
--

LOCK TABLES `wp_ngg_pictures` WRITE;
/*!40000 ALTER TABLE `wp_ngg_pictures` DISABLE KEYS */;
INSERT INTO `wp_ngg_pictures` VALUES (1,'screen-shot-2015-01-15-at-10-02-57-am',0,1,'Screen-Shot-2015-01-15-at-10.02.57-AM.png',' ','Screen Shot 2015-01-15 at 10.02.57 AM','2015-01-23 23:12:53',0,0,'eyJ3aWR0aCI6MTk2NiwiaGVpZ2h0IjoxODYwLCJmdWxsIjp7IndpZHRoIjoxOTY2LCJoZWlnaHQiOjE4NjB9LCJ0aHVtYm5haWwiOnsid2lkdGgiOjEyMCwiaGVpZ2h0Ijo5MCwiZmlsZW5hbWUiOiJ0aHVtYnNfU2NyZWVuLVNob3QtMjAxNS0wMS0xNS1hdC0xMC4wMi41Ny1BTS5wbmciLCJnZW5lcmF0ZWQiOiIwLjQ3Mzc1MDAwIDE0MjIwNTQ3NzQifSwiYXBlcnR1cmUiOmZhbHNlLCJjcmVkaXQiOmZhbHNlLCJjYW1lcmEiOmZhbHNlLCJjYXB0aW9uIjpmYWxzZSwiY3JlYXRlZF90aW1lc3RhbXAiOmZhbHNlLCJjb3B5cmlnaHQiOmZhbHNlLCJmb2NhbF9sZW5ndGgiOmZhbHNlLCJpc28iOmZhbHNlLCJzaHV0dGVyX3NwZWVkIjpmYWxzZSwiZmxhc2giOmZhbHNlLCJ0aXRsZSI6ZmFsc2UsImtleXdvcmRzIjpmYWxzZSwic2F2ZWQiOnRydWV9',409,1422054774);
/*!40000 ALTER TABLE `wp_ngg_pictures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=17096 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','http://thesocietea.org','yes'),(2,'blogname','Aaron Krauss','yes'),(3,'blogdescription','Developer','yes'),(4,'users_can_register','0','yes'),(5,'admin_email','alkrauss48@gmail.com','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','1','yes'),(10,'comments_notify','1','yes'),(11,'posts_per_rss','10','yes'),(12,'rss_use_excerpt','0','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','open','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','1','yes'),(21,'posts_per_page','10','yes'),(22,'date_format','F j, Y','yes'),(23,'time_format','g:i a','yes'),(24,'links_updated_date_format','F j, Y g:i a','yes'),(25,'comment_moderation','0','yes'),(26,'moderation_notify','1','yes'),(27,'permalink_structure','/%year%/%monthnum%/%postname%/','yes'),(28,'gzipcompression','0','yes'),(29,'hack_file','0','yes'),(30,'blog_charset','UTF-8','yes'),(31,'moderation_keys','','no'),(32,'active_plugins','a:8:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:37:\"post-types-order/post-types-order.php\";i:5;s:39:\"search-everything/search-everything.php\";i:6;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:7;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','yes'),(33,'home','http://thesocietea.org','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'advanced_edit','0','yes'),(37,'comment_max_links','2','yes'),(38,'gmt_offset','0','yes'),(39,'default_email_category','1','yes'),(40,'recently_edited','','no'),(41,'template','the_societea','yes'),(42,'stylesheet','the_societea','yes'),(43,'comment_whitelist','1','yes'),(44,'blacklist_keys','','no'),(45,'comment_registration','0','yes'),(46,'html_type','text/html','yes'),(47,'use_trackback','0','yes'),(48,'default_role','subscriber','yes'),(49,'db_version','30133','yes'),(50,'uploads_use_yearmonth_folders','1','yes'),(51,'upload_path','','yes'),(52,'blog_public','1','yes'),(53,'default_link_category','0','yes'),(54,'show_on_front','page','yes'),(55,'tag_base','','yes'),(56,'show_avatars','1','yes'),(57,'avatar_rating','G','yes'),(58,'upload_url_path','','yes'),(59,'thumbnail_size_w','150','yes'),(60,'thumbnail_size_h','150','yes'),(61,'thumbnail_crop','1','yes'),(62,'medium_size_w','300','yes'),(63,'medium_size_h','300','yes'),(64,'avatar_default','mystery','yes'),(65,'large_size_w','1024','yes'),(66,'large_size_h','1024','yes'),(67,'image_default_link_type','file','yes'),(68,'image_default_size','','yes'),(69,'image_default_align','','yes'),(70,'close_comments_for_old_posts','0','yes'),(71,'close_comments_days_old','14','yes'),(72,'thread_comments','1','yes'),(73,'thread_comments_depth','5','yes'),(74,'page_comments','0','yes'),(75,'comments_per_page','50','yes'),(76,'default_comments_page','newest','yes'),(77,'comment_order','asc','yes'),(78,'sticky_posts','a:0:{}','yes'),(79,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(82,'uninstall_plugins','a:1:{s:27:\"wp-markdown/wp-markdown.php\";a:2:{i:0;s:18:\"WordPress_Markdown\";i:1;s:9:\"uninstall\";}}','no'),(83,'timezone_string','','yes'),(84,'page_for_posts','0','yes'),(85,'page_on_front','4','yes'),(86,'default_post_format','0','yes'),(87,'link_manager_enabled','0','yes'),(88,'initial_db_version','27916','yes'),(89,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:72:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:24:\"NextGEN Gallery overview\";b:1;s:19:\"NextGEN Use TinyMCE\";b:1;s:21:\"NextGEN Upload images\";b:1;s:22:\"NextGEN Manage gallery\";b:1;s:19:\"NextGEN Manage tags\";b:1;s:29:\"NextGEN Manage others gallery\";b:1;s:18:\"NextGEN Edit album\";b:1;s:20:\"NextGEN Change style\";b:1;s:22:\"NextGEN Change options\";b:1;s:24:\"NextGEN Attach Interface\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(90,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(91,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(92,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(93,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(95,'sidebars_widgets','a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(96,'_transient_random_seed','5c67fe453c694db7a625ab8b7ac5378a','yes'),(97,'logged_in_key','as>*,uS,x),u3]<T[U2:Q)n}xljY4e;)x]nWvO3P)QOn/LHEA7p/3d}=4t+@^)7}','yes'),(98,'logged_in_salt','Ypq39}RyWXsy1B3~~v)-2dDC7^;tv>.mk3!FeTW*>ERc$IG McCio3Acw-^ P0a5','yes'),(99,'cron','a:6:{i:1425061095;a:1:{s:24:\"akismet_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1425064620;a:1:{s:20:\"wp_maybe_auto_update\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1425076517;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1425076521;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1425076905;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(101,'auth_key','.YPV8;p%Dgf[M</ZvwZAk9*Wgyt~NO^05,,r=FGJ/7?*!!^X^L >,y6{rq2Lmm6Z','yes'),(102,'auth_salt','mJFh)O;WpeY}AS>Tf0bWE{kRX7)G1Z-Dy,-`QxoKw}<#Ed^ZD]~(ra*6y%DobD]/','yes'),(109,'nonce_key','Q,^Q}ytXd29u^.kLt=@iW*_Q!4OYpNYyfWme[W0A.2s1-m:P@d}:mybjU.O3v~+1','yes'),(110,'nonce_salt','+celW{qLF`rD)*]f?X3k$l&8`o$Uqfo4.7&ylB&u$Mt^U%*n4]}EC|PhlM~Ep}kA','yes'),(132,'current_theme','','yes'),(133,'theme_mods_the_societea','a:7:{i:0;b:0;s:16:\"background_color\";s:6:\"ffffff\";s:16:\"background_image\";s:0:\"\";s:17:\"background_repeat\";s:6:\"repeat\";s:21:\"background_position_x\";s:4:\"left\";s:21:\"background_attachment\";s:5:\"fixed\";s:18:\"nav_menu_locations\";a:0:{}}','yes'),(134,'theme_switched','','yes'),(138,'widget_pages','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(139,'widget_calendar','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(140,'widget_tag_cloud','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(141,'widget_nav_menu','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(145,'recently_activated','a:0:{}','yes'),(146,'theme_mods_twentyfourteen','a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1401768087;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(151,'cfs_next_field_id','23','yes'),(152,'cfs_version','2.4','yes'),(154,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(266,'cpto_options','a:3:{s:8:\"autosort\";s:1:\"1\";s:9:\"adminsort\";s:1:\"1\";s:10:\"capability\";s:13:\"switch_themes\";}','yes'),(267,'CPT_configured','TRUE','yes'),(319,'category_children','a:0:{}','yes'),(898,'akismet_available_servers','a:4:{s:12:\"66.135.58.62\";b:1;s:12:\"66.135.58.61\";b:1;s:12:\"192.0.80.244\";b:1;s:12:\"192.0.80.246\";b:1;}','yes'),(899,'akismet_connectivity_time','1404312065','yes'),(900,'akismet_strictness','0','yes'),(901,'akismet_show_user_comments_approved','0','yes'),(902,'wordpress_api_key','ae40d7cbc870','yes'),(1126,'syntaxhighlighter_settings','a:15:{s:9:\"shversion\";i:3;s:5:\"theme\";s:5:\"rdark\";s:6:\"gutter\";i:1;s:9:\"autolinks\";i:1;s:9:\"smarttabs\";i:1;s:9:\"wraplines\";i:1;s:9:\"classname\";s:0:\"\";s:9:\"firstline\";s:1:\"1\";s:14:\"padlinenumbers\";s:5:\"false\";s:7:\"tabsize\";s:1:\"4\";s:5:\"title\";s:0:\"\";s:14:\"loadallbrushes\";i:0;s:8:\"collapse\";i:0;s:5:\"light\";i:0;s:7:\"toolbar\";i:0;}','yes'),(2086,'disqus_active','1','yes'),(2087,'disqus_version','2.77','yes'),(2088,'disqus_forum_url','thesocietea','yes'),(2089,'disqus_cc_fix','1','yes'),(2090,'disqus_api_key','0C4Uv5QN6RrHuDFrLFF6A0r59ittV0QaxfWmssw1c9qsNI30YSnCEvJAdBsA31xf','yes'),(2091,'disqus_user_api_key','aJgw8hjUIqv5lCT6fsRBqfZrHKwpWYehUZMebLxvCWAND1FSpKQJxVvcTYD7cNnE','yes'),(2092,'disqus_replace','all','yes'),(2163,'disqus_last_comment_id','1875039091','yes'),(4107,'se_meta','a:10:{s:7:\"blog_id\";b:0;s:7:\"api_key\";b:0;s:8:\"auth_key\";b:0;s:7:\"version\";s:5:\"8.1.3\";s:13:\"first_version\";s:5:\"8.1.2\";s:8:\"new_user\";b:1;s:4:\"name\";s:0:\"\";s:5:\"email\";s:0:\"\";s:24:\"show_options_page_notice\";b:0;s:16:\"se_global_notice\";N;}','yes'),(4108,'se_options','a:21:{s:21:\"se_exclude_categories\";s:0:\"\";s:26:\"se_exclude_categories_list\";s:0:\"\";s:16:\"se_exclude_posts\";s:0:\"\";s:21:\"se_exclude_posts_list\";s:0:\"\";s:18:\"se_use_page_search\";b:0;s:21:\"se_use_comment_search\";b:1;s:17:\"se_use_tag_search\";b:1;s:17:\"se_use_tax_search\";b:1;s:22:\"se_use_category_search\";b:1;s:25:\"se_approved_comments_only\";b:1;s:22:\"se_approved_pages_only\";b:0;s:21:\"se_use_excerpt_search\";b:0;s:19:\"se_use_draft_search\";b:0;s:24:\"se_use_attachment_search\";b:0;s:14:\"se_use_authors\";b:0;s:18:\"se_use_cmt_authors\";b:0;s:22:\"se_use_metadata_search\";b:1;s:16:\"se_use_highlight\";b:1;s:18:\"se_highlight_color\";s:6:\"orange\";s:18:\"se_highlight_style\";s:0:\"\";s:19:\"se_research_metabox\";a:2:{s:18:\"visible_on_compose\";b:1;s:23:\"external_search_enabled\";b:0;}}','yes'),(4885,'WPLANG','','yes'),(4886,'db_upgraded','','yes'),(11076,'auto_core_update_notified','a:4:{s:4:\"type\";s:6:\"manual\";s:5:\"email\";s:20:\"alkrauss48@gmail.com\";s:7:\"version\";s:5:\"4.0.1\";s:9:\"timestamp\";i:1416528264;}','yes'),(14330,'_site_transient_timeout_browser_0d0584c2542c12aacf9d54fa4c3b24c5','1422470965','yes'),(14331,'_site_transient_browser_0d0584c2542c12aacf9d54fa4c3b24c5','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.95\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(14336,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1421909367','no'),(14337,'_transient_feed_867bd5c64f85878d03a060509cd2f92c','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Matt: Where dreams go\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/01/where-dreams-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/01/where-dreams-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:263:\"<blockquote><p>Within your heart keep one still, secret spot where dreams may go, and sheltered so, may thrive and grow where doubt and fear are not. Oh, keep a place within your heart, for little dreams to go.</p></blockquote>\n<p>&#8212;&nbsp;Louise Driscoll</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Jan 2015 05:46:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: Archive WordPress Content with the Archived Post Status Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37591\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/archive-wordpress-content-with-the-archived-post-status-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5260:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status.jpg\" rel=\"prettyphoto[37591]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status.jpg?resize=772%2C310\" alt=\"archived-post-status\" class=\"aligncenter size-full wp-image-37597\" /></a></p>\n<p>WordPress plugin developer <a href=\"http://frankiejarrett.com/\" target=\"_blank\">Frankie Jarrett</a> has been on a roll this month, pumping out plugin releases on WordPress.org. Last year, Jarrett <a href=\"http://frankiejarrett.com/parting-ways-churchthemes-net-looking-ahead-toward-brighter-future/\" target=\"_blank\">sold ChurchThemes.net to Lift</a> co-founders Chris Wallace and Brad Miller. Since that time he has been focusing on product development for <a href=\"https://wp-stream.com/\" target=\"_blank\">WP Stream</a>, which has allowed him a few extra minutes to create some free extensions for WordPress.</p>\n<p>At the end of December and in early January, he released five small but highly useful plugins:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/compact-view-mode/\" target=\"_blank\">Compact View Mode</a></li>\n<li><a href=\"https://wordpress.org/plugins/user-session-control/\" target=\"_blank\">User Session Control</a></li>\n<li><a href=\"https://wordpress.org/plugins/prevent-concurrent-logins/\" target=\"_blank\">Prevent Concurrent Logins</a></li>\n<li><a href=\"https://wordpress.org/plugins/json-rest-api-force-ssl/\" target=\"_blank\">JSON REST API Force SSL</a></li>\n<li><a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a></li>\n</ul>\n<p>Several of his latest creations are handy for membership sites and web applications. <a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a> caught my eye, because adds more flexibility for using WordPress as a CMS. The plugin adds a new post status that enables posts and pages to be archived. This effectively allows you to unpublish content without having to send it back to draft status.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status-dropdown.png\" rel=\"prettyphoto[37591]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status-dropdown.png?resize=600%2C400\" alt=\"archived-post-status-dropdown\" class=\"aligncenter size-full wp-image-37611\" /></a></p>\n<p>WordPress&#8217; default <a href=\"http://codex.wordpress.org/Post_Status\" target=\"_blank\">post statuses</a> currently work very much like an on/off switch as far as a finished post is concerned. Of the eight default statuses, Published is the only one that is public, while all the rest remain behind the curtain in various states of unreadiness. None of the statuses, apart from Published, adequately indicate that a post is complete or finished.</p>\n<p>Fortunately, WordPress makes it possible for developers to register their own <a href=\"http://codex.wordpress.org/Post_Status#Custom_Status\" target=\"_blank\">custom post statuses</a>, which is what Jarrett did with this plugin. He created it for sites where content is not always meant to be evergreen. It allows you to archive posts in the same way that you might archive email.</p>\n<p>Archived Post Status is compatible with posts, pages, and custom post types, giving you a wide array of possible use cases:</p>\n<ul>\n<li>Archive pages or posts from a conference or event for editing and re-use next year</li>\n<li>Archive real estate listings for records</li>\n<li>Cycle portfolio content in and out of the site as necessary</li>\n<li>Temporarily remove listings from a site that indexes businesses or organizations</li>\n<li>Archive products to bring back for future use</li>\n</ul>\n<p>While custom post types seem to be one of the most likely uses for this plugin, you may not want to have the archived status available to all post types. Jarrett includes a <a href=\"https://wordpress.org/plugins/archived-post-status/faq/\" target=\"_blank\">filter</a> that allows you to exclude the Archived status from appearing on certain post types.</p>\n<p>Some might be wondering why you wouldn&#8217;t use the Draft status, since the Archived post status essentially puts a post in the same state. To use drafts in this way would be to split its purpose into multiple uses, which are not clearly separated when sorting. If you are looking for previously published content that is complete, while hunting through all drafts in progress, you have to be fully knowledgeable of all the content on the site and use your memory to do the sorting. The archived status keeps everything nicely sorted for future use.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-posts-list-screen.png\" rel=\"prettyphoto[37591]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-posts-list-screen.png?resize=600%2C400\" alt=\"archived-posts-list-screen\" class=\"aligncenter size-full wp-image-37614\" /></a></p>\n<p>If you need a non-public archive of completed posts, this simple plugin will do the trick. I tested it and works exactly as advertised. Download <a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a> from WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Jan 2015 01:29:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Modern: A Beautiful Free Blog and Portfolio Theme for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37303\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/modern-a-beautiful-free-blog-and-portfolio-theme-for-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4293:\"<p>In just one week since its release, the new <a href=\"https://wordpress.org/themes/modern\" target=\"_blank\">Modern</a> theme was downloaded nearly 2,700 times from WordPress.org. It was created by <a href=\"http://www.webmandesign.eu/\" target=\"_blank\">WebMan Design</a>, a Slovakia-based company founded by Oliver Juhas. WebMan Design has been selling WordPress themes across multiple marketplaces since 2012 and recently began focusing on producing future-proof themes that meet WordPress.org standards.</p>\n<p>Modern is the company&#8217;s second free theme on WordPress.org, following the <a href=\"https://wordpress.org/themes/mustang-lite\" target=\"_blank\">Mustang Lite</a> business theme released last year. It was designed for personal and small business portfolios.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/modern.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/modern.jpg?resize=880%2C660\" alt=\"modern\" class=\"aligncenter size-full wp-image-37554\" /></a></p>\n<p>Modern&#8217;s bold style incorporates a fullscreen header slideshow that is perfect for showcasing large images with header text. The homepage features your latest blog posts along with an optional sortable portfolio section. The header includes two menu locations for the primary navigation and the social links menu.</p>\n<p>All of the customization options for the theme are built into WordPress&#8217; native customizer, including the following:</p>\n<ul>\n<li>Add your own 1920 × 1080 header image</li>\n<li>Footer widget area</li>\n<li>Color picker to set background color, text color, accent color, and accent text color</li>\n<li>Customize predefined texts on the homepage</li>\n<li>Typography options for setting logo font, heading font, general text font, font subset, basic font size</li>\n</ul>\n<p>Modern offers unique styles for each of WordPress&#8217; default <a href=\"http://codex.wordpress.org/Post_Formats\" target=\"_blank\">post formats</a>. The demo&#8217;s <a href=\"http://themedemos.webmandesign.eu/modern/style-guide/\" target=\"_blank\">style guide</a> page shows that the theme author took many of the smaller details into consideration, including code formatting, blockquotes, lists, table styles, highlighted text style, image alignment, Jetpack Mosaic galleries and more.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/post-formats.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/post-formats.jpg?resize=1025%2C617\" alt=\"post-formats\" class=\"aligncenter size-full wp-image-37575\" /></a></p>\n<p>The heart icons you see in the single post meta are powered by the free <a href=\"http://www.themezilla.com/plugins/zillalikes\" target=\"_blank\">ZillaLikes plugin</a> from ThemeZilla. Modern includes support for Jetpack to manage the portfolio posts, logo image, and uses its featured content module to power the homepage banner. It also includes support for <a href=\"http://schema.org/\" target=\"_blank\">Schema.org</a> markup and <a href=\"https://github.com/zamoose/themehookalliance\" target=\"_blank\">Theme Hook Alliance</a> action hooks.</p>\n<p>WebMan Design developed the theme with performance in mind and links to <a href=\"http://tools.pingdom.com/fpt/#!/bHfVKJ/http://themedemos.webmandesign.eu/modern/\" target=\"_blank\">Pingdom</a> results of load tests for the demo site. The demo site takes 1.73s to load and gets a 94/100 performance grade.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/theme-demo-performance.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/theme-demo-performance.jpg?resize=631%2C235\" alt=\"theme-demo-performance\" class=\"aligncenter size-full wp-image-37567\" /></a></p>\n<p>Check out a <a href=\"http://themedemos.webmandesign.eu/modern/\" target=\"_blank\">live demo</a> of the Modern theme in action. WebMan Design has created extensive <a href=\"http://www.webmandesign.eu/manual/modern/\" target=\"_blank\">documentation</a> for the theme, its various styles, and available third-party plugin integrations. <a href=\"https://wordpress.org/themes/modern\" target=\"_blank\">Modern</a> is available for download from WordPress.org or via your admin themes browser.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 21:37:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: Calling People Out in the WordPress Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37545\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/calling-people-out-in-the-wordpress-community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3289:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/NameandShameFeaturedImage.png\" rel=\"prettyphoto[37545]\"><img class=\"size-full wp-image-37564\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/NameandShameFeaturedImage.png?resize=638%2C288\" alt=\"Name and Shame Featured Image\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/66662429@N07/8065770370/\">Adarsh A</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>The founder of <a title=\"http://www.wpsitecare.com/\" href=\"http://www.wpsitecare.com/\">WP Site Care</a>, Ryan Sullivan, <a title=\"http://www.ryandsullivan.com/negative-seo/\" href=\"http://www.ryandsullivan.com/negative-seo/\">explains </a>how a negative SEO campaign nearly took his business offline. Sullivan shares details behind the attack, how it affected the bottom line, and says it was someone in the WordPress community who orchestrated the attack.</p>\n<blockquote><p>Using some sophisticated techniques we were able to trace back to the source of the spam attack and unfortunately found out that the attack was started by someone within the WordPress community.</p>\n<p>They did everything through a third-party, an internet hitman of sorts, to try to cover their tracks, but they weren’t quite careful enough and we were able to uncover where everything started.</p></blockquote>\n<p>Instead of naming the individual, Sullivan left a message aimed specifically at the person responsible, &#8220;The only reason I even mention it is so that hopefully, that person reads this, and knows that what they’re doing is impacting the livelihood’s of people and their families.&#8221; It&#8217;s this message which has me wondering, is it time to name and shame people in the WordPress community?</p>\n<h2>The Good</h2>\n<p>In my experience, the community rarely calls people out, even if they have <a title=\"http://womenofwp.org/2014/01/how-to-report-harassment-at-wordcamps/\" href=\"http://womenofwp.org/2014/01/how-to-report-harassment-at-wordcamps/\">routinely harassed others</a> at a WordCamp. Instead, we usually find out about them through back channels. By calling people out, it warns others and makes everyone aware of the situation.</p>\n<h2>The Bad</h2>\n<p>Naming and shaming creates the potential for libel and defamation lawsuits. The internet has a long memory and if a person changes for the better, it will be hard to forget mistakes made in the past. It could hurt future employment opportunities as employers do background checks using Google. There&#8217;s likely a lot of unintended consequences as well.</p>\n<h2>Judge and Jury</h2>\n<p>I doubt the community will start calling people out, as it creates anger, grief, and drama. Besides, who are we to act as judge and jury? However, it bothers me to know that an unnamed person is negatively impacting the livelihood of WordPress businesses and people.</p>\n<p>On one hand, I want to see the individual dealt with in the public sphere and turned into an example. On the other, I feel it&#8217;s probably not the best way to go about it. Maybe the system already in place is the best way to handle these types of situations? Write a post, raise awareness, and tell others who to watch out for in the back channel. What do you think?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 20:41:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Not the Only One\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44610\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/01/not-the-only-one/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:139:\"<p>I know I&#8217;m like a year late on Sam Smith, but his voice on this is so amazing and haunting, it&#8217;s a perfect song.</p>\n<p></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 06:35:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: The Philanthropic Side of The WordPress Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37461\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/the-philanthropic-side-of-the-wordpress-community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14236:\"<p>Whether it&#8217;s businesses participating in charity work or individuals who need financial assistance, the WordPress community has repeatedly shown how generous it is. Here&#8217;s at look at some WordPress businesses that participate in philanthropy and individuals who experienced the community&#8217;s generosity first hand.</p>\n<h2>Matt Mullenweg Co-creator of WordPress</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/CharityWaterImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37503\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/CharityWaterImage.png?resize=874%2C561\" alt=\"CharityWater Image\" /></a></p>\n<p>Matt Mullenweg is a strong believer in providing easy access to clean drinking water to regions of the world who need it most. He works with several charities and organizations including:</p>\n<ul>\n<li><a href=\"http://archive.org/\">Archive.org</a></li>\n<li><a href=\"http://www.alaskawild.org/\">Alaska Wilderness League</a></li>\n<li><a href=\"http://apache.org/\">Apache Foundation</a></li>\n<li><a href=\"http://thebaylights.org/\">Bay Lights</a></li>\n<li><a href=\"http://charitywater.org/\">charity: water</a></li>\n<li><a href=\"http://eff.org/\">Electronic Frontier Foundation</a></li>\n<li><a href=\"http://grist.org/\">Grist</a> (board member)</li>\n<li><a href=\"http://www.innocenceproject.org/\">Innocence Project</a></li>\n<li><a href=\"http://longnow.org/\">Long Now Foundation</a></li>\n<li><a href=\"http://www.rothkochapel.org/\">Rothko Chapel</a></li>\n<li><a href=\"http://samasource.org\">Samasource</a></li>\n<li><a href=\"http://www.us-irelandalliance.org/\">US-Ireland Alliance</a></li>\n</ul>\n<p>To celebrate his 30th birthday, Mullenweg requested that donations be made to his <a title=\"https://my.charitywater.org/matt-30\" href=\"https://my.charitywater.org/matt-30\">Charity water campaign</a> in lieu of gifts. The goal was $30K, but the campaign raised over $44K.</p>\n<h2>Mitch Canter of Studionashvegas</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/JusticeandMercyImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37505\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/JusticeandMercyImage.png?resize=374%2C140\" alt=\"Justice and Mercy International\" /></a></p>\n<p>Mitch Canter runs <a title=\"http://www.studionashvegas.com\" href=\"http://www.studionashvegas.com\">Studionashvegas</a>, a full service WordPress development agency. Canter has attended two mission trips with a group called <a title=\"http://justiceandmercy.org/\" href=\"http://justiceandmercy.org/\">Justice and Mercy International</a>. The group&#8217;s mission is to <em>make justice personal for the poor, the orphaned, and the forgotten</em>. He&#8217;s also <a title=\"https://medium.com/@mitchcanter/ive-left-my-heart-in-moldova-3012799c4c60\" href=\"https://medium.com/@mitchcanter/ive-left-my-heart-in-moldova-3012799c4c60\">traveled to Chisinau, Moldova</a> and Prague, Czech Republic to help assess long-term needs and provide any necessary supplies for the short-term as well as interact with local children.</p>\n<p>Canter and his wife also sponsor Veronica, a Moldovan orphan, through Justice and Mercy International. The couple routinely writes letters to Veronica and plans to see her the next time they visit the country. They also serve in their local church and volunteer with the local food bank, <a title=\"http://www.onegenaway.com/\" href=\"http://www.onegenaway.com/\">One Gen Away</a>, to provide meals to families who are in need.</p>\n<h2>Syed Balkhi of WPBeginner</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/PencilsofPromiseLogo.png\" rel=\"prettyphoto[37461]\"><img class=\"alignright size-full wp-image-37506\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/PencilsofPromiseLogo.png?resize=245%2C72\" alt=\"Pencils of Promise Logo\" /></a>Since 2013, Syed Balkhi and WPBeginner have helped build at least three new schools in Guatemala through the <a title=\"http://pencilsofpromise.org/\" href=\"http://pencilsofpromise.org/\">Pencils of Promise</a> charity. Pencils of Promise is a for-purpose organization that builds schools, trains teachers, and funds scholarships. In 2014, WPBeginner <a title=\"http://wptavern.com/wpbeginner-turns-5-celebrates-with-campaign-to-build-two-new-schools-in-guatemala\" href=\"http://wptavern.com/wpbeginner-turns-5-celebrates-with-campaign-to-build-two-new-schools-in-guatemala\">celebrated its 5th birthday</a> by hosting a huge giveaway and launching a $50K campaign to fund two new schools. The <a title=\"http://wptavern.com/wpbeginner-reaches-funding-goal-to-build-two-new-schools\" href=\"http://wptavern.com/wpbeginner-reaches-funding-goal-to-build-two-new-schools\">campaign was successful</a> and Balkhi says the goal for this year is to build three new schools.</p>\n<h2>PressNomics</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/StJudeChildrensHospital.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37507\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/StJudeChildrensHospital.png?resize=784%2C443\" alt=\"St Jude Childrens Hospital\" /></a></p>\n<p>PressNomics is an <a title=\"http://pressnomics.com/\" href=\"http://pressnomics.com/\">annual conference</a> dedicated to the business side of WordPress. Each year, the event donates a portion of its proceeds to <a href=\"http://www.stjude.org\">St. Jude Children&#8217;s Research Hospital</a>. Pagely Co-founder, Joshua Strebel, says the decision to donate to St. Jude was made long before he and his wife had kids, &#8220;St Jude has been our charity of choice for many years. Even before Sally and I had kids, we were touched by those commercials that showed the kids fighting cancer. I&#8217;ve always had a soft spot for kids, coming from a large family. Of all the charities you could give to, St. Jude is a no brainer.&#8221;</p>\n<p>Since 2012, the event has donated over $11K to St. Jude Hospital and Strebel says funding from PressNomics 3 this year will allow them to donate over $10K to a <em>charity yet to be named</em>. &#8220;After PressNomics 1, we donated a little over $5K and there was an anonymous matching donation. After PressNomics 2, we donated a little over $6K. This year the budget has allowed us to donate just over $10K.&#8221;</p>\n<h2>DonorsChoose.org</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/DonorsChooseImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37501\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/DonorsChooseImage.png?resize=1025%2C527\" alt=\"DonorsChoose\" /></a><br />\nWhen I reached out to the community to figure out who gives to charities, I discovered a number of people who use <a title=\"http://www.donorschoose.org/\" href=\"http://www.donorschoose.org/\">DonorsChoose</a>. DonorsChoose is an organization that makes it easy to help classrooms in need. Public school teachers post classroom project requests, which range from pencils for poetry to microscopes for mitochondria-organization.</p>\n<p><a title=\"https://eamann.com/\" href=\"https://eamann.com/\">Eric Mann</a>, who contributes to the organization, had a lot of friends in college who majored in education and went on to become teachers. He discovered that many of them worked in schools with small budgets and limited supplies. He explains why he uses DonorsChoose.org.</p>\n<blockquote><p>I use DonorsChoose.org to help fund the purchase of books for classroom lessons, field trips to museums and science exhibits, and modern laptop computers for technical education. Many of the teachers I sponsor are working in low-income areas with at-risk youth and don&#8217;t have the tools available to make much of a difference without community sponsorship.</p></blockquote>\n<p>Mann believes investing in education is one of the best long-term investments you can make, &#8220;It&#8217;s easy to spend money on this Kickstarter or that IndieGoGo when you get a tangible (or digital) return on the investment. Spending money to help protect and shepherd the education of today&#8217;s youth, though, returns an investment in better educated leaders, educators, and technologists for tomorrow.&#8221;</p>\n<h2>WP Site Care</h2>\n<p>WordPress support agency, <a title=\"http://www.wpsitecare.com\" href=\"http://www.wpsitecare.com\">WP Site Care</a>, contributed to <a title=\"http://www.wpsitecare.com/5-minutes-reflection-look-back-2014/\" href=\"http://www.wpsitecare.com/5-minutes-reflection-look-back-2014/\">several different organizations and initiatives</a> throughout 2014. The list is lengthy and includes:</p>\n<ul>\n<li><a href=\"http://www.autismspeaks.org/\" target=\"_blank\">Autism Speaks</a></li>\n<li><a href=\"http://dangilmore.com/blog/2014/12/04/help-my-wife-fight-cancer/\" target=\"_blank\">Dan Gilmore’s St. Baldrick’s Cancer Campaign</a></li>\n<li><a href=\"https://www.indiegogo.com/projects/buddypress-bbpress-glotpress-development\" target=\"_blank\">BuddyPress, bbPress and GlotPress Development</a></li>\n<li><a href=\"http://www.girlswritenow.org/\" target=\"_blank\">Girls Write Now</a></li>\n<li><a href=\"http://www.girldevelopit.com/\" target=\"_blank\">Girl Develop It</a></li>\n<li><a href=\"https://www.charitywater.org/\" target=\"_blank\">Charity Water</a></li>\n<li><a href=\"http://www.alsa.org/\" target=\"_blank\">ALS Association</a></li>\n<li><a href=\"http://www.aidswalk.net/\" target=\"_blank\">AIDS Walk</a></li>\n<li><a href=\"http://www.heartspring.org/\" target=\"_blank\">HeartSpring</a></li>\n<li><a href=\"http://us.movember.com/\" target=\"_blank\">Movember</a></li>\n<li><a href=\"http://www.afsp.org/\" target=\"_blank\">American Foundation for Suicide Prevention</a></li>\n<li><a href=\"http://www.happyjoe.org/\" target=\"_blank\">Happy Joe</a></li>\n</ul>\n<p>I asked WP Site Care founder, Ryan Sullivan, why he chooses to give back to so many charities and what it means to give back.</p>\n<blockquote><p>We support a number of different causes because any charitable contributions that we’re able to make are a direct reflection of the people at our company. We found out about a number of causes from the WordPress community itself. For example, funding treatment for autism is something that has a personal impact on a few of us at WP Site Care.</p>\n<p>We like to make sure that the causes that are important to individuals become important for all of us collectively. It not only goes to help the causes themselves, but helps us get closer as a working family.</p></blockquote>\n<h2>Individuals Who Received Financial Assistance From The WordPress Community</h2>\n<p><strong>Just Tadlock</strong> &#8211; Near the end of 2013, Justin Tadlock <a title=\"http://justintadlock.com/archives/2013/12/17/help-me-get-a-house-for-christmas\" href=\"http://justintadlock.com/archives/2013/12/17/help-me-get-a-house-for-christmas\">discovered the perfect house</a>, but he didn&#8217;t have the money to cover closing costs, quarterly taxes, and appliances. He requested $5K to cover his costs, but he ended up receiving over $7K. It&#8217;s important to note that the campaign took place around Christmas which is a tough time financially for a number of people. However, the community rallied together to give Tadlock the ultimate Christmas gift.</p>\n<p><strong>Dan Griffiths</strong> &#8211; Dan Griffiths, who is known on Twitter as <a title=\"https://twitter.com/ghost1227\" href=\"https://twitter.com/ghost1227\">Ghost1227</a> and one of the creators of <a title=\"http://wptally.com/\" href=\"http://wptally.com/\">WP Tally,</a> recently found himself in a financial emergency. He needed $2,500 within 24 hours. He reached out to <a title=\"http://wptavern.com/happy-joe-uses-wordpress-to-train-and-help-veterans-find-careers-in-web-technology\" href=\"http://wptavern.com/happy-joe-uses-wordpress-to-train-and-help-veterans-find-careers-in-web-technology\">Happy Joe</a>, an organization that helps veterans in need. Happy Joe founder, James Dalman, published an all points bulletin on Twitter asking for help from the WordPress community. Within <strong>two hours</strong> of the initial call for help, Griffiths reached his goal.</p>\n<p><strong>Kim Parsell&#8217;s Son</strong> &#8211; Kim Parsell&#8217;s son was about to begin a new job when tragically, his <a title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">mother passed away</a>. He wasn&#8217;t able to start the job, putting him in a financial bind. He <a title=\"http://www.gofundme.com/wpmom\" href=\"http://www.gofundme.com/wpmom\">created a campaign</a> asking for $1K to help pay bills as he mourned the loss of his mother. Within 42 minutes, 8 people raised $760 of the requested $1,000. When it was all said and done, 33 people raised $2K.</p>\n<p><strong>John James Jacoby</strong> &#8211; In late 2014, John James Jacoby <a title=\"http://wptavern.com/john-james-jacoby-launches-indiegogo-campaign-to-fund-buddypress-bbpress-and-glotpress-development\" href=\"http://wptavern.com/john-james-jacoby-launches-indiegogo-campaign-to-fund-buddypress-bbpress-and-glotpress-development\">launched a crowdfunding campaign</a> asking for $50K in order to work on BuddyPress, GlotPress, and bbPress full-time for 6 months. The <a title=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\" href=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\">campaign was successful</a> generating nearly $52K.</p>\n<h2>Proud To Be a Member of This Community</h2>\n<p>This is just a sample of the generosity expressed by the WordPress community. Although several businesses contribute to charities, it&#8217;s the individuals who receive funding that impress me. If one of us ends up in dire straits, potentially thousands of people are ready to help. It&#8217;s just one more reason why I&#8217;m proud to be a member of this community.</p>\n<p>I&#8217;m certain I missed a few WordPress individuals and businesses that contribute to great causes, if you&#8217;re one of them, please use the comments and tell us about it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 19 Jan 2015 23:34:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WPTavern: Tackling Depression in IT\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37466\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://wptavern.com/tackling-depression-in-it\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:16947:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/yana-petrova-wceu-2014.jpg\" rel=\"prettyphoto[37466]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/yana-petrova-wceu-2014.jpg?resize=854%2C432\" alt=\"yana-petrova-wceu-2014\" class=\"aligncenter size-full wp-image-37472\" /></a></p>\n<p>One of the most unique sessions I attended at <a href=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\" target=\"_blank\">WordCamp Europe 2014</a> was Yana Petrova&#8217;s presentation on <a href=\"http://wordpress.tv/2015/01/06/yana-petrova-why-sometimes-happiness-requires-effort-depression-in-it/\" target=\"_blank\">Depression in IT &#8211; Why Sometimes Happiness Requires Effort</a>. Petrova, a marketing expert and long-time food blogger, is a member of both the WordPress community and the larger tech community in Bulgaria. She has also worked as an organizer for many local technical conferences over the years.</p>\n<p>Her motivation to address the widespread problem of depression in IT grew out of personal experiences with friends and co-workers who were struggling with it. This put her on the path to research the disease and find ways to raise awareness on the topic. I had the opportunity to interview Petrova after the event, and it&#8217;s easy to see why she is a person to whom people would come for advice. Her warm, empathetic personality is combined with a rare willingness to listen to others.</p>\n<p>Petrova&#8217;s experience in food blogging gives her a format for talking about depression in a way that people can understand, which helps to mitigate the stigma that surrounds the issue. We&#8217;ll take a look at some of the recipes she shared in her presentation, but first it&#8217;s important to have a basic understanding of depression.</p>\n<h2>Understanding Depression</h2>\n<p>Nearly everyone knows someone who is suffering from depression, as it afflicts more than <a href=\"http://www.who.int/mediacentre/factsheets/fs369/en/\" target=\"_blank\">350 million people</a> of all ages worldwide and is the leading cause of disability. In the most extreme cases it can lead to suicide.</p>\n<p>Clinical depression is the most severe form, which is often treated with psychological and pharmacological therapies. However, many more people suffer from milder forms of depression from time to time.</p>\n<p>In his TED talk, titled <a href=\"https://www.youtube.com/watch?v=-eBUcBfkVCo\" target=\"_blank\">Depression, The Secret We Share</a>, writer Andrew Solomon said, <strong>&#8220;The opposite of depression is not happiness but vitality.&#8221;</strong> He describes his own dark journey of struggling with depression, which he noticed when all the normal activities of life and work began to seem like too much.</p>\n<blockquote><p>One of the things that often gets lost in discussions of depression is that you know it&#8217;s ridiculous. You know it&#8217;s ridiculous while you&#8217;re experiencing it. You know that most people manage to listen to their messages, and eat lunch, and organize themselves to take a shower and go out the front door, and that it&#8217;s not a big deal.</p>\n<p>And yet you are in its grip and you are unable to figure out any way around it. And so I began to feel myself doing less and thinking less and feeling less. It was a kind of nullity, and then the anxiety set in.</p></blockquote>\n<p>Solomon notes that people tend to confuse depression, grief, and sadness, but understanding the trajectory and duration of these feelings will help to clarify the situation. While grief is explicitly reactive and related to loss, depression doesn&#8217;t always have an easily identifiable cause. Some forms of depression will require professional help for the person to regain a semblance of normal living.</p>\n<h2>Sources or Triggers of Depression in IT</h2>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/emergency.jpg\" rel=\"prettyphoto[37466]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/emergency.jpg?resize=1024%2C482\" alt=\"photo credit: Code & Martini by Ivana Vasilj - cc license\" class=\"size-full wp-image-21873\" /></a>photo credit: <a href=\"https://flic.kr/p/dLUWMb\">Code &#038; Martini</a> by <a href=\"https://www.flickr.com/photos/ivanavasilj/\">Ivana Vasilj</a> &#8211; cc license\n<p>Depression in the IT industry can be more difficult to address, as many tech workers are intelligent, independent, and in high demand. Three years ago, when Yana Petrova and her colleague first proposed a presentation on depression for a local tech conference, she experienced a great deal of resistance.</p>\n<p>&#8220;There were a lot of discussions surrounding it and people in the organizations were hesitant to include it,&#8221; she said. &#8220;They believed that people who are in IT are earning very well, the people who are suffering should just go to the doctor, there&#8217;s no need to discuss it at a technical conference.&#8221; The presentation was so impactful, however, that some of the top Bulgarian psychologists heard about it and encouraged them to continue raising awareness.</p>\n<p>The IT industry has several unique factors that seem to contribute to depression and anxiety. Many people in the WordPress community, in particular, work alone at home as freelancers or with distributed companies. Unless the individual is motivated, this work environment can severely limit healthy social interactions. Additional pressures can also lead to periods of depression, including:</p>\n<ul>\n<li>Client work and relationships</li>\n<li>Pressure to always be connected</li>\n<li>Interaction with the larger development community</li>\n<li>An industry emphasis on high competency forces workers to continue building skills on top of ever-changing technologies, while also completing daily work</li>\n<li>Not understanding the limits of your body/emotions</li>\n</ul>\n<p>&#8220;I think that most of the time they are trying to become really good at what they are doing, which requires most of their attention and most of their time,&#8221; Petrova said, commenting on the lifestyle of many developers with whom she is connected.</p>\n<p>&#8220;When you are reading code, coding most of your time, and doing things related to coding, then a social part is missing &#8211; the part related to relationships, self-esteem, knowing yourself. You&#8217;re just not going deeper into that, because you are giving your time and attention to something else, trying to be good at something else. Our brain resources are kind of limited.&#8221;</p>\n<p>Client interaction is also a major cause of stress and anxiety for self-employed professionals. When you work from home by yourself without a team, criticism from clients can have a severe impact on your feelings of self-worth. If you don&#8217;t have a healthy reservoir of outside interests and hobbies, you can easily become mired in client negativity.</p>\n<p>During Petrova&#8217;s presentation at WordCamp Europe, she received questions about how to deal with clients who can damage a developer&#8217;s self-confidence. Sometimes clients don&#8217;t understand that they are not working with machines but rather real people with families and lives.</p>\n<p>&#8220;Because a lot of people are working from home, what the client thinks and what the community thinks about their work can be a source of depression,&#8221; she said. &#8220;Actually, a lot of people have mentioned that clients are sometimes rude in explaining how incompetent they were.&#8221; This can have a devastating impact on a developer who is lacking self-confidence, outside social connections, and restorative hobbies.</p>\n<p>&#8220;Questions about clients wasn&#8217;t something I expected, but it&#8217;s another vertical to explore,&#8221; Petrova said. It has inspired her to start working on a talk about relationships, clients, teams, and how to preserve your team.</p>\n<p>Petrova has observed that many people working in IT don&#8217;t prioritize knowing themselves and understanding their reactions, although this is not unique to the IT industry. They are often blind to their mental health issues and don&#8217;t know when to seek help.</p>\n<h2>Tips for Dealing with Depression and Anxiety</h2>\n<p>Petrova&#8217;s presentation centered around ways to prevent depression and successfully cope with work-related stress and anxiety. &#8220;Depression is not something that defines you for a lifetime,&#8221; she said. &#8220;It might be just a problem, and it might be that, at this time, happiness requires more effort for you.&#8221;</p>\n<p>She believes that depression is an important mechanism in the human consciousness. &#8220;It&#8217;s a signal for us that change is necessary &#8211; changes about us or changes somewhere around us.&#8221;</p>\n<p>Petrova compares cooking recipes to recipes for coping with depression, noting that it&#8217;s important to adapt those recipes to work with your preferences and needs. Her presentation highlights five ways that you can discover and create your own recipes for preventing depression from setting in.</p>\n<h4>1. Take deep breaths.</h4>\n<p>Deep breathing practices help you to regain calmness and perspective. &#8220;They say that graveyards are full of irreplaceable people,&#8221; she said. &#8220;Actually, we all are, but it&#8217;s more important that we are alive, we are here, and we are happy. We can never control everything in the world, and we should never try to take responsibility for all the things here. We often tend to forget that our bodies have their limits and we are fragile.&#8221; Deep breathing reminds us that we are not machines.</p>\n<p>In addition to breathing, Petrova suggests finding other activities outside of work that will help you to gain perspective on life. &#8220;Dedicate special time for your recipes,&#8221; she said. &#8220;Start spending an hour in the morning with your coffee. Spend Sunday afternoon with someone or with friends,&#8221; she suggests.</p>\n<p><strong>&#8220;But never give away this time. Never give it away for work. Never replace it for something, never sacrifice it. It&#8217;s important that you keep this thing and slow down.&#8221;</strong></p>\n<h4>2. Make lists.</h4>\n<p>Petrova advises people to make lists of recipes that work for them in preparation for moments when it&#8217;s difficult to think clearly. &#8220;Think of those lists as emergency plans. When the grey veil of depression comes, your rituals may not seem as important or as life-saving as the day before,&#8221; she said. &#8220;You might not enjoy them as you did before, so you should have a list of things.&#8221; Perhaps it&#8217;s a list of movies you wanted watch, or places you wanted to visit, a restaurant or recipe you wanted to try.</p>\n<blockquote><p>At the beginning you won&#8217;t be willing to do anything from this list. Those things will look silly and you say no this is not the time to do this. You will be preoccupied with all of your worries right now. Force yourself and just pick a thing and start doing it. Start those lists today and obey them frequently.</p></blockquote>\n<p>Petrova shared a few simple items on her own list &#8211; i.e. eating avocados, making herself a chai latte, enjoying a local spicy soup. If you maintain a clear list of things that make you feel better, you have some activities to turn to when things start to become stressful at work.</p>\n<h4>3. Provide small wins.</h4>\n<p>Make goals for yourself that put you on the path to success with frequent, small milestones. This will help to keep you oriented towards fulfillment. &#8220;Another recipe of mine was to keep an editorial calendar,&#8221; Petrova said. &#8220;Even if I am not feeling well, I already had something planned, so I can keep moving in that direction.&#8221;</p>\n<h4>4. Think about your thinking.</h4>\n<p>People who excel at solving some of tech&#8217;s most complex problems can also be notoriously masterful at avoiding introspection. Petrova approaches the topic of introspection with the idea of &#8220;debugging yourself,&#8221; a concept with which many in tech are familiar.</p>\n<p>She suggests writing your own user manual to document how you work and what keeps you healthy. &#8220;Write your own user manual. Start writing a user manual for yourself and imagine you are giving it to someone else. This will help you think more about how you are thinking,&#8221; she said.</p>\n<p>&#8220;You can see that there are a lot of small hacks that can help you feel better. Just imagine how empowering it might be to discover more,&#8221; she said.</p>\n<p>&#8220;This requires a lot of patience and dedication. It usually takes time for reading and time for writing. It takes time to debug your mind.&#8221; Petrova suggests writing down all of the things that help your mind work better so that you have that manual for when depression tries to settle in.</p>\n<p>&#8220;Debug yourself, but if you can&#8217;t do it yourself, then try to talk to someone,&#8221; Petrova said. &#8220;We cannot resolve anything by ourselves.&#8221;</p>\n<h4>5. Learn to listen, learn to share.</h4>\n<p>You can never underestimate the importance of community in maintaining your mental health. The community is stronger when people overcome their irrational inhibitions and learn to share their stories and listen to each other.</p>\n<p>&#8220;It&#8217;s not really easy to listen the proper way, but you can sometimes save people by listening to them carefully,&#8221; Petrova said. &#8220;You can empower them by listening to them.</p>\n<p>People need to tell their stories to realize what is happening. Sometimes when you are keeping things only in your head, you are not realizing the power of your situation.&#8221;</p>\n<p>When should depression lead you to seek professional help? &#8220;In some official resources, they say if you are feeling like this for four weeks then go find some help,&#8221; Petrova said.</p>\n<p>&#8220;But I think that the more you are getting to know yourself, the more you can feel if you need to meet with someone or talk with someone. The doctor might not be the first person. The first person might be a friend or a relative or someone who is closer to you. Or just someone you see, someone you believe in and decide to tell your story to. I really believe that it&#8217;s powerful to tell stories.&#8221;</p>\n<h2>Staying Healthy and Preventing Depression</h2>\n<p>Petrova recommends a book called <a href=\"http://www.amazon.com/The-Healthy-Programmer-Pragmatic-Programmers/dp/1937785319\" target=\"_blank\">The Healthy Programmer</a>, which contains the basics of healthy living for people who work most of the time in a seated position. She believes that movement is especially important for those who work from home and set their own schedules.</p>\n<blockquote><p>The first thing is related to moving/movement. Are you moving enough? Are you doing active things, sports? This is really important, because if you are living where you are working, then you can find yourself in a situation where you are staying home, ordering food all the time. You forget all the healthy things you could do to feel better, for your body to feel better and your mind to work well. It&#8217;s really related.</p></blockquote>\n<p>If you&#8217;re staying active and able to use your normal problem-solving skills to debug yourself, you will greatly lessen the chances of falling into depression. Building up these habits takes time, but you&#8217;re also less likely to be crippled by stress and anxiety. In the future, Petrova plans to start a blog called &#8220;The Happiness Cookbook&#8221; in order to encourage people to share their recipes with the community.</p>\n<p>&#8220;Get to know yourself better and your reactions to different situations,&#8221; Petrova advises. &#8220;You really need a lot of time to know what&#8217;s happening to you and to know how to react in a timely way for prevention.</p>\n<p>&#8220;We all have our stressful moments. We all have our sad moments. You are certain to have them in your lifetime. But you can learn how to prevent your reactions, what to do when depression happens, and the best way to overcome it. The temporary feelings can be over at some point with the help of simple tips, and then you are not going to get depressed. Otherwise, you are just digging into that.&#8221;</p>\n<p>Obviously, there are some forms of depression that will ultimately require professional help. Petrova&#8217;s tips for prevention are intended to help folks before they reach a very dark place where they have lost interest in work completely and are struggling to find vitality.</p>\n<p>&#8220;Depression means that you need to change something, for yourself, around yourself, about yourself,&#8221; she said. &#8220;This is the key message. Just research the pain that made you feel like this and start debugging it step by step.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 19 Jan 2015 22:39:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Matt: Pope Francis on Climate Change\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44598\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://ma.tt/2015/01/pope-francis-on-climate-change/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:718:\"<blockquote><p>He has been called the “superman pope”, and it would be hard to deny that Pope Francis has had a good December. Cited by President Barack Obama as a key player in the thawing relations between the US and Cuba, the Argentinian pontiff followed that by lecturing his cardinals on the need to clean up Vatican politics. But can Francis achieve a feat that has so far eluded secular powers and inspire decisive action on climate change?</p></blockquote>\n<p>The Guardian on <a href=\"http://www.theguardian.com/world/2014/dec/27/pope-francis-edict-climate-change-us-rightwing\">Pope Francis’s edict on climate change will anger deniers and US churches</a>. Definitely the coolest pope in my lifetime.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 18 Jan 2015 16:30:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: No Relief for Air Travelers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44607\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2015/01/no-relief-for-air-travelers/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:420:\"<blockquote><p>Oil prices have fallen by about half since June, making it much cheaper just in time for drivers to fill up their cars for Christmas travel. But the decline in oil prices has had made no perceptible difference on the cost of flying.</p></blockquote>\n<p>New York Times: <a href=\"http://www.nytimes.com/2014/12/16/opinion/no-relief-for-air-travelers.html?_r=2&referrer=\">No Relief for Air Travelers</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 23:35:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: Proposed Enhancements to Distraction-free Writing in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37456\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/proposed-enhancements-to-distraction-free-writing-in-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3711:\"<p>When we <a title=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1\" href=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1\">asked readers</a> what they thought of the new Distraction-free writing mode in WordPress 4.1, a majority of readers responded that it was an improvement. However, a number of others stated they preferred the old version. Readers also <a title=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1#comments\" href=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1#comments\">took to the comments</a> to describe their first impression of the feature.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/12/DistractionFreeWriting41.png\" rel=\"prettyphoto[37456]\"><img class=\"size-full wp-image-35707\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/12/DistractionFreeWriting41.png?resize=1025%2C501\" alt=\"Distraction Free Writing in WordPress 4.1\" /></a>Distraction Free Writing in WordPress 4.1\n<p>Since the release of 4.1, I&#8217;ve forced myself to use DFW. When I write content, I often hit the preview button several times to review changes. This results in DFW mode turning on and off multiple times which I find distracting and at times, annoying. I&#8217;m not the only one who feels this way as Brian Krogsgard of <a title=\"https://poststatus.com/distraction-free-writing-wordpress/\" href=\"https://poststatus.com/distraction-free-writing-wordpress/\">PostStatus.com explains</a>:</p>\n<blockquote><p>When I write, I tend to save and preview the post live a number of times while I’m writing, especially toward the end of my time spent writing.</p>\n<p>It gets a bit dizzying to be fixing typos and saving and previewing while going in an out of DFW.</p>\n<p>I’d like to see “Save Draft” and “Preview” buttons moved into the editor body, so that I can stay in DFW while finishing up my posts.</p></blockquote>\n<p>I like the idea of moving the Save Draft and Preview buttons to the post editor. It&#8217;s one of the reasons why <a title=\"http://wptavern.com/how-to-preview-posts-in-distraction-free-writing-mode-without-seeing-a-transition\" href=\"http://wptavern.com/how-to-preview-posts-in-distraction-free-writing-mode-without-seeing-a-transition\">I reviewed</a> the <a title=\"https://wordpress.org/plugins/fullscreen-preview-button/\" href=\"https://wordpress.org/plugins/fullscreen-preview-button/\">Distraction Free Preview Button</a> plugin by Alex King. Krogsgard also lists several other ideas with screenshots showing the changes in action, including:</p>\n<ul>\n<li>Inverted editor colors</li>\n<li>Centered post editor</li>\n<li>Setting the editor to use the Max-width available</li>\n<li>Full-height editor</li>\n</ul>\n<p>Jen Mylo, who reviewed the feature as a user, <a title=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\" href=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\">suggests</a> similar improvements. One other thing I&#8217;d like to see is a full-height editor. It&#8217;s annoying when the meta boxes fade away, the editor remains the same size as if the boxes are still in place. That&#8217;s because they are, but I think it would be better if DFW mode would go back to being a separate writing experience so meta boxes are a non-issue.</p>\n<p>I believe if the ideas proposed by Krogsgard and Mylo are implemented, DFW would likely become the primary mode in which I write content. Until then, I&#8217;m sticking with the default interface. What you do you think of the proposed ideas and are there any you&#8217;d add?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 22:09:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WPTavern: JavaScript Leads The Pack in RedMonk’s Programming Language Rankings\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37449\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/javascript-leads-the-pack-in-redmonks-programming-language-rankings\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2289:\"<p>Research and analyst firm, <a title=\"http://redmonk.com/\" href=\"http://redmonk.com/\">RedMonk, </a>released its <a title=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\" href=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\">programming language rankings</a> for January 2015. RedMonk looks at programming language discussions on <a title=\"http://stackoverflow.com/\" href=\"http://stackoverflow.com/\">Stack Overflow</a> and usage on <a title=\"https://github.com/\" href=\"https://github.com/\">GitHub</a> in an effort to extract insights into potential adoption trends.</p>\n<p>The results from the analysis are not clear indications of general usage but rather, an examination of the correlation between two populations RedMonk believes to be predictive of future use.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/RedMonkQ115ProgrammingLanguageRankings.png\" rel=\"prettyphoto[37449]\"><img class=\"size-full wp-image-37451\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/RedMonkQ115ProgrammingLanguageRankings.png?resize=1025%2C687\" alt=\"RedMonk Q115 Programming Language Rankings\" /></a>RedMonk Q115 Programming Language Rankings\n<p>It doesn&#8217;t surprise me to see JavaScript and PHP so high on the chart, especially since JavaScript is in the <a title=\"http://ianmarshall.net/articles/140511.php\" href=\"http://ianmarshall.net/articles/140511.php\">middle of a renaissance</a>. The results also mirror the suggestion that in the future, <a title=\"http://wptavern.com/in-the-next-few-years-90-of-wordpress-development-could-be-javascript-based\" href=\"http://wptavern.com/in-the-next-few-years-90-of-wordpress-development-could-be-javascript-based\">90% of WordPress development</a> could be JavaScript based.</p>\n<p>Be sure to read <a title=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\" href=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\">RedMonk&#8217;s interpretation</a> of the data and the trends worth noting. Also worth reading is <a title=\"http://www.wired.com/2015/01/redmonk-swift\" href=\"http://www.wired.com/2015/01/redmonk-swift\">Wired.com&#8217;s take</a> on the data and the rising popularity of Apple&#8217;s Swift programming language. What do you make of the rankings?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 20:53:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Post Status: Ideas for small improvements to the new Distraction-Free Writing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7388\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://poststatus.com/distraction-free-writing-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9980:\"<p>Distraction-Free Writing has been a bit of a controversial feature in WordPress this release. It changed from a <em>you have to toggle to it every time</em> feature to <em>it&#8217;s always on feature</em> in WordPress 4.1.</p>\n<p>With that change, the DFW experience changed to be more like the regular editor, well, because it is the regular editor. It just removes stuff off of the screen that you&#8217;re not using.</p>\n<p>Here&#8217;s the editor now, with DFW not on:</p>\n<div id=\"attachment_7393\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/4-1-post-editor.png\"><img class=\"wp-image-7393 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/4-1-post-editor-752x473.png\" alt=\"4-1-post-editor\" width=\"752\" height=\"473\" /></a><p class=\"wp-caption-text\">The WordPress post editor, as of WordPress 4.1 (with custom admin theme colors)</p></div>\n<p>And here&#8217;s the editor now, with DFW on:</p>\n<div id=\"attachment_7390\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-wp-4-1.png\"><img class=\"wp-image-7390 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-wp-4-1-752x442.png\" alt=\"dfw-wp-4-1\" width=\"752\" height=\"442\" /></a><p class=\"wp-caption-text\">DFW mode as of WordPress 4.1</p></div>\n<p>Jen Mylo wrote a post about how <a href=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\">she doesn&#8217;t like the new feature as much as the old one</a>. I&#8217;ve seen similar complaints a few times from folks.</p>\n<p>The positive trade-off is that now DFW is much more likely to be used, since the setting (the four-arrow icon in the upper right corner of the editor box) is persistent for a user once enabled. Previously, DFW had to be toggled in each use, and was probably used by a minority of users.</p>\n<p>4.1 was the first go at the feature in its new state, and I think it&#8217;s pretty great. I&#8217;m now using DFW every post I write, whereas before I almost always forgot to turn it on; plus, it previously felt like a commitment to the blog post.</p>\n<p>Nevertheless, I think Jen&#8217;s critique (as well as others&#8217;) are noteworthy, so I decided to take some of the complaints I&#8217;ve heard and hack around in the browser inspector to see if I could alleviate them.</p>\n<p>One thing Jen brought up was the height of the editor box. You no longer toggle the height from the bottom corner; instead it auto-adjusts with your content, and comes shipped with a default height.</p>\n<h3>Full-height editor box</h3>\n<p>She believes, and I agree, that it would be nice if the editor filled the available height of the window, because right now it feels a bit squished and cramped. Thankfully, we have the viewport height (vh) unit in CSS, and this can be adjusted with pure CSS and a few media queries.</p>\n<div id=\"attachment_7391\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-4-1-full-height.png\"><img class=\"wp-image-7391 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-4-1-full-height-752x451.png\" alt=\"dfw-4-1-full-height\" width=\"752\" height=\"451\" /></a><p class=\"wp-caption-text\">WordPress DFW mode with full-height content area</p></div>\n<p>I think this is a progressive feature, so I&#8217;d be for using the vh CSS unit not using Javascript on this, despite the not-great browser support in IE.</p>\n<p>In fact, I really like this concept, even when not in DFW mode. It really calms me down, not seeing the metaboxes below the post content right out of the gate. We can just keep them right below the editor, just out of sight.</p>\n<div id=\"attachment_7392\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/post-editor-full-height.png\"><img class=\"size-large wp-image-7392\" src=\"https://poststatus.com/wp-content/uploads/2015/01/post-editor-full-height-752x451.png\" alt=\"WordPress post editor with full height content area\" width=\"752\" height=\"451\" /></a><p class=\"wp-caption-text\">WordPress post editor with full height content area</p></div>\n<h3>Centered editor in DFW</h3>\n<p>Another note Jen made was that she was bothered the editor isn&#8217;t centered in DFW mode. Well, I&#8217;ve never noticed that, but <em>now I do, ugh</em>. <img src=\"https://poststatus.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" /> It&#8217;s this way because DFW simply hides the right column and admin columns, which are not the same width, and therefore the editor is left with unequal margins.</p>\n<p>Well, during the transition of those admin columns, theoretically, we could also move the editor box, though I think we should test what kind of UX effect there is of transitioning the editor your cursor is in. It might not be the most elegant solution.</p>\n<p>Nevertheless, here&#8217;s what it&#8217;d look like once you&#8217;re done, including the full-height editor box.</p>\n<div id=\"attachment_7394\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-full-height-and-centered.png\"><img class=\"size-large wp-image-7394\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-full-height-and-centered-752x471.png\" alt=\"DFW full-height editor and centered\" width=\"752\" height=\"471\" /></a><p class=\"wp-caption-text\">DFW full-height editor and centered</p></div>\n<p>I&#8217;m iffy on this one. I really don&#8217;t like the idea of moving the box you&#8217;re actively focusing on. Needs testing.</p>\n<h3>Max-width on the editor box</h3>\n<p>A critique I learned from another user was that the huge width on the DFW editor box bothered them. I agree. I think we should put a max-width on the editor box &#8212; probably whether the user is in DFW mode or not.</p>\n<p>Here&#8217;s the large version that&#8217;s unwieldy, especially in DFW mode:</p>\n<div id=\"attachment_7400\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-max-width.png\"><img class=\"size-large wp-image-7400\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-max-width-752x285.png\" alt=\"We should not let this get so wide. Line length matters!\" width=\"752\" height=\"285\" /></a><p class=\"wp-caption-text\">We should not let this get so wide. Line length matters!</p></div>\n<h3>Inverted editor colors, with centered content box</h3>\n<p>One more idea: what if we inverted the WordPress admin colors, so that the background was white, and metaboxes were gray. And then, we could ditch the &#8220;container&#8221; of the editor box altogether.</p>\n<p>Here&#8217;s a mockup of that.</p>\n<div id=\"attachment_7402\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/all-white-admin-background.jpg\"><img class=\"size-large wp-image-7402\" src=\"https://poststatus.com/wp-content/uploads/2015/01/all-white-admin-background-752x431.jpg\" alt=\"All white background, with centered editor\" width=\"752\" height=\"431\" /></a><p class=\"wp-caption-text\">All white background, with centered editor</p></div>\n<p>I think this could look really nice, but it would require a good bit of admin changes.</p>\n<p>And then the Distraction-Free Writing version:</p>\n<p><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-all-white.jpg\"><img class=\"aligncenter size-large wp-image-7404\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-all-white-752x432.jpg\" alt=\"dfw-all-white\" width=\"752\" height=\"432\" /></a></p>\n<h3>Save and Preview inline</h3>\n<p>This one is my own idea, based on drafting posts in this mode every day.</p>\n<p>Distraction-Free Writing toggles on and off pretty rapidly as you focus in and out of the editor. When I write, I tend to save and preview the post live a number of times while I&#8217;m writing, especially toward the end of my time spent writing.</p>\n<p>It gets a bit dizzying to be fixing typos and saving and previewing while going in an out of DFW.</p>\n<p>I&#8217;d like to see &#8220;Save Draft&#8221; and &#8220;Preview&#8221; buttons moved into the editor body, so that I can stay in DFW while finishing up my posts. Here&#8217;s what that looks like:</p>\n<div id=\"attachment_7389\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-inline-save-preview.jpg\"><img class=\"size-large wp-image-7389\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-inline-save-preview-752x473.jpg\" alt=\"DFW with Save and Preview inline\" width=\"752\" height=\"473\" /></a><p class=\"wp-caption-text\">DFW with Save and Preview inline</p></div>\n<h3>Iteration is important</h3>\n<p>Iteration in WordPress feature development is important. I&#8217;m glad we introduced Distraction-Free Writing in the first place, and I think the changes in 4.1 are worthy. They may need some adjustments, but it&#8217;s a process that will continue to improve.</p>\n<p>Constructive feedback is always good. The more we use and figure out how others are using various features of WordPress, the more they can be improved.</p>\n<p>In preparing to write this post, I was able to reach out in <a href=\"https://poststatus.com/category/planet/feed/slack.wordpress.org\">WordPress Slack</a> and find out the best venue to give feedback, and if Jen&#8217;s post and this one help start a conversation, the changes can make their way to <a href=\"https://core.trac.wordpress.org/\">Trac tickets</a> and eventual patches to make WordPress better.</p>\n<p>I&#8217;ve seen at least a handful of folks say &#8220;Bring the old Distraction-Free Writing back!&#8221; That&#8217;s understandable; lots of folks don&#8217;t like change. Every UI-involved feature in WordPress ever has had critics.</p>\n<p>But when you look at WordPress today and WordPress 5 or more years ago, WordPress today is way more beautiful to use. That&#8217;s because the experience the core team has built has iterated over time in response to use, feedback, and contributions.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 18:01:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Jen Mylo: Distraction-free Writing Mode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"http://jenmylo.com/?p=4787\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6729:\"<p>Once upon a time in WordPress there was a New Feature called Distraction-free writing mode. You accessed it by clicking the icon in the editor toolbar that means <em>full screen</em> pretty much everywhere on the web.</p>\n<p><img class=\"aligncenter size-full wp-image-4788\" src=\"https://jenmylo.files.wordpress.com/2015/01/dfw-icon-highlight.png?w=520&h=71\" alt=\"post editor toolbar\" width=\"520\" height=\"71\" /></p>\n<p>It would load a new screen tha mostly just consisted of a writing box not surrounded by meta boxes or formatting, and what limited formatting options there were would only appear when you moused out of the writing area. It wasn&#8217;t perfect (I would have liked that fading toolbar to have all the same formatting options as the regular editor) but it <em>was</em> pretty non-distracting, and it just felt calm.</p>\n<p><img class=\"aligncenter size-full wp-image-4790\" src=\"https://jenmylo.files.wordpress.com/2015/01/dfw-ui.png?w=520\" alt=\"old distraction-free writing interface\" /></p>\n<p>A while back I noticed some changes in the wp-admin regular editor. All the navigation and meta boxes now faded away while you were writing, and I thought, &#8220;Oh, that&#8217;s pretty nice, kind of a DFW Lite!&#8221; I didn&#8217;t pay too much attention, as I was just writing a quick post, but in my head I approved, and thought it was a good improvement. Until this morning.</p>\n<p>Most of my blog-based activity happens on work-related blogs that have front-end posting forms, so it&#8217;s been a while since I tried to access DFW mode. But I was going to be writing a long post, and I wanted to go over into that peaceful screen, so I clicked on the full-screen icon. That&#8217;s when I discovered that what I thought was DFW Lite was actually the new DFW. There was no more new screen.</p>\n<p>At first I thought,&#8221;Hm, that&#8217;s a lot more efficient. Good for them!&#8221; Then I started writing, and thought, &#8220;[Letters-in-a-configuration-to-replicate-my-slightly-alarmed-and-uncomfortable-sound]!&#8221; I hated to admit it, but I felt physically uncomfortable. Am I turning into Sheldon (<a title=\"Video from Big Bang Theory\" href=\"https://www.youtube.com/watch?v=ynUfxitGpfU\">skip to 3:34</a>)? Crap! Anyway, here&#8217;s why I don&#8217;t love the new DFW.</p>\n<p>When wp core switched over to the &#8220;toolbar anchors to top of editor no matter how long your post&#8221; setup, users lost the ability to grab a corner of the editor and drag it to make it taller. Since it is supposed to automatically resize as you write, most people thought this was a tradeoff with a net benefit, and even though I really didn&#8217;t want to lose my little corner resize handle, I agreed that the net benefit was worth it. The thing is, if in your head you&#8217;ve already thought out a long post, starting in the small box feels cramped, kind of like when you have to repack a sleeping bag and you&#8217;re smooshing it with all your might to get it to fit back into the compact stuff sack.</p>\n<p>Think about opening a New Document in MS Word (or equivalent writing program) , or a writer putting a fresh piece of paper in the typewriter (for those who are too young to remember, <a title=\"Video of someone putting paper into a typewriter\" href=\"https://www.youtube.com/watch?v=FkUXn5bOwzk\">it&#8217;s like this</a>). There have been reams written by famous authors in the past about the feeling that action engenders &#8212; a feeling of limitless possibilities, a knock on the creative door, an open road ahead. That&#8217;s what DFW tried to emulate. Starting in the small box instead of the full height box feels like possibilities with limits, a creative window that won&#8217;t open more than 3 inches for safety, a road with one lane closed for construction. Thoughts scrunch down to try to fit into the available space.</p>\n<p>Even when the box expands to be the height of the screen (minus padding against top and bottom of browser), a chunk of space is lost at the top for the toolbar. That fade it used to have really did remove distraction. I wish there had been a way to combine the zen of the fade away (Matt&#8217;s original nickname for DFW was zen mode) with the convenience of the always-at-top placement.</p>\n<p>In the old DFW, the writing window really did have that feeling of a fresh New Document or crisp new sheet of paper. Now, even once it&#8217;s tall, it&#8217;s a bit off-center to the left, because that&#8217;s where the editor box is when on a screen containing navigation and metaboxes.</p>\n<p><img class=\"aligncenter size-full wp-image-4798\" src=\"https://jenmylo.files.wordpress.com/2015/01/screen-shot-2015-01-17-at-7-54-33-am.png?w=520&h=313\" alt=\"Screenshot of current distraction-free mode\" width=\"520\" height=\"313\" /></p>\n<p>There was a time (pre-2000) when I didn&#8217;t think too much about alignment in UIs. Then I got a lot of design ideas drilled into my head that stuck, especially regarding alignment. I like asymmetry in a lot of things, always have. Hell, in a site we were just working on one of the things we said we wanted was some asymmetry. But for DFW, the symmetry &#8212; the centeredness &#8212; was a big part of what made that screen so calming. Your brain didn&#8217;t have to do any pattern recognition or internal balancing to make it feel right. But now it skews to the left and it&#8217;s driving me crazy, Sheldon style. This isn&#8217;t zen for me; it&#8217;s a misused apostrophe, a lowercase p, a cabinet door left open.</p>\n<p>I thought I&#8217;d be a holdout forever against using the new <a title=\"wordpress.com\" href=\"http://wordpress.com\">wordpress.com</a> posting interface (I have a lot of issues with it, surprise), but, well, their DFW has that open and symmetrical feeling (even if it has other problems) that makes for a non-Sheldony writing experience.</p>\n<p><img class=\"aligncenter size-full wp-image-4789\" src=\"https://jenmylo.files.wordpress.com/2015/01/screen-shot-2015-01-17-at-7-27-45-am.png?w=520&h=378\" alt=\"Screenshot of distraction-free writing mode on wordpress.com\" width=\"520\" height=\"378\" /></p>\n<p>So this might be my last post written in wp-admin DFW mode for now. Farewell, old friend!</p>\n<p><em>* * *</em></p>\n<p><em>Standard disclaimer when writing about WordPress: This is my personal opinion. I have not been the UX lead for WordPress core for a couple of years now, so this post on my personal blog should not be seen as representing the WordPress project in any way, it&#8217;s just my personal experience with a user interface.</em></p><img alt=\"\" border=\"0\" src=\"http://pixel.wp.com/b.gif?host=jenmylo.com&blog=45389656&post=4787&subd=jenmylo&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 16:08:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Jen Mylo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WPTavern: First Look at SIDEKICK\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37315\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://wptavern.com/first-look-at-sidekick\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4144:\"<p>After experiencing a <a title=\"http://wptavern.com/sidekick-delays-the-release-of-composer\" href=\"http://wptavern.com/sidekick-delays-the-release-of-composer\">significant delay</a> in late 2014, the folks over at SIDEKICK <a title=\"http://www.sidekick.pro/blog/launch-welcome-new-sidekick-pro/\" href=\"http://www.sidekick.pro/blog/launch-welcome-new-sidekick-pro/\">have launched</a> a new website along with Composer. <a title=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\" href=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\">Composer</a> is a tool that allows you to create visual, guided, walkthroughs. When SIDEKICK Co-founder, Ben Fox, showed off the initial demo last year, I described it as the <a title=\"http://www.techsmith.com/camtasia.html\" href=\"http://www.techsmith.com/camtasia.html\">Camtasia</a> of WordPress.</p>\n<p>SIDEKICK has a <a title=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\" href=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\">couple different plans</a> available depending upon how many walkthroughs you want to publish. The free account allows for three <strong>published</strong> walkthroughs, 50 monthly plays or views, 1 active website, and support for WordPress multi-site.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/SideKickActivated.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37429\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/SideKickActivated.png?resize=1025%2C501\" alt=\"SIDEKICK Activated\" /></a>SIDEKICK Activated\n<p>The walkthrough creation interface is similar to Camtasia in that it has a timeline with various steps that can be added. To supply audio, you need to upload a pre-recorded mp3 file for each step. While not as easy as recording the audio within the plugin, it&#8217;s easier to fix mishaps without having to redo the entire walkthrough.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/WalkthroughInterface.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37432\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/WalkthroughInterface.png?resize=1025%2C280\" alt=\"Walkthrough Interface\" /></a>Walkthrough Interface\n<h2>It&#8217;s Clearly The First Version</h2>\n<p>While testing SIDEKICK, I encountered several things that need to be addressed in future versions. <del>During the initial setup, there is a box that explains how to build your own walkthrough with a link to get Composer. This leads me to believe that it&#8217;s a separate product or plugin when in reality, it&#8217;s not. Composer is part of SIDEKICK out of the box.</del> <em><strong>Update</strong></em> SIDEKICK has already released an update that fixes the copy.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/getcomposerbox.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37433\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/getcomposerbox.png?resize=610%2C207\" alt=\"Get Composer Information Box\" /></a>Old Get Composer Information Box\n<p>I encountered a few links which point to a 404 page, like their <a title=\"http://www.sidekick.pro/terms-of-use/\" href=\"http://www.sidekick.pro/terms-of-use/\">Terms of Use</a>. With so many steps in the setup process, it would be nice if SIDEKICK had a walkthrough of its own, to guide users on how to configure it. Despite these minor setbacks, they don&#8217;t detract from its usefulness. Fox says, the team is already aware of the issues and over the next few weeks, will release several updates.</p>\n<p>It took awhile, but once I understood how it works, I found creating walkthroughs a fairly easy process. With version one out the door, it will be interesting to see how it&#8217;s adopted by theme and plugin developers, considering a number of them already use <a title=\"http://theme.fm/2011/09/introducing-pointers-in-wordpress-3-3-2407/\" href=\"http://theme.fm/2011/09/introducing-pointers-in-wordpress-3-3-2407/\">admin pointers</a> that are built into WordPress. However, there&#8217;s a distinct difference between a simple pointer and walking people through a task.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 03:59:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Matt: Fasting\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44604\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"http://ma.tt/2015/01/fasting/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1053:\"<p>&#8220;Fasting for as little as three days can regenerate the entire immune system, even in the elderly, scientists have found in a breakthrough described as &#8216;remarkable&#8217;.&#8221; &#8212; <a href=\"http://www.telegraph.co.uk/news/uknews/10878625/Fasting-for-three-days-can-regenerate-entire-immune-system-study-finds.html\">Fasting for three days can regenerate entire immune system, study finds</a>.</p>\n<p>Harper&#8217;s had a <a href=\"http://harpers.org/archive/2012/03/starving-your-way-to-vigor/\">great article on fasting a few years ago</a> it&#8217;s not online at the moment but <a href=\"https://cloudup.com/cgrXJBHXyeo\">here&#8217;s a PDF of it</a>. It&#8217;s also <a href=\"http://www.yogicwayoflife.com/three-day-water-fast-and-its-benefits/\">common in yoga</a> and <a href=\"http://joshmitteldorf.scienceblog.com/2014/06/12/the-three-day-fast-day-four/\">folks trying to live longer</a>. I haven&#8217;t tried it myself yet, but perhaps will at some point this year &#8212; I like the idea of doing something by doing nothing.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 01:10:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Matt: The Right Problem\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44601\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://ma.tt/2015/01/the-right-problem/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:385:\"<blockquote><p>Working on the right problem is more important than working hard. &#8212; Caterina Fake</p></blockquote>\n<p>Found via <a href=\"http://davemart.in/2015/01/14/84-highlights-from-the-startup-playbook/\">84 highlights from The Startup Playbook</a> by Automattician Dave Martin.</p>\n<p>The hardest thing in the world is spending the most time on the most important things.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 22:08:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"Post Status: A small Medium experiment\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7366\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://poststatus.com/medium-vs-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9842:\"<p>I&#8217;ve always wanted to write a post on Medium. But I&#8217;ve always been too greedy to do so, because I like to own my content, and I&#8217;ve never had a topic that I really wanted to write about that didn&#8217;t better fit on my personal blog or this one.</p>\n<p>That changed today, so I got to experiment. On hearing that Teehan+Lax shut down, I felt it was a worthy time to try Medium. I had a bone to pick with their exit post, and they helped design Medium&#8217;s first version, so it seemed fitting.</p>\n<p>Here&#8217;s <a href=\"https://medium.com/@krogsgard/the-story-teehan-lax-isnt-telling-5b58e6109e88\">a link to the finished product</a>. Until today, I had never really done anything to play with their editor beyond look at it and write a few sentences to see the basics of how things worked.</p>\n<h3>First impressions of Medium&#8217;s editor</h3>\n<p>Medium&#8217;s front-end is beautiful. And the back-end looks quite similar. They try to take pretty much everything out of your way to leave you to your words. I like that.</p>\n<p>The only problem with simplicity is that it can obfuscate how to actually do stuff. In the case of the Medium editor, there are two methods to interact with text.</p>\n<p><img class=\"aligncenter size-large wp-image-7370\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-more-options-752x261.jpg\" alt=\"medium-more-options\" width=\"752\" height=\"261\" /></p>\n<p>First, you can click the little plus button, which allows you to insert a pre-formatted block of something.</p>\n<p><img class=\"aligncenter size-large wp-image-7371\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-tooltip-752x208.jpg\" alt=\"medium-tooltip\" width=\"752\" height=\"208\" /></p>\n<p>&nbsp;</p>\n<p>Second, you can highlight text and get a tooltip of formatting options.</p>\n<p>Some of these options are confusing. The tooltip one was fine, but the + button was tougher. I didn&#8217;t know what to expect by clicking the horizontal line or the play button. I thought the code brackets were odd, as surely not many people are putting code on Medium. It turned out that was an oEmbed button.</p>\n<p>Eventually though, I figured out roughly how to do what, even inserting those big full screen images everyone associates to Medium.</p>\n<p>For most people and most posts, these tools are enough. And all in all the experience was delightful, despite this minor criticism. However, a part of me wanted <em>more</em>.</p>\n<p>I like the persistent editing buttons of WordPress (though I could definitely do with fewer options in TinyMCE). I even felt a little weird about Medium&#8217;s previews. It&#8217;s basically a front-end preview when you edit, but it&#8217;s also not quite teh same. For example, you don&#8217;t get the below post items and other elements that affect the overall feel of the page, versus just the article.</p>\n<p>Still, I think the WordPress editing experience could learn from Medium&#8217;s efforts, even if we don&#8217;t mimic it entirely. And I do think the recent changes to Distraction writing help get us there.</p>\n<h3>Simple but effective stats</h3>\n<p>Medium has stats built-in. With WordPress, most people use WordPress.com&#8217;s stats module through Jetpack, or Google Analytics, or both.</p>\n<p>Medium really trims down the stats information. You basically get a few metrics: Views, &#8220;Reads&#8221;, Read Ratio, and Recommendation counts.</p>\n<p><img class=\"aligncenter size-large wp-image-7372\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-stats-752x527.jpg\" alt=\"medium-stats\" width=\"752\" height=\"527\" /></p>\n<p>I <em>love</em> the read ratio stat. Medium&#8217;s reliance on reading versus pageviews is <a href=\"https://medium.com/data-lab/mediums-metric-that-matters-total-time-reading-86c4970837d5\">pretty well documented</a>, and I&#8217;ve always thought it was great. But what I realized nearly immediately is that this gave me much greater assurance that my post is quality or not, versus metrics I have available to me with WordPress.com stats or even Google analytics.</p>\n<p>I usually determine quality of my posts based on how many tweets, comments, and pageviews I get for an article. This is great, but just because something isn&#8217;t shareworthy doesn&#8217;t mean it&#8217;s not high quality. Also, if I get 200 views but nearly everyone fully reads it, it&#8217;s better than getting 1,000 views where only 200 read it.</p>\n<p>In the latter example, I got views but I didn&#8217;t impact. My goal is to impact, and Medium&#8217;s &#8220;reads&#8221; stat helps me determine that very quickly.</p>\n<p>Referrals are also nice on Medium. I can quickly see where traffic is coming from, real time, and go see what that referring source said about my post or take part in the conversations.</p>\n<p>Most importantly, regarding referrals, is that <em>I can see them per article</em>. This is a feature I would love to see hit WordPress.com stats.</p>\n<p>Hardcore stats folks won&#8217;t be totally satisfied with Medium. And to my knowledge, you can add your own Google Analytics account to your medium account, so you have to live with what you get. For most of us, that is enough.</p>\n<p>I think there is a ton of opportunity for a solid stats plugin for WordPress that either makes great use of Google Analytics within the WordPress Dashboard, or rolls their own (outside of WordPress.com / Jetpack).</p>\n<h3>Medium-sized exposure</h3>\n<p>One element I was pretty curious of was exposure. I know that some articles have done really well on Medium, but I&#8217;m not sure what causes that.</p>\n<p>In my case, the article has had a couple thousand pageviews in a matter of an hour or two, so that&#8217;s great. However, I think it took off on Twitter and Designer News much more so than from Medium itself, besides recommendations</p>\n<p>For recommendations, it&#8217;s like a rolling snowball. I get emails from Medium every day telling me what my Twitter friends recommended on Medium. I imagine that the more people recommend my story, the more email and other distribution the story gets. That&#8217;s good, because I&#8217;ve always figured recommendation buttons were mostly useless on sites, and really only social proof for other would-be readers that are already on some kind of archive.</p>\n<p>As far as I can tell, Medium doesn&#8217;t really have a way to highlight new stories beyond recommendations. And they very much de-emphasize post dates and time-based feeds.</p>\n<h3>Tag, you&#8217;re not it</h3>\n<p>One last thing was categorization and tags. Medium no longer allows regular users to put a post in any particular category, as far as I can tell. You have to be some sort of more-certified user or author to put a post in one of their channels or tags or whatever they call them.</p>\n<p>I thought this was a little frustrating. Without some kind of tag, how can I put my story in a feed that others that don&#8217;t already follow me can find? I think it has potential to prevent lesser-known writers from ever being exposed to more eyeballs, because there is a much smaller initial audience to read their post.</p>\n<p>Furthermore, if I had 100 or 1,000 posts on Medium someday, it would make it harder for me to filter my own stuff. I often go back to certain categories on Post Status to see what I wrote about a particular topic in the past.</p>\n<h3>Notes and public previews</h3>\n<p>A couple of things that Medium excels at are notes and public previews. I can easily annotate my post in the margins, without putting the notes in the content (which I often do in WordPress). It&#8217;s very similar to Google Docs.</p>\n<p><img class=\"aligncenter size-large wp-image-7373\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-notes-752x265.jpg\" alt=\"medium-notes\" width=\"752\" height=\"265\" /></p>\n<p>And public previews and draft sharing is exceptional. I have public preview functionality on Post Status, and it works okay; it&#8217;s built into Medium, and it has great placement and is easy to use.</p>\n<p>I think WordPress could build these features in. They simply make publishing better. Nearly every site could utilize a tool like this and I think that while there are plugin options for accomplishing these tasks, it&#8217;s pretty core to the experience and mission of publishing.</p>\n<h3>Plenty to gleam, but not a silver bullet</h3>\n<p>All in all, I liked publishing on Medium.</p>\n<p>No, I don&#8217;t own the content. Though they do have a one-click button for exporting everything you&#8217;ve ever written. (<em>edit: reader and former Medium employee Evan Solomon notes I do own the content itself. I guess I mean it more in the sense that I don&#8217;t own the platform, and can&#8217;t guarantee my content will always be there.</em>)</p>\n<p>I also can&#8217;t use my own domain. If I published there long term, that would be a problem.</p>\n<p>It&#8217;s unfair to compare Medium directly to WordPress. But from a publishing perspective, I&#8217;d say there are definitely elements WordPress could learn from. However, we shouldn&#8217;t just jump completely on the simplification bandwagon.</p>\n<p>Now, in terms of who can definitely learn from Medium, it&#8217;s WordPress.com. If I were going with a hosted platform, owning my own domain and being able to choose my own theme are pretty much the only reasons I&#8217;d choose WordPress.com versus Medium. The overall account (especially) and publishing experiences (marginally) feel more polished on Medium than WordPress.com.</p>\n<p>I don&#8217;t know if I&#8217;ll publish on Medium again. Probably, when I find a circumstance that this blog or my personal blog aren&#8217;t the right place. It was fun to play with a shiny new tool, but I&#8217;m still a WordPress guy, and I think we&#8217;re doing alright.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 17:50:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"WPTavern: The WordPress Foundation Creates a Traveling Scholarship in Memory of Kim Parsell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37415\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3126:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsellDocsTeamMeetup.jpg\" rel=\"prettyphoto[37415]\"><img class=\"size-full wp-image-36621\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsellDocsTeamMeetup.jpg?resize=750%2C460\" alt=\"Kim Parsell With the Docs Team Meetup in Cincinnati 2013\" /></a>Kim Parsell With the Docs Team Meetup in Cincinnati 2013\n<p><a title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">Kim Parsell once told me</a> that attending WordCamp San Francisco 2014 was one of the best experiences of her life. It was her first WordCamp San Francisco and although she was unemployed at the time, she was able to attend thanks to financial assistance received from the <a title=\"http://wordpressfoundation.org/\" href=\"http://wordpressfoundation.org/\">WordPress Foundation</a>. Knowing how much it meant to her to attend the event, the Foundation has launched a <a title=\"https://make.wordpress.org/community/2015/01/15/remembering-kim-parsell/\" href=\"https://make.wordpress.org/community/2015/01/15/remembering-kim-parsell/\">new scholarship program in memory of Kim </a>to provide women in the WordPress community the same opportunity.</p>\n<p>The details of the scholarship are as follows:</p>\n<ul>\n<li>It will be a scholarship for a woman contributor with financial need who has never attended the event before.</li>\n<li>It will be limited to WCSF’s replacement event rather than available for any WordCamp.</li>\n<li>When travel scholarships are announced for the event, this specific memorial scholarship will be mentioned in the post.</li>\n<li>It will cover the ticket cost, flight, and lodging.</li>\n<li>It will be awarded once per year.</li>\n<li>It will be funded by the Foundation.</li>\n<li>It will be awarded by the community team (or whoever within the project is overseeing travel scholarships that year) to the recipient 3 months in advance of the event.</li>\n</ul>\n<p>Jen Mylo, who helped turn the idea into a reality, says the program will likely live inside of a broader scholarship program, &#8220;The assumption is that it will live within a broader travel scholarship program that can be worked on this year (SF was a test of the idea, but not intended to be the only WC that would offer assistance in the future if it worked well, which we haven’t yet worked out).&#8221;</p>\n<p>By limiting the scholarship to women, the goal is to encourage more women to get involved with the project. Mylo also explained why it&#8217;s limited to first time attendees, &#8220;As a Kim memorial, we wanted this to be very Kim-specific, and that first-time experience is what we want to provide someone in her memory.&#8221;</p>\n<p>Although there <a title=\"https://twitter.com/scottbasgaard/status/551531483056578560\" href=\"https://twitter.com/scottbasgaard/status/551531483056578560\">was talk</a> of possibly naming a WordPress release after Kim, this is a much more fitting memorial as it allows her to contribute to the project for years to come.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 01:08:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: WPWeekly Episode 177 – Hanging Out With GoDaddy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=37411&preview_id=37411\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/wpweekly-episode-177-hanging-out-with-godaddy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5253:\"<p>Over the years, GoDaddy has become a company <a title=\"http://chrislema.com/turning-around-godaddy/\" href=\"http://chrislema.com/turning-around-godaddy/\">people love to hate</a>. Whether it&#8217;s poor server performance or the actions of former CEO, Bob Parsons, the company has garnered a negative reputation. Within the last two years however, GoDaddy has implemented several changes to turn the company around.</p>\n<p>In this episode, <a title=\"http://marcuscouch.com/\" href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by three GoDaddy employees:</p>\n<ul>\n<li><a title=\"https://twitter.com/kingjeff2\" href=\"https://twitter.com/kingjeff2\">Jeff King</a>, General Manager of Hosting and Security</li>\n<li><a title=\"https://twitter.com/ifyouwillit\" href=\"https://twitter.com/ifyouwillit\">Mendel Kurland</a>, WordPress evangelist</li>\n<li><a title=\"https://twitter.com/k_payne\" href=\"https://twitter.com/k_payne\">Kurt Payne</a>, developer of the <a title=\"https://wordpress.org/plugins/p3-profiler/\" href=\"https://wordpress.org/plugins/p3-profiler/\">P3 plugin</a> and GoDaddy&#8217;s Managed WordPress platform</li>\n</ul>\n<p>We discuss changes made after Bob Parsons stepped down as CEO and how they&#8217;ve helped create a new culture within the company. Kurland describes what it&#8217;s like to be the first WordPress evangelist and explains his role in helping to establish relationships with people in the WordPress ecosystem. Payne provides details on GoDaddy&#8217;s <a title=\"https://www.godaddy.com/pro/managed-wordpress-hosting\" href=\"https://www.godaddy.com/pro/managed-wordpress-hosting\">managed WordPress hosting</a> platform and what makes it different from competitors.</p>\n<p>Later in the show, we talk about the decision to <a title=\"http://wptavern.com/godaddy-removes-ticketing-and-email-support-in-favor-of-phone-and-live-chat\" href=\"http://wptavern.com/godaddy-removes-ticketing-and-email-support-in-favor-of-phone-and-live-chat\">remove ticketing and email support</a> in favor of phone and live chat support. We find out the lessons the company learned when it <a title=\"http://wptavern.com/without-notifying-customers-godaddy-and-mediatemple-auto-activate-sidekick\" href=\"http://wptavern.com/without-notifying-customers-godaddy-and-mediatemple-auto-activate-sidekick\">auto activated SIDEKICK</a> on customer&#8217;s sites without notifying them. Near the end of the interview, King shares details on a new product called <a title=\"https://www.godaddy.com/pro\" href=\"https://www.godaddy.com/pro\">GoDaddy Pro,</a> which will make it a lot easier to manage clients on the GoDaddy platform.</p>\n<p>The biggest takeaway from the interview is that, GoDaddy has made and continues to make radical changes. It&#8217;s not the same company of a few years ago. If you&#8217;ve written them off in the past, I encourage you to give them a second look.</p>\n<h2>Stories Discussed:</h2>\n<p><a title=\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\" href=\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\">WordPress 4.2 Will Automatically Enable Pretty Permalinks for New Sites on Installation</a><br />\n<a title=\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\" href=\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\">BuddyPress 2.2 Beta 1 Now Available for Testing</a><br />\n<a title=\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\" href=\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\">Preview the New Design for the WordPress Themes Directory</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a title=\"https://wordpress.org/plugins/wp-email-logs/\" href=\"https://wordpress.org/plugins/wp-email-logs/\">WP Email Logs Plugin</a> stores any email sent by the wp_mail() function in a log file within the database. Details logged include: from and to user ids, from and to email address, mail subject, mail content, component, type, send date, and more.</p>\n<p><a title=\"https://wordpress.org/plugins/internal-notes/\" href=\"https://wordpress.org/plugins/internal-notes/\">Internal Notes</a> adds a simple textarea to the post and page editors where you can add notes regarding a particular post or page.</p>\n<p><a title=\"https://wordpress.org/plugins/facebook-feed/\" href=\"https://wordpress.org/plugins/facebook-feed/\">FaceBook Feed</a> allows you to easily display a customizable feed of your Facebook Page on the frontend of WordPress.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, January 28th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #177:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 00:44:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Post Status: WordPress and the new European Union VAT (Value-Added Tax) rules\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7318\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://poststatus.com/wordpress-vat-eu/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:16493:\"<p>On January 1st, the EU rolled out some new rules for handling the VAT (Value-Added Tax). Let&#8217;s start with the obvious: <strong>I&#8217;m not a lawyer or accountant and this post is just me chit chatting and doesn&#8217;t constitute any official form of advice or whatever other legal disclaimer you need, consider this it.</strong></p>\n<p>For most non-Europeans, the VAT may be unfamiliar, but it is relatively similar to an American sales tax. Until now, non-European businesses could basically ignore VAT (unless they have a European office), and Europeans were able to utilize the VAT rate of their home office. Now, that&#8217;s changing.</p>\n<p>Big companies from outside the EU, of course, found some nice loopholes to avoid high VAT rates even when they have a place of business in Europe; they did so by registering their EU operations in Luxembourg, where the VAT rate is lowest. Then, they only had to pay the Luxembourg rate, no matter who they sold to in the EU. <em>The EU is now changing the rules so that the VAT rate of the consumer&#8217;s purchasing location is the rate applied, no matter where the merchant is from</em>.</p>\n<h3>General VAT information</h3>\n<p>Getting easy to read information on VAT is hard. The purpose of this post is to provide that sort of information within the context of WordPress. However, for the best way to read VAT stuff in general, I&#8217;d recommend <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/2015-digital-services-changes/\">VAT Live</a>.</p>\n<h3>Impact on European businesses</h3>\n<p>This, in a nutshell, is the big deal. Previously, European merchants knew their own VAT rate and applied that rate to everyone they needed to apply it to. Now there are something like 28 different rates in the EU and merchants have to apply them based on the purchaser, not themselves.</p>\n<p>For EU merchants, this sucks. Starting two weeks ago, they now have to track a whole lot of stuff and (theoretically) pay taxes to all sorts of entities. The EU has organizations that help with this, and now there are businesses like <a href=\"http://www.taxamo.com/\">Taxamo</a> that are helping handle the calculations and whatnot for these merchants.</p>\n<p>However, it appears actually complying is <a href=\"http://euvataction.org/2015/01/09/eu-vat-how-did-the-first-week-go-its-not-pretty/\">hard for small businesses and large</a> so far. For Europeans, these rules are a complete mess and is truly going to screw up the digital good economy for European merchants.</p>\n<h3>Impact on non-European businesses</h3>\n<p>For non-European businesses, the new VAT rules are a lot fuzzier.</p>\n<p>In short, nothing has changed. There have been European rules in place since 2003 saying that non-European merchants should pay VAT when selling to European consumers &#8212; even for digital goods. The thing is: <em>they didn&#8217;t enforce this because non-Europeans obviously aren&#8217;t under jurisdiction of European authorities</em>.</p>\n<p><span class=\"pullquote alignright\">So, most merchants not in Europe &#8212; but selling to Europeans &#8212; have ignored existing rules for years, and we still can. But there is a but.</span> According to some places I&#8217;m reading, there is the potential that American and other non-European governments could cooperate and even enforce European VAT rules on its citizens.</p>\n<p><strong>Is this likely? </strong>Heck if I know. I honestly can&#8217;t decide if companies like Taxamo are just trying to churn up fear to get more customers (which is natural) or if Americans and other non-Europeans should really pay attention to VAT.</p>\n<p>My gut tells me this policy is terrible and won&#8217;t last, at least without some kind of revenue floor (like 1 million Euros or the equivalent per year, or something). But that change could be years in the making. What until then?</p>\n<h3>The determining factors and implications</h3>\n<p>In the end, it really depends on how willing you are to roll the dice. In my heart of hearts, I hate the idea of paying a foreign government tax revenue for a digitial good when they have no jurisdiction over me.</p>\n<p>Even &#8220;digital good&#8221; is hard to define, though the UK attempts to <a href=\"https://www.gov.uk/government/publications/revenue-and-customs-brief-46-2014-vat-rule-change-and-the-vat-mini-one-stop-shop-additional-guidance/revenue-and-customs-brief-46-2014-vat-rule-change-and-the-vat-mini-one-stop-shop-additional-guidance#section-2\">define qualified services in this document</a>.</p>\n<p>I mean, I don&#8217;t even have to charge sales tax to other states in the US when Americans buy from me. Ugh. So, I really, really want to just ignore the EU &#8212; as an American at least &#8212; and tell them to screw off and catch me if they can.</p>\n<p>But.</p>\n<p>There are a few buts this time.</p>\n<p><strong>1)</strong> It is risky. Because it is possible that the IRS will collaborate with EU member states to collect tax revenue from American digital merchants, as companies like Taxamo suggest can/will happen. I don&#8217;t want to get hit with some kind of audit or fine from the IRS years down the road.</p>\n<p>A friend did make a good point to me recently, noting that the IRS barely enforces digital goods taxes in the United States, so why would they do so on behalf of a foreign entity?</p>\n<p><strong>2)</strong> Are European buyers breaking the law if I don&#8217;t comply as a seller? I don&#8217;t know, but a friend of mine that is complying brought that up. I can&#8217;t find much documentation on this front, but I wouldn&#8217;t want to cause European customers to break their laws by buying from me if I don&#8217;t comply.</p>\n<p><strong>3)</strong> It makes my product more expensive to European buyers if I comply, and it hurts my feelings as an American (Boston tea party, man!), but realistically, services will &#8212; and already are &#8212; come to save the EU with relatively simple ways to comply.</p>\n<h3>Enforcement and methods for complying</h3>\n<p>From what I can tell, each EU member state has to do its own collecting and enforcing. The EU is the regulating body but not the ones that will put feet on pavement to go and enforce these rules and taxes.</p>\n<p><span class=\"pullquote alignright\">The safe bet seems to be to pay up and deal with it.</span> But I have a feeling you could ignore these rules (if you aren&#8217;t European) and probably get by just fine.</p>\n<p>Alternatively, non-EU merchants could just ignore the EU and don&#8217;t sell to anyone there. Well, I won&#8217;t do that. I have a lot of EU-based readers and (potentially) customers. But I am pissed about these rules; <em>the European Union is hurting small businesses</em>, and the worldwide economy.</p>\n<p>I feel even worse for my EU-based friends. They don&#8217;t even have the option of ignoring EU member states. Penalties for non-compliance for them are even more frightening. They are being excluded as consumers of internationally distributed digital goods and also being pinned down as merchants by these overly cumbersome and irresponsibly drafted rules.</p>\n<h3>Self hosting eCommerce is even harder now</h3>\n<p>One additional implication of all of this is this: it is now even harder to self-host your eCommerce. If you sell at a marketplace like Etsy or ThemeForest, they can better (at least attempt to) manage the VAT rules and keep you safe. Though, from what I&#8217;ve heard, even some big marketplaces are struggling big-time with these new regulations.</p>\n<p>If you sell on your own, you have to figure out new methods on your own or with your software of choice.</p>\n<h3>How to comply with VAT</h3>\n<p>Complying with VAT has turned into a business opportunity, and &#8220;solutions&#8221; are popping up.</p>\n<p>No matter which solution you use, you&#8217;ll need to learn about <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/mini-one-stop-shop-moss/\">VATMOSS</a>. VATMOSS stands for Value-Added Tax Mini One Stop Shop. Basically, you can register with one EU country and thereafter just deal with that country for quarterly &#8220;returns&#8221; or payments.</p>\n<p>If you go through the UK, they have <a href=\"https://www.gov.uk/register-and-use-the-vat-mini-one-stop-shop\">information on registering for VATMOSS</a>.</p>\n<p>The EU member countries will divvy up the differences in taxes collected on their own.</p>\n<p>For non-EU providers, <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/non-eu-providers-vat-e-services-voes/\">VoES</a> (VAT on Electronic Services) is also worth learning about if you&#8217;re providing &#8220;digital services.&#8221;</p>\n<h3>General needs</h3>\n<p>There are some general needs for your store if you&#8217;re going to comply with VAT</p>\n<ul>\n<li>Know <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/2015-digital-services-changes/\">if your style of eCommerce applies</a></li>\n<li>You need to know the country of origin for the buyer</li>\n<li>You need the buyer&#8217;s IP address</li>\n<li>You need the country of origin for the buyer&#8217;s credit card</li>\n</ul>\n<p>Honestly, some WordPress plugins are playing catchup to make these things possible and / or easier.</p>\n<p>In addition to information collection, information storage is also important. You&#8217;re supposed to store this stuff for up to ten years! You are also supposed to have ready-made reports for various authorities.</p>\n<p>Some services are helping with the calculations, others with the whole gambit.</p>\n<h4>Taxamo</h4>\n<p>The number one player I&#8217;ve seen in the VAT compliance market is <a href=\"http://www.taxamo.com/\">Taxamo</a>. They are working hard to market their product, which identifies the consumer&#8217;s country, applies the appropriate VAT, integrates with your eCommerce application, stores and creates reports of your data, and fills out a quarterly return form on your behalf. They do so for 0.20 Euros per transaction, once you surpass 20 transactions per month.</p>\n<p>Taxamo is trying to handle pretty much every part of the handshake for you, from collecting to reporting. Here&#8217;s their flow:</p>\n<p><img class=\"aligncenter size-large wp-image-7350\" src=\"https://poststatus.com/wp-content/uploads/2015/01/taxamo-752x416.jpg\" alt=\"taxamo\" width=\"752\" height=\"416\" /></p>\n<p>Taxamo has a few integrations:</p>\n<p><a href=\"https://wordpress.org/plugins/rcp-taxamo/\">Taxamo for Restrict Content Pro</a></p>\n<p><a href=\"https://easydigitaldownloads.com/extensions/taxamo-integration/\">Taxamo for Easy Digital Downloads</a></p>\n<p><a href=\"http://www.woothemes.com/products/woocommerce-taxamo/\">Taxamo for WooCommerce</a></p>\n<p>EU VAT API</p>\n<p>The <a href=\"https://vatinfo.eu/\">EU VAT API</a> is more hands-on, but probably a nice option for developers looking for a minimilist solution. Developed by Radish Concepts (savvy readers may recognize WordPress community member Coen Jacobs, who works with Radish), the EU VAT API is a simple, but seemingly elegant solution for the calculation of the various EU VAT rates.</p>\n<p>The EU VAT API has WordPress integration plugins for both <a href=\"https://wordpress.org/plugins/woocommerce-vatinfoeu/\">WooCommerce</a> and <a href=\"https://wordpress.org/plugins/edd-vatinfoeu/\">Easy Digital Downloads</a>.</p>\n<p><em>edit: Coen Jacobs tells me that like Taxamo, the EU VAT API also handles more than just rates, but they haven&#8217;t fully documented all of the other features yet.</em></p>\n<h4>Other methods</h4>\n<p>The <a href=\"https://vatapi.com/\">VAT API</a> is another simple API that looks good, but I don&#8217;t know as much about it.</p>\n<h3>Compliance with specific eCommerce systems</h3>\n<p>The big WordPress eCommerce players pretty much all have VAT compliance methods in place by now:</p>\n<p>WooCommerce &#8211; they&#8217;re heavily on the Taxamo bandwagon, and have <a href=\"http://www.woothemes.com/products/woocommerce-taxamo/\">this extension</a>. But there&#8217;s also the <a href=\"https://github.com/radishconcepts/woocommerce-vatinfoeu\">Radish Concepts one</a> noted earlier.They also have a <a href=\"http://www.woothemes.com/products/eu-vat-number/\">super slim extension</a> where customers can enter an EU VAT number, that uses an API to calculate the cost. There&#8217;s a <a href=\"https://wordpress.org/plugins/woocommerce-eu-vat-assistant/\">free plugin on WordPress.org</a> too. Also, <a href=\"http://develop.woothemes.com/woocommerce/2014/11/attention-theme-authors-frontend-changes-ahead-in-woocommerce-2-3/\">WooCommerce 2.3 is beefing up some features</a> that will make it better capable for handling some of the more nuanced VAT rules.</p>\n<p>Easy Digital Downloads &#8211; Has a lot of options. Here&#8217;s their <a href=\"https://easydigitaldownloads.com/extensions?extension_s=VAT&action=extension_search\">site tag for &#8220;VAT&#8221; that lists the options</a>.</p>\n<p><a href=\"http://getshopped.org\">WP E-Commerce</a> &#8211; Has one coming, but it&#8217;s not complete yet.</p>\n<p><a href=\"http://jigoshop.com\">Jigoshop</a> &#8211; I can&#8217;t find any references to the new VAT rules, but since these guys are based in Europe, surely they either have something or are working on it.</p>\n<p><a href=\"https://ithemes.com/2014/12/30/ithemes-exchange-vat-add-updated-ready-vat-moss/\">iThemes Exchange</a> &#8211; Has what appears to be an in-house VAT add-on, up to date for 2015.</p>\n<h3>Who is complying so far?</h3>\n<p>I was interested in who is actually complying with the new VAT rules so far &#8212; both Europeans and non-Europeans.</p>\n<p>I&#8217;ve received 120 votes from shop owners selling digital goods in my poll. I think that&#8217;s a pretty great response. Here are the results:</p>\n<p><strong>Question: Do you have an eCommerce store that sells digital goods? Are you complying with the new EU VAT rules?</strong></p>\n<p><img class=\"aligncenter size-large wp-image-7351\" src=\"https://poststatus.com/wp-content/uploads/2015/01/VAT-poll-compliance-752x322.jpg\" alt=\"VAT-poll-compliance\" width=\"752\" height=\"322\" /></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Count</th>\n<th>%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I&#8217;m a European merchant and complying with new VAT rules</td>\n<td>27</td>\n<td>22.5%</td>\n</tr>\n<tr>\n<td>I&#8217;m a European merchant and not yet complying with new VAT rules</td>\n<td>20</td>\n<td>16.67%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and complying with new VAT rules for European customers</td>\n<td>6</td>\n<td>5%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and not complying with new VAT rules for European customers</td>\n<td>31</td>\n<td>25.83%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and I no longer sell to European customers</td>\n<td>12</td>\n<td>10%</td>\n</tr>\n<tr>\n<td>I don&#8217;t know what you&#8217;re talking about</td>\n<td>3</td>\n<td>2.5%</td>\n</tr>\n<tr>\n<td>I haven&#8217;t decided what to do yet</td>\n<td>11</td>\n<td>9.17%</td>\n</tr>\n<tr>\n<td>Other:</td>\n<td>10</td>\n<td>8.33%</td>\n</tr>\n</tbody>\n</table>\n<p>I guess the numbers aren&#8217;t terribly surprising, though I am quite surprised by how many Europeans are not complying.</p>\n<h3>Now what?</h3>\n<p>I think most of us will agree that these rules suck. The most organized thing I&#8217;ve seen to protest them is the <a href=\"http://euvataction.org/\">EU VAT Action site</a>. You should go there and see how to petition and participate in the debate if you are upset by these changes.</p>\n<p>Quite personally, I have to figure out what to do. My primary reasoning for doing this research was to decide if I need to comply. I wanted to share what I&#8217;ve learned with you.</p>\n<p>In addition to the poll I did, I also asked some friends running businesses. I think you&#8217;d be surprised just how many &#8220;big&#8221; American companies aren&#8217;t complying (big in the sense of the WordPress space).</p>\n<p>It does keep coming back to me, what one friend told me about how easy it was to register for VATMOSS and get his shop setup though. I guess I have a few more days to decide.</p>\n<p>If you haven&#8217;t figured out what you&#8217;re going to do with your shop yet, I hope this has helped. If you plan to sell some digital goods in the future, this should be a decent guide to get the lay of the land in terms of selling digital goods with WordPress and complying with the new European VAT rules.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 21:52:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Matt: Venture Capital in the 80s\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44595\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"http://ma.tt/2015/01/venture-capital-in-the-80s/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:198:\"<p>For the best explanation of what&#8217;s going on with capital markets now <a href=\"http://reactionwheel.net/2015/01/80s-vc.html\">it might be best to look to Venture Capital in the 1980s</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 18:30:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"WPTavern: Papi Project Adds a Page Type API to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37377\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wptavern.com/papi-project-adds-a-page-type-api-to-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4177:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/pages.jpg\" rel=\"prettyphoto[37377]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/pages.jpg?resize=1024%2C498\" alt=\"photo credit: zenobia_joy - cc\" class=\"size-full wp-image-37381\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/zenobia_joy/5509949256/\">zenobia_joy</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc/2.0/\">cc</a>\n<p>The <a href=\"http://codex.wordpress.org/Pages\" target=\"_blank\">Pages</a> feature, although generated dynamically in WordPress, was designed for use with static, evergreen content. Pages have always been somewhat simpler than posts, which received a major boost to flexibility when custom <a href=\"http://codex.wordpress.org/Post_Types\" target=\"_blank\">post types</a> came on the scene in version 3.0.</p>\n<p><a href=\"https://twitter.com/frozzare\" target=\"_blank\">Fredrik Forsmo</a>, a systems developer in Stockholm, Sweden, wanted to do more with pages and decided that WordPress needs a Page Type API. He created <a href=\"https://wp-papi.github.io/\" target=\"_blank\">Papi</a>, an open source project that offers a less traditional approach to working with fields and page types.</p>\n<p>&#8220;Papi was started because creating page types didn&#8217;t exists in a good way,&#8221; Forsmo said. &#8220;<a href=\"https://wordpress.org/plugins/advanced-custom-fields/\" target=\"_blank\">ACF</a> and other plugins only support custom fields on different post types. This is not a good way to create page types. Additionally, the URL structure isn&#8217;t ideal with custom post types.&#8221;</p>\n<p>Inspired by the lack of adequate solutions to address this need, Forsmo spent a year developing Papi in his spare time. The idea for the project is based on EPiServer&#8217;s <a href=\"http://pagetypebuilder.codeplex.com/\" target=\"_blank\">Page Type Builder</a>, which offers a more object oriented method of building pages. Papi brings this same approach to WordPress.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/add-new-page-type-view.png\" rel=\"prettyphoto[37377]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/add-new-page-type-view.png?resize=1025%2C448\" alt=\"add-new-page-type-view\" class=\"aligncenter size-full wp-image-37397\" /></a></p>\n<p>Essentially, it allows you to create page types using an existing post type or using custom post types. It doesn&#8217;t have an admin user interface for adding all the fields. &#8220;Papi uses classes in PHP, where one class represents one page type and in your class you add all fields you need,&#8221; Forsmo explained.</p>\n<p>After running it in production, he discovered that it&#8217;s easy to work with when it&#8217;s necessary to add new fields. Using Papi&#8217;s &#8220;page&#8221; post type, you can create different page types with different fields on the same post type, while maintaining a clean URL structure.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/start-page-example-page.png\" rel=\"prettyphoto[37377]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/start-page-example-page.png?resize=1025%2C594\" alt=\"start-page-example-page\" class=\"aligncenter size-full wp-image-37401\" /></a></p>\n<p>Forsmo believes that this is the way pages should work in WordPress. Although I don&#8217;t know if the idea will catch on with developers, the project seems useful for those rare scenarios where custom post types aren&#8217;t a good match.</p>\n<p>Papi isn&#8217;t on the WordPress plugin directory but can be downloaded from <a href=\"https://wp-papi.github.io/\" target=\"_blank\">GitHub</a>. It&#8217;s also available as a <a href=\"https://packagist.org/packages/wp-papi/papi\" target=\"_blank\">Composer package</a>. Papi currently works on WordPress 3.8+ (3.9+ if on HHVM) and PHP 5.3 and above. If you want to experiment with it, Forsmo has written <a href=\"http://papi.readthedocs.org/en/latest/\" target=\"_blank\">documentation</a> on how to get started, how to add page type meta boxes and options, functions available to use in your page type, and how to register a page type directory.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 16:28:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: Edit BuddyPress Activity Posts on the Front End\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37251\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/edit-buddypress-activity-posts-on-the-front-end\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3849:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-edit-activity.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-edit-activity.png?resize=1025%2C465\" alt=\"buddypress-edit-activity\" class=\"aligncenter size-full wp-image-37345\" /></a></p>\n<p>Earlier this week, the folks at <a href=\"http://www.buddyboss.com/\" target=\"_blank\">BuddyBoss</a> released <a href=\"http://wptavern.com/new-buddypress-global-search-plugin-adds-unified-search-of-all-buddypress-components\" target=\"_blank\">BuddyPress Global Search</a>, a new plugin that allows users to search through every BuddyPress component. The company&#8217;s founder, Michael Eisenwasser, was inspired to give back to the project by creating a string of free plugins that benefit the whole community.</p>\n<p><a href=\"https://wordpress.org/plugins/buddypress-edit-activity/\" target=\"_blank\">BuddyPress Edit Activity</a> is the team&#8217;s latest contribution. This plugin is another handy tool that is likely to be useful for a wide range of social networks. It allows users to edit their activity posts and replies on the front end, similar to the &#8220;Edit Post&#8221; feature that you see available on Facebook.</p>\n<p>Once installed, you&#8217;ll find a new edit option added the activity meta buttons.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-edit-button.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-edit-button.png?resize=1025%2C351\" alt=\"buddypress-activity-edit-button\" class=\"aligncenter size-full wp-image-37348\" /></a></p>\n<p>Clicking the button allows users to edit their own activity updates and replies. It gives them the opportunity to correct errors or add to their posts, instead of having to completely delete the post and start over.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-editing.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-editing.png?resize=1025%2C289\" alt=\"buddypress-activity-editing\" class=\"aligncenter size-full wp-image-37360\" /></a></p>\n<p>The plugin&#8217;s settings screen lets administrators turn editing on/off for activity posts and replies, and includes the ability to limit the feature to admins only. The panel also has an option to disable editing after a set number of minutes, a feature often available in plugins that extend WordPress comments. Setting it to zero makes comments editable indefinitely.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/bp-activity-fronted-edit-settings.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/bp-activity-fronted-edit-settings.png?resize=1025%2C524\" alt=\"bp-activity-fronted-edit-settings\" class=\"aligncenter size-full wp-image-37362\" /></a></p>\n<p>I tested the plugin and found that it works well and fits in like a natural part of BuddyPress. It automatically adapts to your current active theme and doesn&#8217;t force any obtrusive styles on the activity stream.</p>\n<p><a href=\"https://wordpress.org/plugins/buddypress-edit-activity/\" target=\"_blank\">BuddyPress Edit Activity</a> may seem like a small thing but it&#8217;s one of those extensions that adds an intuitive feature that greatly improves interaction between users. This is a feature that users have grown to expect based on experience with other social networks.</p>\n<p>BuddyBoss is hitting home runs with its most recent plugin releases, both of which are useful for nearly any type of BuddyPress network. The theme shop is strategically positioning itself for becoming more well-known in the market with its indispensable free plugins.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 07:10:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WPTavern: WP Engine Open Sources Mercury Vagrant for Running WordPress on HHVM and PHP-FPM\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37296\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"http://wptavern.com/wp-engine-open-sources-mercury-vagrant-for-running-wordpress-on-hhvm-and-php-fpm\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3808:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/11/wp-engine.jpg\" rel=\"prettyphoto[37296]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/11/wp-engine.jpg?resize=1025%2C427\" alt=\"wp-engine\" class=\"aligncenter size-full wp-image-34106\" /></a></p>\n<p><a href=\"http://wpengine.com/\" target=\"_blank\">WP Engine</a> Labs, in collaboration with the <a href=\"https://github.com/Varying-Vagrant-Vagrants/VVV\" target=\"_blank\">VVV</a> creators at <a href=\"http://10up.com/\" target=\"_blank\">10up</a>, released <a href=\"https://github.com/wpengine/hgv\" target=\"_blank\">Mercury Vagrant (HGV)</a> today.  The new open source Vagrant configuration uses HHVM to serve PHP code. It also includes the ability to run your development site using standard PHP to test against for comparison.</p>\n<p>Mercury Vagrant is useful for any WordPress developer who wants to develop on top of HHVM. Last year, WP Engine partnered with 10up to launch Mercury, its new <a href=\"http://wptavern.com/wp-engine-partners-with-10up-to-launch-enterprise-hhvm-wordpress-hosting-platform\" target=\"_blank\">enterprise HHVM WordPress hosting platform</a>. Mercury Vagrant was commissioned to help WP Engine customers with local development, but it was not designed to be specific to the host&#8217;s infrastructure. It is GPL-licensed and meant to be used with any host.</p>\n<p>After provisioning your VM, Mercury Vagrant includes the following:</p>\n<ul>\n<li><a href=\"http://percona.com/\" target=\"_blank\">Percona DB</a></li>\n<li><a href=\"http://php-fpm.org/\" target=\"_blank\">PHP-FPM</a></li>\n<li><a href=\"http://hhvm.com/\" target=\"_blank\">HHVM</a></li>\n<li><a href=\"http://nginx.com/\" target=\"_blank\">Nginx</a></li>\n<li><a href=\"http://varnish-cache.org/\" target=\"_blank\">Varnish</a></li>\n<li><a href=\"http://memcached.org/\" target=\"_blank\">Memcached</a></li>\n</ul>\n<p>HGV creates four different sites, with built-in documentation, for running code with either HHVM or PHP-FPM:</p>\n<ul>\n<li><a href=\"http://hgv.dev\" target=\"_blank\">hgv.dev</a> &#8212; General documentation and links for all of the tools</li>\n<li><a href=\"http://hhvm.hgv.dev\" target=\"_blank\">hhvm.hgv.dev</a> &#8212; A new WordPress installation running on HHVM</li>\n<li><a href=\"http://php.hgv.dev\" target=\"_blank\">php.hgv.dev</a> &#8212; A new WordPress installation running on PHP-FPM (PHP 5.5)</li>\n<li><a href=\"http://admin.hgv.dev\" target=\"_blank\">admin.hgv.dev</a> &#8212; Useful administrative tools (phpMyAdmin, etc.)</li>\n</ul>\n<p>It also includes URLs for testing Varnish caching:</p>\n<p><a href=\"http://admin.hgv.dev\" target=\"_blank\">cache.php.hgv.dev</a><br />\n<a href=\"http://cache.hhvm.hgv.dev\" target=\"_blank\">cache.hhvm.hgv.dev</a></p>\n<p>WP Engine labs is committed to supporting and improving Mercury Vagrant for the foreseeable future. The team has collaborated with Facebook to resolve many of the previous issues of using HHVM with WordPress sites. Even if you&#8217;re using different host that offers HHVM, this open source Vagrant configuration is a solid, professionally-supported tool for local testing. If you need help <a href=\"http://wpengine.com/mercury/how-to-start/\" target=\"_blank\">getting started</a>, WP Engine created a visual walk through and tutorial videos to help you set up your local machine with HHVM with Vagrant.</p>\n<p><a href=\"https://github.com/wpengine/hgv\" target=\"_blank\">Mercury Vagrant</a> is a community tool that will go a long way towards helping developers become more familiar with running sites on HHVM. <a href=\"http://wpengine.com/mercury\" target=\"_blank\">Benchmarks comparing WordPress sites on HHVM vs PHP-FPM</a> indicate a 600% performance increase with HHVM. Dramatic performance increases in this range should have more hosts looking to add support for HHVM in the near future.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 22:02:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: I Love Composer, I Love WordPress, But I Object to a Marriage\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37262\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/i-love-composer-i-love-wordpress-but-i-object-to-a-marriage\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:10606:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/composer.jpg\" rel=\"prettyphoto[37262]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/composer.jpg?resize=1024%2C509\" alt=\"photo credit: Jesse Kruger - cc\" class=\"size-full wp-image-37299\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/jessekruger/390534235/\">Jesse Kruger</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc/2.0/\">cc</a>\n<hr />\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/david-hayes.jpg\" rel=\"prettyphoto[37262]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/david-hayes.jpg?resize=150%2C150\" alt=\"david-hayes\" class=\"alignright size-thumbnail wp-image-37266\" /></a><br />\nThis post was contributed by <a href=\"http://www.davidbhayes.com/\" target=\"_blank\">David Hayes</a>. David loves solving difficult problems at <a href=\"http://pressupinc.com\">Press Up</a>, publishing new WordPress tutorials at <a href=\"http://wpshout.com\">WPShout</a>, and eating cold cereal with milk.</p>\n<hr />\n<p>The developer tool <a href=\"https://getcomposer.org/\" target=\"_blank\">Composer</a> has been sneaking in around the fringes of the WordPress community. <a href=\"http://composer.rarst.net/\" target=\"_blank\">Rarst</a> is a fan. The <a href=\"http://roots.io/using-composer-with-wordpress/\" target=\"_blank\">Roots theme framework</a> folks like it. There&#8217;s support infrastructure like <a href=\"http://wpackagist.org/\" target=\"_blank\">WPackagist</a>.</p>\n<p>Composer is widely known in the wider PHP development space. Developer types who mostly focus on WordPress probably have some passing familiarity with it. Maybe you ran across a project I mentioned, or heard about it at a WordCamp or meet-up. Or maybe you&#8217;ve seen Sarah&#8217;s intermittent coverage here at the Tavern when projects — most recently <a href=\"http://wptavern.com/buddypress-2-2-will-add-support-for-composer\" target=\"_blank\">BuddyPress</a> — take steps to support it.</p>\n<p>Composer is awesome. I think it&#8217;s the most exciting thing to happen to PHP in the last five years. WordPress is awesome. I&#8217;ve been using WordPress for nearly a decade now, and I wouldn&#8217;t recommend people use anything else for a beautiful, feature-rich publishing experience for the web. But I don&#8217;t think the two fit together as well as some would like, and that&#8217;s our focus.</p>\n<p>But don&#8217;t worry if you don&#8217;t know what Composer is, we&#8217;ll start with that. Then we&#8217;ll cover a bit about why WordPress is great and explain where the two fit together, sometimes a bit awkwardly. Finally, we&#8217;ll look at how and when it makes sense to incorporate Composer into WordPress work.</p>\n<h3>What is Composer Anyway?</h3>\n<p>In the very simplest version, Composer is dependency management for PHP. That is, it&#8217;s the way that I can pull in external code — libraries, classes, whatever you want to call them — that other people wrote, make sure it&#8217;s loaded for me to use, and never need to worry about it again. Many other languages have had solutions to this problem for awhile, of varying quality. In Ruby, <a href=\"https://rubygems.org/\" target=\"_blank\">Gems</a> are very well known. For front-end JavaScript development, there&#8217;s some standardization on Bower. Python&#8217;s pip has been around awhile. All of these things have similar roles, but the specific implementation is different.</p>\n<p>The big problem dependency managers solve is the way most people deal with dependencies — other people&#8217;s code they&#8217;re using to solve a problem. Without a tool like Composer, it is sloppy and haphazard. When you want a user-friendly date handling library, you go to your search engine, find a few hundred lines of code, copy them into a file, try your best to figure out how to work with them, and never ever know or care when the author of those lines later realizes they created a giant performance bottleneck or security vulnerability.</p>\n<p>Dependency managers also take care of the issue that some code you want to use may itself rely on other libraries, classes, etc., that you aren&#8217;t already using. This leads to big headaches. And in solving these issues, Composer also makes sure that it gets versions of all that software that work for all the various libraries your application makes use of.</p>\n<p>So with Composer, you&#8217;re saved from a lot of copy-pasting, you get super-powers about dependency issues, and you&#8217;re also given a much easier path to get performance improvements, security patches, new features, and so on.</p>\n<p>So you can, for example, tell Composer you want to use a nice date parsing library like <a href=\"https://github.com/briannesbitt/Carbon\" target=\"_blank\">Carbon</a>, set your code up to load the Composer dependencies for you before you use them (with a simple include &#8216;vendor/autoload.php\'; to use this article&#8217;s only snippet of PHP) and you&#8217;re set to go. And when Carbon, or another dependency, gets updated, you&#8217;ll be able to quickly get the latest version with a simple run of Composer&#8217;s update command.</p>\n<h3>What Makes WordPress Great</h3>\n<p>Since you&#8217;re reading WPTavern, I’ll just say, succinctly, that WordPress is an easy-to-use CMS with a rich ecosystem of plugins and themes that make it easy to accomplish a wide variety of goals.</p>\n<p>WordPress is made to be easy-to-use — specifically, for the end user. An average WordPress user, who is put a little on edge by the mention of PHP code, is still able to easily change the look or behavior of their site just by installing a new theme and a few of the thousands of great plugins out there, right from the simple user interface. Even for commercial plugins and themes, the user can probably rely on few-click updates. Users get security updates to their core WordPress code without even needing to think about it.</p>\n<h3>How Composer and WordPress Can Work Together</h3>\n<p>As Josh Pollock called out in <a href=\"http://torquemag.io/improving-wordpress-development-workflow-composer/\" target=\"_blank\">a great article about Composer</a>, there are three basic ways WordPress and Composer can be combined:</p>\n<ul>\n<li>To manage dependencies for a theme or a plugin you’re developing</li>\n<li>To manage your themes and plugins used on a site</li>\n<li>For total site dependency management</li>\n</ul>\n<p>We&#8217;ll take on the last two first, as they&#8217;re the most common way in which people are talking about Composer.</p>\n<h3>Why Composer and WordPress Aren&#8217;t as Compatible as Peanut Butter and Jelly</h3>\n<p>So WordPress is great and easy to use for slightly-more-technical-than-average people. Composer is great — really really great — for developers. Don&#8217;t two great things make a new even greater thing? I mean: I love peanut butter, and I love jelly, and I think a peanut butter and jelly sandwich is one of the top ten foods invented in America. So why don&#8217;t I love the combination of Composer and WordPress?</p>\n<p>It&#8217;s not that they&#8217;re useless together. I think they can work together quite well, but I don&#8217;t think the solution of &#8220;run your whole WordPress site with Composer&#8221; that&#8217;s creeping into more and more places works well. It takes care of one problem — WordPress being awkward to manage and deploy for developer-types — by creating another — a less-than-great experience for the mortals left with the WordPress site who just want to install this new plugin.</p>\n<p>Basically, in trying to cram WordPress into Composer we’re forcing a square peg into a round hole. WordPress’ focus on end-user ease-of-use — just jump into the admin area and search for a plugin on the WordPress.org repository, or upload the Zip archive you got from the seller — is conceptually at odds with using Composer to install WordPress.</p>\n<p>The change of behavior, and frankly the greater knowledge required, makes it the opposite of a simple experience for most. For a site with dedicated and knowledgeable developers or admins around 24/7, that’s possibly a wise trade off, but for most WordPress sites I see, that’s a losing combination.</p>\n<h3>When Composer and WordPress are a Good Combination</h3>\n<p>Even for most WordPress cases, I think there&#8217;s one place where Composer&#8217;s great: when you have some dependencies in a theme or plugin. It&#8217;s the combination of WordPress and Composer I&#8217;ve tried repeatedly and recommend heartily. It is brilliant. When you&#8217;ve got a project that you know doesn&#8217;t really need to support down to PHP 5.2, and where you really do want some helper code, Composer is fantastic as a way to get that external code and seamlessly keep it up to date. (Autoloading, a Composer feature which we&#8217;ve ignored until this point, is also a big perk.)</p>\n<p>For plugin or theme development, I think Composer is great. If you&#8217;re making a plugin that would benefit from a great date-parsing library like Carbon, <a href=\"https://github.com/thephpleague/commonmark\" target=\"_blank\">a Markdown parser</a>, or something else, by all means use Composer to pull that in. For more WordPress specific stuff, such as <a href=\"https://github.com/WebDevStudios/CMB2\" target=\"_blank\">CMB2</a> or <a href=\"https://github.com/thomasgriffin/TGM-Plugin-Activation\" target=\"_blank\">TGM Plugin Activation</a>, it&#8217;s far better to pull that from Composer than an old-school copy and paste.</p>\n<h3>There&#8217;s a Time and a Place for Composer</h3>\n<p>WordPress and Composer aren’t useless together; far from it. But the &#8220;run your whole WordPress site with Composer&#8221; solution is only right for developer-intensive use of WordPress. If you&#8217;re using something like <a href=\"http://capistranorb.com/\" target=\"_blank\">Capistrano</a> for deployments already, go ahead and slot Composer right in beside it. For casual WordPress users, even those who&#8217;ve made or modified a theme or plugin before, Composer is most likely to end up feeling like awkward-to-integrate overkill.</p>\n<p>As a developer, you should know how to use Composer to take care of complex dependencies inside of a plugin or theme and then package up your Composer dependencies in a way that is invisible to the end user. Let them be blissfully unaware that you&#8217;ve used Composer at all. Let them keep that smooth and comfortable WordPress flow with core security and easy updates. That way we get the best of both!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 19:51:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: The Features as Plugins First Model Is a Mess\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=33335\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/the-features-as-plugins-first-model-is-a-mess\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7987:\"<p>Released in late 2013, <a title=\"http://wptavern.com/wordpress-3-8-parker-released\" href=\"http://wptavern.com/wordpress-3-8-parker-released\">WordPress 3.8</a> was packed with new features including, a new theme browser experience, widgets area chooser, and a redesign of the backend. It&#8217;s also the first release to include a feature using a new formal development process called <strong>features-as-plugins</strong> first. The backend redesign started off as a plugin called MP6 with <a title=\"https://make.wordpress.org/design/2013/03/09/as-a-continuation-of-the-work-begun-in/\" href=\"https://make.wordpress.org/design/2013/03/09/as-a-continuation-of-the-work-begun-in/\">development beginning</a> in March, 2013.</p>\n<p>Prior to MP6, features were largely developed inside of core during the development cycle. This method caused some versions to be delayed, as was <a title=\"https://make.wordpress.org/core/version-3-6-project-schedule/\" href=\"https://make.wordpress.org/core/version-3-6-project-schedule/\">the case for WordPress 3.6</a>. The success of MP6 proved that by developing core features as plugins first, they were easier to test, manage, and merge into core at the appropriate time. Since adopting the development process, at least seven features have <a title=\"https://make.wordpress.org/core/features-as-plugins/\" href=\"https://make.wordpress.org/core/features-as-plugins/\">landed in core</a>. However, as an outsider looking in, the process seems to be falling apart.</p>\n<h2>MP6 Set The Bar</h2>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2013/10/mp6.jpg\" rel=\"prettyphoto[33335]\"><img class=\"size-full wp-image-10695\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2013/10/mp6.jpg?resize=800%2C452\" alt=\"MP6 WordPress Admin Plugin\" /></a>MP6 WordPress Admin Plugin\n<p>Each week, Matt Mullenweg and Matt Thomas released a new version for people to test. They also kept <a title=\"https://make.wordpress.org/design/tag/mp6/\" href=\"https://make.wordpress.org/design/tag/mp6/\">everyone updated</a> on what changed and left the comment form open to solicit feedback. This made it easy for people to participate in the development and testing process. By using P2 and the comment section, it was a lot easier to provide feedback. Since MP6 was a plugin, testing it was as easy as installing it on a stable version of WordPress.</p>\n<h2>The Lack of a Testing Audience</h2>\n<p>MP6 was available for download on the WordPress plugin directory. This made it accessible to anyone who wanted to test it. Recent plugins like the <a title=\"https://github.com/johnbillion/wp-session-manager\" href=\"https://github.com/johnbillion/wp-session-manager\">User Session Manager</a> by John Blackbourn don&#8217;t have any P2 posts on the Make WordPress Core site. As with several other features, discussion took place within a <a title=\"https://core.trac.wordpress.org/ticket/30264\" href=\"https://core.trac.wordpress.org/ticket/30264\">trac ticket</a>. Development of the plugin was handled on Github until it received a pass to be merged into core. Having a feature plugin only available on Github and a lack of communication surrounding the feature prevents a lot of people from potentially being part of the testing group.</p>\n<p>WordPress lead developer, Ryan Boren, <a title=\"https://make.wordpress.org/core/2014/11/03/open-update-thread/#comment-20735\" href=\"https://make.wordpress.org/core/2014/11/03/open-update-thread/#comment-20735\">noted in an open thread</a> in November of 2014, that when it comes to gathering a testing audience, no feature plugin has reached the standards set by MP6. For plugins to be merged into core, Boren suggested the following items should be met:</p>\n<ul>\n<li>Be present and up-to-date in the plugin directory.</li>\n<li>Be as ready to go on mobile as they are on desktop.</li>\n<li>Have visual records for major flows through all new interfaces on all devices.</li>\n<li>Have mature UI that isn’t going to derail the release train.</li>\n<li>Have a history of posting weekly updates to make/core.</li>\n<li>Have a history of regular plugin directory updates.</li>\n<li>Have a testing audience.</li>\n<li>Publish a merge consideration post on make/core complete with visual records and other diligence.</li>\n<li>Exist for at least one release cycle. Plugins created at the beginning of a release cycle should not be considered for merge until the next release.</li>\n</ul>\n<p>Several feature plugins fail to adhere to many of these proposed guidelines. In June of 2014, Andrew Nacin added a &#8220;<a title=\"http://wptavern.com/wordpress-trunk-adds-new-beta-testing-tab-to-plugins-screen\" href=\"http://wptavern.com/wordpress-trunk-adds-new-beta-testing-tab-to-plugins-screen\">Beta Testing</a>&#8221; tab to the add plugins screen for those who use WordPress trunk. The tab lists <a href=\"http://make.wordpress.org/core/features-as-plugins/\" target=\"_blank\">Feature Plugins</a> that are available for testing.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/FeaturedPlugins.png\" rel=\"prettyphoto[33335]\"><img class=\"size-full wp-image-37253\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/FeaturedPlugins.png?resize=1025%2C404\" alt=\"Featured Plugin Development Looks Dead\" /></a>Feature Plugin Development Looks Dead\n<p>Based on the results in the screenshot, it looks like every feature plugin is dead in the water, including the WP API. However, if you look at the activity for <a title=\"https://github.com/WP-API/WP-API\" href=\"https://github.com/WP-API/WP-API\">WP API on Github</a>, there&#8217;s plenty of development taking place. How can more people participate in the testing process if feature plugins are not routinely updated and available for download in the directory? This needs to change sooner rather than later.</p>\n<h2>Feature Plugins are More Like Experiments</h2>\n<p>Feature plugins are not guaranteed to be added to WordPress. Instead, the process is similar to a lab with each one being an experiment. Sometimes a plugin won&#8217;t be added but parts of it will. For example, many of the improvements to the post editor in 3.9, 4.0, and 4.1 are derived from the <a title=\"https://wordpress.org/plugins/wp-front-end-editor/\" href=\"https://wordpress.org/plugins/wp-front-end-editor/\">Front-end Editor</a>. Maybe the core team should think about renaming them to <strong>feature experiments</strong> as it&#8217;s more representative of what they really are.</p>\n<h2>Project Management</h2>\n<p>When I brought up the subject of feature plugin development at the January 7th core development meeting, Scott Taylor <a title=\"https://wordpress.slack.com/archives/core/p1420669524004536\" href=\"https://wordpress.slack.com/archives/core/p1420669524004536\">made an excellent point</a>, &#8220;F<span class=\"message_content\">eatures-as-plugins often become Projects without requirements or tasks, which leads to a non-schedule, and then often require all-or-nothing to go in.&#8221; Feature plugins are generally driven by one or two people who might be good developers, but lack project management skills. It&#8217;s almost like someone needs to constantly shepherd feature plugins to make sure they&#8217;re following a schedule and keeping them all on the same page.</span></p>\n<h2>The Process Needs to be Fixed</h2>\n<p>It&#8217;s clear that the feature plugin development process is disjointed at best. Communication is lacking, synchronized development between plugins on Github and WordPress.org is non-existent, and some plugins are merged too quickly. If users are to receive the maximum benefits from the experimental process, it needs to be orchestrated better. At least the core team is <a title=\"https://make.wordpress.org/core/2015/01/13/feature-plugins-in-4-2-and-beyond/\" href=\"https://make.wordpress.org/core/2015/01/13/feature-plugins-in-4-2-and-beyond/\">aware of the problems</a> and is working towards improving the situation for the 4.2 development cycle.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 19:20:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Matt: Futuristic Predictions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44568\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/01/futuristic-predictions/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:336:\"<p>Yesterday&#8217;s post was a bit of a downer, so here io9 lists <a href=\"http://io9.com/the-most-futuristic-predictions-that-came-true-in-2014-1674887659\">The Most Futuristic Predictions That Came True In 2014</a>, including technologically-assisted telepathy, 3d printing in space, laser weapons, and landing a robot on a comet.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 15:15:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"WPTavern: Justin Tadlock Joins Forces with Emil Uzelac to Provide WordPress Theme Review as a Service\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37204\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"http://wptavern.com/justin-tadlock-joins-forces-with-emil-uzelac-to-provide-wordpress-theme-review-as-a-service\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5464:\"<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/red-pen.jpg\" rel=\"prettyphoto[37204]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/red-pen.jpg?resize=1024%2C500\" alt=\"photo credit: pollas - cc\" class=\"size-full wp-image-37241\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/pollas/526544001/\">pollas</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>Last week, Emil Uzelac <a href=\"http://wptavern.com/emil-uzelac-launches-new-wordpress-theme-review-service\" target=\"_blank\">launched a new theme review service</a> targeted at WordPress developers and companies that want their products to adhere to best practices. Just one week after launch, <a href=\"http://justintadlock.com/\" target=\"_blank\">Justin Tadlock</a>, a fellow member of the WordPress.org theme review team and author of the <a href=\"http://themehybrid.com/hybrid-core\" target=\"_blank\">Hybrid Core</a> framework, is joining forces with Uzelac to provide professional reviews to customers.</p>\n<p>&#8220;I’m interested in seeing where this goes. We (DevPress when I was there) were going to offer this service. It never took off because the business itself didn’t,&#8221; Tadlock <a href=\"http://wptavern.com/emil-uzelac-launches-new-wordpress-theme-review-service#comment-62455\" target=\"_blank\">commented</a> on the original announcement. In the past he has conducted paid reviews privately for commercial theme vendors. Uzelac noticed his interest and pounced on the opportunity to partner with him.</p>\n<p>&#8220;To quote one of my all time favorite businessman, J.C. Penney: &#8216;Growth is never by mere chance; it is the result of forces working together,\'&#8221; Uzelac said. &#8220;Justin and I exchanged a few ideas in my launching interview and that is where I learned from Jeff that he had this idea back in 2011.&#8221;</p>\n<p>Since this idea has been on Tadlock&#8217;s mind for several years, he didn&#8217;t hesitate to get involved. &#8220;It&#8217;s something I pretty much immediately hopped on.  We already have a bit of a working relationship as admins for the Theme Review Team.  I believe it&#8217;s a good fit,&#8221; he said.</p>\n<p>Based on his <a href=\"http://wptavern.com/justin-tadlock-publishes-the-results-of-his-themeforest-experiment\" target=\"_blank\">experience at ThemeForest</a> and his service on the WordPress.org Theme Review Team, Tadlock is convinced that developers of all experience levels can benefit from professional theme review:</p>\n<blockquote><p>Professional theme authors who want to bring the highest quality theme to market need assurance that their code is solid. There&#8217;s nothing worse than spending months building an awesome theme only to have it break for a bunch of users because you missed something minor.  Even the most experienced theme authors (myself included) overlook problems that a fresh, second pair of eyes could easily find.  We have editors for books, newspapers, and so on for the same reason.  Authors, whether they&#8217;re writers or theme developers, are going to miss something.</p></blockquote>\n<p>Although themes have always been critical to the success of WordPress, theme review is just now emerging as a service for which one might want to hire a dedicated professional. Tadlock attributes this to the increasing complexity of theme development. &#8220;Themes are a lot more complex than they were just 5 years ago, for example.  This isn&#8217;t just because theme authors are packing in more stuff,&#8221; he said.</p>\n<p>&#8220;Part of it is because basic WordPress theme development has gotten more complex. WordPress has been packing in a lot of new things in recent years, and themes need to account for a variety of possibilities. Just having someone running through unit tests will be a big help.&#8221;</p>\n<p>Several readers commented on the original announcement to suggest that Uzelac consider offering a certification or badge of some sort for commercial theme authors to display once their themes have passed a professional review. Tadlock is open to the idea but sees it more as a marketing tool for their customers to employ.</p>\n<p>&#8220;That&#8217;s probably a good idea, but I don&#8217;t think that&#8217;s what really matters,&#8221; he said. &#8220;I think the focus should be on giving our clients (theme devs) peace of mind.  Once we are seen as a legit and well-known service, a badge or something will most likely become a useful marketing tool for theme authors.&#8221;</p>\n<p><a href=\"http://themereview.co/\" target=\"_blank\">The Theme Review service</a> has already gained traction, and Uzelac reports that he completed his fourth review today. &#8220;I&#8217;ve taken only what I could handle alone and in time. Now that Justin is in, we will do more,&#8221; he said. &#8220;In only few days after the initial launch the response and support has been overwhelming. This confirms that our community is in great need of experienced reviewers.&#8221;</p>\n<p>When it comes to WordPress theme review skills and experience, Uzelac and Tadlock&#8217;s forces combined are unparalleled in the WordPress community. Tadlock hopes that together they can expand their efforts to serve more commercial theme providers. &#8220;I&#8217;d like to see regular business from some of the major theme shops,&#8221; he said. &#8220;That&#8217;s probably the biggest goal I&#8217;d shoot for at the moment.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 23:41:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: VersionPress RC1 Released to Early Backers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37215\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/versionpress-rc1-released-to-early-backers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3708:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/06/VersionPressFeaturedImage.png\" rel=\"prettyphoto[37215]\"><img class=\"size-full wp-image-24643\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/06/VersionPressFeaturedImage.png?resize=650%2C200\" alt=\"Version Control Featured Image\" /></a>Version Control Featured Image\n<p><a title=\"http://versionpress.net/\" href=\"http://versionpress.net/\">VersionPress</a>, the plugin that allows you to <a title=\"http://wptavern.com/versionpress-hopes-to-bring-version-control-to-the-masses\" href=\"http://wptavern.com/versionpress-hopes-to-bring-version-control-to-the-masses\">revert changes to a site</a> without having to restore a backup, is <a title=\"http://blog.versionpress.net/2015/01/announcing-early-access-program/\" href=\"http://blog.versionpress.net/2015/01/announcing-early-access-program/\">being released</a> to early backers. Near the middle of 2014, VersionPress creators <a href=\"https://twitter.com/borekb\">Borek Bernard</a> and <a href=\"https://twitter.com/JanVoracek\">Jan Voráček</a> created a crowdfunding campaign asking for $30K.</p>\n<p>The campaign started off on a rocky note, as several readers <a title=\"http://wptavern.com/versionpress-adopts-the-gpl-software-license\" href=\"http://wptavern.com/versionpress-adopts-the-gpl-software-license\">questioned what license</a> the plugin would use. Bernard decided to license the plugin using the GPLv2, but the decision was made near the middle of the campaign and the duo missed their goal by $14.5K. However, development continued and, for the past several months, the team has been hard at work getting the product to a point where people can start using it.</p>\n<p>A release candidate will be made available later this week to those who backed the project with $50 or more. If no major issues are reported, the team will release version 1.0 by the end of the month. However, the plugin will not be free to use. Those who want access to version 1.0 and future releases will need to join the <a title=\"http://versionpress.net/#get\" href=\"http://versionpress.net/#get\">early access program</a>. The program tries to strike a balance between making the plugin accessible to anyone who&#8217;s interested and funding development.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/VersionPressEarlyAccessProgramPrices.png\" rel=\"prettyphoto[37215]\"><img class=\"size-full wp-image-37221\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/VersionPressEarlyAccessProgramPrices.png?resize=956%2C308\" alt=\"VersionPress Early Access Program Prices\" /></a>Early Access Program Prices\n<p>VersionPress 1.0 is an initial release and won&#8217;t have all of the planned features such as sync and staging. Instead, those features will be rolled out in future versions of the product. According to their development plan:</p>\n<ul type=\"disc\">\n<li>Version <strong>1.0</strong> will contain all the important <strong>basics</strong> – things like <strong>Undo</strong>, <strong>Rollback</strong>, <strong>automatic change tracking</strong>, support for all the built-in WordPress types, etc.</li>\n<li>Version <strong>2.0</strong> will bring full support for <strong>sync and staging</strong>.</li>\n<li>Versions <strong>3.0</strong>, <strong>4.0</strong> etc. will bring features from the <a href=\"http://docs.versionpress.net/en/release-notes/roadmap\">roadmap</a>.</li>\n</ul>\n<p>I&#8217;m happy to see the duo remain committed to their goal of developing and shipping a working product. I still think VersionPress is a great idea and can&#8217;t wait to see how easy or difficult it is to use. Look for a thorough review on the Tavern sometime in February.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 21:31:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"WPTavern: Is 2015 The Year of WordPress Admin Themes?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37098\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/is-2015-the-year-of-wordpress-admin-themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3370:\"<p>The CPO and partner of <a title=\"http://hmn.md/\" href=\"http://hmn.md/\">Human Made</a>, Noel Tock, <a title=\"https://medium.com/@noeltock/wordpress-in-2015-ed6a4674a608\" href=\"https://medium.com/@noeltock/wordpress-in-2015-ed6a4674a608\">published</a> his WordPress predictions for 2015. His predictions include, custom dashboards, front-end editing, internationalization, and more. This could be the year of admin themes, but I think it largely depends on whether the <a title=\"https://github.com/WP-API/WP-API\" href=\"https://github.com/WP-API/WP-API\">WP API</a> is merged into core.</p>\n<p>Tock predicts we&#8217;ll see a substantial increase in different WordPress backend experiences. Although there are implementations like <a title=\"http://www.happytables.com/\" href=\"http://www.happytables.com/\">Happytables</a> and <a title=\"http://jettyapp.com/\" href=\"http://jettyapp.com/\">Jetty</a> which use the WP API, I don&#8217;t think we&#8217;ll see a lot of adoption until it&#8217;s vetted and merged into core.</p>\n<p>Regarding custom dashboard experiences, Tock makes a great point when he says:</p>\n<blockquote><p>For the most part, premium custom dashboards will fail. If it’s too generic, it likely can’t compete with WP-Admin (which actively pursues <em class=\"markup--em markup--li-em\">one size fits all). </em>On the other hand, if it’s too niche or not very extendable, it won’t be of much use either. A minimal small business dashboard with front-end editing will likely be the most popular seller.</p></blockquote>\n<p>Additionally, I think his advice to those looking to experiment with the API should be considered, &#8220;Don’t create a custom dashboard because you want to change the way it looks, change it because you significantly want to improve the experience of <em class=\"markup--em markup--p-em\">your </em>users.&#8221;</p>\n<p>Jason Schuller&#8217;s admin design for <a title=\"http://wptavern.com/jason-schuller-to-re-enter-wordpress-theme-market-with-niche-admin-designs\" href=\"http://wptavern.com/jason-schuller-to-re-enter-wordpress-theme-market-with-niche-admin-designs\">Pickle</a> is a great example of a backend that correlates with what&#8217;s on the frontend. Everything that&#8217;s unnecessary to manage the frontend of the site is removed from the backend, creating a streamlined experience.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/pickle-admin.jpg\" rel=\"prettyphoto[37098]\"><img class=\"wp-image-32235 size-full\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/pickle-admin.jpg?resize=964%2C520\" alt=\"pickle-admin\" /></a>WordPress Backend For The Pickle Theme\n<p>The WP API will make it easy for developers to create a variety of different admin experiences, but users will ultimately decide which implementation is right for them. We may even see an entire category added to the <a title=\"https://wordpress.org/themes/\" href=\"https://wordpress.org/themes/\">WordPress theme directory</a> for admin themes.</p>\n<p>Whether the API is merged this year or next, custom admin themes are inevitable. In the future, there will likely be an admin theme that matches the way you use WordPress to harmonize the user experience. What that theme looks like is anyone&#8217;s guess, but I&#8217;m looking forward to reviewing custom admin experiences created by developers using the API.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 21:18:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: Better Notifications Plugin for WordPress Now Out of Beta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37180\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/better-notifications-plugin-for-wordpress-now-out-of-beta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4881:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress-featured.png\" rel=\"prettyphoto[37180]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress-featured.png?resize=660%2C300\" alt=\"better-notifications-for-wordpress-featured\" class=\"aligncenter size-full wp-image-37196\" /></a></p>\n<p>The beta version of the <a href=\"https://wordpress.org/plugins/bnfw/\" target=\"_blank\">Better Notifications for WordPress</a> plugin was released last year, and it lay dormant for many months while its original collaborators searched for a new developer. The plugin was created to allow you to send customizable HTML emails to users based on different actions in WordPress.</p>\n<p>Jack McConnell, founder of development agency <a href=\"http://www.voltronik.co.uk/\" target=\"_blank\">Voltronik</a>, commissioned the plugin to be built while creating <a href=\"http://www.voltronik.co.uk/case-studies/building-web-app-wordpress-re-imagining-bespoke-project-management-system/\" target=\"_blank\">a custom project management system</a> on top of WordPress. &#8220;One of the requirements was for notifications of new projects (WordPress categories) via email. I couldn&#8217;t find a plugin that sent notifications for events such as these, so I decided to write my own,&#8221; McConnell said. He worked with a developer to push the beta out over the course of a weekend, but that&#8217;s as far as it went last year.</p>\n<p>After finding a new developer, McConnell was able to get the plugin out of beta and develop a roadmap for future releases. Version 1.0 is a major overhaul and a complete re-write of the plugin. New features include:</p>\n<ul>\n<li>Auto-importer: Your old notifications will be imported when updating the plugin</li>\n<li>New &#8216;Generator&#8217; for easily creating and editing your notifications</li>\n<li>More options and notification types as per feedback via the forums</li>\n<li>Granular control over choosing either user roles or individual users you&#8217;d like to send a notification to</li>\n<li>Fully translatable</li>\n</ul>\n<p>Each email can be customized using HTML, CSS, and Voltronik&#8217;s extensive list of <a href=\"http://www.voltronik.co.uk/wordpress-plugins/better-notifications-for-wordpress-shortcodes/\" target=\"_blank\">shortcodes</a>, which means you can add your site&#8217;s logo, a simple design, and all kinds of content to the emails. You can also set the notifications to go to selected individual users or limit the notifications based on user roles.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress.png\" rel=\"prettyphoto[37180]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress.png?resize=806%2C534\" alt=\"better-notifications-for-wordpress\" class=\"aligncenter size-full wp-image-37190\" /></a></p>\n<p>In addition to customizing WordPress&#8217; default notification emails (i.e. new  comments, registrations, password reset), the plugin adds options for the following:</p>\n<ul>\n<li>New category</li>\n<li>New post updated, published</li>\n<li>New [custom post type] updated, published, pending review</li>\n<li>Custom taxonomy &#8211; new term added</li>\n</ul>\n<p>Better Notifications for WordPress adds notification customization options for every custom post type you have registered on your site, which can be very useful if your CPT-based plugins don&#8217;t include notifications.</p>\n<p>If you&#8217;re trying to keep a tight rein on new category creation, this plugin will help keep you in the loop. It also makes it easy to brand your site communications better as an alternative to WordPress&#8217; ugly notification emails. The plugin was built to fit into WordPress like a natural part of the admin.</p>\n<p>McConnell identifies other scenarios where Better Notifications might be useful:</p>\n<ul>\n<li>Outreach: A blog/news site with hundreds of subscribers &#8211; use it to alert them of new blog posts</li>\n<li>Communication: A small, internal WordPress site &#8211; use it to alert staff of new posts and comments</li>\n<li>Monitor: A website for a new product or service &#8211; use it for notifications of pingbacks and trackbacks</li>\n<li>Security: To receive alerts of password reset requests and their corresponding email address</li>\n</ul>\n<p>If you need greater control and customization over WordPress&#8217; email notifications, this plugin handles just about every kind of notice on actions related to publishing. It&#8217;s well on its way to becoming a comprehensive tool and McConnell and his team are eager to improve the plugin based on user feedback. <a href=\"https://wordpress.org/plugins/bnfw/\" target=\"_blank\">Better Notifications for WordPress</a> version 1.0 is now available for download on WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:58:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Post Status: GravityView raises the bar for WordPress video advertisements\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7332\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://poststatus.com/gravityview-songadaymann/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1092:\"<p>Okay, maybe it doesn&#8217;t raise the bar the way you think I mean. But this is worthwhile.</p>\n<p>I&#8217;m pretty busy building the new Post Status infrastructure, but not too busy to post this.</p>\n<p><a href=\"https://gravityview.co/\">GravityView</a> is a WordPress plugin by Zack Katz and Katz Web Services that lists Gravity Forms entries on your site in a nice way. It&#8217;s a slick plugin I&#8217;ve been meaning to dig further into since I learned about it at a WordCamp a few months back.</p>\n<p>Nevertheless, the folks behind GravityView have hired <a href=\"https://twitter.com/songadaymann\">@songadaymann</a>, <a href=\"http://jonathanmann.net/about/\">Jonathan Mann</a>, to create a new video for them, and it is&#8230; unforgettable.</p>\n<p></p>\n<p>I mean, I told you.</p>\n<p>This is the type of &#8220;hey this is funny / quirky&#8221; will probably better qualify for the members only newsletter in the future. But while I&#8217;m <a href=\"https://poststatus.com/club/\" title=\"Post Status Membership Club\">building that out</a>, you all get this nugget of fun for free.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:28:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Limits to Growth\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44525\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/01/limits-to-growth/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:637:\"<p>&#8220;They modelled data up to 1970, then developed a range of scenarios out to 2100, depending on whether humanity took serious action on environmental and resource issues. [&#8230;] The book’s central point, much criticised since, is that “the earth is finite” and the quest for unlimited growth in population, material goods etc would eventually lead to a crash. So were they right?&#8221; The answer lies in <a href=\"http://www.theguardian.com/commentisfree/2014/sep/02/limits-to-growth-was-right-new-research-shows-were-nearing-collapse\">Limits to Growth was right. New research shows we&#8217;re nearing collapse</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:19:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Ping-O-Matic: A Prompt a Day\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://blog.pingomatic.com/?p=115\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://blog.pingomatic.com/2015/01/13/a-prompt-a-day/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1387:\"<p><a href=\"http://pingomatic.com/\" target=\"_blank\">Ping-O-Matic</a> is all about getting your latest content out into the world and driving more traffic to your blog. Sometimes, though, we need inspiration to write.</p>\n<p>Our friends at <em><a href=\"http://dailypost.wordpress.com\" target=\"_blank\">The Daily Post</a></em> published a free ebook of daily prompts: a gentle nudge to encourage a regular blogging habit. It&#8217;s available in four languages: <strong>English</strong>, <strong>French</strong>, <strong>Spanish</strong>, and <strong>Indonesian</strong>:</p>\n<p><a href=\"https://dailypost.wordpress.com/postaday/ebook-365-writing-prompts/\" target=\"_blank\">Ebook: 365 Writing Prompts</a></p>\n<p><a href=\"https://dailypost.wordpress.com/postaday/ebook-365-writing-prompts/\"><img class=\" size-large wp-image-116 aligncenter\" src=\"https://pingomatic.files.wordpress.com/2015/01/ebook-365-featured-2.png?w=600&h=178\" alt=\"ebook-365-featured 2\" /></a></p>\n<p>Download the version you need &#8212; it&#8217;s free!</p><br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/pingomatic.wordpress.com/115/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/pingomatic.wordpress.com/115/\" /></a> <img alt=\"\" border=\"0\" src=\"http://pixel.wp.com/b.gif?host=blog.pingomatic.com&blog=68432&post=115&subd=pingomatic&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 18:16:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Cheri Lucas Rowlands\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"WPTavern: How to Customize The Body and Title Font in WordPress Default Themes Without Touching Code\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37158\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3147:\"<p>WordPress 4.1 ships with three default themes, <a title=\"https://wordpress.org/themes/twentythirteen\" href=\"https://wordpress.org/themes/twentythirteen\">Twenty Thirteen</a>, <a title=\"https://wordpress.org/themes/twentyfourteen\" href=\"https://wordpress.org/themes/twentyfourteen\">Twenty Fourteen</a>, and <a title=\"https://wordpress.org/themes/twentyfifteen\" href=\"https://wordpress.org/themes/twentyfifteen\">Twenty Fifteen</a>. Although the theme customizer enables you to edit a default theme&#8217;s colors, header image, and other attributes, it doesn&#8217;t give you the ability to change the body and title fonts. If you&#8217;d like to easily change fonts in a default theme using the customizer without using code, try the <a title=\"https://wordpress.org/plugins/styleguide/\" href=\"https://wordpress.org/plugins/styleguide/\">Styleguide plugin</a> created by <a title=\"http://www.binarymoon.co.uk/\" href=\"http://www.binarymoon.co.uk/\">Ben Gillbanks</a>.</p>\n\n<a href=\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code/2015customizerbeforestyleguide\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/2015CustomizerBeforeStyleguide.png?resize=297%2C668\" class=\"attachment-full\" alt=\"Customizer Before Styleguide is Activated\" /></a>\n<a href=\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code/2015customizerafterstyleguide\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/2015CustomizerAfterStyleguide.png?resize=291%2C826\" class=\"attachment-full\" alt=\"Customizer after Styleguide is Activated\" /></a>\n\n<p>Once Styleguide is activated, you&#8217;ll see two new options added to the customizer. These allow you to edit the font for the body and title text. Styleguide will let you change fonts for headers and body text in almost any theme, but out of the box it supports Twenty Ten through Twenty Fifteen. There&#8217;s also support for <a title=\"https://creativemarket.com/BinaryMoon/108641-Puzzle-Responsive-WordPress-Theme?u=BinaryMoon\" href=\"https://creativemarket.com/BinaryMoon/108641-Puzzle-Responsive-WordPress-Theme?u=BinaryMoon\">Puzzle</a>, a theme created by Gillbanks.</p>\n<p>If you&#8217;re using one of the supported themes mentioned above then it will add font and color editing to the customizer, allowing you to style the themes as you wish. Developers can add support for their own themes by using the &#8216;add_theme_support&#8217; command. Check out the <a title=\"https://github.com/BinaryMoon/styleguide/tree/master/theme-styles\" href=\"https://github.com/BinaryMoon/styleguide/tree/master/theme-styles\">included theme-styles</a> to see live examples on how to use the command.</p>\n<p>Gillbanks notes that additional theme support will be added in the future. Until then, if you&#8217;re using one of WordPress&#8217; default themes, <a title=\"https://wordpress.org/plugins/styleguide/\" href=\"https://wordpress.org/plugins/styleguide/\">Styleguide</a> is an easy way to add the ability to customize the body and title fonts without touching a line of code.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 04:28:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Struggles of Distributed\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44585\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/01/struggles-of-distributed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:511:\"<p>I think it&#8217;s good to show both sides of what a distributed organization is like, here are two essays by different <a href=\"http://automattic.com/\">Automatticians</a>. Steph Yiu writes <a href=\"http://hoppycow.com/2015/01/04/still-figuring-it-out-communicating-remotely-with-lots-of-people/\">Still figuring it out: communicating remotely with lots of people</a> and Chris Hardie writes on <a href=\"http://www.chrishardie.com/2015/01/distributed-vs-person-teams/\">Distributed vs. In-person Teams</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 00:48:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"WPTavern: New BuddyPress Global Search Plugin Adds Unified Search of All BuddyPress Components\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37106\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"http://wptavern.com/new-buddypress-global-search-plugin-adds-unified-search-of-all-buddypress-components\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2938:\"<p>The developers behind the <a href=\"http://www.buddyboss.com/\" target=\"_blank\">BuddyBoss</a> theme shop released a plugin today that has the potential to benefit nearly every BuddyPress social network. <a href=\"https://wordpress.org/plugins/buddypress-global-search/\" target=\"_blank\">BuddyPress Global Search</a> adds a unified search bar, allowing users to search through every BuddyPress component, along with pages, posts, and select custom post types.</p>\n<p>Once activated, the plugin turns the site&#8217;s WordPress search inputs into a global search, capable of returning results for any of the social content on the site. It also features a live dropdown of results as you are typing.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search.png\" rel=\"prettyphoto[37106]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search.png?resize=1025%2C708\" alt=\"buddypress-global-search\" class=\"aligncenter size-full wp-image-37141\" /></a></p>\n<p>The plugin&#8217;s settings page allows administrators to include or exclude any component or custom post type from the unified search.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search-settings.png\" rel=\"prettyphoto[37106]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search-settings.png?resize=1025%2C532\" alt=\"buddypress-global-search-settings\" class=\"aligncenter size-full wp-image-37144\" /></a></p>\n<p>The plugin was designed to work with any theme out of the box and should adopt your theme&#8217;s styling for BuddyPress search results. However, every theme is different and it may require additional tweaking to get it to perfectly compliment your current design.</p>\n<p>I spoke with BuddyBoss founder Michael Eisenwasser, who said that the plugin is his company&#8217;s way of giving back to one of WordPress&#8217; sister projects. &#8220;I saw Matt at WCSF talking about WP companies giving back 5%, and was inspired to give back to BuddyPress,&#8221; he said. &#8220;Better search has always been lacking in BP. We built this one because we would use it ourselves on pretty much any site.&#8221;</p>\n<p>Eisenwasser plans to continue improving BuddyPress Global Search and will add new features based on user feedback. The BuddyBoss team is cooking up a string of free plugins and next on deck is one that will allow users to easily edit BuddyPress activity on the front end.</p>\n<p>If you administer a BuddyPress site and want your search results to return content from the social network, this plugin offers a solid option. Download <a href=\"https://wordpress.org/plugins/buddypress-global-search/\" target=\"_blank\">BuddyPress Global Search</a> for free from WordPress.org. Documentation and support can be found on the <a href=\"http://www.buddyboss.com/tutorials/\" target=\"_blank\">BuddyBoss website</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 23:21:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: Preview the New Design for the WordPress Themes Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3730:\"<p>A long-awaited update to the official WordPress Themes Directory is in progress. Contributors on the <a href=\"http://make.wordpress.org/meta/\" target=\"_blank\">Meta team</a> for WordPress.org are picking up speed on the effort to move the theme repository away from bbPress and into a new plugin, comprised of a custom post type for the repository package and a theme uploader.</p>\n<p>Konstantin Obenland posted a <a href=\"https://make.wordpress.org/meta/2015/01/09/theme-directory-update-19/\" target=\"_blank\">project update</a> to inform contributors that both the <a href=\"https://meta.trac.wordpress.org/browser/sites/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-themes\" target=\"_blank\">theme</a> and the <a href=\"https://meta.trac.wordpress.org/browser/sites/trunk/wordpress.org/public_html/wp-content/plugins/theme-directory\" target=\"_blank\">plugin</a> that help to power the directory are now open source and available for anyone to view on <a href=\"https://meta.trac.wordpress.org/ticket/745\" target=\"_blank\">meta.trac</a>. The plan is to match the new directory design to the WordPress admin themes browser, allowing users to filter themes in a similar way.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/new-themes-directory.png\" rel=\"prettyphoto[37090]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/new-themes-directory.png?resize=1001%2C852\" alt=\"new-themes-directory\" class=\"aligncenter size-full wp-image-37112\" /></a></p>\n<p>As you can see in the screenshots above, much of the same UI from WordPress is being re-purposed for the directory. Users will be able to select from all available filters in order to narrow down results.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/themes-directory-filters.png\" rel=\"prettyphoto[37090]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/themes-directory-filters.png?resize=987%2C662\" alt=\"themes-directory-filters\" class=\"aligncenter size-full wp-image-37115\" /></a></p>\n<p>A <a href=\"https://wordpress.org/themesnew/\" target=\"_blank\">live preview</a> of the new directory is available, though Obenland warns it&#8217;s still a bit buggy. The new design also includes an update for the <a href=\"https://wordpress.org/themesnew/commercial/\" target=\"_blank\">commercially-supported GPL themes</a> page.</p>\n<h3>Timeline for Launching the New Themes Directory</h3>\n<p>There is no set timeline for launching the new directory, though some of the larger tasks have already been accomplished. All the necessary API changes are complete, along with the upload process, theme suspension and approval capabilities, and theme version handling.</p>\n<p>Obenland identified a list of important tasks that will need to be accomplished before launching the new directory. These items include things like importing existing themes from bbPress, rewriting the theme API and downloads handling to work with WordPress, synchronizing theme review results as a cron job, etc.</p>\n<p>Matching the UI to the admin themes browser means that users will have a consistent experience, whether they are searching on WordPress.org or browsing in the WordPress admin. It also speeds up the process by enabling contributors to reuse work that has already been done for the core software.</p>\n<p>If you are interested in contributing with the WordPress Meta team, now is an exciting time to jump in. All of the code for the project is public on <a href=\"https://meta.trac.wordpress.org/ticket/745\" target=\"_blank\">meta.trac</a>, and you can offer feedback on the <a href=\"https://make.wordpress.org/meta/2015/01/09/theme-directory-update-19/\" target=\"_blank\">Make.WordPress.org/Meta</a> blog.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 19:58:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: BuddyPress 2.2 Beta 1 Now Available for Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37060\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2509:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png\" rel=\"prettyphoto[37060]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png?resize=839%2C398\" alt=\"buddypress-logo-blue\" class=\"aligncenter size-full wp-image-30655\" /></a></p>\n<p>Over the weekend, BuddyPress project lead John James Jacoby announced that <a href=\"https://buddypress.org/2015/01/buddypress-2-2-beta-1/\" target=\"_blank\">2.2 beta 1</a> is ready for testing. The upcoming release has been in development since last September. Jacoby&#8217;s campaign for six months of BuddyPress, bbPress, and GlotPress development was <a href=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\" target=\"_blank\">fully funded</a> in mid-December, allowing him to spend more time on the project in 2015.</p>\n<p>So far, the 2.2 milestone has <a href=\"https://buddypress.trac.wordpress.org/query?status=closed&group=resolution&milestone=2.2\" target=\"_blank\">127 resolved tickets</a>, which include enhancements and fixes across all components. Jacoby outlined the most significant changes that require more testing ahead of the official release:</p>\n<ul>\n<li><a href=\"http://wptavern.com/buddypress-2-2-on-track-to-provide-a-basic-member-type-api\" target=\"_blank\">Member types</a> will allow developers to register different types of users, i.e. ‘teacher’ vs. ‘student’.</li>\n<li>Post type activities will allow developers to <a href=\"http://wptavern.com/buddypress-2-2-to-add-custom-post-type-support-to-the-activity-stream\" target=\"_blank\">connect custom post types to activity stream items</a>.</li>\n<li>Numerous improvements to the Legacy template pack</li>\n<li>Several new query API’s (based on WordPress improvements) for retrieving more specific results</li>\n<li>Continued cache enhancements, particularly for multi-site and multi-network WordPress configurations</li>\n<li>Tons of under-the-hood improvements</li>\n<li>Increased coverage of inline code documentation, actions, and filters</li>\n</ul>\n<p>Now is good time for BuddyPress site administrators and plugin and theme developers to start testing their extensions against the beta. You can download the zip file for 2.2 beta 1 from the <a href=\"https://buddypress.org/2015/01/buddypress-2-2-beta-1/\" target=\"_blank\">release announcement</a>. The plugin&#8217;s core development team is aiming to get the official 2.2 release out to users by the end of January.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 05:31:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Matt: Thirty One\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44592\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/01/thirty-one/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3042:\"<p>The first year of my thirties was both incredibly challenging and incredibly rewarding. I started a new decade and <a href=\"http://ma.tt/2014/01/toni-automattic-ceo/\">a new role as CEO</a> at the same time, and at Automattic we grew to over 300 people and <a href=\"http://ma.tt/2014/05/new-funding-for-automattic/\">raised money for the first time in a while</a>, both of which I couldn&#8217;t have predicted five or even two years ago.</p>\n<p>My big takeaway from the year was the importance of habits and small actions for accomplishing big things. To be productive I don&#8217;t need any fancy setups or project management software, just a well-groomed todo list and a pomodoro timer. This year on my birthday I find myself in Egypt which is an awe-inspiring place in many ways, but most striking to me has been the enduring beauty of craftsmanship with access to only the simplest of tools.</p>\n<p>In running, which I started this past summer while in Italy, I was able <a href=\"http://ma.tt/2014/10/run-better/\">to slow down to go further and without injury</a>, and ended up putting in about 140 miles which took my fitness to be better than it&#8217;s been so far in my adult life. At least half of those miles were with friends and you can&#8217;t underestimate the importance of friends in helping you overcome mental blocks. (Also flew 425k miles in 2014, a new record. You can run anywhere and with minimal equipment &#8212; it&#8217;s a great way to explore a city.)</p>\n<p>Reading and writing, two of the activities still most important to me, benefitted from a &#8220;just do it&#8221; philosophy of putting one foot in front of the other. I <a href=\"http://ma.tt/2014/10/streak/\">published more words</a> on ma.tt than any year since 2007, and I find blogging one of the most rewarding pastimes in my life. It was also a year of not trying to be all business all the time: I started reading fiction regularly after a decade away and letting the topics here drift wherever my interest is at the moment. Last year I talked about balance, and I think this is what drove many of the accomplishments I&#8217;m looking back on fondly now.</p>\n<p>I&#8217;m proud of how 2014 went, and I hope to build on that foundation to be a better person and reach even more ambitious milestones in the year to come. Here&#8217;s to slowing down to go further, and tackling big tasks with friends.</p>\n<p>Previously: <a href=\"http://ma.tt/2003/01/bday/\">19</a>, <a href=\"http://ma.tt/2004/01/so-im-20/\">20</a>, <a href=\"http://ma.tt/2005/01/hot-barely-legal-matt/\">21</a>, <a href=\"http://ma.tt/2006/01/matt-22/\">22</a>, <a href=\"http://ma.tt/2007/01/twenty-three/\">23</a>, <a href=\"http://ma.tt/2008/01/twenty-four/\">24</a>, <a href=\"http://ma.tt/2009/01/twenty-five/\">25</a>, <a href=\"http://ma.tt/2010/01/twenty-six/\">26</a>, <a href=\"http://ma.tt/2011/01/twenty-seven/\">27</a>, <a href=\"http://ma.tt/2012/01/twenty-eight/\">28</a>, and <a href=\"http://ma.tt/2013/01/twenty-nine/\">29</a>, <a href=\"http://ma.tt/2014/01/matt-3-0/\">30</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 04:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: NFL is a Non-Profit\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44285\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/01/nfl-is-a-non-profit/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:283:\"<p>Did you know the NFL is a non-profit? Slate says <a href=\"http://www.slate.com/articles/business/moneybox/2014/09/the_nfl_should_lose_its_tax_exempt_status_the_league_is_not_a_nonprofit.html\">the NFL should lose its tax-exempt status: The league is not a “nonprofit.”</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 10 Jan 2015 18:12:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Matt: PGP Tutorial\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44579\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"http://ma.tt/2015/01/pgp-tutorial/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:373:\"<p>Speaking <a href=\"http://ma.tt/2014/12/donate-to-gnupg/\">of PGP</a> and <a href=\"http://ma.tt/?p=44577\">security</a>, this self-described<a href=\"http://notes.jerzygangi.com/the-best-pgp-tutorial-for-mac-os-x-ever/\">best PGP tutorial for Mac OS X, ever</a> actually lives up to the promise. Check it out, makes encrypting and decrypting things on the fly super easy.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 10 Jan 2015 00:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"WPTavern: Duplicate and Merge Posts: A New Editorial Plugin for WordPress Publishers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"http://wptavern.com/duplicate-and-merge-posts-a-new-editorial-plugin-for-wordpress-publishers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4489:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge.jpg?resize=772%2C330\" alt=\"duplicate-merge\" class=\"aligncenter size-full wp-image-37020\" /></a></p>\n<p>WordPress sites with multiple users often run into challenges when attempting to work on the same content. Larger publications require more robust editorial tools for efficient collaboration between administrators, editors, contributors, and authors, who often need to jump in on the same post.</p>\n<p><a href=\"https://wordpress.org/plugins/duplicate-and-merge-posts/\" target=\"_blank\">Duplicate and Merge Posts</a> is a plugin that offers a new take on WordPress drafts. This editorial tool makes it possible to clone a live post, edit it, and then merge back the updated copy into the original post. It&#8217;s a essentially a far more simplified version of the <a href=\"http://wptavern.com/introducing-wordpress-post-forking-version-control-for-writers\" target=\"_blank\">Post Forking plugin</a> in that it offers fewer capabilities. Duplicate and Merge Posts is intended for the following workflow:</p>\n<p><strong>Original Post</strong> -> <strong>Clone</strong> -> <strong>Edit</strong> -> <strong>Merge back to Original Post</strong></p>\n<p>The plugin was created by WordPress developer <a href=\"https://twitter.com/DavidWells\" target=\"_blank\">David Wells</a> as part of a client project with <a href=\"http://exygy.com/\" target=\"_blank\">Exygy</a>. &#8220;We built it for a &#8216;Fortune 10&#8242; company for them to manage an internal documentation platform they have running on WordPress and figured the rest of the WordPress community would benefit from the plugin as well,&#8221; he said.</p>\n<p>Duplicate and Merge Posts works with both posts and pages. When activated, you&#8217;ll find a new &#8220;Duplicate and Edit&#8221; button at the top of the post on the front end, as well as in the post edit screen.</p>\n<p>The plugin&#8217;s settings screen allows you to set different editorial capabilities based on user role. For example, you might only allow administrators and editors to merge changes back into posts. The buttons shown in the post editor are limited to the user&#8217;s capabilities and allow for the following:</p>\n<ul>\n<li>View side-by-side differences</li>\n<li>Submit update for review</li>\n<li>Merge back into the original post</li>\n<li>Save as a new post</li>\n</ul>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-post.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-post.jpg?resize=1025%2C523\" alt=\"duplicate-merge-post\" class=\"aligncenter size-full wp-image-37024\" /></a></p>\n<p>Users with merge capabilities will receive an email notification when a post has edits ready for review. The plugin allows you to see all of the changes side-by-side for quick comparison.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-side-by-side.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-side-by-side.jpg?resize=1025%2C523\" alt=\"duplicate-merge-side-by-side\" class=\"aligncenter size-full wp-image-37025\" /></a></p>\n<p>The primary use case for the Duplicate and Merge plugin is likely to be multi-author publications. However, it&#8217;s flexible enough to enable more creative uses, such as turning your site into a wiki or allowing visitors to submit fixes for typos. The basic ability to clone posts can also be useful for sites using WordPress as a CMS with many pages that are similar in content.</p>\n<p>After testing Duplicate and Merge, I found that it works as advertised. This tool has the potential to improve your editorial workflow without creating additional confusion for contributors. It has a natural workflow that allows a publication team to get more eyes on the content before pushing edits live.</p>\n<p>You can download <a href=\"https://wordpress.org/plugins/duplicate-and-merge-posts/\" target=\"_blank\">Duplicate and Merge</a> from WordPress.org. It&#8217;s also available for contributions on <a href=\"https://github.com/Exygy/duplicate-and-merge-posts\" target=\"_blank\">GitHub</a>. If you want to see the plugin in action before installing it, check out the video below to tour its features.</p>\n<p><span class=\"embed-youtube\"></span></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 20:02:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WPTavern: AcademiaThemes One Year Later\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37011\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://wptavern.com/academiathemes-one-year-later\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2636:\"<p>When Dumitru Brinzan launched <a title=\"http://www.academiathemes.com/\" href=\"http://www.academiathemes.com/\">AcademiaThemes</a> in <a title=\"http://wptavern.com/academiathemes-wordpress-themes-specifically-for-academia\" href=\"http://wptavern.com/academiathemes-wordpress-themes-specifically-for-academia\">early 2014</a>, he did so with the goal of providing high quality themes for the education sector. With one year under his belt, I reached out to Brinzan to find out how the business is doing. The first year was rough, thanks in large part to <a title=\"http://moz.com/google-algorithm-change\" href=\"http://moz.com/google-algorithm-change\">algorithm changes</a> implemented by Google to its search engine in early 2014.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/01/AcademiaThemesUniversityTheme.jpg\" rel=\"prettyphoto[37011]\"><img class=\"aligncenter size-full wp-image-14054\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/01/AcademiaThemesUniversityTheme.jpg?resize=983%2C536\" alt=\"Academia Themes University Theme\" /></a></p>\n<p>The updates negatively impacted a majority of AcademiaThemes affiliates, &#8220;Many of our affiliates simply lost all of their traffic, so we lost basically all sales generated by them, which is an important source of revenue for new shops.&#8221; With affiliates having a hard time getting search engine traffic, Brinzan is finding it difficult to get new traffic to his site, &#8220;Now with almost all of the main affiliates out of the picture, it&#8217;s become incredibly hard to get traffic to our shop.&#8221;</p>\n<p>Despite a significant loss in traffic and affiliate revenue, Brinzan will continue to operate the site. In fact, he&#8217;s opened a new theme shop called <a title=\"http://www.energythemes.com/\" href=\"http://www.energythemes.com/\">EnergyThemes</a> aimed at the fitness market. EnergyThemes is the third theme company he owns that&#8217;s aimed at a specific niche. In addition to AcademiaThemes, he operates <a href=\"http://www.premiumwp.com/go/hermes-themes\" target=\"_blank\" rel=\"nofollow\">HermesThemes</a> which offers themes for hotels.</p>\n<h2>The Achilles&#8217; Heel of Affiliate Programs</h2>\n<p>I&#8217;ve never owned a WordPress theme shop, but I understand how important affiliate programs are. They provide free advertising while helping to generate sales. I never realized updates to Google&#8217;s search engine could drastically reduce affiliate revenue and traffic if sites perform poorly based on those updates. This is an important thing to consider if you&#8217;re thinking about utilizing an affiliate program.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 11:50:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: 5 WordPress Initiatives That Didn’t Make it Out of 2014\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36477\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"http://wptavern.com/5-wordpress-initiatives-that-didnt-make-it-out-of-2014\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7788:\"<p>Throughout the course of a year, several new ideas, products, and businesses are launched in the WordPress ecosystem. However, not all of them are destined for success. Here are five WordPress initiatives launched in 2014 that didn&#8217;t make the cut.</p>\n<h2>WPKindness</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/02/WPKindnesslogo.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-16049\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/02/WPKindnesslogo.jpg?resize=542%2C140\" alt=\"WP Kindness Logo\" /></a></p>\n<p>Launched <a title=\"http://wptavern.com/new-site-highlights-acts-of-kindness-in-the-wordpress-community\" href=\"http://wptavern.com/new-site-highlights-acts-of-kindness-in-the-wordpress-community\">in early</a> 2014 and created by Ryan Bell,<a title=\"http://wpkindness.com/\" href=\"http://wpkindness.com/\"> WPKindness</a> shared acts of kindness that have taken place throughout the WordPress community. The site used a combination of <a href=\"http://headwaythemes.com/\">Headway</a>, <a href=\"http://www.gravityforms.com/\">Gravity Forms</a>, <a href=\"http://wp-types.com/\">Toolset</a> and <a title=\"http://www.wordpress.org\" href=\"http://www.wordpress.org\">WordPress,</a> allowing visitors to submit reports. At the time, I was concerned with a section within the site&#8217;s terms of service that explained affiliate links might be used in reports where companies are mentioned, “You understand wpkindness.com might use an affiliate link to the company you are submitting about.“ The concern is a moot point as the site is offline.</p>\n<h2>WPCollab</h2>\n<p>Fresh out of WordCamp Norway, Slobodan Manic created a <a title=\"http://make.wpcollab.co/\" href=\"http://make.wpcollab.co/\">WordPress collaboration group</a> with the idea that working together creates more opportunities to learn. The first task for the group was to create a WordPress plugin and submit it to the directory. Their first plugin, <a title=\"https://wordpress.org/plugins/hello-emoji/\" href=\"https://wordpress.org/plugins/hello-emoji/\">Hello Emoji,</a> successfully made it to the directory and was created by <strong>five people</strong> from <strong>four different continents</strong> in a <strong>two week</strong> time period.</p>\n<p>While WPCollab showed promise, <a title=\"http://make.wpcollab.co/2014/06/26/wpcollab-future/\" href=\"http://make.wpcollab.co/2014/06/26/wpcollab-future/\">the lack of focus and the inability to manage several contributors</a> from across the world caused the project to lose momentum.</p>\n<h2>Feuilles</h2>\n<p>When <a title=\"http://wptavern.com/feuilles-app-aims-to-replace-editorially-offers-publishing-to-github-wordpress-and-dropbox\" href=\"http://wptavern.com/feuilles-app-aims-to-replace-editorially-offers-publishing-to-github-wordpress-and-dropbox\">Editorially closed its</a> doors in May of 2014, it took all of its cool writing collaboration tools with it. A new project called <a title=\"https://feuill.es/\" href=\"https://feuill.es/\">Feuilles</a> picked up where Editorially left off with an app that provided some of the features Editorially users loved most.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/Feuilles.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-23799\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/Feuilles.jpg?resize=962%2C509\" alt=\"Feuilles\" /></a></p>\n<p>Feuilles allowed users to publish to Github, WordPress.com, and Dropbox at the same time. <a href=\"https://twitter.com/alexduloz\" target=\"_blank\">Alex Duloz,</a> one of the project&#8217;s creators, aimed to make Feuilles a language/device agnostic CMS with in-house publishing. Unfortunately, the project never made it that far and the website devoted to the project fails to redirect properly.</p>\n<h2>WP School</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/01/WpSchoolFrontPage.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-14202\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/01/WpSchoolFrontPage.jpg?resize=928%2C452\" alt=\"WpSchoolFrontPage\" /></a></p>\n<p>Created by Pooria Asteraky, <a title=\"http://www.wpschool.org/\" href=\"http://www.wpschool.org/\">WP School</a> launched with the goal of bringing WordPress education to the masses. Classified as a (<strong>MOOC</strong>) or massive open online course, the site was dedicated to offering WordPress education and online courses in a variety of languages for people to use across the world. In order to get off the ground, Asteraky created a <a title=\"https://www.indiegogo.com/projects/wordpress-school-mooc\" href=\"https://www.indiegogo.com/projects/wordpress-school-mooc\">crowdfunding campaign</a> asking for $25K. The campaign ended with only $1,087 pledged. With a severe lack of funding, WP School never made it out of the gate.</p>\n<h2>Netropolitan</h2>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/09/netropolitan.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-30802\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/09/netropolitan.jpg?resize=1025%2C640\" alt=\"netropolitan\" /></a></p>\n<p><a title=\"http://netropolitan.info/\" href=\"http://netropolitan.info/\">Netropolitan</a> also known as the &#8220;Facebook for Rich People&#8221; <a title=\"http://wptavern.com/netropolitan-facebook-for-rich-people-is-powered-by-wordpress-and-buddypress\" href=\"http://wptavern.com/netropolitan-facebook-for-rich-people-is-powered-by-wordpress-and-buddypress\">launched in late 2014</a>. The site used WordPress and BuddyPress to provide a social network for those who had nothing better to do with $9K. After paying a $9K entrance fee, it cost $3K a year to continue membership. Netropolitan was featured on <a href=\"http://www.cnn.com/2014/09/16/tech/social-media/netropolitan-social-media/\" target=\"_blank\">CNN</a> and other major news outlets across the globe.</p>\n<p>When <a title=\"http://www.vice.com/read/this-guy-is-creating-a-facebook-for-rich-people-917\" href=\"http://www.vice.com/read/this-guy-is-creating-a-facebook-for-rich-people-917\">Vice asked the site&#8217;s creator </a>James Touchi-Peters, why he created the site, he responded, &#8220;This whole thing started because when I was traveling in my work, I wanted to get in on a social event where basically I could meet people like myself.&#8221; There must not be a lot of people like him because the service recently closed. Touch-Peters left the site online with the following message:</p>\n<blockquote><p>It is with a sad heart that I report that the Netropolitan Club has been closed. In the end, there was not sufficient interest in our service among the targeted demographic to operate it as a going concern. (That said, I am happy to report that all paid members received full refunds.)</p>\n<p>I personally would like to thank all those involved in this enterprise – employees, contractors, publicists, et.al. – as well as the paying members who took a chance on an unprecedented business model. I also would like to thank both the public and the worldwide media for their relatively intense interest, whether positive or negative. (It’s not often that Jimmy Fallon tells jokes about your business on &#8216;The Tonight Show&#8217;.)</p>\n<p>Thanks again, one and all. I’ll see you at the concert hall</p></blockquote>\n<h2>There&#8217;s Likely More Than 5</h2>\n<p>There are likely several more products, ideas, and businesses outside of what we covered on the Tavern, that launched in 2014, but shut down before 2015 arrived. Keep an eye on the Tavern as there are several things that launched that are doing well and in the next few weeks, we&#8217;ll update you on how they&#8217;re doing.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 10:09:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"WPTavern: The Geeky Tech Behind WordSesh 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37001\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wptavern.com/the-geeky-tech-behind-wordsesh-3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2756:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/11/WordSesh3FeaturedImage.png\" rel=\"prettyphoto[37001]\"><img class=\"aligncenter size-full wp-image-32961\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/11/WordSesh3FeaturedImage.png?resize=650%2C266\" alt=\"WordSesh 3 Featured Image\" /></a></p>\n<p>WordSesh 3 attracted <a title=\"http://wptavern.com/wordsesh-3-attracts-3000-unique-viewers-from-89-countries\" href=\"http://wptavern.com/wordsesh-3-attracts-3000-unique-viewers-from-89-countries\">more than 3,000 unique viewers from 89 countries</a>. This equates to nearly three times the amount of people who attended <a title=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\" href=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\">WordCamp Europe 2014</a>. With so many people interacting with the <a title=\"http://wordsesh.org/\" href=\"http://wordsesh.org/\">WordSesh site</a> and 24 hours of live video sessions, it&#8217;s imperative that a webhost be able to deliver great performance. For the third annual event, <a title=\"http://scottbasgaard.com/\" href=\"http://scottbasgaard.com/\">Scott Basgaard</a> partnered with <a title=\"http://blog.siteground.com/hosting-wordsesh-2014/\" href=\"http://blog.siteground.com/hosting-wordsesh-2014/\">SiteGround</a>.</p>\n<p>In a <a title=\"http://blog.siteground.com/hosting-wordsesh-2014/\" href=\"http://blog.siteground.com/hosting-wordsesh-2014/\">post published on the company blog</a>, SiteGround employee Hristo Pandjarov explains how they were able to hand the traffic load and keep the site online. The post is filled with geeky terminology and provides a glimpse into what it takes to host a mission critical site. The company used Linux Containers, built redundant infrastructure from the start, utilized dynamic caching, and more.</p>\n<blockquote><p>Since we didn’t want to risk any downtime with WordSesh, we opted for a hosting technology that we love for its almost unlimited ability to scale on the fly without downtime – the Linux containers. Using containers gave us the peace of mind that no matter what happens we will be able to add more resources both vertically and horizontally to each part of the infrastructure we built for WordSesh. At any moment, we had people on duty ready to add more resources or face any other potential issues.</p></blockquote>\n<p>Although I don&#8217;t understand many of the technologies involved, the end result is that the WordSesh 3 site stayed online throughout the entire event. I didn&#8217;t encounter any errors or experience problems watching sessions live. If you experienced problems accessing the WordSesh site during the event, let us know in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 09:50:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: WordPress 4.2 Will Automatically Enable Pretty Permalinks for New Sites on Installation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36867\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2506:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/links.jpg\" rel=\"prettyphoto[36867]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/links.jpg?resize=1024%2C508\" alt=\"photo credit: gordon2208 - cc\" class=\"size-full wp-image-36986\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/gordon2208/4987669000/\">gordon2208</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-nd/2.0/\">cc</a>\n<p><a href=\"http://codex.wordpress.org/Changelog/1.0\" target=\"_blank\">WordPress 1.0</a> introduced search engine friendly permalinks using mod_rewrite. Setting your site to use pretty permalinks is usually one of the first things that administrators do after installation.</p>\n<p>WordPress 4.2 will add a new function that will <a href=\"https://core.trac.wordpress.org/changeset/31089\" target=\"_blank\">automatically enable pretty permalinks</a>, if the server supports it, at the time of installation. This means that in most cases you&#8217;ll never be greeted with ugly permalinks again.</p>\n<p>The new function is the result of a <a href=\"https://core.trac.wordpress.org/ticket/6481\" target=\"_blank\">ticket</a> that was originally opened seven years ago. In the upcoming release, pretty permalinks will be enabled if WordPress can verify that they work. It will cycle through the various permalink formats, and if they all fail to work, WordPress will fall back to ugly permalinks.</p>\n<p>By default, WordPress will set the following permalink structure for a new site, if possible, using mod_rewrite or nginx rewriting: <code>/%year%/%monthnum%/%day%/%postname%/</code></p>\n<p>Under configurations without rewrites enabled, it will set <code>/index.php/%year%/%monthnum%/%day%/%postname%/</code> for <a href=\"http://codex.wordpress.org/Using_Permalinks#PATHINFO:_.22Almost_Pretty.22\" target=\"_blank\">PATHINFO</a> (&#8220;Almost Pretty&#8221;) permalinks.</p>\n<p><a href=\"https://profiles.wordpress.org/ericlewis\" target=\"_blank\">Eric Lewis</a>, a contributor on the ticket, <a href=\"https://wordpress.slack.com/archives/core/p1419636021003661\" target=\"_blank\">commented</a> on the upcoming change, &#8220;Delivering pretty permalinks by default seems in line with a bunch of core philosophies &#8211; great out-of-the-box, design for the majority, simplicity, clean, lean and mean.&#8221;</p>\n<p>If you frequently create new WordPress sites or development sites, the automatically enabled pretty permalinks in 4.2 should save you a step in the setup process.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 06:11:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:117:\"WPTavern: Plugin Authors: How to Avoid Download Prompts Associated with Screenshots on the WordPress Plugin Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36949\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"http://wptavern.com/plugin-authors-how-to-avoid-download-prompts-associated-with-screenshots-on-the-wordpress-plugin-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2599:\"<p>If you&#8217;ve ever <a title=\"https://wordpress.org/plugins/woocommerce/screenshots/\" href=\"https://wordpress.org/plugins/woocommerce/screenshots/\">clicked on a screenshot</a> in the WordPress plugin directory and received a download prompt, you&#8217;re not the only one. In fact, it&#8217;s a widespread issue that affects a number of plugins. <a title=\"http://wptavern.com/dear-wordpress-plugin-developer-please-add-screenshots\" href=\"http://wptavern.com/dear-wordpress-plugin-developer-please-add-screenshots\">Screenshots are important</a> as they help with troubleshooting, previewing features, and give users a sense of what to expect when it&#8217;s activated. But if you can&#8217;t see important details, they&#8217;re a moot point.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/PluginScreenshotDownloadPrompt.png\" rel=\"prettyphoto[36949]\"><img class=\"size-full wp-image-36950\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/PluginScreenshotDownloadPrompt.png?resize=609%2C406\" alt=\"Plugin Screenshot Download Prompt\" /></a>Plugin Screenshot Download Prompt\n<p>Mika Epstein, who reviews plugins before they&#8217;re added to the directory, <a title=\"https://make.wordpress.org/plugins/2014/03/20/plugin-screenshots-downloading/\" href=\"https://make.wordpress.org/plugins/2014/03/20/plugin-screenshots-downloading/\">wrote about the issue</a> in early 2014. The prompt appears for images that use the incorrect <a title=\"http://en.wikipedia.org/wiki/Internet_media_type\" href=\"http://en.wikipedia.org/wiki/Internet_media_type\">MIME Type</a>. Otto explains how to set the correct MIME Type using TortiseSVN on Windows or where to look if you use a different SVN client.</p>\n<blockquote><p>On Windows, using TortoiseSVN, you can right click the screenshot file, and select the TortoiseSVN-&gt;Properties menu. There you will find the svn:mime-type property, probably incorrectly set to “application/octet-stream”. Change that to the proper mime type of “image/png” or “image/jpg” accordingly. Afterwards, commit the change.</p>\n<p>If you prefer command line SVN:<br />\n<code>svn propset svn:mime-type image/png screenshot-1.png<br />\nsvn commit<br />\n</code><br />\nOr similar. If somebody uses a different SVN client, look for “properties” and then the svn:mime-type property.</p></blockquote>\n<p>Once the changes are made, upload them to the plugin directory. They&#8217;ll take effect once the directory is synchronized. It&#8217;s a simple change that vastly improves the effectiveness and user experience of viewing screenshots.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 01:19:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: Easy Security Guide\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44577\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/01/easy-security-guide/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:422:\"<p>There&#8217;s a simple, unattributed site called <a href=\"http://www.decentsecurity.com/\">Decent Security which has very nice common-sense but effective advice on security</a>. I believe it&#8217;s from the same person as behind <a href=\"https://twitter.com/swiftonsecurity\">the Infosec Taylor Swift account</a>. It&#8217;s refreshing like <a href=\"https://www.schneier.com/\">reading Bruce Schnier&#8217;s blog</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 00:40:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WPTavern: WPWeekly Episode 176 – Farewell Kim\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=36934&preview_id=36934\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://wptavern.com/wpweekly-episode-176-farewell-kim\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1643:\"<p>This special episode of WordPress Weekly doesn&#8217;t have any news or plugin picks of the week. Instead, it&#8217;s dedicated to the <a href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">late Kim Parsell</a>.</p>\n<p>I describe the experience of January 2nd where Brian Layman and I drive to Kim Parsell&#8217;s house to check on her. After telling the story, I share a couple of funny memories I have of Kim, like the time I called her #wpgrandma. Near the end of the show, we discuss the outpouring of support from the WordPress community and <a href=\"http://wpmom.org/about-kim-parsell/\" title=\"http://wpmom.org/about-kim-parsell/\">a special memorial page</a> created by Suzette Franck.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, January 14th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #176:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 08 Jan 2015 22:43:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 21 Jan 2015 18:49:27 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:6:\"248181\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Wed, 21 Jan 2015 18:30:16 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(14338,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1421909367','no'),(14339,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1421866167','no'),(14354,'rewrite_rules','a:105:{s:10:\"project/?$\";s:27:\"index.php?post_type=project\";s:40:\"project/feed/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:35:\"project/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:27:\"project/page/([0-9]{1,})/?$\";s:45:\"index.php?post_type=project&paged=$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:31:\"cfs/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:41:\"cfs/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:61:\"cfs/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)/trackback/?$\";s:45:\"index.php?post_type=cfs&name=$matches[1]&tb=1\";s:32:\"cfs/([^/]+)/page/?([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&paged=$matches[2]\";s:39:\"cfs/([^/]+)/comment-page-([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)(/[0-9]+)?/?$\";s:57:\"index.php?post_type=cfs&name=$matches[1]&page=$matches[2]\";s:20:\"cfs/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:30:\"cfs/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:50:\"cfs/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:35:\"project/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:45:\"project/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:65:\"project/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)/trackback/?$\";s:34:\"index.php?project=$matches[1]&tb=1\";s:48:\"project/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:43:\"project/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:36:\"project/([^/]+)/page/?([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&paged=$matches[2]\";s:43:\"project/([^/]+)/comment-page-([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)(/[0-9]+)?/?$\";s:46:\"index.php?project=$matches[1]&page=$matches[2]\";s:24:\"project/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:34:\"project/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:54:\"project/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:38:\"index.php?&page_id=4&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:47:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:57:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:77:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:69:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&tb=1\";s:64:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:52:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&paged=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&cpage=$matches[4]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)(/[0-9]+)?/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&page=$matches[4]\";s:36:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:46:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:66:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:51:\"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:38:\"([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)(/[0-9]+)?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(14355,'can_compress_scripts','0','yes'),(14357,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1425033780;s:7:\"checked\";a:5:{s:12:\"the_societea\";s:0:\"\";s:13:\"twentyfifteen\";s:3:\"1.0\";s:14:\"twentyfourteen\";s:3:\"1.3\";s:14:\"twentythirteen\";s:3:\"1.4\";s:12:\"twentytwelve\";s:3:\"1.6\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}','yes'),(14541,'_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a','1422065461','yes'),(14542,'_site_transient_poptags_40cd750bba9870f18aada2478b24840a','a:40:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";s:4:\"4916\";}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"Post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";s:4:\"3078\";}s:6:\"plugin\";a:3:{s:4:\"name\";s:6:\"plugin\";s:4:\"slug\";s:6:\"plugin\";s:5:\"count\";s:4:\"3022\";}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";s:4:\"2529\";}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";s:4:\"2346\";}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";s:4:\"1892\";}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";s:4:\"1729\";}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";s:4:\"1680\";}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";s:4:\"1678\";}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";s:4:\"1676\";}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";s:4:\"1612\";}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";s:4:\"1609\";}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";s:4:\"1505\";}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"Facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";s:4:\"1322\";}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";s:4:\"1276\";}s:9:\"wordpress\";a:3:{s:4:\"name\";s:9:\"wordpress\";s:4:\"slug\";s:9:\"wordpress\";s:5:\"count\";s:4:\"1175\";}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";s:4:\"1171\";}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";s:4:\"1083\";}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";s:4:\"1079\";}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";s:3:\"918\";}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";s:3:\"905\";}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";s:3:\"874\";}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";s:3:\"843\";}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";s:3:\"837\";}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";s:3:\"794\";}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";s:3:\"758\";}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"AJAX\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";s:3:\"748\";}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";s:3:\"709\";}s:11:\"woocommerce\";a:3:{s:4:\"name\";s:11:\"woocommerce\";s:4:\"slug\";s:11:\"woocommerce\";s:5:\"count\";s:3:\"700\";}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";s:3:\"692\";}s:5:\"login\";a:3:{s:4:\"name\";s:5:\"login\";s:4:\"slug\";s:5:\"login\";s:5:\"count\";s:3:\"682\";}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";s:3:\"657\";}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";s:3:\"649\";}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";s:3:\"642\";}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";s:3:\"642\";}s:9:\"ecommerce\";a:3:{s:4:\"name\";s:9:\"ecommerce\";s:4:\"slug\";s:9:\"ecommerce\";s:5:\"count\";s:3:\"623\";}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";s:3:\"620\";}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";s:3:\"605\";}s:5:\"share\";a:3:{s:4:\"name\";s:5:\"Share\";s:4:\"slug\";s:5:\"share\";s:5:\"count\";s:3:\"600\";}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";s:3:\"593\";}}','yes'),(14544,'ngg_doing_upgrade','','yes'),(14545,'photocrati_auto_update_admin_update_list','','yes'),(14546,'photocrati_auto_update_admin_check_date','','yes'),(14547,'ngg_db_version','1.8.1','yes'),(14548,'pope_module_list','a:36:{i:0;s:28:\"photocrati-nextgen|2.0.66.37\";i:1;s:17:\"photocrati-fs|0.4\";i:2;s:21:\"photocrati-router|0.6\";i:3;s:19:\"photocrati-i18n|0.1\";i:4;s:25:\"photocrati-validation|0.1\";i:5;s:32:\"photocrati-wordpress_routing|0.5\";i:6;s:23:\"photocrati-security|0.2\";i:7;s:18:\"photocrati-lzw|0.1\";i:8;s:31:\"photocrati-nextgen_settings|0.8\";i:9;s:18:\"photocrati-mvc|0.5\";i:10;s:19:\"photocrati-ajax|0.7\";i:11;s:33:\"photocrati-dynamic_stylesheet|0.3\";i:12;s:34:\"photocrati-frame_communication|0.4\";i:13;s:25:\"photocrati-datamapper|0.6\";i:14;s:30:\"photocrati-nextgen-legacy|0.13\";i:15;s:27:\"photocrati-nextgen-data|0.8\";i:16;s:33:\"photocrati-dynamic_thumbnails|0.5\";i:17;s:28:\"photocrati-nextgen_admin|0.7\";i:18;s:38:\"photocrati-nextgen_addgallery_page|0.6\";i:19;s:33:\"photocrati-nextgen_pagination|0.3\";i:20;s:38:\"photocrati-nextgen_gallery_display|0.9\";i:21;s:30:\"photocrati-attach_to_post|0.10\";i:22;s:36:\"photocrati-nextgen_other_options|0.7\";i:23;s:34:\"photocrati-nextgen_pro_upgrade|0.3\";i:24;s:23:\"photocrati-mediarss|0.4\";i:25;s:20:\"photocrati-cache|0.2\";i:26;s:24:\"photocrati-lightbox|0.14\";i:27;s:34:\"photocrati-nextgen_basic_album|0.9\";i:28;s:38:\"photocrati-nextgen_basic_templates|0.4\";i:29;s:37:\"photocrati-nextgen_basic_gallery|0.11\";i:30;s:41:\"photocrati-nextgen_basic_imagebrowser|0.9\";i:31;s:38:\"photocrati-nextgen_basic_singlepic|0.9\";i:32;s:37:\"photocrati-nextgen_basic_tagcloud|0.9\";i:33;s:21:\"photocrati-widget|0.5\";i:34;s:33:\"photocrati-third_party_compat|0.3\";i:35;s:29:\"photocrati-nextgen_xmlrpc|0.4\";}','yes'),(14549,'ngg_options','a:86:{s:22:\"router_param_separator\";s:2:\"--\";s:19:\"router_param_prefix\";s:0:\"\";s:17:\"router_param_slug\";s:9:\"nggallery\";s:11:\"gallerypath\";s:19:\"wp-content/gallery/\";s:11:\"wpmuCSSfile\";s:13:\"nggallery.css\";s:9:\"wpmuStyle\";b:0;s:9:\"wpmuRoles\";b:0;s:16:\"wpmuImportFolder\";b:0;s:13:\"wpmuZipUpload\";b:0;s:14:\"wpmuQuotaCheck\";b:0;s:17:\"datamapper_driver\";s:22:\"custom_post_datamapper\";s:21:\"gallerystorage_driver\";s:25:\"ngglegacy_gallery_storage\";s:20:\"maximum_entity_count\";i:500;s:9:\"deleteImg\";b:1;s:9:\"swfUpload\";b:1;s:13:\"usePermalinks\";b:0;s:13:\"permalinkSlug\";s:9:\"nggallery\";s:14:\"graphicLibrary\";s:2:\"gd\";s:14:\"imageMagickDir\";s:15:\"/usr/local/bin/\";s:11:\"useMediaRSS\";b:0;s:18:\"galleries_in_feeds\";b:0;s:10:\"usePicLens\";b:0;s:12:\"activateTags\";i:0;s:10:\"appendType\";s:4:\"tags\";s:9:\"maxImages\";i:7;s:14:\"relatedHeading\";s:24:\"<h3>Related Images:</h3>\";s:10:\"thumbwidth\";i:120;s:11:\"thumbheight\";i:90;s:8:\"thumbfix\";b:1;s:12:\"thumbquality\";i:100;s:8:\"imgWidth\";i:800;s:9:\"imgHeight\";i:600;s:10:\"imgQuality\";i:100;s:9:\"imgBackup\";b:1;s:13:\"imgAutoResize\";b:0;s:9:\"galImages\";s:2:\"20\";s:17:\"galPagedGalleries\";i:0;s:10:\"galColumns\";i:0;s:12:\"galShowSlide\";b:1;s:12:\"galTextSlide\";s:16:\"[Show slideshow]\";s:14:\"galTextGallery\";s:17:\"[Show thumbnails]\";s:12:\"galShowOrder\";s:7:\"gallery\";s:7:\"galSort\";s:9:\"sortorder\";s:10:\"galSortDir\";s:3:\"ASC\";s:10:\"galNoPages\";b:1;s:13:\"galImgBrowser\";i:0;s:12:\"galHiddenImg\";i:0;s:10:\"galAjaxNav\";i:0;s:11:\"thumbEffect\";s:8:\"fancybox\";s:9:\"thumbCode\";s:41:\"class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"\";s:18:\"thumbEffectContext\";s:14:\"nextgen_images\";s:5:\"wmPos\";s:8:\"botRight\";s:6:\"wmXpos\";i:5;s:6:\"wmYpos\";i:5;s:6:\"wmType\";i:0;s:6:\"wmPath\";s:0:\"\";s:6:\"wmFont\";s:9:\"arial.ttf\";s:6:\"wmSize\";i:10;s:6:\"wmText\";s:12:\"Aaron Krauss\";s:7:\"wmColor\";s:6:\"000000\";s:8:\"wmOpaque\";s:3:\"100\";s:8:\"enableIR\";i:0;s:7:\"slideFx\";s:4:\"fade\";s:5:\"irURL\";s:0:\"\";s:12:\"irXHTMLvalid\";i:0;s:7:\"irAudio\";s:0:\"\";s:7:\"irWidth\";i:600;s:8:\"irHeight\";i:400;s:9:\"irShuffle\";b:1;s:17:\"irLinkfromdisplay\";b:1;s:16:\"irShownavigation\";i:0;s:11:\"irShowicons\";i:0;s:11:\"irWatermark\";i:0;s:13:\"irOverstretch\";s:4:\"True\";s:12:\"irRotatetime\";i:10;s:12:\"irTransition\";s:6:\"random\";s:10:\"irKenburns\";i:0;s:11:\"irBackcolor\";s:6:\"000000\";s:12:\"irFrontcolor\";s:6:\"FFFFFF\";s:12:\"irLightcolor\";s:6:\"CC0000\";s:13:\"irScreencolor\";s:6:\"000000\";s:11:\"activateCSS\";i:1;s:7:\"CSSfile\";s:13:\"nggallery.css\";s:23:\"dynamic_stylesheet_slug\";s:12:\"nextgen-dcss\";s:22:\"dynamic_thumbnail_slug\";s:13:\"nextgen-image\";s:11:\"installDate\";i:1422054697;}','yes'),(15416,'_site_transient_timeout_browser_e4e8b2c988fb4f22329556a13dfdbd96','1424192664','yes'),(15417,'_site_transient_browser_e4e8b2c988fb4f22329556a13dfdbd96','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"40.0.2214.94\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(15886,'_site_transient_timeout_browser_e9c55dec9c824a4f40cec07dc0363e5d','1424893164','yes'),(15887,'_site_transient_browser_e9c55dec9c824a4f40cec07dc0363e5d','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"40.0.2214.111\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(16028,'_site_transient_timeout_browser_494faabc6069826e1f8cce537ed8ad87','1425069935','yes'),(16029,'_site_transient_browser_494faabc6069826e1f8cce537ed8ad87','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"40.0.2214.115\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(17006,'_transient_timeout_plugin_slugs','1425063052','no'),(17007,'_transient_plugin_slugs','a:9:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:9:\"hello.php\";i:5;s:37:\"post-types-order/post-types-order.php\";i:6;s:39:\"search-everything/search-everything.php\";i:7;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:8;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','no'),(17012,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1425033780;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:9:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:2:\"15\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"3.0.4\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.3.0.4.zip\";}s:26:\"custom-field-suite/cfs.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"26058\";s:4:\"slug\";s:18:\"custom-field-suite\";s:6:\"plugin\";s:26:\"custom-field-suite/cfs.php\";s:11:\"new_version\";s:3:\"2.4\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/custom-field-suite/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/custom-field-suite.zip\";}s:32:\"disqus-comment-system/disqus.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4500\";s:4:\"slug\";s:21:\"disqus-comment-system\";s:6:\"plugin\";s:32:\"disqus-comment-system/disqus.php\";s:11:\"new_version\";s:4:\"2.84\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/disqus-comment-system/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/disqus-comment-system.zip\";}s:45:\"enable-media-replace/enable-media-replace.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"8351\";s:4:\"slug\";s:20:\"enable-media-replace\";s:6:\"plugin\";s:45:\"enable-media-replace/enable-media-replace.php\";s:11:\"new_version\";s:5:\"3.0.3\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/enable-media-replace/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/enable-media-replace.zip\";}s:9:\"hello.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"3564\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";}s:37:\"post-types-order/post-types-order.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"17292\";s:4:\"slug\";s:16:\"post-types-order\";s:6:\"plugin\";s:37:\"post-types-order/post-types-order.php\";s:11:\"new_version\";s:5:\"1.7.7\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/post-types-order/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/post-types-order.zip\";}s:39:\"search-everything/search-everything.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"269\";s:4:\"slug\";s:17:\"search-everything\";s:6:\"plugin\";s:39:\"search-everything/search-everything.php\";s:11:\"new_version\";s:5:\"8.1.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/search-everything/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/search-everything.8.1.3.zip\";}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"933\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:6:\"3.1.11\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.zip\";}s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4884\";s:4:\"slug\";s:24:\"velvet-blues-update-urls\";s:6:\"plugin\";s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";s:11:\"new_version\";s:5:\"3.2.3\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/velvet-blues-update-urls/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/velvet-blues-update-urls.3.2.3.zip\";}}}','yes'),(17014,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.1.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.1.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.1.1\";s:7:\"version\";s:5:\"4.1.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1425033778;s:15:\"version_checked\";s:5:\"4.1.1\";s:12:\"translations\";a:0:{}}','yes'),(17077,'_site_transient_timeout_theme_roots','1425035579','yes'),(17078,'_site_transient_theme_roots','a:5:{s:12:\"the_societea\";s:7:\"/themes\";s:13:\"twentyfifteen\";s:7:\"/themes\";s:14:\"twentyfourteen\";s:7:\"/themes\";s:14:\"twentythirteen\";s:7:\"/themes\";s:12:\"twentytwelve\";s:7:\"/themes\";}','yes'),(17081,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1425089268','no'),(17082,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 23:40:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://wordpress.org/?v=4.2-alpha-31565\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 4.1.1 Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/02/wordpress-4-1-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2015/02/wordpress-4-1-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 23:40:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3436\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:345:\"WordPress 4.1.1 is now available. This maintenance release fixes 21 bugs in version 4.1. Some of you may have been waiting to update to the latest version until now, but there just wasn&#8217;t much to address. WordPress 4.1 was a smooth-sailing release and has seen more than 14 million downloads in the last two months. For a full [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3086:\"<p>WordPress 4.1.1 is now available. This maintenance release fixes 21 bugs in version 4.1.</p>\n<p>Some of you may have been waiting to update to the latest version until now, but there just wasn&#8217;t much to address. WordPress 4.1 was a smooth-sailing release and has seen more than 14 million downloads in the last two months.</p>\n<p class=\"p1\"><span class=\"s1\">For a full list of changes, consult the <a href=\"https://core.trac.wordpress.org/query?milestone=4.1.1&amp;group=severity&amp;order=component\">list of tickets</a> and the <a href=\"https://core.trac.wordpress.org/log/branches/4.1?stop_rev=30974&amp;rev=31474\">changelog</a>. We fixed one annoying issue where a tag and a category with the same name could get muddled and prevent each other from being updated.</span></p>\n<p>If you are one of the millions already running WordPress 4.1 and your site, we’ve started rolling out automatic background updates for 4.1.1 for sites <a href=\"https://wordpress.org/plugins/background-update-tester/\">that support them</a>. Otherwise, <a href=\"https://wordpress.org/download/\">download WordPress 4.1.1</a> or visit <strong>Dashboard → Updates</strong> and simply click “Update Now.”</p>\n<p>Thanks to everyone who contributed to 4.1.1: <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/chrico\">ChriCo</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/hissy\">Takuro Hishikawa</a>, <a href=\"https://profiles.wordpress.org/ipm-frommen\">Thorsten Frommen</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Iseulde</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/sippis\">sippis</a>, <a href=\"https://profiles.wordpress.org/tmatsuur\">tmatsuur</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/valendesigns\">Derek Herman</a>, and <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a>.</p>\n<p>It is with both great honor and sadness we also recognize Kim Parsell as a contributor to this release and a <a href=\"https://make.wordpress.org/docs/2015/01/05/rip-kim-parsell/\">truly beloved member of the community</a> until her untimely passing in December. The project is working to establish a conference travel <a href=\"https://make.wordpress.org/community/2015/01/15/remembering-kim-parsell/\">scholarship</a> in her memory. We miss you, Kim.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/02/wordpress-4-1-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"WordPress 4.1 “Dinah”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://wordpress.org/news/2014/12/dinah/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/news/2014/12/dinah/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Dec 2014 18:35:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3386\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:360:\"Version 4.1 of WordPress, named &#8220;Dinah&#8221; in honor of jazz singer Dinah Washington, is available for download or update in your WordPress dashboard. New features in WordPress 4.1 help you focus on your writing, and the new default theme lets you show it off in style. Introducing Twenty Fifteen Our newest default theme, Twenty Fifteen, is [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:24563:\"<p>Version 4.1 of WordPress, named &#8220;Dinah&#8221; in honor of jazz singer <a href=\"http://wikipedia.org/wiki/Dinah_Washington\">Dinah Washington</a>, is available for download or update in your WordPress dashboard. New features in WordPress 4.1 help you focus on your writing, and the new default theme lets you show it off in style.</p>\n<hr />\n<h2 style=\"text-align: center\">Introducing Twenty Fifteen</h2>\n<p><img class=\"aligncenter size-large wp-image-3389\" src=\"https://wordpress.org/news/files/2014/12/2015-laptop-1024x533.png\" alt=\"2015-laptop\" width=\"692\" height=\"360\" /></p>\n<h3>Our newest default theme, Twenty Fifteen, is a blog-focused theme designed for clarity.</h3>\n<p><img class=\"alignright wp-image-3426 size-medium\" src=\"https://wordpress.org/news/files/2014/12/2015-phones-languages-small-300x250.png\" alt=\"\" width=\"300\" height=\"250\" />Twenty Fifteen has flawless language support, with help from <a href=\"https://www.google.com/get/noto/\">Google’s Noto font family</a>.</p>\n<p>The straightforward typography is readable on any screen size.</p>\n<p>Your content always takes center stage, whether viewed on a phone, tablet, laptop, or desktop computer.</p>\n<hr />\n<h2 style=\"text-align: center\">Distraction-free writing</h2>\n<p><img class=\"aligncenter size-large wp-image-3392\" src=\"https://wordpress.org/news/files/2014/12/dfw-screen-1024x614.png\" alt=\"dfw-screen\" width=\"692\" height=\"415\" /></p>\n<h3 style=\"text-align: center\"><em>Just write.</em></h3>\n<p>Sometimes, you just need to concentrate on putting your thoughts into words. Try turning on <strong>distraction-free writing mode</strong>. When you start typing, all the distractions will fade away, letting you focus solely on your writing. All your editing tools instantly return when you need them.</p>\n<hr />\n<h2 style=\"text-align: center\">The Finer Points</h2>\n<h5><strong><img class=\"alignleft wp-image-3405\" src=\"https://wordpress.org/news/files/2014/12/icon-language2.png\" alt=\"\" width=\"80\" height=\"80\" /></strong>Choose a language</h5>\n<p>Right now, WordPress 4.1 is already translated into over forty languages, with more always in progress. You can switch to any translation on the General Settings screen.</p>\n<h5><strong><img class=\"alignleft wp-image-3406\" src=\"https://wordpress.org/news/files/2014/12/icon-logout1.png\" alt=\"\" width=\"80\" height=\"80\" /></strong>Log out everywhere</h5>\n<p>If you’ve ever worried you forgot to sign out from a shared computer, you can now go to your profile and log out everywhere.</p>\n<h5><strong><img class=\"alignleft wp-image-3407\" src=\"https://wordpress.org/news/files/2014/12/icon-vine1.png\" alt=\"\" width=\"80\" height=\"80\" /></strong>Vine embeds</h5>\n<p>Embedding videos from Vine is as simple as pasting a URL onto its own line in a post. See the <a href=\"https://codex.wordpress.org/Embeds\">full list</a> of supported embeds.</p>\n<h5><strong><img class=\"alignleft wp-image-3408\" src=\"https://wordpress.org/news/files/2014/12/icon-recommended1.png\" alt=\"\" width=\"80\" height=\"80\" /></strong>Plugin recommendations</h5>\n<p>The plugin installer suggests plugins for you to try. Recommendations are based on the plugins you and other users have installed.</p>\n<hr />\n<h2 style=\"text-align: center\">Under the Hood</h2>\n<h5>Complex Queries</h5>\n<p>Metadata, date, and term queries now support advanced conditional logic, like nested clauses and multiple operators — <code>A AND ( B OR C )</code>.</p>\n<h5>Customizer API</h5>\n<p>The customizer now supports conditionally showing panels and sections based on the page being previewed.</p>\n<h5><code>&lt;title&gt;</code> tags in themes</h5>\n<p><code>add_theme_support( \'title-tag\' )</code> tells WordPress to handle the complexities of document titles.</p>\n<h5>Developer Reference</h5>\n<p>Continued improvements to inline code documentation have made the <a href=\"https://developer.wordpress.org/reference/\">developer reference</a> more complete than ever.</p>\n<hr />\n<h2 style=\"text-align: center\">The Choir</h2>\n<p>This release was led by <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, with the help of these awesome folks. Check out some of their profiles while listening to Dinah Washington on the music service of your choice:</p>\n<a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/akumria\">akumria</a>, <a href=\"https://profiles.wordpress.org/xknown\">Alex Concha</a>, <a href=\"https://profiles.wordpress.org/viper007bond\">Alex Mills (Viper007Bond)</a>, <a href=\"https://profiles.wordpress.org/tellyworth\">Alex Shiels</a>, <a href=\"https://profiles.wordpress.org/collinsinternet\">Allan Collins</a>, <a href=\"https://profiles.wordpress.org/momo360modena\">Amaury Balmer</a>, <a href=\"https://profiles.wordpress.org/amruta123b\">Amruta Bhosale</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/andg\">Andrea Gandino</a>, <a href=\"https://profiles.wordpress.org/sumobi\">Andrew Munro (sumobi)</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/andrewryno\">Andrew Ryno</a>, <a href=\"https://profiles.wordpress.org/rarst\">Andrey \"Rarst\" Savchenko</a>, <a href=\"https://profiles.wordpress.org/ankitgadertcampcom\">Ankit Gade</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/antpb\">Anthony Burchell</a>, <a href=\"https://profiles.wordpress.org/arippberger\">arippberger</a>, <a href=\"https://profiles.wordpress.org/filosofo\">Austin Matzko</a>, <a href=\"https://profiles.wordpress.org/bainternet\">Bainternet</a>, <a href=\"https://profiles.wordpress.org/barrykooij\">Barry Kooij</a>, <a href=\"https://profiles.wordpress.org/empireoflight\">Ben Dunkle</a>, <a href=\"https://profiles.wordpress.org/benjmay\">Ben May</a>, <a href=\"https://profiles.wordpress.org/neoxx\">Bernhard Riedl</a>, <a href=\"https://profiles.wordpress.org/birgire\">Birgir Erlendsson (birgire)</a>, <a href=\"https://profiles.wordpress.org/bobbingwide\">bobbingwide</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone B. Gorges</a>, <a href=\"https://profiles.wordpress.org/bradyvercher\">Brady Vercher</a>, <a href=\"https://profiles.wordpress.org/bramd\">Bram Duvigneau</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/briandichiara\">Brian DiChiara</a>, <a href=\"https://profiles.wordpress.org/rzen\">Brian Richards</a>, <a href=\"https://profiles.wordpress.org/bswatson\">Brian Watson</a>, <a href=\"https://profiles.wordpress.org/camdensegal\">Camden Segal</a>, <a href=\"https://profiles.wordpress.org/captaintheme\">Captain Theme</a>, <a href=\"https://profiles.wordpress.org/hiwhatsup\">Carlos</a>, <a href=\"https://profiles.wordpress.org/caspie\">Caspie</a>, <a href=\"https://profiles.wordpress.org/ccprice\">ccprice</a>, <a href=\"https://profiles.wordpress.org/mackensen\">Charles Fulton</a>, <a href=\"https://profiles.wordpress.org/chrico\">ChriCo</a>, <a href=\"https://profiles.wordpress.org/aprea\">Chris Aprea</a>, <a href=\"https://profiles.wordpress.org/chrisbliss18\">Chris Jean</a>, <a href=\"https://profiles.wordpress.org/cmmarslender\">Chris Marslender</a>, <a href=\"https://profiles.wordpress.org/jazzs3quence\">Chris Reynolds</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">chriscct7</a>, <a href=\"https://profiles.wordpress.org/chrisl27\">chrisl27</a>, <a href=\"https://profiles.wordpress.org/cfoellmann\">Christian Foellmann</a>, <a href=\"https://profiles.wordpress.org/cfinke\">Christopher Finke</a>, <a href=\"https://profiles.wordpress.org/cyclometh\">Corey Snow</a>, <a href=\"https://profiles.wordpress.org/corphi\">Corphi</a>, <a href=\"https://profiles.wordpress.org/curtjen\">curtjen</a>, <a href=\"https://profiles.wordpress.org/colorful-tones\">Damon Cook</a>, <a href=\"https://profiles.wordpress.org/dancameron\">Dan Cameron</a>, <a href=\"https://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber</a>, <a href=\"https://profiles.wordpress.org/convissor\">Daniel Convissor</a>, <a href=\"https://profiles.wordpress.org/nerrad\">Darren Ethier (nerrad)</a>, <a href=\"https://profiles.wordpress.org/koop\">Daryl Koopersmith</a>, <a href=\"https://profiles.wordpress.org/dmchale\">Dave McHale</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/davidjlaietta\">David Laietta</a>, <a href=\"https://profiles.wordpress.org/technical_mastermind\">David Wood</a>, <a href=\"https://profiles.wordpress.org/davidthemachine\">DavidTheMachine</a>, <a href=\"https://profiles.wordpress.org/dcavins\">dcavins</a>, <a href=\"https://profiles.wordpress.org/realloc\">Dennis Ploetner</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/wedi\">Dirk Weise</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/dominikschwind-1\">Dominik Schwind</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/dustyf\">Dustin Filippini</a>, <a href=\"https://profiles.wordpress.org/dustinhartzler\">Dustin Hartzler</a>, <a href=\"https://profiles.wordpress.org/eliorivero\">Elio Rivero</a>, <a href=\"https://profiles.wordpress.org/ebinnion\">Eric Binnion</a>, <a href=\"https://profiles.wordpress.org/ew_holmes\">Eric Holmes</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Lewis</a>, <a href=\"https://profiles.wordpress.org/fab1en\">Fabien Quatravaux</a>, <a href=\"https://profiles.wordpress.org/florianziegler\">Florian Ziegler</a>, <a href=\"https://profiles.wordpress.org/hereswhatidid\">Gabe Shackle</a>, <a href=\"https://profiles.wordpress.org/garyc40\">Gary Cao</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/soulseekah\">Gennady Kovshenin</a>, <a href=\"https://profiles.wordpress.org/babbardel\">George Olaru</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/gregrickaby\">Greg Rickaby</a>, <a href=\"https://profiles.wordpress.org/gcorne\">Gregory Cornelius</a>, <a href=\"https://profiles.wordpress.org/tivnet\">Gregory Karpinsky (@tivnet)</a>, <a href=\"https://profiles.wordpress.org/bordoni\">Gustavo Bordoni</a>, <a href=\"https://profiles.wordpress.org/hardy101\">hardy101</a>, <a href=\"https://profiles.wordpress.org/hauvong\">hauvong</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/heshiming\">heshiming</a>, <a href=\"https://profiles.wordpress.org/honeysilvas\">honeysilvas</a>, <a href=\"https://profiles.wordpress.org/hugodelgado\">hugodelgado</a>, <a href=\"https://profiles.wordpress.org/iandstewart\">Ian Stewart</a>, <a href=\"https://profiles.wordpress.org/ianmjones\">ianmjones</a>, <a href=\"https://profiles.wordpress.org/igmoweb\">Ignacio Cruz Moreno</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/ivankristianto\">Ivan Kristianto</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jaimieolmstead\">jaimieolmstead</a>, <a href=\"https://profiles.wordpress.org/jakubtyrcha\">jakub.tyrcha</a>, <a href=\"https://profiles.wordpress.org/janhenckens\">janhenckens</a>, <a href=\"https://profiles.wordpress.org/avryl\">Janneke Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/japh\">Japh</a>, <a href=\"https://profiles.wordpress.org/jwenerd\">Jared Wenerd</a>, <a href=\"https://profiles.wordpress.org/jarednova\">jarednova</a>, <a href=\"https://profiles.wordpress.org/jeanyoungkim\">jeanyoungkim</a>, <a href=\"https://profiles.wordpress.org/jfarthing84\">Jeff Farthing</a>, <a href=\"https://profiles.wordpress.org/jeffstieler\">Jeff Stieler</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jeherve\">Jeremy Herve</a>, <a href=\"https://profiles.wordpress.org/jesin\">Jesin A</a>, <a href=\"https://profiles.wordpress.org/jayjdk\">Jesper Johansen (jayjdk)</a>, <a href=\"https://profiles.wordpress.org/engelen\">Jesper van Engelen</a>, <a href=\"https://profiles.wordpress.org/jessepollak\">Jesse Pollak</a>, <a href=\"https://profiles.wordpress.org/jipmoors\">jipmoors</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joemcgill\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/johneckman\">John Eckman</a>, <a href=\"https://profiles.wordpress.org/johnrom\">johnrom</a>, <a href=\"https://profiles.wordpress.org/johnstonphilip\">johnstonphilip</a>, <a href=\"https://profiles.wordpress.org/jb510\">Jon Brown</a>, <a href=\"https://profiles.wordpress.org/duck_\">Jon Cave</a>, <a href=\"https://profiles.wordpress.org/jbrinley\">Jonathan Brinley</a>, <a href=\"https://profiles.wordpress.org/desrosj\">Jonathan Desrosiers</a>, <a href=\"https://profiles.wordpress.org/joostdevalk\">Joost de Valk</a>, <a href=\"https://profiles.wordpress.org/softmodeling\">Jordi Cabot</a>, <a href=\"https://profiles.wordpress.org/joshuaabenazer\">Joshua Abenazer</a>, <a href=\"https://profiles.wordpress.org/tai\">JOTAKI Taisuke</a>, <a href=\"https://profiles.wordpress.org/jrf\">jrf</a>, <a href=\"https://profiles.wordpress.org/julien731\">Julien Liabeuf</a>, <a href=\"https://profiles.wordpress.org/justinsainton\">Justin Sainton</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/kadamwhite\">K.Adam White</a>, <a href=\"https://profiles.wordpress.org/trepmal\">Kailey (trepmal)</a>, <a href=\"https://profiles.wordpress.org/kamelkev\">kamelkev</a>, <a href=\"https://profiles.wordpress.org/karpstrucking\">karpstrucking</a>, <a href=\"https://profiles.wordpress.org/keesiemeijer\">keesiemeijer</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/kevinlangleyjr\">Kevin Langley</a>, <a href=\"https://profiles.wordpress.org/kdoran\">Kiko Doran</a>, <a href=\"https://profiles.wordpress.org/kpdesign\">Kim Parsell</a>, <a href=\"https://profiles.wordpress.org/kwight\">Kirk Wight</a>, <a href=\"https://profiles.wordpress.org/kitchin\">kitchin</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/knutsp\">Knut Sparhell</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/kosvrouvas\">Kostas Vrouvas</a>, <a href=\"https://profiles.wordpress.org/kraftner\">kraftner</a>, <a href=\"https://profiles.wordpress.org/kristastevens\">kristastevens</a>, <a href=\"https://profiles.wordpress.org/kurtpayne\">Kurt Payne</a>, <a href=\"https://profiles.wordpress.org/lancewillett\">Lance Willett</a>, <a href=\"https://profiles.wordpress.org/offereins\">Laurens Offereins</a>, <a href=\"https://profiles.wordpress.org/linuxologos\">linuxologos</a>, <a href=\"https://profiles.wordpress.org/ideag\">Liuiza Arunas</a>, <a href=\"https://profiles.wordpress.org/loushou\">loushou</a>, <a href=\"https://profiles.wordpress.org/latz\">Lutz Schroer</a>, <a href=\"https://profiles.wordpress.org/manoz69\">Manoz69</a>, <a href=\"https://profiles.wordpress.org/mantismamita\">mantismamita</a>, <a href=\"https://profiles.wordpress.org/marcosf\">Marco Schmoecker</a>, <a href=\"https://profiles.wordpress.org/nofearinc\">Mario Peshev</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius (Clorith)</a>, <a href=\"https://profiles.wordpress.org/landakram\">Mark Hudnall</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/senff\">Mark Senff</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/marsjaninzmarsa\">marsjaninzmarsa</a>, <a href=\"https://profiles.wordpress.org/matveb\">Matias Ventura</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mboynes\">Matthew Boynes</a>, <a href=\"https://profiles.wordpress.org/mattheu\">Matthew Haines-Young</a>, <a href=\"https://profiles.wordpress.org/mattkeys\">mattkeys</a>, <a href=\"https://profiles.wordpress.org/mlteal\">Maura Teal</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/merty\">Mert Yazicioglu</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Michael Adams (mdawaffe)</a>, <a href=\"https://profiles.wordpress.org/michael-arestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/tw2113\">Michael Beckwith</a>, <a href=\"https://profiles.wordpress.org/cainm\">Michael Cain</a>, <a href=\"https://profiles.wordpress.org/smashcut\">Michael Pick</a>, <a href=\"https://profiles.wordpress.org/michalzuber\">michalzuber</a>, <a href=\"https://profiles.wordpress.org/chellycat\">Michelle Langston</a>, <a href=\"https://profiles.wordpress.org/mcsf\">Miguel Fonseca</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/mikejolley\">Mike Jolley</a>, <a href=\"https://profiles.wordpress.org/mnelson4\">Mike Nelson</a>, <a href=\"https://profiles.wordpress.org/dh-shredder\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/mikeyarce\">Mikey Arce</a>, <a href=\"https://profiles.wordpress.org/studionashvegas\">Mitch Canter (studionashvegas)</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/mor10\">Morten Rand-Hendriksen</a>, <a href=\"https://profiles.wordpress.org/mvd7793\">mvd7793</a>, <a href=\"https://profiles.wordpress.org/alex-ye\">Nashwan Doaqan</a>, <a href=\"https://profiles.wordpress.org/niallkennedy\">Niall Kennedy</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nikv\">Nikhil Vimal (NikV)</a>, <a href=\"https://profiles.wordpress.org/nikolovtmw\">Nikola Nikolov</a>, <a href=\"https://profiles.wordpress.org/nobleclem\">nobleclem</a>, <a href=\"https://profiles.wordpress.org/noplanman\">noplanman</a>, <a href=\"https://profiles.wordpress.org/nvwd\">Nowell VanHoesen</a>, <a href=\"https://profiles.wordpress.org/originalexe\">OriginalEXE</a>, <a href=\"https://profiles.wordpress.org/p_enrique\">p_enrique</a>, <a href=\"https://profiles.wordpress.org/pushplaybang\">Paul</a>, <a href=\"https://profiles.wordpress.org/pauldewouters\">Paul de Wouters</a>, <a href=\"https://profiles.wordpress.org/paulschreiber\">Paul Schreiber</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/peterchester\">Peter Chester</a>, <a href=\"https://profiles.wordpress.org/donutz\">Peter J. Herrel</a>, <a href=\"https://profiles.wordpress.org/westi\">Peter Westwood</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/philiparthurmoore\">Philip Arthur Moore</a>, <a href=\"https://profiles.wordpress.org/phpmypython\">phpmypython</a>, <a href=\"https://profiles.wordpress.org/mordauk\">Pippin Williamson</a>, <a href=\"https://profiles.wordpress.org/nprasath002\">Prasath Nadarajah</a>, <a href=\"https://profiles.wordpress.org/psycleuk\">psycleuk</a>, <a href=\"https://profiles.wordpress.org/ptahdunbar\">Ptah Dunbar</a>, <a href=\"https://profiles.wordpress.org/quietnic\">quietnic</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"https://profiles.wordpress.org/ramiabraham\">ramiabraham</a>, <a href=\"https://profiles.wordpress.org/greuben\">Reuben Gunday</a>, <a href=\"https://profiles.wordpress.org/rianrietveld\">Rian Rietveld</a>, <a href=\"https://profiles.wordpress.org/richardmtl\">Richard Archambault</a>, <a href=\"https://profiles.wordpress.org/rickalee\">Ricky Lee Whittemore</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/rodrigosprimo\">Rodrigo Primo</a>, <a href=\"https://profiles.wordpress.org/ryan\">Ryan Boren</a>, <a href=\"https://profiles.wordpress.org/ryankienstra\">Ryan Kienstra</a>, <a href=\"https://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/sakinshrestha\">Sakin Shrestha</a>, <a href=\"https://profiles.wordpress.org/samhotchkiss\">Sam Hotchkiss</a>, <a href=\"https://profiles.wordpress.org/otto42\">Samuel Wood (Otto)</a>, <a href=\"https://profiles.wordpress.org/sc0ttkclark\">Scott Kingsley Clark</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/shooper\">Shawn Hooper</a>, <a href=\"https://profiles.wordpress.org/simonp303\">Simon Pollard</a>, <a href=\"https://profiles.wordpress.org/simonwheatley\">Simon Wheatley</a>, <a href=\"https://profiles.wordpress.org/skaeser\">skaeser</a>, <a href=\"https://profiles.wordpress.org/slobodanmanic\">Slobodan Manic</a>, <a href=\"https://profiles.wordpress.org/socki03\">socki03</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">solarissmoke</a>, <a href=\"https://profiles.wordpress.org/stephdau\">Stephane Daury</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stephenharris\">Stephen Harris</a>, <a href=\"https://profiles.wordpress.org/stevegrunwell\">Steve Grunwell</a>, <a href=\"https://profiles.wordpress.org/5um17\">Sumit Singh</a>, <a href=\"https://profiles.wordpress.org/tacoverdo\">TacoVerdo</a>, <a href=\"https://profiles.wordpress.org/iamtakashi\">Takashi Irie</a>, <a href=\"https://profiles.wordpress.org/miyauchi\">Takayuki Miyauchi</a>, <a href=\"https://profiles.wordpress.org/karmatosed\">Tammie</a>, <a href=\"https://profiles.wordpress.org/tareq1988\">Tareq Hasan</a>, <a href=\"https://profiles.wordpress.org/tlovett1\">Taylor Lovett</a>, <a href=\"https://profiles.wordpress.org/ipm-frommen\">Thorsten Frommen</a>, <a href=\"https://profiles.wordpress.org/tillkruess\">Till Kruss</a>, <a href=\"https://profiles.wordpress.org/tschutter\">Tobias Schutter</a>, <a href=\"https://profiles.wordpress.org/tobiasbg\">TobiasBg</a>, <a href=\"https://profiles.wordpress.org/tmtrademark\">Toby McKes</a>, <a href=\"https://profiles.wordpress.org/tjnowell\">Tom J Nowell</a>, <a href=\"https://profiles.wordpress.org/tomasm\">Tomas Mackevicius</a>, <a href=\"https://profiles.wordpress.org/tomharrigan\">TomHarrigan</a>, <a href=\"https://profiles.wordpress.org/topher1kenobe\">Topher</a>, <a href=\"https://profiles.wordpress.org/zodiac1978\">Torsten Landsiedel</a>, <a href=\"https://profiles.wordpress.org/liljimmi\">Tracy Levesque</a>, <a href=\"https://profiles.wordpress.org/transom\">transom</a>, <a href=\"https://profiles.wordpress.org/wpsmith\">Travis Smith</a>, <a href=\"https://profiles.wordpress.org/tywayne\">Ty Carlson</a>, <a href=\"https://profiles.wordpress.org/desaiuditd\">Udit Desai</a>, <a href=\"https://profiles.wordpress.org/umeshsingla\">Umesh Kumar</a>, <a href=\"https://profiles.wordpress.org/vinod-dalvi\">Vinod Dalvi</a>, <a href=\"https://profiles.wordpress.org/vlajos\">vlajos</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">voldemortensen</a>, <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a>, <a href=\"https://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"https://profiles.wordpress.org/nobinobi\">Yuta Sekine</a>, <a href=\"https://profiles.wordpress.org/zrothauser\">Zack Rothauser</a>, and <a href=\"https://profiles.wordpress.org/tollmanz\">Zack Tollman</a>.\n<p>There were 283 contributors to this release, again a new high.</p>\n<p>If you want to help out or follow along, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\n<p>Thanks for choosing WordPress. Happy holidays and see you next year for version 4.2!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/news/2014/12/dinah/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 4.1 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate-3/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Dec 2014 02:22:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3411\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:429:\"The next release candidate for WordPress 4.1 is now available for testing. Seventy changes have gone in since the first release candidate. With no known issues left, we plan to release 4.1 tomorrow, December 18. To test, try the WordPress Beta Tester plugin (you&#8217;ll want &#8220;bleeding edge nightlies&#8221;). Or you can download the release candidate here (zip). If you&#8217;d like to learn more about [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"John Blackbourn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1465:\"<p>The next release candidate for WordPress 4.1 is now available for testing.</p>\n<p><a href=\"https://core.trac.wordpress.org/log/trunk?rev=30961&amp;stop_rev=30827\">Seventy changes</a> have gone in since the <a href=\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate/\">first release candidate</a>. With no known issues left, we plan to release 4.1 tomorrow, December 18.</p>\n<p>To test, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you&#8217;ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.1-RC3.zip\">download the release candidate here</a> (zip). If you&#8217;d like to learn more about what&#8217;s new in WordPress 4.1, visit the updated About screen in your dashboard (<strong><img src=\"https://i0.wp.com/core.svn.wordpress.org/branches/3.6/wp-content/themes/twentyten/images/wordpress.png\" alt=\"\" width=\"16\" height=\"16\" /> → About</strong> in the toolbar) and also check out <a href=\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/\">the Beta 1 post</a>.</p>\n<p><strong>Plugin authors:</strong> Remember to test your plugins against 4.1, and if they&#8217;re compatible, make sure they are marked as tested up to 4.1. Be sure to follow along the core development blog; we&#8217;ve been posting <a href=\"https://make.wordpress.org/core/tag/4-1-dev-notes/\">notes for developers for 4.1</a> as always.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate-3/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 4.1 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Dec 2014 11:52:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"4.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3375\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:341:\"The release candidate for WordPress 4.1 is now available. We&#8217;ve made a lot of refinements over the last few weeks. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.1 on Tuesday, December 16, but we need your [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"John Blackbourn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2301:\"<p>The release candidate for WordPress 4.1 is now available.</p>\n<p>We&#8217;ve made a lot of refinements over the last few weeks. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.1 on Tuesday, December 16, but we need your help to get there. If you haven’t tested 4.1 yet, now is the time! (Please though, not on your live site unless you’re adventurous.)</p>\n<p><strong>Think you&#8217;ve found a bug?</strong> Please post to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta support forum</a>. If any known issues come up, you&#8217;ll be able to <a href=\"https://core.trac.wordpress.org/report/5\">find them here</a>.</p>\n<p>To test WordPress 4.1 RC1, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.1-RC1.zip\">download the release candidate here</a> (zip). If you&#8217;d like to learn more about what&#8217;s new in WordPress 4.1, visit the About screen in your dashboard (<strong><img src=\"https://i0.wp.com/core.svn.wordpress.org/branches/3.6/wp-content/themes/twentyten/images/wordpress.png\" alt=\"\" width=\"16\" height=\"16\" /> → About</strong> in the toolbar) or check out the <a href=\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/\">beta announcement</a>.</p>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.1 and update your plugin&#8217;s <em>Tested up to</em> version in the readme to 4.1 before next week. If you find compatibility problems, we never want to break things, so please be sure to post to the support forums so we can figure those out before the final release.</p>\n<p>Be sure to <a href=\"https://make.wordpress.org/core/\">follow along the core development blog</a>, where we&#8217;ll continue to post <a href=\"https://make.wordpress.org/core/tag/4-1-dev-notes/\">notes for developers</a> for 4.1. (For example: if you&#8217;ve written a child theme for Twenty Fifteen, some of the new pagination functions have been renamed for clarity.)</p>\n<p><em>Testing four point one</em><br />\n<em>Why are we up at this hour?</em><br />\n<em>Code is poetry</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/news/2014/12/wordpress-4-1-release-candidate/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.0.1 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2014/11/wordpress-4-0-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2014/11/wordpress-4-0-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Nov 2014 18:55:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3363\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:345:\"WordPress 4.0.1 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. Sites that support automatic background updates will be updated to WordPress 4.0.1 within the next few hours. If you are still on WordPress 3.9.2, 3.8.4, or 3.7.4, you will be [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3395:\"<p>WordPress 4.0.1 is now available. This is a <strong>critical security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>Sites that support automatic background updates will be updated to WordPress 4.0.1 within the next few hours. If you are still on WordPress 3.9.2, 3.8.4, or 3.7.4, you will be updated to 3.9.3, 3.8.5, or 3.7.5 to keep everything secure. (We don’t support older versions, so please update to 4.0.1 for the latest and greatest.)</p>\n<p>WordPress versions 3.9.2 and earlier are affected by a critical cross-site scripting vulnerability, which could enable anonymous users to compromise a site. This was reported by <a href=\"http://klikki.fi/\">Jouko Pynnonen</a>. This issue does not affect version 4.0, but version 4.0.1 does address these eight security issues:</p>\n<ul>\n<li>Three cross-site scripting issues that a contributor or author could use to compromise a site. Discovered by <a href=\"http://joncave.co.uk/\">Jon Cave</a>, <a href=\"http://www.miqrogroove.com/\">Robert Chapin</a>, and <a href=\"https://johnblackbourn.com/\">John Blackbourn</a> of the WordPress security team.</li>\n<li>A cross-site request forgery that could be used to trick a user into changing their password.</li>\n<li>An issue that could lead to a denial of service when passwords are checked. Reported by <a href=\"http://www.behindthefirewalls.com/\">Javier Nieto Arevalo</a> and <a href=\"http://www.devconsole.info/\">Andres Rojas Guerrero</a>.</li>\n<li>Additional protections for server-side request forgery attacks when WordPress makes HTTP requests. Reported by Ben Bidner (vortfu).</li>\n<li>An extremely unlikely hash collision could allow a user&#8217;s account to be compromised, that also required that they haven&#8217;t logged in since 2008 (I wish I were kidding). Reported by <a href=\"http://david.dw-perspective.org.uk\">David Anderson</a>.</li>\n<li>WordPress now invalidates the links in a password reset email if the user remembers their password, logs in, and changes their email address. Reported separately by <a href=\"https://twitter.com/MomenBassel\">Momen Bassel</a>, <a href=\"http://c0dehouse.blogspot.in/\">Tanoy Bose</a>, and <a href=\"https://managewp.com/\">Bojan Slavković of ManageWP</a>.</li>\n</ul>\n<p>Version 4.0.1 also fixes 23 bugs with 4.0, and we&#8217;ve made two hardening changes, including better validation of EXIF data we are extracting from uploaded photos. Reported by <a href=\"http://www.securesolutions.no/\">Chris Andrè Dale</a>.</p>\n<p>We appreciated the <a href=\"https://codex.wordpress.org/FAQ_Security\">responsible disclosure</a> of these issues directly to our security team. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.0.1\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.0?rev=30475&amp;stop_rev=29710\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.0.1</a> or venture over to <strong>Dashboard → Updates</strong> and simply click “Update Now”.</p>\n<p><em>Already testing WordPress 4.1? The second beta is now available (<a href=\"https://wordpress.org/wordpress-4.1-beta2.zip\">zip</a>) and it contains these security fixes. For more on 4.1, see <a href=\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/\">the beta 1 announcement post</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2014/11/wordpress-4-0-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.1 Beta 1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Nov 2014 22:35:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:4:\"beta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3352\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:346:\"Welcome, everyone, to WordPress 4.1 Beta 1! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.1, try the WordPress Beta Tester plugin (you&#8217;ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"John Blackbourn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3409:\"<p>Welcome, everyone, to WordPress 4.1 Beta 1!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.1, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you&#8217;ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"//wordpress.org/wordpress-4.1-beta1.zip\">download the beta here</a> (zip).</p>\n<p>WordPress 4.1 is due for release next month, so we need your help with testing. Here are some highlights of what to test:</p>\n<ul>\n<li>Our beautiful new default theme, <a href=\"https://make.wordpress.org/core/2014/09/09/twenty-fifteen/\">Twenty Fifteen</a>. It&#8217;s a clean, mobile-first, blog-focused theme designed through simplicity.</li>\n<li>A new <a href=\"https://make.wordpress.org/core/2014/11/11/focus-v2-demo-video/\">distraction-free writing mode for the editor</a>. It&#8217;s enabled by default for beta, and we&#8217;d love feedback on it.</li>\n<li>The ability to automatically install new language packs right from the General Settings screen (available as long as your site&#8217;s filesystem is writable).</li>\n<li>A new inline formatting toolbar for images embedded into posts.</li>\n</ul>\n<p>There have been a lot of changes for developers to test as well:</p>\n<ul>\n<li><a href=\"https://make.wordpress.org/core/2014/10/20/update-on-query-improvements-in-4-1/\">Improvements to meta, date, comment, and taxonomy queries</a>, including complex (nested, multiple relation) queries; and querying comment types (<a href=\"https://core.trac.wordpress.org/ticket/12668\">#12668</a>).</li>\n<li>A single term shared across multiple taxonomies is now split into two when updated. For more, <a href=\"https://make.wordpress.org/core/2014/11/12/an-update-on-the-taxonomy-roadmap/\">see this post</a>, <a href=\"https://core.trac.wordpress.org/ticket/5809\">#5809</a>, and <a href=\"https://core.trac.wordpress.org/ticket/30335\">#30335</a>.</li>\n<li>A new and better way for <a href=\"https://make.wordpress.org/core/2014/10/29/title-tags-in-4-1/\">themes to handle title tags</a>.</li>\n<li>Several <a href=\"https://make.wordpress.org/core/2014/10/27/toward-a-complete-javascript-api-for-the-customizer/\">improvements to the Customizer API</a>, including contextual panels and sections, and JavaScript templates for controls.</li>\n</ul>\n<p>If you want a more in-depth view of what changes have made it into 4.1, <a href=\"https://make.wordpress.org/core/tag/week-in-core/\">check out the weekly review posts</a> on the main development blog.</p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.1\">everything we’ve fixed</a> so far.</p>\n<p>Happy testing!</p>\n<p><em>Twenty Fifteen theme</em><br />\n<em> The beautiful face which hides</em><br />\n<em> Many improvements</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2014/11/wordpress-4-1-beta-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Watch WordCamp San Francisco Livestream\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2014/10/wcsf-livestream/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2014/10/wcsf-livestream/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Oct 2014 20:18:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:9:\"Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"WordCamp\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3341\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:381:\"WordCamp San Francisco is the official annual WordPress conference, gathering the community every year since 2006. This is the time when Matt Mullenweg addresses the community in his annual State of the Word presentation – a recap of  the year in WordPress and giving us a glimpse into its future. This year the speaker lineup is stellar. There will be talks by [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Nikolay Bachiyski\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1975:\"<p><a title=\"2014 edition\" href=\"http://2014.sf.wordcamp.org\">WordCamp San Francisco</a> is the official annual WordPress conference, gathering the community every year <a title=\"An old website for a WordPress long time ago\" href=\"http://2006.sf.wordcamp.org\">since 2006</a>. This is the time when Matt Mullenweg addresses the community in his annual <a href=\"http://wordpress.tv/?s=state+of+the+word\">State of the Word</a> presentation – a recap of  the year in WordPress and giving us a glimpse into its future.</p>\n<p>This year the speaker lineup is stellar. There will be talks by three of the lead WordPress developers: <a href=\"http://2014.sf.wordcamp.org/speakers/#wcorg-speaker-andrew-nacin\">Andrew Nacin</a>, <a href=\"http://2014.sf.wordcamp.org/speakers/#wcorg-speaker-helen-hou-sandi\">Helen Hou-Sandí</a>, and <a href=\"http://2014.sf.wordcamp.org/speakers/#wcorg-speaker-mark-jaquith\">Mark Jaquith</a>. We’re also looking forward to speakers like <a href=\"http://2014.sf.wordcamp.org/speakers/#wcorg-speaker-jenny-lawson\">Jenny Lawson</a>, also known as The Bloggess, and <a href=\"http://2014.sf.wordcamp.org/speaker/chris-lema/\">Chris Lema</a>. If you’re at all interested in the web, you will appreciate the appearance of <a href=\"http://2014.sf.wordcamp.org/speakers/#wcorg-speaker-jeff-veen\">Jeff Veen</a> – one of the creators of Google Analytics and co-founder of Typekit.</p>\n<p>Even though San Francisco is far far away for most of you, you can still be part of the fun and watch all presentations in real-time via livestream:</p>\n<p><a href=\"http://2014.sf.wordcamp.org/tickets/\">Get a livestream ticket and watch all talks from WordCamp San Francisco live</a></p>\n<p>If you hurry, you can get one of the special livestream tickets, including a WordCamp San Francisco 2104 t-shirt. You can find all the technical details and start times <a href=\"http://2014.sf.wordcamp.org/live-stream/\">at the WordCamp San Francisco website</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2014/10/wcsf-livestream/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"WordPress 4.0 “Benny”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://wordpress.org/news/2014/09/benny/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/news/2014/09/benny/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Sep 2014 17:05:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3296\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:370:\"Version 4.0 of WordPress, named “Benny” in honor of jazz clarinetist and bandleader Benny Goodman, is available for download or update in your WordPress dashboard. While 4.0 is just another number for us after 3.9 and before 4.1, we feel we&#8217;ve put a little extra polish into it. This release brings you a smoother writing and management experience [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:23571:\"<p>Version 4.0 of WordPress, named “Benny” in honor of jazz clarinetist and bandleader <a href=\"http://en.wikipedia.org/wiki/Benny_Goodman\">Benny Goodman</a>, is available <a href=\"https://wordpress.org/download/\">for download</a> or update in your WordPress dashboard. While 4.0 is just another number for us after 3.9 and before 4.1, we feel we&#8217;ve put a little extra polish into it. This release brings you a smoother writing and management experience we think you&#8217;ll enjoy.</p>\n<div id=\"v-bUdzKMro-1\" class=\"video-player\"><embed id=\"v-bUdzKMro-1-video\" src=\"https://v0.wordpress.com/player.swf?v=1.04&amp;guid=bUdzKMro&amp;isDynamicSeeking=true\" type=\"application/x-shockwave-flash\" width=\"692\" height=\"388\" title=\"Introducing WordPress 4.0 &quot;Benny&quot;\" wmode=\"direct\" seamlesstabbing=\"true\" allowfullscreen=\"true\" allowscriptaccess=\"always\" overstretch=\"true\"></embed></div>\n<hr />\n<h2 style=\"text-align: center\">Manage your media with style</h2>\n<p><img class=\"alignnone size-full wp-image-3316\" src=\"https://wordpress.org/news/files/2014/09/media.jpg\" alt=\"Media Library\" width=\"1000\" height=\"586\" />Explore your uploads in a beautiful, endless grid. A new details preview makes viewing and editing any amount of media in sequence a snap.</p>\n<hr />\n<h2 style=\"text-align: center\">Working with embeds has never been easier</h2>\n<div style=\"width: 632px; \" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement(\'video\');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-3296-1\" width=\"632\" height=\"445\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"//s.w.org/images/core/4.0/embed.mp4?_=1\" /><source type=\"video/webm\" src=\"//s.w.org/images/core/4.0/embed.webm?_=1\" /><source type=\"video/ogg\" src=\"//s.w.org/images/core/4.0/embed.ogv?_=1\" /><a href=\"//s.w.org/images/core/4.0/embed.mp4\">//s.w.org/images/core/4.0/embed.mp4</a></video></div>\n<p>Paste in a YouTube URL on a new line, and watch it magically become an embedded video. Now try it with a tweet. Oh yeah — embedding has become a visual experience. The editor shows a true preview of your embedded content, saving you time and giving you confidence.</p>\n<p>We’ve expanded the services supported by default, too — you can embed videos from CollegeHumor, playlists from YouTube, and talks from TED. <a href=\"https://codex.wordpress.org/Embeds\">Check out all of the embeds</a> that WordPress supports.</p>\n<hr />\n<h2 style=\"text-align: center\">Focus on your content</h2>\n<div style=\"width: 632px; \" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-3296-2\" width=\"632\" height=\"356\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"//s.w.org/images/core/4.0/focus.mp4?_=2\" /><source type=\"video/webm\" src=\"//s.w.org/images/core/4.0/focus.webm?_=2\" /><source type=\"video/ogg\" src=\"//s.w.org/images/core/4.0/focus.ogv?_=2\" /><a href=\"//s.w.org/images/core/4.0/focus.mp4\">//s.w.org/images/core/4.0/focus.mp4</a></video></div>\n<p>Writing and editing is smoother and more immersive with an editor that expands to fit your content as you write, and keeps the formatting tools available at all times.</p>\n<hr />\n<h2 style=\"text-align: center\">Finding the right plugin</h2>\n<p><img class=\"aligncenter size-large wp-image-3309\" src=\"https://wordpress.org/news/files/2014/09/add-plugin1-1024x600.png\" alt=\"Add plugins\" width=\"692\" height=\"405\" /></p>\n<p>There are more than 30,000 free and open source plugins in the WordPress plugin directory. WordPress 4.0 makes it easier to find the right one for your needs, with new metrics, improved search, and a more visual browsing experience.</p>\n<hr />\n<h2 style=\"text-align: center\">The Ensemble</h2>\n<p>This release was led by <a href=\"http://helenhousandi.com\">Helen Hou-Sandí</a>, with the help of these fine individuals. There are 275 contributors with props in this release, a new high. Pull up some Benny Goodman on your music service of choice, as a bandleader or in one of his turns as a classical clarinetist, and check out some of their profiles:</p>\n<p><a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/viper007bond\">Alex Mills (Viper007Bond)</a>, <a href=\"https://profiles.wordpress.org/tellyworth\">Alex Shiels</a>, <a href=\"https://profiles.wordpress.org/alexanderrohmann\">Alexander Rohmann</a>, <a href=\"https://profiles.wordpress.org/aliso\">Alison Barrett</a>, <a href=\"https://profiles.wordpress.org/collinsinternet\">Allan Collins</a>, <a href=\"https://profiles.wordpress.org/amit\">Amit Gupta</a>, <a href=\"https://profiles.wordpress.org/sabreuse\">Amy Hendrix (sabreuse)</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/andrezrv\">Andres Villarreal</a>, <a href=\"https://profiles.wordpress.org/zamfeer\">Andrew Mowe</a>, <a href=\"https://profiles.wordpress.org/sumobi\">Andrew Munro (sumobi)</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/andy\">Andy Skelton</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/atimmer\">Anton Timmermans</a>, <a href=\"https://profiles.wordpress.org/arnee\">Arne Brachhold</a>, <a href=\"https://profiles.wordpress.org/aubreypwd\">aubreypwd</a>, <a href=\"https://profiles.wordpress.org/filosofo\">Austin Matzko</a>, <a href=\"https://profiles.wordpress.org/empireoflight\">Ben Dunkle</a>, <a href=\"https://profiles.wordpress.org/kau-boy\">Bernhard Kau</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/bradyvercher\">Brady Vercher</a>, <a href=\"https://profiles.wordpress.org/bramd\">Bram Duvigneau</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/krogsgard\">Brian Krogsgard</a>, <a href=\"https://profiles.wordpress.org/brianlayman\">Brian Layman</a>, <a href=\"https://profiles.wordpress.org/rzen\">Brian Richards</a>, <a href=\"https://profiles.wordpress.org/camdensegal\">Camden Segal</a>, <a href=\"https://profiles.wordpress.org/sixhours\">Caroline Moore</a>, <a href=\"https://profiles.wordpress.org/mackensen\">Charles Fulton</a>, <a href=\"https://profiles.wordpress.org/chouby\">Chouby</a>, <a href=\"https://profiles.wordpress.org/chrico\">ChriCo</a>, <a href=\"https://profiles.wordpress.org/c3mdigital\">Chris Olbekson</a>, <a href=\"https://profiles.wordpress.org/chrisl27\">chrisl27</a>, <a href=\"https://profiles.wordpress.org/caxelsson\">Christian Axelsson</a>, <a href=\"https://profiles.wordpress.org/cfinke\">Christopher Finke</a>, <a href=\"https://profiles.wordpress.org/boda1982\">Christopher Spires</a>, <a href=\"https://profiles.wordpress.org/clifgriffin\">Clifton Griffin</a>, <a href=\"https://profiles.wordpress.org/jupiterwise\">Corey McKrill</a>, <a href=\"https://profiles.wordpress.org/corphi\">Corphi</a>, <a href=\"https://profiles.wordpress.org/extendwings\">Daisuke Takahashi</a>, <a href=\"https://profiles.wordpress.org/ghost1227\">Dan Griffiths</a>, <a href=\"https://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber</a>, <a href=\"https://profiles.wordpress.org/danielhuesken\">Daniel Husken</a>, <a href=\"https://profiles.wordpress.org/redsweater\">Daniel Jalkut (Red Sweater)</a>, <a href=\"https://profiles.wordpress.org/dannydehaan\">Danny de Haan</a>, <a href=\"https://profiles.wordpress.org/dkotter\">Darin Kotter</a>, <a href=\"https://profiles.wordpress.org/koop\">Daryl Koopersmith</a>, <a href=\"https://profiles.wordpress.org/dllh\">Daryl L. L. Houston (dllh)</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/dnaber-de\">David Naber</a>, <a href=\"https://profiles.wordpress.org/davidthemachine\">DavidTheMachine</a>, <a href=\"https://profiles.wordpress.org/debaat\">DeBAAT</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/donncha\">Donncha O Caoimh</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/dustyn\">Dustyn Doyle</a>, <a href=\"https://profiles.wordpress.org/eddiemoya\">Eddie Moya</a>, <a href=\"https://profiles.wordpress.org/oso96_2000\">Eduardo Reveles</a>, <a href=\"https://profiles.wordpress.org/edwin-at-studiojoyocom\">Edwin Siebel</a>, <a href=\"https://profiles.wordpress.org/ehg\">ehg</a>, <a href=\"https://profiles.wordpress.org/erayalakese\">erayalakese</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"https://profiles.wordpress.org/ebinnion\">Eric Binnion</a>, <a href=\"https://profiles.wordpress.org/ericmann\">Eric Mann</a>, <a href=\"https://profiles.wordpress.org/ejdanderson\">Evan Anderson</a>, <a href=\"https://profiles.wordpress.org/eherman24\">Evan Herman</a>, <a href=\"https://profiles.wordpress.org/fab1en\">Fabien Quatravaux</a>, <a href=\"https://profiles.wordpress.org/fahmiadib\">Fahmi Adib</a>, <a href=\"https://profiles.wordpress.org/feedmeastraycat\">feedmeastraycat</a>, <a href=\"https://profiles.wordpress.org/frank-klein\">Frank Klein</a>, <a href=\"https://profiles.wordpress.org/garhdez\">garhdez</a>, <a href=\"https://profiles.wordpress.org/garyc40\">Gary Cao</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/garza\">garza</a>, <a href=\"https://profiles.wordpress.org/gauravmittal1995\">gauravmittal1995</a>, <a href=\"https://profiles.wordpress.org/gavra\">Gavrisimo</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/grahamarmfield\">Graham Armfield</a>, <a href=\"https://profiles.wordpress.org/vancoder\">Grant Mangham</a>, <a href=\"https://profiles.wordpress.org/gcorne\">Gregory Cornelius</a>, <a href=\"https://profiles.wordpress.org/bordoni\">Gustavo Bordoni</a>, <a href=\"https://profiles.wordpress.org/harrym\">harrym</a>, <a href=\"https://profiles.wordpress.org/hebbet\">hebbet</a>, <a href=\"https://profiles.wordpress.org/hinnerk\">Hinnerk Altenburg</a>, <a href=\"https://profiles.wordpress.org/hlashbrooke\">Hugh Lashbrooke</a>, <a href=\"https://profiles.wordpress.org/iljoja\">iljoja</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/issuu\">issuu</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jacklenox\">Jack Lenox</a>, <a href=\"https://profiles.wordpress.org/jackreichert\">Jack Reichert</a>, <a href=\"https://profiles.wordpress.org/jacobdubail\">Jacob Dubail</a>, <a href=\"https://profiles.wordpress.org/janhenkg\">JanHenkG</a>, <a href=\"https://profiles.wordpress.org/avryl\">Janneke Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/jwenerd\">Jared Wenerd</a>, <a href=\"https://profiles.wordpress.org/jaza613\">Jaza613</a>, <a href=\"https://profiles.wordpress.org/jeffstieler\">Jeff Stieler</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/slimndap\">Jeroen Schmit</a>, <a href=\"https://profiles.wordpress.org/jerrysarcastic\">Jerry Bates (jerrysarcastic)</a>, <a href=\"https://profiles.wordpress.org/jesin\">Jesin A</a>, <a href=\"https://profiles.wordpress.org/jayjdk\">Jesper Johansen (jayjdk)</a>, <a href=\"https://profiles.wordpress.org/jesper800\">Jesper van Engelen</a>, <a href=\"https://profiles.wordpress.org/engelen\">Jesper van Engelen</a>, <a href=\"https://profiles.wordpress.org/jessepollak\">Jesse Pollak</a>, <a href=\"https://profiles.wordpress.org/jgadbois\">jgadbois</a>, <a href=\"https://profiles.wordpress.org/jartes\">Joan Artes</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joehoyle\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/jkudish\">Joey Kudish</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/johnzanussi\">John Zanussi</a>, <a href=\"https://profiles.wordpress.org/duck_\">Jon Cave</a>, <a href=\"https://profiles.wordpress.org/jonnyauk\">jonnyauk</a>, <a href=\"https://profiles.wordpress.org/joostdevalk\">Joost de Valk</a>, <a href=\"https://profiles.wordpress.org/softmodeling\">Jordi Cabot</a>, <a href=\"https://profiles.wordpress.org/jjeaton\">Josh Eaton</a>, <a href=\"https://profiles.wordpress.org/tai\">JOTAKI Taisuke</a>, <a href=\"https://profiles.wordpress.org/juliobox\">Julio Potier</a>, <a href=\"https://profiles.wordpress.org/justinsainton\">Justin Sainton</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/greenshady\">Justin Tadlock</a>, <a href=\"https://profiles.wordpress.org/kadamwhite\">K.Adam White</a>, <a href=\"https://profiles.wordpress.org/trepmal\">Kailey (trepmal)</a>, <a href=\"https://profiles.wordpress.org/kapeels\">kapeels</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/kevinlangleyjr\">Kevin Langley</a>, <a href=\"https://profiles.wordpress.org/kworthington\">Kevin Worthington</a>, <a href=\"https://profiles.wordpress.org/kpdesign\">Kim Parsell</a>, <a href=\"https://profiles.wordpress.org/kwight\">Kirk Wight</a>, <a href=\"https://profiles.wordpress.org/kitchin\">kitchin</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/knutsp\">Knut Sparhell</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/kurtpayne\">Kurt Payne</a>, <a href=\"https://profiles.wordpress.org/lancewillett\">Lance Willett</a>, <a href=\"https://profiles.wordpress.org/leewillis77\">Lee Willis</a>, <a href=\"https://profiles.wordpress.org/lessbloat\">lessbloat</a>, <a href=\"https://profiles.wordpress.org/layotte\">Lew Ayotte</a>, <a href=\"https://profiles.wordpress.org/lritter\">lritter</a>, <a href=\"https://profiles.wordpress.org/lukecarbis\">Luke Carbis</a>, <a href=\"https://profiles.wordpress.org/lgedeon\">Luke Gedeon</a>, <a href=\"https://profiles.wordpress.org/m_i_n\">m_i_n</a>, <a href=\"https://profiles.wordpress.org/funkatronic\">Manny Fleurmond</a>, <a href=\"https://profiles.wordpress.org/targz-1\">Manuel Schmalstieg</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius (Clorith)</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/mjbanks\">Matt Banks</a>, <a href=\"https://profiles.wordpress.org/sivel\">Matt Martz</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mboynes\">Matthew Boynes</a>, <a href=\"https://profiles.wordpress.org/mdbitz\">Matthew Denton</a>, <a href=\"https://profiles.wordpress.org/mattheweppelsheimer\">Matthew Eppelsheimer</a>, <a href=\"https://profiles.wordpress.org/mattheu\">Matthew Haines-Young</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/meekyhwang\">meekyhwang</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Michael Adams (mdawaffe)</a>, <a href=\"https://profiles.wordpress.org/michalzuber\">michalzuber</a>, <a href=\"https://profiles.wordpress.org/midxcat\">midxcat</a>, <a href=\"https://profiles.wordpress.org/mauteri\">Mike Auteri</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/mikejolley\">Mike Jolley</a>, <a href=\"https://profiles.wordpress.org/mikelittle\">Mike Little</a>, <a href=\"https://profiles.wordpress.org/mikemanger\">Mike Manger</a>, <a href=\"https://profiles.wordpress.org/mnelson4\">Mike Nelson</a>, <a href=\"https://profiles.wordpress.org/dh-shredder\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/mikeyarce\">Mikey Arce</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinic</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/usermrpapa\">Mr Papa</a>, <a href=\"https://profiles.wordpress.org/mrmist\">mrmist</a>, <a href=\"https://profiles.wordpress.org/m_uysl\">Mustafa Uysal</a>, <a href=\"https://profiles.wordpress.org/muvimotv\">MuViMoTV</a>, <a href=\"https://profiles.wordpress.org/nabil_kadimi\">nabil_kadimi</a>, <a href=\"https://profiles.wordpress.org/namibia\">Namibia</a>, <a href=\"https://profiles.wordpress.org/alex-ye\">Nashwan Doaqan</a>, <a href=\"https://profiles.wordpress.org/nd987\">nd987</a>, <a href=\"https://profiles.wordpress.org/neil_pie\">Neil Pie</a>, <a href=\"https://profiles.wordpress.org/niallkennedy\">Niall Kennedy</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/schoenwaldnils\">Nils Schonwald</a>, <a href=\"https://profiles.wordpress.org/ninos-ego\">Ninos</a>, <a href=\"https://profiles.wordpress.org/nvwd\">Nowell VanHoesen</a>, <a href=\"https://profiles.wordpress.org/compute\">Patrick Hesselberg</a>, <a href=\"https://profiles.wordpress.org/pbearne\">Paul Bearne</a>, <a href=\"https://profiles.wordpress.org/pdclark\">Paul Clark</a>, <a href=\"https://profiles.wordpress.org/paulschreiber\">Paul Schreiber</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/westi\">Peter Westwood</a>, <a href=\"https://profiles.wordpress.org/philiparthurmoore\">Philip Arthur Moore</a>, <a href=\"https://profiles.wordpress.org/philipjohn\">Philip John</a>, <a href=\"https://profiles.wordpress.org/senlin\">Piet Bos</a>, <a href=\"https://profiles.wordpress.org/psoluch\">Piotr Soluch</a>, <a href=\"https://profiles.wordpress.org/mordauk\">Pippin Williamson</a>, <a href=\"https://profiles.wordpress.org/purzlbaum\">purzlbaum</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/rclations\">RC Lations</a>, <a href=\"https://profiles.wordpress.org/iamfriendly\">Richard Tape</a>, <a href=\"https://profiles.wordpress.org/rickalee\">Ricky Lee Whittemore</a>, <a href=\"https://profiles.wordpress.org/rob1n\">rob1n</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/rdall\">Robert Dall</a>, <a href=\"https://profiles.wordpress.org/harmr\">RobertHarm</a>, <a href=\"https://profiles.wordpress.org/rohan013\">Rohan Rawat</a>, <a href=\"https://profiles.wordpress.org/rhurling\">Rouven Hurling</a>, <a href=\"https://profiles.wordpress.org/ruudjoyo\">Ruud Laan</a>, <a href=\"https://profiles.wordpress.org/ryan\">Ryan Boren</a>, <a href=\"https://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/sammybeats\">Sam Brodie</a>, <a href=\"https://profiles.wordpress.org/otto42\">Samuel Wood (Otto)</a>, <a href=\"https://profiles.wordpress.org/sathishn\">Sathish Nagarajan</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/greglone\">ScreenfeedFr</a>, <a href=\"https://profiles.wordpress.org/scribu\">scribu</a>, <a href=\"https://profiles.wordpress.org/seanchayes\">Sean Hayes</a>, <a href=\"https://profiles.wordpress.org/nessworthy\">Sean Nessworthy</a>, <a href=\"https://profiles.wordpress.org/sergejmueller\">Sergej Muller</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/shanebp\">shanebp</a>, <a href=\"https://profiles.wordpress.org/sharonaustin\">Sharon Austin</a>, <a href=\"https://profiles.wordpress.org/shaunandrews\">Shaun Andrews</a>, <a href=\"https://profiles.wordpress.org/simonp303\">Simon Pollard</a>, <a href=\"https://profiles.wordpress.org/simonwheatley\">Simon Wheatley</a>, <a href=\"https://profiles.wordpress.org/slobodanmanic\">Slobodan Manic</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">solarissmoke</a>, <a href=\"https://profiles.wordpress.org/sphoid\">sphoid</a>, <a href=\"https://profiles.wordpress.org/stephdau\">Stephane Daury</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stompweb\">Steven Jones</a>, <a href=\"https://profiles.wordpress.org/strangerstudios\">strangerstudios</a>, <a href=\"https://profiles.wordpress.org/5um17\">Sumit Singh</a>, <a href=\"https://profiles.wordpress.org/t4k1s\">t4k1s</a>, <a href=\"https://profiles.wordpress.org/iamtakashi\">Takashi Irie</a>, <a href=\"https://profiles.wordpress.org/taylorde\">Taylor Dewey</a>, <a href=\"https://profiles.wordpress.org/thomasvanderbeek\">Thomas van der Beek</a>, <a href=\"https://profiles.wordpress.org/tillkruess\">Till Kruss</a>, <a href=\"https://profiles.wordpress.org/codenameeli\">Tim &#039;Eli&#039; Dalbey</a>, <a href=\"https://profiles.wordpress.org/tmeister\">tmeister</a>, <a href=\"https://profiles.wordpress.org/tobiasbg\">TobiasBg</a>, <a href=\"https://profiles.wordpress.org/tjnowell\">Tom J Nowell</a>, <a href=\"https://profiles.wordpress.org/willmot\">Tom Willmot</a>, <a href=\"https://profiles.wordpress.org/topher1kenobe\">Topher</a>, <a href=\"https://profiles.wordpress.org/torresga\">torresga</a>, <a href=\"https://profiles.wordpress.org/liljimmi\">Tracy Levesque</a>, <a href=\"https://profiles.wordpress.org/wpsmith\">Travis Smith</a>, <a href=\"https://profiles.wordpress.org/treyhunner\">treyhunner</a>, <a href=\"https://profiles.wordpress.org/umeshsingla\">Umesh Kumar</a>, <a href=\"https://profiles.wordpress.org/vinod-dalvi\">Vinod Dalvi</a>, <a href=\"https://profiles.wordpress.org/vlajos\">vlajos</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">voldemortensen</a>, <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a>, <a href=\"https://profiles.wordpress.org/winterdev\">winterDev</a>, <a href=\"https://profiles.wordpress.org/wojtekszkutnik\">Wojtek Szkutnik</a>, <a href=\"https://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"https://profiles.wordpress.org/katzwebdesign\">Zack Katz</a>, <a href=\"https://profiles.wordpress.org/tollmanz\">Zack Tollman</a>, and <a href=\"https://profiles.wordpress.org/zoerooney\">Zoe Rooney</a>. Also thanks to <a href=\"http://michaelpick.wordpress.com/\">Michael Pick</a> for producing the release video, and Helen with <a href=\"http://adriansandi.com\">Adrián Sandí</a> for the music.</p>\n<p>If you want to follow along or help out, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>. Thanks for choosing WordPress. See you soon for version 4.1!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/news/2014/09/benny/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 4.0 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/news/2014/08/wordpress-4-0-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wordpress.org/news/2014/08/wordpress-4-0-release-candidate/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Aug 2014 12:20:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3287\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:321:\"The first release candidate for WordPress 4.0 is now available! In RC 1, we’ve made refinements to what we&#8217;ve been working on for this release. Check out the Beta 1 announcement post for more details on those features. We hope to ship WordPress 4.0 next week, but we need your help to get there. If you [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Helen Hou-Sandi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2134:\"<p>The first release candidate for WordPress 4.0 is now available!</p>\n<p>In RC 1, we’ve made refinements to what we&#8217;ve been working on for this release. Check out the <a href=\"https://wordpress.org/news/2014/07/wordpress-4-0-beta-1/\">Beta 1 announcement post</a> for more details on those features. We hope to ship WordPress 4.0 <em>next week</em>, but we need your help to get there. If you haven’t tested 4.0 yet, there’s no time like the present. (Please, not on a production site, unless you’re adventurous.)</p>\n<p><strong>Think you’ve found a bug? </strong>Please post to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area in the support forums</a>. If any known issues come up, you’ll be able to <a href=\"https://core.trac.wordpress.org/report/5\">find them here</a>.</p>\n<p>To test WordPress 4.0 RC1, try the <a href=\"https://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.0-RC1.zip\">download the release candidate here</a> (zip). If you’d like to learn more about what’s new in WordPress 4.0, visit the awesome About screen in your dashboard (<strong><img src=\"https://i0.wp.com/core.svn.wordpress.org/branches/3.6/wp-content/themes/twentyten/images/wordpress.png?w=692\" alt=\"\" width=\"16\" height=\"16\" /> → About</strong> in the toolbar).</p>\n<p><strong>Developers,</strong> please test your plugins and themes against WordPress 4.0 and update your plugin&#8217;s <em>Tested up to</em> version in the readme to 4.0 before next week. If you find compatibility problems, please be sure to post any issues to the support forums so we can figure those out before the final release. You also may want to <a href=\"https://make.wordpress.org/core/2014/08/21/introducing-plugin-icons-in-the-plugin-installer/\">give your plugin an icon</a>, which we launched last week and will appear in the dashboard along with banners.</p>\n<p><em>It is almost time</em><br />\n<em> For the 4.0 release</em><br />\n<em> And its awesomeness</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/news/2014/08/wordpress-4-0-release-candidate/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.0 Beta 4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2014/08/wordpress-4-0-beta-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2014/08/wordpress-4-0-beta-4/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 15 Aug 2014 05:06:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3280\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:353:\"The fourth and likely final beta for WordPress 4.0 is now available. We&#8217;ve made more than 250 changes in the past month, including: Further improvements to the editor scrolling experience, especially when it comes to the second column of boxes. Better handling of small screens in the media library modals. A separate bulk selection mode [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Helen Hou-Sandi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2003:\"<p>The fourth and likely final beta for WordPress 4.0 is now available. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log?rev=29496&amp;stop_rev=29229&amp;limit=300\">more than 250 changes</a> in the past month, including:</p>\n<ul>\n<li>Further improvements to the editor scrolling experience, especially when it comes to the second column of boxes.</li>\n<li>Better handling of small screens in the media library modals.</li>\n<li>A separate bulk selection mode for the media library grid view.</li>\n<li>Improvements to the installation language selector.</li>\n<li>Visual tweaks to plugin details and customizer panels.</li>\n</ul>\n<p><strong>We need your help</strong>. We’re still aiming for a release this month, which means the next week will be critical for identifying and squashing bugs. If you’re just joining us, please see <a href=\"https://wordpress.org/news/2014/07/wordpress-4-0-beta-1/\">the Beta 1 announcement post</a> for what to look out for.</p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums, where friendly moderators are standing by. <b>Plugin developers</b><strong>,</strong> if you haven’t tested WordPress 4.0 yet, now is the time — and be sure to update the “tested up to” version for your plugins so they’re listed as compatible with 4.0.</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.0, try the <a href=\"https://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.0-beta4.zip\">download the beta here</a> (zip).</p>\n<p><em>We are working hard</em><br />\n<em>To finish up 4.0<br />\n</em><em>Will you help us too?</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2014/08/wordpress-4-0-beta-4/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 27 Feb 2015 14:07:48 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:10:\"x-pingback\";s:37:\"https://wordpress.org/news/xmlrpc.php\";s:13:\"last-modified\";s:29:\"Wed, 18 Feb 2015 23:40:39 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(17083,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1425089268','no'),(17084,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1425046068','no'),(17085,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1425089269','no'),(17086,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: WordPress Theme Directory Launches New Design\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39691\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/wordpress-theme-directory-launches-new-design\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2719:\"<p>The new design for the official <a href=\"https://wordpress.org/themes/\" target=\"_blank\">WordPress Theme Directory</a> is live today. Contributors on the <a href=\"https://make.wordpress.org/meta/\" target=\"_blank\">WordPress Meta team</a> released a <a href=\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\" target=\"_blank\">preview of the design</a> in early January and worked quickly over the past month to resolve any outstanding issues related to the new plugin that powers the directory.</p>\n<p>In addition to an updated design, the theme repository has been moved away from bbPress and into a new plugin, which includes a custom post type for the repository package and a theme uploader.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wordpress-theme-directory.png\" rel=\"prettyphoto[39691]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wordpress-theme-directory.png?resize=1025%2C750\" alt=\"wordpress-theme-directory\" class=\"aligncenter size-full wp-image-39692\" /></a></p>\n<p>The design is likely already familiar to most users, as it was matched to the UI to the admin themes browser. Now, whether you&#8217;re behind the wheel of your WordPress site in the admin, or browsing on the official directory, the experience of searching and sorting themes is more consistent.</p>\n<p>Konstantin Obenland, in cooperation with Samuel &#8220;Otto&#8221; Wood, spearheaded the migration to the new plugin and design, with help and feedback from other members of the meta team. The work is not yet complete, but the new directory provides a vastly improved experience for users on the hunt for a new theme. Searching and filtering are both faster and users can quickly browse through thumbnails of all the queried results via infinite scroll.</p>\n<p>Future internationalization improvements to the directory should make it an even better resource for WordPress&#8217; growing global audience.</p>\n<p>&#8220;There is still a lot more work to be done, but everything that’s remaining can be added, changed, or improved with the new directory active,&#8221; Obenland said in an update earlier this week. <strong>&#8220;Most importantly we want to make it available to language sites, so that we have an internationalized theme directory, and there will be more to be done around that.&#8221;</strong></p>\n<p>The improved browsing experience does a much better job of showcasing the work of theme authors, many of whom spend countless hours updating and supporting their free themes as a contribution to the WordPress community. Overall, the new design is a better representation of the high quality themes available in the official directory.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 27 Feb 2015 01:58:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: Add Infinite Scroll to the WordPress Admin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39320\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/add-infinite-scroll-to-the-wordpress-admin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3059:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/infinite.jpg\" rel=\"prettyphoto[39320]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/infinite.jpg?resize=1024%2C508\" alt=\"photo credit: தேவையில்லை காரணங்கள், நீ எங்கே? - (license)\" class=\"size-full wp-image-39685\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/25066200@N02/8659691170\">தேவையில்லை காரணங்கள், நீ எங்கே?</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>The WordPress admin list tables can get quite lengthy to browse if you&#8217;re relying on regular pagination, especially when you need to perform bulk actions.</p>\n<p>As of WordPress 4.0, the grid view of the media library has beautiful support for infinite scrolling, but list tables for posts and users still rely on old-fashioned pagination. Setting the screen options to include more listings can help, but this, too, can become cumbersome.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/screen-options.jpg\" rel=\"prettyphoto[39320]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/screen-options.jpg?resize=782%2C277\" alt=\"screen-options\" class=\"aligncenter size-full wp-image-39669\" /></a></p>\n<p><a href=\"https://github.com/cedaro/infinite-wp-list-tables\" target=\"_blank\">Infinite WP List Tables</a> is a new plugin created by WordPress developer <a href=\"https://twitter.com/bradyvercher\" target=\"_blank\">Brady Vercher</a>. It&#8217;s a simple extension that adds infinite scroll to several pages within the admin, i.e. posts and users. Infinite WP List Tables has no settings to configure &#8211; simply activate it and it&#8217;s working.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/infinitewp-list-tables.jpg\" rel=\"prettyphoto[39320]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/infinitewp-list-tables.jpg?resize=731%2C562\" alt=\"infinitewp-list-tables\" class=\"aligncenter size-full wp-image-39677\" /></a></p>\n<p>I tested the plugin both on a single site and on a multisite installation with thousands of sites and users. In both scenarios the plugin performed nicely to infinitely scroll admin list tables for sites, posts, and users.</p>\n<p>It does not seem to work with comments, nor does it work with third party plugin tables such as the BuddyPress activity and groups admin listings. Integrations for plugins that display products, portfolio items, quotes, or other listings in the admin would make it even more useful, but I can see why Vercher might want to limit the plugin to core admin list tables.</p>\n<p>Do you think something like this should be added to core, given that the media library works nicely with infinite scroll? As far as I&#8217;ve seen, no tickets currently exist on trac to propose infinite scroll for other areas of the admin. Do you prefer traditional pagination for sites, posts, users, and comment list tables?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 23:05:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Net Neutrality Win\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44728\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/02/net-neutrality-win/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:355:\"<p>A lot of the tech news I&#8217;ve linked here has been a bit of a downer, but today we can celebrate: <a href=\"http://arstechnica.com/business/2015/02/fcc-votes-for-net-neutrality-a-ban-on-paid-fast-lanes-and-title-ii/\">FCC votes for net neutrality, a ban on paid fast lanes, and Title II</a>. This is not an outcome I would have bet on a year ago.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 21:17:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: Twitter’s New Official WordPress Plugin Prioritizes Extensibility\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39608\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"http://wptavern.com/twitters-new-official-wordpress-plugin-prioritizes-extensibility\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6064:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/twitter.jpg\" rel=\"prettyphoto[39608]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/twitter.jpg?resize=772%2C350\" alt=\"twitter\" class=\"aligncenter size-full wp-image-39647\" /></a></p>\n<p>It&#8217;s easy to get overwhelmed when visiting the WordPress.org plugin directory in search of a Twitter plugin, as you&#8217;ll turn up <a href=\"https://wordpress.org/plugins/search.php?q=twitter\" target=\"_blank\">more than 3,000 Twitter-related extensions</a>. Unless you&#8217;re running on recommendations or personal experience, it may not be easy to narrow down a quality plugin that keeps pace with changes to the Twitter API.</p>\n<p>This week Twitter finally decided to <a href=\"https://dev.twitter.com/web/wordpress\" target=\"_blank\">release an official WordPress plugin</a> to assist users in optimizing their sites for a Twitter audience. I spoke with <a href=\"https://twitter.com/niall\" target=\"_blank\">Niall Kennedy</a>, Developer Advocate at Twitter and contributor on its official WordPress plugin, about Twitter&#8217;s plans for the plugin. Kennedy is also listed as a contributor on both the official <a href=\"https://wordpress.org/plugins/facebook/\" target=\"_blank\">Facebook</a> and <a href=\"https://wordpress.org/plugins/vine/\" target=\"_blank\">Vine</a> plugins for WordPress.</p>\n<p>&#8220;Twitter regularly works with partners to implement Twitter features on their site,&#8221; Kennedy said. <strong>&#8220;Shipping an official plugin allows us to directly support publishers powered by WordPress and provide an example implementation of Twitter best practices for publishers on any platform.&#8221;</strong></p>\n<p>The plugin requires PHP 5.4 or later and offers many features that you many have already seen available via other extensions, including customization of embedded tweets, embedded Twitter videos, Tweet button for sharing content, Twitter Cards, integration with Twitter Analytics, a Follow button, and ads conversion tracking.</p>\n<p>Many are wondering why anyone needs an official Twitter plugin, given that WordPress already has excellent oEmbed support for tweets.  Kennedy confirmed that the new plugin plays nicely with the built-in oEmbed support, while building on top of it:</p>\n<blockquote><p>The Twitter plugin for WordPress enhances the oEmbed support built-in to WordPress with additional customization and functionality. We enhance the typical oEmbed response with additional integrations with WordPress APIs.</p>\n<p>Our plugin loads Twitter&#8217;s widgets JavaScript asynchronously through <code>wp_enqueue_script</code>, omitting the script element typically inserted onto the page markup through the default oEmbed response.</p>\n<p>Each embedded Tweet, added through a URL or shortcode, passes through the shortcode&#8217;s filter (<code>shortcode_atts_tweet</code>) for customization of embedded Tweet features across the site. The plugin handles fetching the correct oEmbed markup from Twitter&#8217;s servers and caching the unique result for the customization.</p>\n<p>The plugin does not change MCE oEmbed handling in the admin view.</p></blockquote>\n<p>Kennedy declined to comment on why it took Twitter so long to release an official plugin, but hopes that WordPress developers will use it as a building block. Those who previously created Twitter plugins now have a solid example for how best to extend WordPress to customize Twitter&#8217;s latest features.</p>\n<h3>Designed to be Extensibile</h3>\n<p>The development team behind the plugin plans to add new features to it as they become available from Twitter. They recognize that it will not be realistic to offer every imaginable feature, but instead are prioritizing extensibility to make sure developers can easily create their own customizations.</p>\n<p>&#8220;The plugin includes <a href=\"https://dev.twitter.com/web/embedded-video\" target=\"_blank\">support for displaying Twitter-hosted video embeds</a>, a new feature available to Twitter developers just in the past few weeks,&#8221; Kennedy said. &#8220;An official Twitter plugin makes it easy to roll out new features to publishers.</p>\n<p>&#8220;<span class=\"pullquote alignleft\">We&#8217;re working with other plugin developers to integrate features through filters where any overlap may occur</span>,&#8221; he said. Kennedy has a few ideas for the kinds of integrations that developers might want to build for the plugin using the WordPress APIs.</p>\n<p>&#8220;Our plugin automatically generates Twitter Card markup to represent a post, making some best guesses for post formats built-in to Core,&#8221; he said. &#8220;We expect plugin developers creating more specific display experiences will be able to build on top of our base features to select the best Twitter Cards template for their content.&#8221;</p>\n<p>Kennedy also believes the plugin can be further extended by SEO plugins to optimize content. &#8220;Some of the most popular WordPress plugins involve SEO,&#8221; he said. &#8220;We would like to integrate with SEO plugins to highlight the best titles, descriptions, and other detailed data provided by publishers to help their content stand out on Twitter.&#8221;</p>\n<p>Additionally, he sees an opportunity for theme developers to make tweets a seamless part of a theme&#8217;s overall design. &#8220;Our embedded Tweet theming can be customized by theme authors to match the visual theme of their site,&#8221; Kennedy said. &#8220;Automatically adjusting Twitter theming components to a WordPress theme context would be pretty cool.&#8221;</p>\n<p>If you&#8217;re looking to add the most common Twitter features to your WordPress site, you&#8217;ll be hard pressed to find a better plugin than the <a href=\"https://wordpress.org/plugins/twitter/\" target=\"_blank\">official one on WordPress.org</a>. Kennedy confirmed that Twitter plans to support the plugin through its official support forums on WordPress.org and will also have an escalated support channel for managed hosting providers.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 20:10:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"WPTavern: WPWeekly Episode 181 – Sticky Posts and Legal Issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=39625&preview_id=39625\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wptavern.com/wpweekly-episode-181-sticky-posts-and-legal-issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3804:\"<p>In this episode of WordPress Weekly, <a title=\"http://marcuscouch.com/\" href=\"http://marcuscouch.com/\">Marcus Couch</a> and I take the opportunity to catch up on the latest news in the WordPress community. I share the results of our poll asking readers if they use sticky posts in WordPress. We discuss the pros and cons of content protection plugins, in which there are no pros. Marcus and I agree that the visual editor added to the latest version of the WordPress for iOS app is a nice addition. Last but not least, we run down a list of upcoming WordCamps.</p>\n<h2>Stories Discussed:</h2>\n<p><a title=\"http://wptavern.com/do-you-use-the-sticky-posts-feature-in-wordpress\" href=\"http://wptavern.com/do-you-use-the-sticky-posts-feature-in-wordpress\">Do You Use The Sticky Posts Feature in WordPress?</a><br />\n<a title=\"http://wptavern.com/content-protection-plugins-for-wordpress-do-more-harm-than-good\" href=\"http://wptavern.com/content-protection-plugins-for-wordpress-do-more-harm-than-good\">Content Protection Plugins for WordPress Do More Harm Than Good</a><br />\n<a title=\"http://wptavern.com/press-this-bookmarklet-generates-concerns-of-copyright-infringement\" href=\"http://wptavern.com/press-this-bookmarklet-generates-concerns-of-copyright-infringement\">Press This Bookmarklet Generates Concerns of Copyright Infringement</a><br />\n<a title=\"http://wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor\" href=\"http://wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor\">WordPress for iOS 4.8 Released, Adds Visual Editor</a><br />\n<a title=\"http://wptavern.com/high-risk-security-vulnerability-discovered-in-wp-slimstat-update-immediately\" href=\"http://wptavern.com/high-risk-security-vulnerability-discovered-in-wp-slimstat-update-immediately\">High Risk Security Vulnerability Discovered in WP Slimstat, Update Immediately</a><br />\n<a title=\"https://poststatus.com/twitter-official-plugin-for-wordpress/\" href=\"https://poststatus.com/twitter-official-plugin-for-wordpress/\">Twitter Releases Official WordPress Plugin</a><br />\n<a title=\"https://story.am/\" href=\"https://story.am/\">Story.am Launches to Founders</a><br />\n<a title=\"http://central.wordcamp.org/schedule/\" href=\"http://central.wordcamp.org/schedule/\">Upcoming WordCamps Schedule</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a title=\"https://wordpress.org/plugins/woocommerce-role-based-price/\" href=\"https://wordpress.org/plugins/woocommerce-role-based-price/\">Woo Commerce Role Based Price</a> extends the popular eCommerce plugin Woo Commerce, so that products can be offered at different prices for different customer groups.</p>\n<p><a title=\"https://wordpress.org/plugins/better-code-editor/\" href=\"https://wordpress.org/plugins/better-code-editor/\">Better Code Editor</a> adds line numbers, error detection, and a choice of 28 different themes to use in the Plugin and Theme editors.</p>\n<p><a title=\"https://wordpress.org/plugins/wprecovery/\" href=\"https://wordpress.org/plugins/wprecovery/\">WPRecovery</a> is a WordPress recovery manager, that will get your WordPress Site back up and running if it stops working correctly.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, March 4th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #181:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 08:41:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: Matt Report Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44723\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/02/matt-report-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:254:\"<p>As a good follow-up to the <a href=\"http://fourhourworkweek.com/2015/02/09/matt-mullenweg/\">podcast with Tim the other week</a>, I did a <a href=\"https://mattreport.com/interview-matt-mullenweg/\">podcast with Matt Medeiros of the Matt Report</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 07:48:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Plugins on WordPress.org Now Show More Accurate Ratings Data\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39605\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/plugins-on-wordpress-org-now-show-more-accurate-ratings-data\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3951:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/RatingsFeaturedImage.png\" rel=\"prettyphoto[39605]\"><img class=\"size-full wp-image-39611\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/RatingsFeaturedImage.png?resize=641%2C331\" alt=\"Ratings Featured Image\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/9555503@N07/5096020716\">Rating</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">(license)</a>\n<p>Those who host plugins in the <a title=\"https://wordpress.org/plugins/\" href=\"https://wordpress.org/plugins/\">WordPress plugin directory</a> may have noticed a change to their plugin&#8217;s ratings. That&#8217;s because the ratings system has been reset and rebuilt by Samuel &#8220;Otto&#8221; Wood. The ratings now correspond exactly with reviews. According to Wood, the change has been two and a half years in the making:</p>\n<blockquote><p>Back when we launched the review system 2.5 years ago, we tied ratings to reviews. However, up until that point, we had existing ratings in the system. At the time, some argued that the ratings should be wiped out and everybody start fresh. I argued for the opposite, that we should leave the existing ratings in place until such time as we had enough reviews in the system to build up a good body of ratings.</p></blockquote>\n<p>A few weeks ago, Wood was checking out the ratings for the new WordPress theme directory when he noticed there were over 150K reviews. &#8220;Out of those 150K reviews, less than 10K are for themes&#8221; Wood said. This was enough to initiate the change and remove ratings not attached to a review. Since the system was rebuilt, some plugins have experienced 1 and 5 star <a title=\"https://wordpress.org/support/topic/star-rating-of-our-plugin-has-changed-overnight-1-star-and-5-star-look-switched?replies=2&view=all#post-6614288\" href=\"https://wordpress.org/support/topic/star-rating-of-our-plugin-has-changed-overnight-1-star-and-5-star-look-switched?replies=2&view=all#post-6614288\">rating swings,</a> while plugins like <a title=\"https://wordpress.org/plugins/wp-e-commerce/\" href=\"https://wordpress.org/plugins/wp-e-commerce/\">WP eCommerce</a> have seen its average rating rise from 2.9 to 3.4 stars.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p>That means <a href=\"https://twitter.com/wpecommerce\">@wpecommerce</a>, which had been at a rating of 2.8 for years, and more recently 2.9 &#8211; is now 3.4 stars.&#10;&#10;That feels good :)</p>\n<p>&mdash; Justin Sainton (@JS_Zao) <a href=\"https://twitter.com/JS_Zao/status/570739795405750272\">February 26, 2015</a></p></blockquote>\n<p></p>\n<p>In addition to displaying more accurate data, review spam has been neutralized. Review spam has been a serious problem for the past several years. According to Otto, this is no longer the case:</p>\n<blockquote><p>Ask any of the moderation team how many duplicate accounts they&#8217;ve seen to vote up their plugin and down those of competitors. Even though the reviews were removed, until yesterday, the ratings made by those accounts remained. This is no longer the case, and the ratings made by those spam accounts has now been effectively neutralized.</p></blockquote>\n<p>In summary, ratings and averages now reflect the most accurate data from the point in time reviews were introduced. Spam and fraudulent data hasn&#8217;t been lost or deleted but rather ignored from influencing the data set. Ratings that were added before mandatory reviews are also ignored.</p>\n<p>By waiting two and a half years, Wood has avoided resetting the entire system which would have caused everyone to start from zero. This way, authors are able to maintain their ratings and reviews without starting from scratch. If you host a plugin on the <a title=\"https://wordpress.org/plugins/\" href=\"https://wordpress.org/plugins/\">WordPress plugin directory</a>, let us know if your ratings changed, especially the average.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 06:39:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WPTavern: WordPress.com’s REST API Driven Post Editor Proves Speed Matters\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39560\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/wordpress-coms-rest-api-driven-post-editor-proves-speed-matters\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5647:\"<p>In the last year or so, WordPress.com has been experimenting with <a title=\"https://en.forums.wordpress.com/topic/new-post-editor-improvements?replies=12\" href=\"https://en.forums.wordpress.com/topic/new-post-editor-improvements?replies=12\">a new post editor</a>. As a user of WordPress.com, I clicked the add new post button and was shocked to discover an entirely different interface than what I&#8217;m used to. Continuously pushing improvements across the platform with little to no announcement and measuring feedback is WordPress.com&#8217;s signature development strategy.</p>\n<p>Shortly after its release, users <a title=\"https://en.forums.wordpress.com/tags/beep-beep-boop\" href=\"https://en.forums.wordpress.com/tags/beep-beep-boop\">created support requests</a> to offer feedback. Dealing with change is hard, but it&#8217;s even more difficult when it goes unannounced. After receiving a ton of feedback, the team eventually added the option for users to switch back to the classic editor. Since its launch, I&#8217;ve found myself getting used to the new editor, but there are a couple of quirks that need to be addressed.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComNewPostEditor.png\" rel=\"prettyphoto[39560]\"><img class=\"wp-image-39562 size-full\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComNewPostEditor-e1424904139346.png?resize=1025%2C434\" alt=\"New WordPress.com Editor\" /></a>New WordPress.com Editor\n<h2>Speed</h2>\n<p>Depending on when I create a new post, I&#8217;ll see a &#8220;beep beep, boop&#8221; loading message for a few seconds. The longest I&#8217;ve seen the message is around 10 seconds. The post editor is built on top of the WordPress.com REST API and depending on traffic, server resources, etc., the API calls take longer than normal to process.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPDotComBeepBeepBoop.png\" rel=\"prettyphoto[39560]\"><img class=\"size-full wp-image-39594\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPDotComBeepBeepBoop.png?resize=445%2C347\" alt=\"Beep Beep Boop\" /></a>Beep Beep Boop\n<p>If it takes more than a few seconds to load the editor, that&#8217;s too long. With all of the server resources that make up the WordPress.com infrastructure, I expect things to load quickly. In reality, I shouldn&#8217;t see a loading screen.</p>\n<h2>Creating Content</h2>\n<p>Since the visual editor inherits most of the features found in the self-hosted version of WordPress, writing content is generally the same experience. However, one thing I&#8217;ve noticed is that, more often than not, the text area doesn&#8217;t expand to the bottom of the page. As I fill the text area with content, it doesn&#8217;t automatically expand. A quick fix is to reload the entire page by clicking the save draft button. Once I do this, the text area expands to take up the full-height of the browser window.</p>\n<p>Instead of having separate meta boxes for each task, some of them have been combined like categories and tags. The design of the publish meta box is a major improvement compared to the self-hosted version. It has a cleaner look and seems easier to use.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComNewEditorMetaBoxes.png\" rel=\"prettyphoto[39560]\"><img class=\"size-full wp-image-39563\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComNewEditorMetaBoxes.png?resize=1025%2C495\" alt=\"New Post Editor Meta Boxes\" /></a>New Post Editor Meta Boxes\n<p>One of the things I like most about the new editor is that it&#8217;s distraction-free by default. The surrounding admin elements in the classic editor are gone, allowing me to concentrate on writing. Meta boxes are shown but I don&#8217;t see them as distractions. The new editor also doesn&#8217;t waste valuable screen real estate showing admin notices, that I still haven&#8217;t figured out how to dismiss.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComClassicEditorAdminNotices.png\" rel=\"prettyphoto[39560]\"><img class=\"size-full wp-image-39566\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/WPdotComClassicEditorAdminNotices.png?resize=1025%2C498\" alt=\"Admin Notices That Never Go Away!\" /></a>Admin Notices That Never Go Away!\n<h2>API Driven Interfaces Need to be Fast</h2>\n<p>The new editor is a real world example of an alternative publishing interface built using the <a title=\"https://developer.wordpress.com/docs/api/\" href=\"https://developer.wordpress.com/docs/api/\">WordPress.com REST API</a>. The biggest take away for me from using the new editor is how important speed is. As work continues on the <a title=\"http://wptavern.com/excellent-primer-on-the-wordpress-rest-api-project\" href=\"http://wptavern.com/excellent-primer-on-the-wordpress-rest-api-project\">REST API project for the self-hosted version</a> of WordPress, which will likely lead to an explosion of alternative publishing interfaces, I think it&#8217;s important for developers to consider how to make things as fast as possible. It doesn&#8217;t matter how nice the interface is if the API isn&#8217;t fast enough and ruins the user experience.</p>\n<p>After forcing myself to use the new editor for a few months, I rarely use the classic editor. It&#8217;s definitely not the ideal interface for everyone which is why I&#8217;m glad the team decided not to make it the only interface available. It has a few quirks, but for the most part, I don&#8217;t mind using it. If you use WordPress.com, let us know what you think of the new editor in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Feb 2015 00:26:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Roots WordPress Starter Theme Rebrands as Sage with 8.0 Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39524\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/roots-wordpress-starter-theme-rebrands-as-sage-with-8-0-release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2628:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/sage.jpg\" rel=\"prettyphoto[39524]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/sage.jpg?resize=729%2C336\" alt=\"sage\" class=\"aligncenter size-full wp-image-39578\" /></a></p>\n<p>The Roots starter theme for WordPress has rebranded as &#8220;Sage&#8221; with its <a href=\"https://roots.io/new-website-sage-and-the-future/\" target=\"_blank\">8.0.0 release</a> today. Roots project creator Ben Word <a href=\"http://wptavern.com/roots-starter-theme-for-wordpress-will-become-framework-agnostic-in-2015\" target=\"_blank\">announced</a> last year that he planned to change the theme to be framework agnostic in 2015. This release is the first step towards that goal.</p>\n<p>Fans of the starter theme appreciate its cleaner HTML, cleaner script output, and its unique theme wrapper method for handling template markup. Version 8.0 introduces a new frontend workflow that uses <a href=\"http://gulpjs.com/\" target=\"_blank\">Gulp</a> instead of Grunt:</p>\n<ul>\n<li>Write stylesheets with Sass or Less</li>\n<li>Assets from Bower packages (CSS, JS, fonts) are automatically added to your theme assets</li>\n<li>JSON file based asset pipeline that allows you to customize your compiled CSS and JS files</li>\n<li>Replaced LiveReload with BrowserSync, making your workflow faster by synchronizing interactions across multiple devices</li>\n</ul>\n<p>Version 8.0 also drops IE8 support and raises the minimum PHP version requirement of PHP 5.4+. &#8220;We&#8217;re not going to let the WordPress minimum requirement of 5.2 hold us back from using short array syntax, short echo syntax, and namespaces,&#8221; Word said.</p>\n<p>Now that Sage 8.0 is available, Word is concentrating his efforts on developing a Yeoman generator for the starter theme, which will allow users to integrate their desired frontend framework.</p>\n<p>&#8220;Right now you can fairly easily use Bootstrap Sass instead of Less, swap out Bootstrap for another framework, or use no framework at all,&#8221; he said. &#8220;With a Yeoman generator you&#8217;ll be able to select from options to have your starter theme built how you like it from the beginning.&#8221;</p>\n<p>Going framework agnostic will open up the Roots user base to more developers who may have previously been turned off by using Bootstrap with their projects. The rebranding to Sage allows Word and contributors to use the <a href=\"https://roots.io/\" target=\"_blank\">Roots</a> organization to further expand the product lineup that will eventually subsidize the continual development of the open source starter theme.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Feb 2015 23:06:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"Post Status: Twitter introduces an official plugin for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=8875\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://poststatus.com/twitter-official-plugin-for-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3993:\"<p>&#8220;About time&#8221; is probably what comes to mind. Twitter <a href=\"https://blog.twitter.com/2015/twitter-plugin-wordpress\">has announced an official WordPress plugin to support their platform</a>. It&#8217;s available now <a href=\"https://wordpress.org/plugins/twitter/\">on the WordPress plugin repo</a>.</p>\n<p>They just released the plugin a couple of hours ago. It&#8217;s actually taking the place of an existing plugin, which was wiped from the plugin repo <a href=\"https://plugins.trac.wordpress.org/browser/twitter/trunk/readme.txt?rev=1086703\">two weeks ago by Otto Wood</a>. That&#8217;s what will account for the 150,000+ downloads upon initial release. Otto has now reset the count in the database, so the numbers are more realistic.</p>\n<p>I reached out to Otto to see how these decisions are made. Otto is one of the managers of the repo.</p>\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">A twitter representative emailed us, sent us the plugin, and asked to have the &#8220;twitter&#8221; name in the directory. We reviewed the plugin as per normal, found no issues with it, and decided to give them the name because, after all, they are indeed &#8220;Twitter&#8221; and have the rights to their own name.</span></p>\n<p class=\"p1\"><span class=\"s1\">The previous plugin occupying that space had been inactive for a long period of time and had no real existing installations to speak of anymore. Additionally, the plugin had been closed for quite some time previous to that.</span></p>\n<p class=\"p1\"><span class=\"s1\">So giving them their own name is pretty much a no-brainer. <img src=\"https://poststatus.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" /></span></p>\n</blockquote>\n<p class=\"p1\">Techcrunch, and likely others, are misreporting the plugin&#8217;s immediate popularity, as those numbers were largely from the previous iteration of the plugin.</p>\n<p class=\"p1\">Twitter&#8217;s new plugin has a number of features, many of which have been implemented over the years by unofficial sources like Jetpack and Yoast.</p>\n<p class=\"p1\">For one, they have released &#8220;official&#8221; Tweet and follow buttons, along with a settings page for basic configuration.</p>\n<p class=\"p1\"><img class=\"aligncenter size-large wp-image-8876\" src=\"https://poststatus.com/wp-content/uploads/2015/02/twitter-share-752x400.png\" alt=\"twitter-share\" width=\"752\" height=\"400\" /></p>\n<p class=\"p1\"><img class=\"aligncenter size-large wp-image-8877\" src=\"https://poststatus.com/wp-content/uploads/2015/02/twitter-settings-752x728.png\" alt=\"twitter-settings\" width=\"752\" height=\"728\" /></p>\n<p class=\"p1\">Also, there&#8217;s a metabox on post edit that allows you to customize the predefined Tweet and Twitter cards, which is quite nice.</p>\n<p class=\"p1\"><img class=\"aligncenter size-large wp-image-8878\" src=\"https://poststatus.com/wp-content/uploads/2015/02/twitter-sharing-752x365.png\" alt=\"twitter-sharing\" width=\"752\" height=\"365\" /></p>\n<p class=\"p1\">They also have the ability to customize the colors for embedded tweets inside WordPress content.</p>\n<p class=\"p1\">According to the Twitter blog announcement, there is also integration for Twitter ads and analytics tracking, which are both nice features for publishers.</p>\n<p class=\"p1\">The one thing I notice is not in this plugin is any authentication feature. Perhaps it&#8217;ll come in the future, but right now you wouldn&#8217;t be able to auto-tweet new posts or perform other actions that would require Twitter Apps and authentication on a per-site basis. This is the type of functionality that Jetpack has long performed, using the WordPress.com authentication.</p>\n<p class=\"p1\">I&#8217;m pretty happy to finally see an official Twitter plugin. The source <a href=\"https://github.com/twitter/wordpress\">code is on Github</a>, and the plugin is released with the MIT license. At a very quick glance, it seems quite well done and I&#8217;m looking forward to playing with it some  more.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Feb 2015 21:27:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"WPTavern: Envato Continues to Rake in the Cash from WordPress Themes Packaged as Complete Website Solutions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39519\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:117:\"http://wptavern.com/envato-continues-to-rake-in-the-cash-from-wordpress-themes-packaged-as-complete-website-solutions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7849:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/envato.jpg\" rel=\"prettyphoto[39519]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/envato.jpg?resize=697%2C314\" alt=\"envato\" class=\"aligncenter size-full wp-image-29973\" /></a></p>\n<p>This week Envato <a href=\"http://inside.envato.com/pressnomics/\" target=\"_blank\">published</a> stats on how WordPress product sellers are doing within its economy. Theme authors make up the bulk of WordPress-based earnings on its marketplace and continue to dominate sales.</p>\n<p>Inspired by his interaction with the WordPress business community at Pressnomics, Ben Chan, director of Growth and Revenue at Envato, penned an insider brief about the WordPress segment of Envato&#8217;s economy. The post makes it abundantly clear why theme authors continue to sell their products on Themeforest, despite the marketplace&#8217;s poor reputation among WordPress consultants.</p>\n<p>Envato&#8217;s steady pipeline of traffic is the deciding factor for many commercial theme authors. <strong>&#8220;In September 2014, ThemeForest was the 88th most trafficked website in the world (according to Alexa.com), at the time ahead of Netflix,&#8221;</strong> Chan said. &#8220;The traffic it receives is more than just eyeballs; these are buyers looking to purchase a theme and many are introduced to WordPress for the first time.&#8221;</p>\n<p>This volume has made it possible for 31 authors to sell more than $1 million dollars worth of products through Envato. <strong>&#8220;We have authors earning tens of thousands of dollars from our various product types, but it’s WordPress authors who currently dominate our Power Elite wall of fame by holding 30 of the 31 Power Elite spots.&#8221;</strong></p>\n<p>Competition is fierce among WordPress themes, yet even moderately competitive themes can make a decent chunk of change. Envato&#8217;s heavy traffic virtually guarantees sales for new theme authors. Chan reported average earning data for a single theme during a single month:</p>\n<ul>\n<li>50% of all WordPress themes on ThemeForest have made at least $1,000 in a month.</li>\n<li>25% of all WordPress themes on ThemeForest have made at least $2,500 in a month.</li>\n<li>15% of WordPress themes have made at least $5,000 in a month.</li>\n<li>7% have made at least $7,500 in a month.</li>\n<li>5% have made at least $10,000 in a month.</li>\n</ul>\n<p>Theme authors who make their products responsive and compatible with WooCommerce and WPML tend to have much higher earnings, which indicates that people are building WordPress sites that will be optimized for mobile traffic and global commerce.</p>\n<h3>Poor Standards Lead to Security Vulnerabilities and Loss of Data Portability</h3>\n<p>Envato remains the dominant marketplace for commercial WordPress themes, despite rampant security concerns surrounding its products on a regular basis. Last September, <a href=\"http://wptavern.com/1000-wordpress-themes-on-envato-market-potentially-affected-by-revolution-slider-security-vulnerability\" target=\"_blank\">1,000+ Envato products were affected by the Slider Revolution security vulnerability</a>. This particular debacle was fueled by theme authors who were lax in patching their products, as well as Envato&#8217;s poor standards, which continue to allow authors to bundle plugins with themes.</p>\n<p>If Envato required theme authors to adhere to industry best practices by clearly separating their theme and plugin products, the company would have had no need to publish a list of 1,000+ themes potentially affected by a vulnerability that was being <a href=\"http://wptavern.com/100000-wordpress-sites-compromised-using-the-slider-revolution-security-vulnerability\" target=\"_blank\">actively exploited since its disclosure</a>.</p>\n<p>Obviously, the data presented in Chan&#8217;s insider brief was designed to convince more authors to sell on Themeforest. Several of the theme product examples he showcases are packed full of <a href=\"http://wptavern.com/why-wordpress-theme-developers-are-moving-functionality-into-plugins\" target=\"_blank\">functionality that belongs in plugins</a>, i.e. automotive listings, filterable inventory, custom categories and taxonomies, etc. The products do not clearly differentiate what functionality is included in a plugin vs. the theme itself.</p>\n<p>Additionally, many of these top-selling themes offer accompanying plugins that are only compatible with that specific theme, a desperately myopic development practice rampant among Themeforest products that locks users into that theme/plugin package.</p>\n<p>What would be even more fascinating to know are the stats on WordPress theme products that do not bundle any plugins whatsoever. How well are the products doing that are pure themes with a clear separation from the plugins they support? Where are the stats for themes that absolutely guarantee unobstructed <a href=\"http://wptavern.com/wordpress-theme-shops-move-towards-preserving-data-portability\" target=\"_blank\">data portability</a> for customers?</p>\n<p>Envato theme authors are making large sums of cash by selling themes that are packaged as complete solutions for online businesses, because that&#8217;s what consumers have been trained to expect &#8211; the bigger the package, the more appealing the product. This can cause serious problems with data portability for customers down the road and remains a continual source of frustration for consultants who are hired to support poorly built Envato products.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/avada.jpg\" rel=\"prettyphoto[39519]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/avada.jpg?resize=599%2C269\" alt=\"Source: Avada theme on Themeforest\" class=\"size-full wp-image-39557\" /></a>Source: <a href=\"http://themeforest.net/item/avada-responsive-multipurpose-theme/2833226\">Avada theme on Themeforest</a>\n<p>The marketplace&#8217;s loose product standards allow theme product authors to thrive on selling full website solutions, as Justin Tadlock discovered in his <a href=\"http://justintadlock.com/archives/2013/09/11/the-themeforest-experiment-one-year-later\" target=\"_blank\">Themeforest experiment</a>. Envato continues to rake in the cash from products that undermine best practices designed to protect users:</p>\n<blockquote><p>ThemeForest is in the business of selling WordPress themes. Selling anything else is underhanded at best and false advertising at worst.</p>\n<p>If you want to sell a “Web site solution” or whatever you want to call it, you’re selling on the wrong marketplace. Go create your own site and sell these applications for WordPress.</p></blockquote>\n<p>If the marketplace were to change its standards and encourage theme authors to build themes that respect WordPress&#8217; plugin system, it would most certainly result in a loss of profit. Envato currently has little incentive to move in this direction. As with the case of <a href=\"http://notes.envato.com/general/100-gpl-option-now-available-plus-woothemes-arrives\" target=\"_blank\">GPL licensing options</a>, the company historically drags its feet until forced to comply with most basic requirements.</p>\n<p>The WordPress community continues to pressure Envato to hold theme and plugin authors to standards that would better ensure the security and performance of users websites, but Envato isn&#8217;t likely to enforce stricter standards anytime soon.</p>\n<p>The company continues to parade its top sellers as incentive for new authors to bring their products into the marketplace. Changing theme product standards would require the restructuring of virtually all of its top-selling products. Envato&#8217;s bottom line will continue to drive its standards until either the market or the community force the company to change.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Feb 2015 19:25:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"WPTavern: High Risk Security Vulnerability Discovered in WP Slimstat, Update Immediately\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39512\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wptavern.com/high-risk-security-vulnerability-discovered-in-wp-slimstat-update-immediately\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2205:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPSlimStatFeaturedImage.png\" rel=\"prettyphoto[39512]\"><img class=\"aligncenter size-full wp-image-39513\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WPSlimStatFeaturedImage.png?resize=835%2C265\" alt=\"WP Slim Stat Featured Image\" /></a></p>\n<p>If you use <a title=\"https://wordpress.org/plugins/wp-slimstat/\" href=\"https://wordpress.org/plugins/wp-slimstat/\">WP Slimstat</a>, you&#8217;ll want to make sure you&#8217;re using version 3.9.6 or later as Sucuri has <a title=\"http://blog.sucuri.net/2015/02/security-advisory-wp-slimstat-3-9-5-and-lower.html\" href=\"http://blog.sucuri.net/2015/02/security-advisory-wp-slimstat-3-9-5-and-lower.html\">discovered a severe SQL injection vulnerability</a> in versions 3.9.5 and lower. WP Slimstat is an analytics plugin for WordPress that provides real-time monitoring, heatmaps, and other features to monitor website data. According to Sucuri, the vulnerability can be used by any visitor browsing a vulnerable website:</p>\n<blockquote><p>This bug can be used by any visitor browsing the vulnerable website. If your website uses a vulnerable version of the plugin, you’re at risk. Successful exploitation of this bug could lead to Blind SQL Injection attacks, which means an attacker could grab sensitive information from your database, including username, (hashed) passwords and, in certain configurations, WordPress Secret Keys (which could result in a total site takeover).</p></blockquote>\n<p>Although the author has <a title=\"https://wordpress.org/plugins/wp-slimstat/changelog/\" href=\"https://wordpress.org/plugins/wp-slimstat/changelog/\">patched the security vulnerability</a>, he offers some additional advice.</p>\n<blockquote><p>If you are using a caching plugin, please flush its cache so that the tracking code can be regenerated with the new key. Also, if you are using Slimstat to track external websites, please make sure to replace the tracking code with the new one available under Settings &gt; Advanced.</p></blockquote>\n<p>Spread the news and to be protected from the vulnerability, make sure any site using WP Slimstat is updated to the latest version.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Feb 2015 08:22:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"Matt: On WordPress.com and Bitcoin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44713\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://ma.tt/2015/02/on-wordpress-com-and-bitcoin/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3656:\"<p>There&#8217;s been some controversy and discussion about the fact <a href=\"http://www.coindesk.com/wordpress-removes-bitcoin-payment-option/\">that WordPress.com no longer support Bitcoin in our new checkout flow on signup</a>. (It&#8217;s still there in some other flows.)</p>\n<p>Since there has been a lot of discussion about it, I wanted to share directly some of the answers I had to Grace&#8217;s follow-up questions, since I&#8217;m not sure if they&#8217;ll be published and if they are it probably won&#8217;t be in their entirety.</p>\n<blockquote><p>In regards to your future plans for the currency, is bitcoin support definitely returning or is that just a possibility at this point?</p></blockquote>\n<p>We’re big fans of Bitcoin and hope to support it again in the future, for all of the reasons that we originally supported it in 2012, which you can read about here:</p>\n<p><a href=\"http://en.blog.wordpress.com/2012/11/15/pay-another-way-bitcoin/\" rel=\"nofollow\">http://en.blog.wordpress.com/2012/11/15/pay-another-way-bitcoin/</a></p>\n<blockquote><p>Is there anything that will influence the outcome of this decision?</p></blockquote>\n<p>No, it is simply a matter of development resources, which are especially scarce for us right now as we’re trying to keep up with growth.</p>\n<blockquote><p>You mention that bitcoin has low volume compared to other payment methods, has this always been the case? Has its volume share changed over time?</p></blockquote>\n<p>The volume has been dropping since launch, in 2014 it was only used about twice a week, which is vanishingly small compared to other methods of payment we offer. We supported Bitcoin for philosophical reasons, not commercial ones.</p>\n<blockquote><p>What are the key aims of your checkout process changes?</p></blockquote>\n<p>Our goals are twofold: to refactor the code behind it which has parts that are over five years old and has grown very complex, and to make it faster and easier for people to buy our services.</p>\n<blockquote><p>When you first launched bitcoin payments WordPress’ blog post praised it as an inclusive payment method for those who cannot use PayPal. Do you worry that these people will now be excluded from the platform?</p></blockquote>\n<p>Of course, but either that number of people turned out to be smaller than we expected or they found other ways to pay. Since it’s so few people overall I’m happy to extend people’s subscription for a year, as <a href=\"http://www.coindesk.com/wordpress-removes-bitcoin-payment-option/#comment-1872904302\">I offered in your comments section</a>.</p>\n<blockquote><p>What does being a ‘big believer’ in bitcoin mean to you?</p></blockquote>\n<p>I believe Bitcoin or some other blockchain-like system will be the basis of the majority of financial transactions in the future, from small remittances to multi-billion dollar corporate acquisitions. I think transaction costs should follow Moore’s law, and I don’t think we’re going to get there with the centralized gateways that currently account for the overwhelming majority of transactions. I also personally hold Bitcoin, I’m an advisor to <a href=\"https://www.stellar.org/\">Stellar.org</a>, and my friends make fun of me for bringing up Bitcoin and the blockchain in unrelated conversations.</p>\n<blockquote><p>The bitcoin option still appears on the ‘WP Admin’ screen but not on ‘My Upgrades’. Is this part of the phase out, or likely to stay this way?</p></blockquote>\n<p>That’s on the old code base, and will be available for a short while if any current Bitcoin subscribers want to renew while the option is still available.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Feb 2015 05:20:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: WordPress for iOS 4.8 Released, Adds Visual Editor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39488\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2274:\"<p>WordPress for iOS 4.8 is <a title=\"https://itunes.apple.com/us/app/wordpress/id335703880?mt=8\" href=\"https://itunes.apple.com/us/app/wordpress/id335703880?mt=8\">available on the app store</a> and includes a few notable features. The app now sports a visual editor providing a <em>what you see is what you get </em>experience. Prior to 4.8, the editor was stuck in HTML mode making it hard to read and write content.</p>\n<p>The editor contains the most commonly used formatting tools and just like the desktop version of WordPress, includes a toggle to switch between HTML and Visual editing mode. There&#8217;s also an image size selector where you can choose between Thumbnail, Medium, Large, or Full-size.</p>\n\n<a href=\"http://i0.wp.com/wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor/img_5831.png\" rel=\"prettyphoto[39488]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/IMG_5831.png?fit=500%2C500\" class=\"attachment-large\" alt=\"WordPress For iOS 4.8 HTML Editor\" /></a>\n<a href=\"http://i0.wp.com/wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor/img_5830.png\" rel=\"prettyphoto[39488]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/IMG_5830.png?fit=500%2C500\" class=\"attachment-large\" alt=\"WordPress For iOS 4.8 Visual Editor\" /></a>\n<a href=\"http://i2.wp.com/wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor/img_5833.png\" rel=\"prettyphoto[39488]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/IMG_5833.png?fit=500%2C500\" class=\"attachment-large\" alt=\"WordPress For iOS 4.8 Post Preview Screen\" /></a>\n<a href=\"http://i0.wp.com/wptavern.com/wordpress-for-ios-4-8-released-adds-visual-editor/img_5832.png\" rel=\"prettyphoto[39488]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/IMG_5832.png?fit=500%2C500\" class=\"attachment-large\" alt=\"WordPress For iOS Image Size Selector\" /></a>\n\n<p>Although I struggled with adding block quotes, the visual editor is a nice departure from HTML mode. I find it convenient to format content as I&#8217;m writing versus when the post is completed. Overall, 4.8 is a nice release and I think users are going to enjoy the new visual editor. After you upgrade to 4.8, let us know what you think in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Feb 2015 20:27:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"Post Status: The problem of link rot and data loss\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=8859\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"https://poststatus.com/link-rot/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8505:\"<p>Websites come and go. With them, typically goes their data. This is often called &#8220;link rot&#8221;, when the content in question was also linked to from another source. Sometimes I don&#8217;t mind too much, because I&#8217;m not terribly invested in that content. However, there are times where content has a relevance in news matters, or as a significant historical timeline.</p>\n<p>Sometimes, a website where I contributed content goes away or atrophies&#8211; in some form or another &#8212; and it makes me sad to see my content go down with the ship.</p>\n<p>Three places where I contributed much of my early WordPress content have either lost data, had data corrupted, or disappeared entirely. Each makes me sad.</p>\n<p>Some of my earliest WordPress related words were typed out on <a href=\"http://wptavern.com\">WP Tavern</a>&#8216;s forums, <a href=\"http://themehybrid.com\">Theme Hybrid</a>&#8216;s (private) forums, or <a href=\"http://wpcandy.com\">WPCandy</a>. Each situation is different. WP Tavern&#8217;s forums are totally gone, though I&#8217;m told there is an offline backup, meaning they could be brought back alive. <del>Theme Hybrid recently deleted all old forum data, though this forum was private and the most excusable of the three in my opinion.</del> <em>(<strong>edit</strong>: as Sami notes in the comments, the archive was kept. I just didn&#8217;t see it.)</em> And WPCandy, while not gone, seems it could disappear any day &#8212; and I wrote something like 130-140 blog posts over there. I&#8217;d be incredibly sad to see WPCandy disappear forever.</p>\n<p>Stories like these aren&#8217;t unique to me. All of us that write or comment or participate in online communities have similar stories. It appears that data loss is just a thing we have to live with in the modern age. I know a friend of mine, Siobhan McKeown, has many times struggled with finding old content for the History of WordPress book she is finishing writing.</p>\n<h3>Fighting link rot</h3>\n<p>Why is this important and what can we do about it? Well, there are a number of resources that can be helpful.</p>\n<p>The first and obvious method for fighting link rot is <a href=\"https://archive.org/\">archive.org</a>, the project that is archiving as much of the web as possible to preserve it for future generations. Archive.org is outstanding, and it is a huge project on a grand scale. The team there makes great efforts to document important websites, and automatically attempts the rest.</p>\n<p>The problem is, with many smaller websites it may or may not be successful, or snapshots of the website may be dated or not include everything. Furthermore, if the website isn&#8217;t structured in a certain way or is password protected, there&#8217;s not much they can do.</p>\n<p>So, without relying on archive.org to do it for us, there are two other methods worth noting.</p>\n<h4>Manual backups</h4>\n<p>In individual communities, we can manually make the effort to backup sites that we believe are at risk. We should also contact these site owners and requests backups, even if that comes off as an affront.</p>\n<p>When Siobhan was writing the History of WordPress book, she was worried that WPCandy could go offline &#8212; as it &#8220;was becoming particularly degraded&#8221; while she was writing &#8212; so she personally scraped a backup of the site with a tool called <a href=\"http://www.sitesucker.us/home.html\">SiteSucker</a>.</p>\n<p>SiteSucker finds URLs, logs them, and backs up the source HTML. Similar work can be done with <a href=\"https://www.gnu.org/software/wget/\">wget</a>, for those that know how to utilize it. It&#8217;s my understanding that various individuals have done this with a number of other WordPress websites as well.</p>\n<p>For WordPress sites, I know WP Tavern&#8217;s forums still exist offline, and Siobhan tells me she even has a backup of the old b2 forums (the software which WordPress was forked from). I&#8217;d also guess Justin Tadlock still has a backup somewhere of his forums. I&#8217;d love to see these, and other &#8220;lost&#8221; sites have a public place where the archives can be maintained.</p>\n<h4>Self-hosted backups</h4>\n<p>Another method to fight link rot is to backup linked sources as we create new content. Harvard&#8217;s Berkman Center is currently beta testing what will be <a href=\"http://www.niemanlab.org/2015/02/amber-a-new-tool-to-prevent-linkrot-on-websites-is-out-in-beta/\">a commercial tool, called Amber, to fight link rot</a>. In the news industry specifically, the source URLs for linked content can contain significant context for a post, making link rot on old posts particularly damaging to the piece that links them, assuming additional context will be available to the reader.</p>\n<p><img class=\"aligncenter size-large wp-image-8861\" src=\"https://poststatus.com/wp-content/uploads/2015/02/amber-link-rot-saver-752x396.png\" alt=\"amber-link-rot-saver\" width=\"752\" height=\"396\" /></p>\n<p>Amber stores the source HTML, much like Archive.org, wget, or SiteSucker, but stores it on the host site&#8217;s servers. Meaning, if I were using it here right now, each link in this post would have an associated HTML document on my server to preserve the link and the content therein. The tool then detects 404s if the link rots in the future, and offers up a cached version from my own server.</p>\n<p>Obviously a tool like Amber is not a small investment. It would require news organizations to have more server resources at the least, but it would be an important investment to protect the integrity of source content.</p>\n<p>The <a href=\"http://amberlink.org/\">Amber website</a> cites that 49% of links in United States Supreme Court decisions are dead, and that over 135,000 Wikipedia source links are dead. These numbers alone are staggering, and prove a very good point. I can&#8217;t imagine what the ratios of dead links are for longstanding newspapers like The New York Times, and others.</p>\n<p>Amber will be available for WordPress and Drupal, or most platforms that support Apache or Nginx. I&#8217;m really, really excited about this tool. I know it will cost money (in resources at least, as I&#8217;m not sure if it&#8217;ll be a commercial product), but if enough people adopt it, it could really help save a lot of future data. I&#8217;m very interested in it for Post Status, as a number of blogs and companies I cover go away if they are not successful upon launch (when I often cover them).</p>\n<h3>Why fighting link rot is important</h3>\n<p><span class=\"pullquote alignright\">We don&#8217;t know what items being published today will be important tomorrow. </span> What we do know is that future politicians, world leaders, and to-be significant individuals and organizations are publishing online today. And when these people or organizations are in significant positions, we will want to know their pasts and opinions.</p>\n<p>Perhaps more importantly, cultures, subcultures, and events being documented online may not have any offline version. The web has a beautiful advantage over other mediums like television and newspapers, in that storage of historical data is much simpler, and easier to search. The web enables our timeframe of life on earth to be the most documented in all of human existence.</p>\n<p>It is our responsibility as publishers to protect our own content, but also the content of others. I&#8217;m reminded how easy it is now because of how hard such efforts are on other mediums. I once read a <a href=\"http://www.fastcompany.com/3022022/the-incredible-story-of-marion-stokes-who-single-handedly-taped-35-years-of-tv-news\">story about Marion Stokes</a> (also, <a href=\"http://www.onthemedia.org/story/tldr-9-second-life-marion-stokes/\">NPR version</a>), who recorded 35 years of TV news on her own &#8212; news that would have been lost without her monumental and perhaps compulsive efforts.</p>\n<p>We also have a responsibility as site owners to keep our content up even past when we may hang up our hats. Within our various niche communities, we should be making efforts to document and keep the past.</p>\n<p>In the case of WordPress, we&#8217;re cataloguing software that powers nearly 25% of the web, and growing. There are important stories being told today that may be educational to future publishers, documentarians, or simply interested individuals. You never know when our content will matter again, but it might, and therefore we should take strides to keep it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Feb 2015 18:41:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: Press This Bookmarklet Generates Concerns of Copyright Infringement\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39473\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/press-this-bookmarklet-generates-concerns-of-copyright-infringement\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5102:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/PressThisFeaturedImage.png\" rel=\"prettyphoto[39473]\"><img class=\"aligncenter size-full wp-image-39478\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/PressThisFeaturedImage.png?resize=836%2C266\" alt=\"Pres This Featured Image\" /></a></p>\n<p><a title=\"http://codex.wordpress.org/Press_This\" href=\"http://codex.wordpress.org/Press_This\">Press This</a> is a bookmarklet tool that was <a title=\"https://wordpress.org/news/2008/07/wordpress-26-tyner/\" href=\"https://wordpress.org/news/2008/07/wordpress-26-tyner/\">added to WordPress 2.6</a> in 2008. You can access the tool by browsing to the WordPress backend and select the Tools menu. It acts as a small app that runs in the browser to quickly share content on the web. Press This is in the process of <a title=\"https://make.wordpress.org/core/2015/02/18/press-this-revamp-merge-proposal/\" href=\"https://make.wordpress.org/core/2015/02/18/press-this-revamp-merge-proposal/\">being revamped</a> in preparation for WordPress 4.2.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/PressThisLocation.png\" rel=\"prettyphoto[39473]\"><img class=\"size-full wp-image-39477\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/PressThisLocation.png?resize=1010%2C227\" alt=\"Press This Location\" /></a>Press This Location\n<p>Because the bookmarklet uses content from the site being shared, it&#8217;s easy to infringe on a website&#8217;s copyrighted material. Daniel Bachhuber brought up the issue <a title=\"https://github.com/MichaelArestad/Press-This/issues/42\" href=\"https://github.com/MichaelArestad/Press-This/issues/42\">in Github</a> where active development is taking place.</p>\n<blockquote><p>I&#8217;m not the best person to comment on this, but it seems like building a tool that automatically scrapes copyrighted materials should have an upfront discussion about said legal implications, and whether this is something we should promote.</p></blockquote>\n<p>To my knowledge, this is the first time the issue has been brought up since its inclusion into core. Stephane Daury, who is one of the project&#8217;s primary contributors explains that, the tool goes through great efforts to use values clearly defined by websites.</p>\n<blockquote><p>We also (now) make a greater effort to use values the sites have clearly defined and specified as being what they want their articles and content to be represented as when shared elsewhere, by detecting Open Graph and Twitter Cards tags, etc. This includes representations for thumbnails, embeds, etc.</p></blockquote>\n<p>Although it&#8217;s not documented in the conversation on Github, <a title=\"https://github.com/MichaelArestad/Press-This/issues/42#issuecomment-74895220\" href=\"https://github.com/MichaelArestad/Press-This/issues/42#issuecomment-74895220\">Michael Arestad reached out to Paul Sieminski</a>, Automattic&#8217;s general legal counsel, and received word that, from a legal standpoint, Press This is fine. Richard Best of WP and Legal Stuff <a title=\"http://wpandlegalstuff.com/press-this-and-copyright-infringement/\" href=\"http://wpandlegalstuff.com/press-this-and-copyright-infringement/\">published a post on the issue</a> and takes a similar stance:</p>\n<blockquote><p>It seems that a person in-the-know in Automattic has commented internally (no doubt in more detail than we see in the public online discussion) that Press This is fine. I agree. I thought it might be of interest to those following this issue to explain why.</p>\n<p>The discussion revolves around the notion of ‘authorising’ an action that amounts to copyright infringement or ‘contributing’ to infringement (similar concepts which, in different jurisdictions, are called different things). It explains why there is no such authorisation or contribution here and why, therefore, Press This is fine.</p></blockquote>\n<p>The Press this bookmarklet is a convenient way to share content on the web, but it doesn&#8217;t prevent copyright infringement from occurring. Best makes an excellent point when he says that, it&#8217;s the end user&#8217;s responsibility to make sure they&#8217;re not infringing on anyone&#8217;s copyright:</p>\n<blockquote><p>It can, of course, also be used to infringe copyright, by copying a full article without permission or copying a full size copyright image without permission but, ultimately, Press This is simply a (pretty handy) tool of convenience. It’s the user’s responsibility to use Press This within the confines of copyright law (or run the risk of being accused of copyright infringement).</p></blockquote>\n<p>While Press This is a tool that makes it easy to share snippets of content on the web, it should not be used to re purpose entire articles or share full-size copyrighted images. As <a title=\"http://www.goodreads.com/quotes/709747-with-great-power-comes-great-responsibility\" href=\"http://www.goodreads.com/quotes/709747-with-great-power-comes-great-responsibility\">Voltaire once said</a>, &#8220;great power comes with great responsibility.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Feb 2015 03:37:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Content Protection Plugins for WordPress Do More Harm Than Good\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39450\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/content-protection-plugins-for-wordpress-do-more-harm-than-good\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5429:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/ContentProtectionFeaturedImage.png\" rel=\"prettyphoto[39450]\"><img class=\"size-full wp-image-39466\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/ContentProtectionFeaturedImage.png?resize=711%2C297\" alt=\"Content Protection Featured Image\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/10583321@N06/5897893452\">Cologne &#8211; Locks</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-nc-nd/2.0/\">(license)</a>\n<p>Mika Epstein, who <a title=\"http://wptavern.com/behind-the-scenes-in-the-wordpress-plugin-directory-with-mika-epstein\" href=\"http://wptavern.com/behind-the-scenes-in-the-wordpress-plugin-directory-with-mika-epstein\">helps oversee the WordPress plugin directory</a>, has published <a title=\"http://halfelf.org/2015/stop-using-copy-protection/\" href=\"http://halfelf.org/2015/stop-using-copy-protection/\">a simple request</a> to stop using copy protection. Epstein explains how copy protection degrades the user experience, makes it difficult to provide tech support, and perhaps most importantly, how they don&#8217;t work.</p>\n<p>She suggests that photographers use a watermark and not put full-size images on the web. They should also host images on cloud based services like Amazon as PHP and large image sizes don&#8217;t get along. As a last resort, she suggests DRM as an option similar to how <a title=\"http://company.gettyimages.com/license-compliance/\" href=\"http://company.gettyimages.com/license-compliance/\">Getty protects their images</a>.</p>\n<blockquote><p>As much as it pains me to say it, DRM is also a solution. So is watermarking your images. The way people like Getty protect their images is to lock it down to purchased users only. You can (fairly easily) download the smaller, sample images, but the awesome big ones are locked down.</p></blockquote>\n<p>She finishes the post by saying there&#8217;s only one way to combat content theft: don&#8217;t publish it online.</p>\n<h2>Getting Around a Copy Protection Plugin</h2>\n<p>A search for <a title=\"https://wordpress.org/plugins/search.php?q=copy+protection&sort=\" href=\"https://wordpress.org/plugins/search.php?q=copy+protection&sort=\">copy protection</a> on the WordPress plugin directory generates 271 results. I installed <a title=\"https://wordpress.org/plugins/wp-content-copy-protection/\" href=\"https://wordpress.org/plugins/wp-content-copy-protection/\">WP Content Copy Protection</a> as it&#8217;s one of the more popular options and it has a ton of features, including:</p>\n<ul>\n<li>Disables context menu (right click)</li>\n<li>Context menu is only clickable on HREFs</li>\n<li>Disables text selection and browser copy functions</li>\n<li>Disables text and image drag/drop/saving function on PC and mobile devices</li>\n<li>Javascript validation (displays error message when Javascript is disabled)</li>\n<li>Disables keyboard copy (CTRL A, C, X, U, P and S) &#8211; Windows OS</li>\n<li>Disables f-key command for accessing developer tools</li>\n<li>Uses compressed Javascript (increases load speed and reduces http requests)</li>\n<li>The image link URL is automatically removed and defaulted to the &#8216;none&#8217; setting (basic image protection)</li>\n<li>No configuration, customization or coding needed.</li>\n</ul>\n<p>As you can see, this plugin does a lot and should prevent me from easily stealing content. After installing and activating the plugin, I visited the front page of the testing site and discovered all of the usual suspects were disabled. I couldn&#8217;t right-click to view the page source or directly download an image. I opened up the <a title=\"http://getfirebug.com/\" href=\"http://getfirebug.com/\">Firebug</a> extension in FireFox and inspected the image element.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/FireBugInspectedImageElement.png\" rel=\"prettyphoto[39450]\"><img class=\"size-full wp-image-39465\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/FireBugInspectedImageElement.png?resize=1025%2C499\" alt=\"Image Inspected With Firebug\" /></a>Image Inspected With Firebug\n<p>After inspecting the image within the post, I gained access to the direct URL in Firebug&#8217;s console. I copied and pasted the URL into a new browser window which allowed me to download the full-size image. I&#8217;m also able to inspect paragraph elements and copy those as well. If the site is using the free version of WP Content Copy Protection, I can use its RSS feed to scrape content as only the pro version removes RSS feeds.</p>\n<p>The pro version adds several features that make it much more aggressive at content protection. For instance, it has a print screen deterrent agent to prevent the use of screenshot tools to steal images. I&#8217;ve contacted the plugin author and have asked for a free trial to see if I can easily get access to protected content with the pro version. If he gives me a copy, results of the experiment will be published in a future post on the Tavern.</p>\n<p>Although copy protection plugins or copy protection in general prevents the average website visitor from being able to steal content, they come with a lot of unnecessary baggage. In essence, they do more harm than good, especially from an accessibility stand point, as common keyboard shortcuts are disabled. If you don&#8217;t want to have your content stolen online, don&#8217;t publish it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Feb 2015 23:26:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"WPTavern: WordCamp Miami Gears Up for 6th Year with New Tracks and Workshops Planned\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39433\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"http://wptavern.com/wordcamp-miami-gears-up-for-6th-year-with-new-tracks-and-workshops-planned\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5649:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wcmia-2015.jpg\" rel=\"prettyphoto[39433]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wcmia-2015.jpg?resize=750%2C349\" alt=\"wcmia-2015\" class=\"aligncenter size-full wp-image-39447\" /></a></p>\n<p><a href=\"http://davidbisset.com/wordcamp-miami-2015-sessions-tracks/\" target=\"_blank\">WordCamp Miami</a> is one of the largest and longest-running annual WordPress events, thanks to its dedicated organizers and volunteers. Last year, <a href=\"http://wptavern.com/recap-of-wordcamp-miami-2014\" target=\"_blank\">the event attracted 770 WordPress enthusiasts</a> from around the world. Co-organizer David Bisset expects that attendees will be in the range of 800 this year for its 6th edition.</p>\n<p>The event has sold out every year, with 250 attendees on its first run in 2010 and attendance steadily increasing every year. Organizing a successful WordCamp for more than half a decade requires organizers to go with what works and always be open to introducing new formats.</p>\n<h4>Expanded Kid&#8217;s Workshop Planned</h4>\n<p>Last year&#8217;s fifth anniversary event included an experiment with hosting a <a href=\"http://wptavern.com/wordcamp-miami-kids-workshop-launches-the-next-generation-of-bloggers\" target=\"_blank\">kid&#8217;s workshop</a> for ages 8-12. Organizers guided the children through the process of setting up a new blog and publishing to the internet for the first time. Bisset said the 2015 event plans to expand on kid&#8217;s workshop.</p>\n<blockquote><p>Expect it back this year based on demand, but we are also bringing something else for young ones to WordCamp Miami 2015. One of our biggest goals at WCMIA is diversity – and diversity includes young ones. They are the next generation of bloggers, developers, and coders.</p></blockquote>\n<p>Volunteering to help with the kid&#8217;s workshop is a fun way to reignite your excitement about WordPress and publishing in general. The event will likely offer more opportunities this year with an expanded workshop planned.</p>\n<h4>BuddyCamp Miami to Return for 3rd Edition</h4>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/05/buddycamp.jpg\" rel=\"prettyphoto[39433]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/05/buddycamp.jpg?resize=1025%2C459\" alt=\"buddycamp\" class=\"aligncenter size-full wp-image-22680\" /></a></p>\n<p><a href=\"http://miami.wordcamp.org/2015/announcing-buddycamp-miami-2015/\" target=\"_blank\">BuddyCamp Miami will return for a third year</a> on May 29th to kick off the main event. This year the topics will be more developer-focused than previous years.</p>\n<p>&#8220;We really don’t want people just to come and listen to talks, but actually CHAT with developers and contributors one-on-one to learn and improve their development and design skills with BuddyPress and bbPress,&#8221; Bisset said. Attending a BuddyCamp is a good way to connect with those who are involved in making BuddyPress and find out more about extending and contributing to the plugin.  Attendee maximum numbers for the 2015 event will be more limited than previous years to facilitate a stronger environment for developer-focused learning.</p>\n<h4>New &#8220;How To&#8221; Track</h4>\n<p>WordCamp Miami is already a veritable smorgasbord of WordPress knowledge, but organizers plan to add several new formats this year for variety. In addition to the traditional abstract/motivational track, a practical “How To” track is in the works.</p>\n<p>&#8220;This track will be focused on users walking into the room and walking out in that same hour with actionable insights and knowledge,&#8221; Bisset said. Sessions will take the form of mini-workshops where attendees can quickly learn new techniques and technologies.</p>\n<p>Bisset&#8217;s <a href=\"http://davidbisset.com/wordcamp-miami-2015-sessions-tracks/\" target=\"_blank\">announcement</a> also hints at &#8220;Hallway Tracks,&#8221; which will unofficially welcome and recognize hallway networking. Business talks will be welcome again this year but will be refocused to provide a more practical and organized series of talks with resources for attendees.</p>\n<p>WordCamp Miami will remain committed to furthering developer education based on feedback from the local community. Organizers plan to encourage more deeper-level developer talks at the 2015 event. &#8220;We think Miami is ready for more serious developer talks and conferences,&#8221; Bisset said. &#8220;According to feedback from local meetups and other sources, more and more advanced topics are being desired (and less of the very early or beginning level topics).&#8221;</p>\n<h4>A Call for Speakers and Volunteers</h4>\n<p>Speaker applications for WordCamp Miami opened up today, and organizers welcome first-time WordCamp speakers to join the event. Topic suggestions are available on the <a href=\"http://miami.wordcamp.org/2015/speaker-submissions/\" target=\"_blank\">speaker submissions</a> page of the event website.</p>\n<p>An event of this magnitude requires a large crew of local volunteers. Last year the eight person coordinating team managed a crew of 30 volunteers, a few of which were even from out of town. &#8220;Volunteers literally made 2014 possible,&#8221; Bisset said. The team currently has almost a dozen coordinators in its Slack group and will be adding more in the coming weeks. If you want to <a href=\"http://miami.wordcamp.org/2015/volunteers/\" target=\"_blank\">get involved</a>, there are lots of opportunities to share your knowledge and skills to help make WordCamp Miami 2015 another successful event.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Feb 2015 21:32:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Find Three Hobbies\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44705\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/02/find-three-hobbies/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:289:\"<blockquote><p>Find three hobbies you love: one to make you money, one to keep you in shape, and one to be creative.</p></blockquote>\n<p>I&#8217;m not sure the provenance of this quote, but I read it and it really resonated with me, and I&#8217;ve found myself repeating it frequently.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Feb 2015 19:30:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"WPTavern: Aventurine: A Free WordPress Theme Featuring Bold Typography and Bright Colors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39396\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wptavern.com/aventurine-a-free-wordpress-theme-featuring-bold-typography-and-bright-colors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3764:\"<p>Last year, WordPress saw a <a href=\"http://wptavern.com/top-15-free-wordpress-themes-released-in-2014\" target=\"_blank\">renaissance in personal blogging themes</a>. The official WordPress.org directory received a deluge of high quality themes that served to raise the bar for commercial developers when it comes to design and simplicity.</p>\n<p>In particular, the trend of flat, minimalist blogging themes is still running strong. Last month, theme design and development duo Mel Choyce and Kelly Dwan released <a href=\"https://wordpress.org/themes/aventurine\" target=\"_blank\">Aventurine</a>, a bold new theme for writers.</p>\n<p>The name Aventurine was inspired by the Italian phrase <em>a ventura</em>, meaning by chance, but the theme&#8217;s elegant and deliberate typography choices indicate that nothing has been left to chance. Aventurine posseses a design wholeness where every element has a clear purpose, and the theme is free of cluttersome widgets and extraneous meta.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/aventurine.png\" rel=\"prettyphoto[39396]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/aventurine.png?resize=880%2C660\" alt=\"aventurine\" class=\"aligncenter size-full wp-image-39398\" /></a></p>\n<p>The theme&#8217;s colors are reminiscent of Choyce and Dwan&#8217;s popular <a href=\"https://wordpress.org/themes/flounder\" target=\"_blank\">Flounder</a> theme, which has been downloaded more than 33,000 times. Aventurine&#8217;s text and headers feature Josefin Sans and Varela Round from Google Fonts.</p>\n<p>The theme includes customizer options for setting the background and header colors. You can also upload a background image. Aventurine&#8217;s creators recommend using a repeating pattern, such as the ones offered at <a href=\"http://subtlepatterns.com/\" target=\"_blank\">subtlepatterns.com</a>.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/aventurine-customizer.png\" rel=\"prettyphoto[39396]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/aventurine-customizer.png?resize=1025%2C586\" alt=\"aventurine-customizer\" class=\"aligncenter size-full wp-image-39419\" /></a></p>\n<p>Featured images are displayed as headers on top of posts at 900px wide for impact. The footer widget areas the only additional customizable feature. They are displayed neatly beneath posts and do not detract from the main content of the page.</p>\n<p>Dwan and Choyce built Aventurine with accessibility in mind, particularly as it relates to best practices for interacting with keyboard and screen readers. While the theme&#8217;s default color palette does not pass accessibility guidelines, the authors made it easy for you to change some of the theme&#8217;s main colors in the customizer. Further customizations can be added to a child theme.</p>\n<p>Aventurine has built-in support for a range of Jetpack features, including  galleries, carousels, infinite scroll, and Photon. Over the past year, the Jetpack development team has been refining the plugin&#8217;s features to be more friendly to theme developers. Many newly released themes are taking advantage of this by supporting Jetpack features out of the box.</p>\n<p>After sorting through dozens of free themes added to WordPress.org in early 2015, Aventurine is one of the few that stand out as truly original and inspiring. It&#8217;s one of the best-designed personal blogging themes of 2015 thus far. Check out the <a href=\"https://themes.redradar.net/aventurine/\" target=\"_blank\">live demo</a> on the theme&#8217;s homepage. You can download <a href=\"https://wordpress.org/themes/aventurine\" target=\"_blank\">Aventurine</a> for free from WordPress.org or install it via your admin themes browser.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Feb 2015 17:18:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Matt: Elon Musk AMA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44678\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://ma.tt/2015/02/elon-musk-ama/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:193:\"<p><a href=\"https://www.reddit.com/r/IAmA/comments/2rgsan/i_am_elon_musk_ceocto_of_a_rocket_company_ama/\">I am Elon Musk, CEO/CTO of a rocket company, AMA!</a>. This guy continues to amaze.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Feb 2015 00:48:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"Matt: Actually Good Youtube Comment\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44695\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"http://ma.tt/2015/02/actually-good-youtube-comment/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1125:\"<p>Hey guys! I found a good comment on Youtube. Documenting here for posterity, from <a href=\"https://www.youtube.com/user/vTxTobi\">vTxTobi</a>:</p>\n<blockquote><p>Top 5 rappers:<br />\n1. <a href=\"http://en.wikipedia.org/wiki/Kendrick_Lamar\">Kendrick Lamar</a><br />\n2. K.dot<br />\n3. Guy in <a href=\"http://genius.com/Big-sean-control-lyrics\">second verse of Control</a><br />\n4. Short dude in <a href=\"http://txdxe.com/\">TDE</a><br />\n5. The <a href=\"http://en.wikipedia.org/wiki/Good_Kid,_M.A.A.D_City\">good kid in a mad city</a></p></blockquote>\n<p>(I added the links.) The joke is all of those refer to Kendrick Lamar, so was laugh-out-loud funny. It was on Kendrick&#8217;s <a href=\"http://www.theatlantic.com/entertainment/archive/2015/02/kendrick-lamar-is-not-a-hypocrite/385384/\">powerful and controversial</a> new <a href=\"https://www.youtube.com/watch?v=6AhXSoKa8xw\">Blacker the Berry track</a>. So congrats to vTxTobi for writing the only decent comment I&#8217;ve read on Youtube in years. <img src=\"http://i1.wp.com/s.ma.tt/blog/wp-includes/images/smilies/icon_smile.gif?w=604\" alt=\":)\" class=\"wp-smiley\" /></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 21 Feb 2015 21:10:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Future of WP and Jetpack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44699\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/02/future-of-wp-and-jetpack/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:251:\"<p>There&#8217;s been some interesting threads going around on Jetpack and the future of WordPress, here&#8217;s Chris Lema&#8217;s take: <a href=\"http://chrislema.com/success-of-wordpress/\">Is the Future Success of WordPress tied to Jetpack?</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 21 Feb 2015 05:15:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"WPTavern: WPGlobus Plugin Adds a Language Switcher to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=27334\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wptavern.com/wpglobus-plugin-adds-a-language-switcher-to-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4703:\"<p>Last week <a href=\"http://wordpress.org/plugins/wpglobus/\" target=\"_blank\">WPGlobus</a> 1.0 beta was released on WordPress.org. The plugin offers an interesting new attempt at providing multi-language support for WordPress sites. WPGlobus allows you to configure a set of available languages and adds a dropdown language switcher to the frontend via a custom menu.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-language-switcher.png\" rel=\"prettyphoto[27334]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-language-switcher.png?resize=1025%2C437\" alt=\"wpglobulus-language-switcher\" class=\"aligncenter size-full wp-image-39369\" /></a></p>\n<p>The development team behind <a href=\"http://www.wpglobus.com/\" target=\"_blank\">WPGlobus</a> is led by WordPress developer Gregory Karpinsky. He designed the tool to be used on bilingual/multilingual WordPress sites. To be clear, the plugin does not provide translations, but rather allows you to create your own translations for pages and posts in the admin.</p>\n<p>Karpinsky quotes the venerable Capt. O.B.Vious in his reasoning behind creating the plugin: <strong>&#8220;People are a lot more likely to interact with your website if it is available in their own language.&#8221;</strong> WPGlobus was designed to make it easy for anyone to add a language switcher to their site without too much hassle.</p>\n<p>The current version of the plugin offers the following feature highlights:</p>\n<ul>\n<li>Add multiple languages and countries to your site.</li>\n<li>Translate posts, pages, categories, tags and menus using a clean and simple interface.</li>\n<li>Switch languages at the front end using a dropdown menu with language names and country flags.</li>\n<li>Supports the WP-SEO titles and descriptions in multiple languages</li>\n</ul>\n<p>The first step in using the plugin is to select the languages you want to be available in the frontend dropdown. WPGlobus offers different ways to customize the way the languages appear in the menu and comes with flag images pre-installed for each language. The images are also customizable, should you wish to add your own or define custom combinations of country flags and language abbreviations.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-admin-settings.png\" rel=\"prettyphoto[27334]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-admin-settings.png?resize=1025%2C685\" alt=\"wpglobulus-admin-settings\" class=\"aligncenter size-full wp-image-39366\" /></a></p>\n<p>If you have a relatively small website that is quick to translate, you can paste translations for other languages directly into WPGlobus&#8217; tabbed interface in the post editor.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-editor.png\" rel=\"prettyphoto[27334]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/wpglobulus-editor.png?resize=1025%2C586\" alt=\"wpglobulus-editor\" class=\"aligncenter size-full wp-image-39367\" /></a></p>\n<p>The frontend dropdown menu allows visitors to switch between languages and displays them by changing the URL (/{language}/page/).</p>\n<p>In its current state, WPGlobus was designed for simple, static sites. For example, it could be useful for an event where attendees speak a handful of different languages. In this instance, the event staff can easily translate event details on the various pages to provide information for attendees in their own languages.</p>\n<p>For large sites and blogs, an expanded version of WPGlobus is in the works, which would integrate with multilingual plugins, such as WPML, qTranslate, or Polylang. Further down the road, Karpinsky hopes to integrate functionality that will assist e-commerce vendors:</p>\n<blockquote><p>When it comes to e-Commerce, additional challenges may arise. The Buyer, the Seller and the Site Administrator may all speak different languages. A user may have a non-trivial combination of residence, language and currency. Some countries are multilingual, so clicking on a country flag is not always enough. WPGlobus attempts to solve those problems. It’s a long way down the road but we are full of energy and optimism.</p></blockquote>\n<p>At the moment, the plugin is suitable for WordPress administrators who want to make their sites more global and are willing to provide their own translations. <a href=\"http://wordpress.org/plugins/wpglobus/\" target=\"_blank\">WPGlobus</a> is available from WordPress.org. I tested the plugin, and, although it&#8217;s still technically in beta, it works as advertised for providing your own translations on a small website.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 20 Feb 2015 23:12:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"WPTavern: New Plugin Detects Shared Terms in WordPress Ahead of Taxonomy Term Splitting in 4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39295\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"http://wptavern.com/new-plugin-detects-shared-terms-in-wordpress-ahead-of-taxonomy-term-splitting-in-4-2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4866:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/split.jpg\" rel=\"prettyphoto[39295]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/split.jpg?resize=1024%2C498\" alt=\"photo credit: Utičnice - (license)\" class=\"size-full wp-image-39352\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/11932978@N00/3560243700\">Utičnice</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">(license)</a>\n<p><a href=\"https://make.wordpress.org/core/2015/02/16/taxonomy-term-splitting-in-4-2-a-developer-guide/\" target=\"_blank\">Taxonomy term splitting</a> in WordPress 4.2 addresses <a href=\"https://core.trac.wordpress.org/ticket/5809\" target=\"_blank\">a seven-year-old bug</a> that occasionally posed a nuisance to developers. In the past, WordPress allowed terms to be shared between multiple taxonomies. This caused a problem where updating a shared term would change the others unintentionally.</p>\n<p>Boone Gorges&#8217; progress on this ticket marks a major milestone on the <a href=\"https://make.wordpress.org/core/2013/07/28/potential-roadmap-for-taxonomy-meta-and-post-relationships/\" target=\"_blank\">taxonomy component roadmap</a> that Andrew Nacin outlined in 2013. Splitting shared terms paves the way for more exciting improvements to taxonomy meta and post relationships in the future.</p>\n<p>Gorges explained how taxonomy term splitting will work in 4.2:</p>\n<blockquote><p>WordPress will detect whether the term is shared between multiple taxonomies, and if so, will create a new row in wp_terms for the updated term and change all necessary term_taxonomy associations. term_taxonomy_id will stay the same, but term_id will change. This is a case of a shared term being split into separate terms.</p>\n<p>In most cases, term splitting will go unnoticed. However, there are some plugins and themes that store term IDs as static data. In these cases, a changed term ID has the potential to cause various sorts of problems.</p></blockquote>\n<p>He identified 11 out of the top 100 plugins on WordPress.org that will be affected by this change in 4.2, due to the fact that they store term IDs independently in the database. Plugin authors are advised to update their extensions to facilitate split term ID migration, and Gorges offers an example in his <a href=\"https://make.wordpress.org/core/2015/02/16/taxonomy-term-splitting-in-4-2-a-developer-guide/\" target=\"_blank\">post on the Make/Core blog</a>.</p>\n<h3>Find out if your WordPress site is using any shared terms.</h3>\n<p>Shared terms are extremely uncommon. However, if you&#8217;re curious to find out if your site has any, the new <a href=\"https://github.com/jjeaton/wp-find-shared-terms\" target=\"_blank\">WP Find Shared Terms</a> plugin makes it easy to detect shared terms and will list them along with their associated taxonomies.</p>\n<p>After installing it, you can visit Tools > Find Shared Terms to see a list. I tested it and found that it works as advertised to detect shared terms, their IDs, taxonomies, and associated posts:</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/shared-terms.jpg\" rel=\"prettyphoto[39295]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/shared-terms.jpg?resize=934%2C402\" alt=\"shared-terms\" class=\"aligncenter size-full wp-image-39344\" /></a></p>\n<p>The plugin was created by <a href=\"http://www.josheaton.org/\" target=\"_blank\">Josh Eaton</a>, Partner at <a href=\"http://reaktivstudios.com/\" target=\"_blank\">Reaktiv Studios</a>. Eaton developed it to help users plan ahead for upcoming taxonomy changes.</p>\n<p>&#8220;This may be helpful in determining whether you need to refactor any custom code that stores term IDs or upgrade any of your plugins prior to the 4.2 upgrade,&#8221; he <a href=\"http://www.josheaton.org/find-shared-taxonomy-terms-in-wordpress/\" target=\"_blank\">said</a>. &#8220;If your site doesn’t have any shared terms, and you’ve already upgraded to 4.1 then you’re in the clear!&#8221;</p>\n<p>Eaton said even if you detect that your site has shared terms, it doesn&#8217;t necessarily mean that you&#8217;ll have a problem updating. Detecting shared terms should prompt you to check that the plugins you&#8217;re using are properly updated for 4.2.</p>\n<p>It&#8217;s important to note that shared terms in WordPress 4.2 will not be retroactively split, but will only be split if the terms are updated in the dashboard, i.e. renamed, etc. Gorges advises that there are plans to force all shared terms to be split in a future release. It&#8217;s prudent to plan ahead now. If you suspect that you might have an issue with shared terms, install the <a href=\"https://github.com/jjeaton/wp-find-shared-terms\" target=\"_blank\">WP Find Shared Terms</a> plugin as a first step and monitor your WordPress plugins for updates ahead of the 4.2 release.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 20 Feb 2015 19:28:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: Do You Use The Sticky Posts Feature in WordPress?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39326\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wptavern.com/do-you-use-the-sticky-posts-feature-in-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1191:\"<p><a title=\"http://codex.wordpress.org/Sticky_Posts\" href=\"http://codex.wordpress.org/Sticky_Posts\">Sticky posts, </a>introduced in <a title=\"https://wordpress.org/news/2008/12/coltrane/\" href=\"https://wordpress.org/news/2008/12/coltrane/\">WordPress 2.7</a>, gives authors the ability to stick or feature posts to the front page. You&#8217;ll find the option in the publish meta box under the visibility section.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/StickyPostsMetabox.png\" rel=\"prettyphoto[39326]\"><img class=\"size-full wp-image-39327\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/StickyPostsMetabox.png?resize=277%2C384\" alt=\"Where to find the Sticky Post option\" /></a>Where to find the Sticky Post option\n<p>I&#8217;ve rarely found a use for sticky posts on my personal site and WP Tavern. However, I realize that in some WordPress themes, they&#8217;re an easy way to feature content. How many of you actively use sticky posts and if you do, tell us how in the comments. Creative uses may be featured in an upcoming article.</p>\nNote: There is a poll embedded within this post, please visit the site to participate in this post\'s poll.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 20 Feb 2015 18:50:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"WPTavern: GravityView is Now Public on GitHub\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39249\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wptavern.com/gravityview-is-now-public-on-github\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3653:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/07/gravity-view.jpg\" rel=\"prettyphoto[39249]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/07/gravity-view.jpg?resize=681%2C282\" alt=\"gravity-view\" class=\"aligncenter size-full wp-image-27113\" /></a></p>\n<p>Six months ago, <a href=\"https://katz.co/\" target=\"_blank\">Zack Katz</a> and <a href=\"http://tinygod.pt/\" target=\"_blank\">Luis Godinho</a> launched <a href=\"http://wptavern.com/gravityview-launches-an-app-based-on-gravity-forms\" target=\"_blank\">GravityView</a>, an app based on the popular Gravity Forms plugin. It uses the <a href=\"http://wptavern.com/gravityforms-1-8-beta-released-introduces-api\" target=\"_blank\">Gravity Forms API</a> to display unique views of form data and entries on the frontend of WordPress.</p>\n<p>The main <a href=\"https://github.com/katzwebservices/GravityView\" target=\"_blank\">GravityView plugin</a> is now public on GitHub for anyone to access for free. The plugin&#8217;s repository was previously private and the code accessible only to GravityView&#8217;s paid customers, but co-founder Zack Katz recently decided to go another direction with the project.</p>\n<p>Katz told the Tavern that he was inspired by a <a href=\"https://mattreport.com/interview-matt-mullenweg/\" target=\"_blank\">discussion between Matt Medeiros and Matt Mullenweg</a> on ubiquity vs. scarcity in WordPress product businesses. Medeiros asked Mullenweg if he could offer any advice to WordPress startups that are looking to create a new product in this crowded space. Mullenweg replied:</p>\n<blockquote><p>The one pattern I see most right now that I think is not sustainable is, and it&#8217;s because it&#8217;s the easiest thing to do, is businesses that are built on a scarcity &#8211; the thing not being widely available. If you think about some of the coolest successes so far in WordPress, the Gravity Forms, some of the theme businesses, they are inherently predicated on the fact that you have to pay to access them. </p>\n<p>I&#8217;ve always been a fan of businesses that grow with ubiquity, that become more powerful the more ubiquitous they are, more valuable. WordPress itself is one of these. Akismet is one of these. Jetpack is certainly one of those. </p>\n<p>So if you think about turning that on its head, I think that&#8217;s what will create the sort of multi-generational businesses in the WordPress ecosystem. Even with themes, we&#8217;ve seen that themes are very cyclical. People who used to make the majority of their money from themes, like WooThemes, are now finding it&#8217;s an ever-decreasing percentage. You hear this across almost all the theme shops.</p></blockquote>\n<p>This advice runs counter to the way many WordPress product businesses have structured their revenue models. Rare exceptions like <a href=\"http://wptavern.com/pippin-williamson-on-building-a-community-around-your-open-source-project\" target=\"_blank\">Easy Digital Downloads</a>, <a href=\"http://wptavern.com/wooconf-the-first-ever-conference-dedicated-to-woocommerce-deemed-a-success\" target=\"_blank\">WooCommerce</a>, and other plugins where the base software is free, are shining examples where pushing for ubiquity instead of scarcity has truly paid off.</p>\n<p>The founders behind <a href=\"https://gravityview.co/\" target=\"_blank\">GravityView</a> are looking to find the same success within the Gravity Forms micro-ecosystem. With the base <a href=\"https://github.com/katzwebservices/GravityView\" target=\"_blank\">GravityView plugin</a> now available for free on GitHub, the company&#8217;s pricing is now only applicable to support and extensions.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 21:47:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Matt: USB History and Type C\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44672\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/02/usb-history-and-type-c/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:611:\"<p>I enjoyed this Ars Technica look at <a href=\"http://arstechnica.com/gadgets/2015/01/usb-3-1-and-type-c-the-only-stuff-at-ces-that-everyone-is-going-to-use/\">USB 3.1 and Type-C</a>, which is probably the cable/connection change people will notice the most over the next few years. (As I look with despair on my dozens of USB devices and cables.) I also dug their retrospective, <a href=\"http://arstechnica.com/gadgets/2014/08/a-brief-history-of-usb-what-it-replaced-and-what-has-failed-to-replace-it/\">A brief history of USB, what it replaced, and what has failed to replace it</a>. Remember serial ports?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 21:34:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"WPTavern: WPWeekly Episode 180 – Interview With Wade Foster, CEO and Co-founder of Zapier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=39274&preview_id=39274\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://wptavern.com/wpweekly-episode-180-interview-with-wade-foster-ceo-and-co-founder-of-zapier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3217:\"<p>In this week&#8217;s episode of WordPress Weekly, <a title=\"http://marcuscouch.com/\" href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by <a title=\"http://wadefoster.net/\" href=\"http://wadefoster.net/\">Wade Foster</a>, CEO and Co-founder of <a title=\"https://zapier.com/\" href=\"https://zapier.com/\">Zapier</a>. Zapier is a service that acts as an integration point for more than 300 applications. During the interview, Foster tells us how the company was founded, how Zapier works, and why it&#8217;s different from <a title=\"https://ifttt.com/\" href=\"https://ifttt.com/\">IFTTT</a> (If This Then That).</p>\n<p>We learn how Zaps are created and the importance of APIs. We also discuss the community surrounding Zapier and how important the community manager&#8217;s position is. Last but not least, Foster explains why the company is 100% distributed and tells us <a title=\"https://zapier.com/jobs/\" href=\"https://zapier.com/jobs/\">they&#8217;re hiring</a>.</p>\n<h2>Stories Discussed:</h2>\n<p><a title=\"http://wptavern.com/a-look-back-at-16-automattic-acquisitions-since-2007\" href=\"http://wptavern.com/a-look-back-at-16-automattic-acquisitions-since-2007\">A Look Back at 16 Automattic Acquisitions Since 2007</a><br />\n<a title=\"http://wptavern.com/tickets-on-sale-for-wordcamp-north-canton-oh-2015\" href=\"http://wptavern.com/tickets-on-sale-for-wordcamp-north-canton-oh-2015\">Tickets On Sale For WordCamp North Canton, OH, 2015</a><br />\n<a title=\"http://wptavern.com/wordpress-4-2-on-track-to-expand-core-support-for-emoji\" href=\"http://wptavern.com/wordpress-4-2-on-track-to-expand-core-support-for-emoji\">WordPress 4.2 on Track to Expand Core Support for Emoji</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a title=\"https://wordpress.org/plugins/wp-image-shrinker/\" href=\"https://wordpress.org/plugins/wp-image-shrinker/\">WordPress Image Shrinker</a> lets users reduce image file sizes drastically while improving performance and Pagespeed score using the TinyPNG API within WordPress. Works for both PNGs and JPGs.</p>\n<p><a title=\"https://wordpress.org/plugins/there-can-be-only-one/\" href=\"https://wordpress.org/plugins/there-can-be-only-one/\">There Can Be Only One</a> ensures that there is only one published sticky post on the site at any given time.</p>\n<p><a title=\"https://wordpress.org/plugins/the-dude/\" href=\"https://wordpress.org/plugins/the-dude/\">The Dude</a> &#8211; When activated, you will randomly see a quote from &#8220;The Big Lebowski&#8221; in the upper right of your admin screen on every page.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, February 25th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #180:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 21:31:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"Post Status: Layers, by Obox, introduces a beautiful page building interface\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=8814\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://poststatus.com/layers-theme-obox/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8510:\"<p><a href=\"http://www.layerswp.com/\">Layers</a> is a product <a href=\"http://blog.oboxthemes.com/from-today-the-way-you-build-wordpress-sites-will-change-say-hello-to-layers/\">released by Obox</a> today that aims to integrate page building into the WordPress experience.</p>\n<p>Layers has the absolute best onboarding process I&#8217;ve seen in any tool like this. Also, the experience for creating new pages is very nice. While I have many disagreements with certain choices they made from a design perspective, overall I am very impressed with what they have done for the page building user experience.</p>\n<h3>Layers user experience sets a high bar</h3>\n<p>Layers has some very &#8220;wow&#8221; worthy features.</p>\n<p>I am very impressed with Obox&#8217;s onboarding. Upon theme activation, it takes you straight to a progressive walk-through that helps you learn about and setup Layers. It includes videos that operate like playable GIFs that show you what it&#8217;s referencing in each stage.</p>\n<p><img class=\"aligncenter size-large wp-image-8810\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-onboarding-752x364.png\" alt=\"layers-onboarding\" width=\"752\" height=\"364\" /></p>\n<p>The editor itself is also impressive. Layers are managed totally through the customizer. There is a single customizer tab that opens up panels for Layer widgets, which is very in tune with default WordPress.</p>\n<p><img class=\"aligncenter size-large wp-image-8809\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-edit-widget-752x351.png\" alt=\"layers-edit-widget\" width=\"752\" height=\"351\" /></p>\n<p>I call this method &#8220;going all in on the customizer&#8221;, which some people love and some people hate. I haven&#8217;t yet made up my mind, but I definitely like this better than many other methods I&#8217;ve seen &#8212; such as completely going outside of the WordPress UI.</p>\n<p>Within the WordPress page itself, it calls you to go to the Layers customizer to edit the content, but also has options for duplicating, importing, or exporting Layers templates.</p>\n<p><img class=\"aligncenter size-large wp-image-8813\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-page-752x475.png\" alt=\"layers-page\" width=\"752\" height=\"475\" /></p>\n<p>I like the way Layers makes getting started pretty easy. And I&#8217;m sure they will offer more templates going forward to help users quickly build pages that would otherwise require custom code.</p>\n<p>Obox is really stretching their legs on UX, and they are unabashedly prioritizing UX over everything else.</p>\n<p>David Perel &#8212; co-founder of Obox &#8212; tells me, &#8220;We believe in UX more than anything. Code is solveable; it just takes time. But user experience isn&#8217;t black and white.&#8221; I encouraged him to get more involved with core WordPress&#8217; various UX projects, as I completely agree with his sentiment.</p>\n<h3>Behind the curtains of Layers code</h3>\n<p>When I first looked under the hood of Layers, I was completely baffled by some of the code decisions. Saving a page in Layers does not save anything to the actual <code>post_content</code> in WordPress, nor even in meta. No, content is essentially grouped &#8212; across any page ID &#8212; and stored in the options table, depending on the type of module in use.</p>\n<p><img class=\"aligncenter size-large wp-image-8811\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-options.png\" alt=\"layers-options\" width=\"657\" height=\"199\" /></p>\n<p>So, if you view the options field of <code>widget_layers-widget-column</code>, you see this:</p>\n<p><img class=\"aligncenter size-large wp-image-8812\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-option-752x369.png\" alt=\"layers-option\" width=\"752\" height=\"369\" /></p>\n<p>The above image is content for any column module in the Layers theme. Meanwhile, the <code>post_content</code> for the page you create is completely empty.</p>\n<p>I was baffled by this architecture decision, as it means that I can never recover that content or use it again unless I&#8217;m using Layers. While the UX may fit well into the WordPress experience, the code seemed far, far from it; and it was a complete blocker for me. Then I talked to David Perel.</p>\n<p>Thank goodness he showed me their backup tool. Before that, this post looked <em>much, much</em> different.</p>\n<p><img class=\"aligncenter size-large wp-image-8820\" src=\"https://poststatus.com/wp-content/uploads/2015/02/layers-backup-752x386.png\" alt=\"layers-backup\" width=\"752\" height=\"386\" /></p>\n<p>They are working to automatically port content to the proper field in the database, but for now you can manually do it, so that your markup at least is preserved for if you change themes. This methodology is in line with other responsible page building tools like The Theme Foundry&#8217;s <a title=\"Make and Make Plus, a drag and drop framework from The Theme Foundry\" href=\"https://poststatus.com/make-drag-and-drop-theme-foundry/\">Make theme</a>.</p>\n<p>I also talked to David about disappointing front-end performance. The theme loads 16 styles and scripts on every page, no matter what. Scripts like Masonry are loading &#8212; and more than one Masonry related script &#8212; whether the page uses Masonry or not. Those are just the scripts that are not conditional at all. On page inspection of some of their common templates, I was seeing well over 20 HTTP requests for styles and scripts. This simply should not be acceptable. This, at least, is fixable.</p>\n<p>After discussing this with David, they are already working to implement a fix that will combine many of these files, and conditionally load others. Layers is 1.0, so while I wish this wasn&#8217;t an afterthought, I&#8217;m glad they&#8217;re moving fast to improve.</p>\n<p>Overall, Obox is trying really hard on Layers; and they&#8217;ve shipped an impressive 1.0. They are doing active reviews still with some highly qualified WordPress developers whose names we all would know, and we can expect further improvements on performance down the line.</p>\n<h3>Where to get Layers, and notes on the monetization model</h3>\n<p><a href=\"http://www.layerswp.com/\">Layers</a> is free, and on <a href=\"https://github.com/Obox/layerswp\">Github</a>. They also have <a href=\"http://www.layerswp.com/developers/\">developer</a> notes and general <a href=\"http://docs.layerswp.com/\">docs</a> available. The Obox team is also working to get the product on WordPress.org, but there are some things they have to work out before they can.</p>\n<p>For monetization, they intend to charge for pre-built child themes and commercial extensions. For now, they want to get mass adoption for Layers &#8212; a tactic that has worked really well for others in the space.</p>\n<h3>Thoughts on page builders</h3>\n<p>I am definitely not on the bandwagon for page builders, though it seems the WordPress product world is. Where traditional options heavy theme sales have died away, page builders have risen from their ashes.</p>\n<p>I think anyone building a tool like this needs someone at their side forcing them to justify every feature &#8212; as it seems to me that most of these are giving way too many options in their products.</p>\n<p>I may have a follow-up post in my mind that I&#8217;ll probably publish sometime soon describing why I think it is a bad thing for page builders (in the context of theming) to be the future of the web.</p>\n<p>I&#8217;m afraid, however, that end user &#8220;demand&#8221; may make it so whether I like it or not; but it won&#8217;t be for their own good. I think there is a better way. I think &#8220;page building&#8221;, as it seems we&#8217;ve standardized the term, is broken when too many granular design elements are allowed. Instead, I&#8217;d like to see <em>content building</em>, where structured content can be created with a tool, but theming and styles are still left to, well, themes.</p>\n<p>Tools like <a href=\"http://aesopstoryengine.com/\">Aesop</a> story engine, <a href=\"https://thethemefoundry.com/wordpress-themes/make/\">Make</a>, and <a href=\"http://www.layerswp.com/\">Layers</a> are all making what I consider valiant efforts at evolving complex content creation for WordPress. I don&#8217;t think anyone is quite nailing it, but I like where at least these three projects are going for the most part. I&#8217;m happy to see Obox release their vision of what content creation should be in WordPress, with Layers.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 20:46:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: BuddyPress Breaks One-Day Download Record with 2.2.1 Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39240\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/buddypress-breaks-one-day-download-record-with-2-2-1-release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3420:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png\" rel=\"prettyphoto[39240]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png?resize=839%2C398\" alt=\"buddypress-logo-blue\" class=\"aligncenter size-full wp-image-30655\" /></a></p>\n<p>The <a href=\"https://buddypress.org/2015/02/2015-buddypress-survey/\" target=\"_blank\">2015 BuddyPress Survey</a> is out on the heels of the <a href=\"https://buddypress.org/2015/02/buddypress-2-2-1/\" target=\"_blank\">2.2.1 maintenance release</a>. Yesterday, the plugin broke its one-day download record with more than 10,000 downloads in 24 hours.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p>The <a href=\"https://twitter.com/hashtag/BuddyPress?src=hash\">#BuddyPress</a> 2.2.1 release (just) set our record one-day download record of ~10,107.</p>\n<p>&mdash; Paul Gibbs (@pgibbs) <a href=\"https://twitter.com/pgibbs/status/568309497879535616\">February 19, 2015</a></p></blockquote>\n<p></p>\n<p>Over the past seven years, <a href=\"https://wordpress.org/plugins/buddypress/\" target=\"_blank\">BuddyPress</a> has been downloaded more than 2.6 million times. Major performance improvements during the past two releases <a href=\"http://wptavern.com/buddypress-2-0-ramps-up-performance-reduces-footprint-by-up-to-75\" target=\"_blank\">reduced the plugin’s footprint by up to 75%</a>. Contributors added new administration tools and improved translation fetching.</p>\n<p>If you want to help shape BuddyPress development in 2015, participating in the survey is one of the best ways to provide feedback to contributors. Last year&#8217;s survey demonstrated that the community is growing and users are eager to stay on top of updates. The <a href=\"https://buddypress.org/2014/03/2014-buddypress-survey-results/\" target=\"_blank\">2014 survey results</a> indicated that more than 50% of BuddyPress sites are on the latest versions of WordPress and BuddyPress.</p>\n<p>When asked to choose categories for feature improvements, respondents selected group enhancements, a new media component, activity stream, membership add-ons, performance, and a few others. Many of these requests were addressed during 2014 development on the plugin. <a href=\"http://wptavern.com/buddypress-2-2-to-add-custom-post-type-support-to-the-activity-stream\" target=\"_blank\">Custom post types were added to the activity stream</a>, performance was enhanced beyond user expectations, and a new<a href=\"http://wptavern.com/buddypress-2-2-on-track-to-provide-a-basic-member-type-api\" target=\"_blank\"> member type API</a> was introduced earlier this year. Contributors also began working on a <a href=\"http://wptavern.com/buddypress-to-adopt-features-as-plugins-model-to-develop-new-media-component\" target=\"_blank\">media component as a feature plugin</a>.</p>\n<p>Last year, the survey captured feedback from 338 developers in 52 countries, and it would be helpful to get an even wider range of results this time around. The <a href=\"https://buddypress.org/2015/02/2015-buddypress-survey/\" target=\"_blank\">survey</a> takes approximately 20 minute of your time, but, as you can see from last year&#8217;s development, contributors are eager to act on user feedback. Your participation will give the BP core team an idea of the kinds of BuddyPress sites that developers are building and the features that you want to see prioritized in 2015.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 19:41:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"WPTavern: WordPress 4.1.1 Released, Fixes 21 Bugs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39243\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://wptavern.com/wordpress-4-1-1-released-fixes-21-bugs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2517:\"<p>WordPress 4.1.1 <a title=\"https://wordpress.org/news/2015/02/wordpress-4-1-1/\" href=\"https://wordpress.org/news/2015/02/wordpress-4-1-1/\">is available</a> and fixes 21 bugs. According to Andrew Nacin who published the announcement, 4.1 was a smooth-sailing release and has been downloaded over 14 million times within the last two months. One of the bugs fixed<span class=\"s1\"> is an issue where a tag and a category with the same name could get muddled and prevent each other from being updated. </span></p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/WP41DownloadCount.png\" rel=\"prettyphoto[39243]\"><img class=\"size-full wp-image-39245\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/WP41DownloadCount.png?resize=956%2C371\" alt=\"WordPress 4.1 Download Count\" /></a>WordPress 4.1 Download Count\n<p>Updates are slowly rolling out and if your site is configured to receive automatic updates, it should update within the next 72 hours. If not, visit <strong>Dashboard → Updates</strong> and click <strong>Update Now</strong> to manually trigger the update routine.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsell.png\" rel=\"prettyphoto[39243]\"><img class=\"size-full wp-image-36619\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsell.png?resize=655%2C418\" alt=\"WordCamp San Francisco 2014 By Sheri Bigelow\" /></a>WordCamp San Francisco 2014 By Sheri Bigelow\n<p>There are a handful of contributors to this release, but the one that sticks out is Kim Parsell. She <a title=\"https://core.trac.wordpress.org/ticket/30791\" href=\"https://core.trac.wordpress.org/ticket/30791\">helped fix an issue</a> where an old image file needed to be removed from core. Reading the release notes and coming across Kim&#8217;s name generates a rush of emotions as I remember the events surrounding New Years day. For those who don&#8217;t know, <a title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">Kim passed away</a> earlier this year. In memory of Kim, The WordPress Foundation has <a title=\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\" href=\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\">created a traveling scholarship</a>.</p>\n<p>I think Nacin speaks for many when he says, &#8220;We miss you, Kim.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 01:04:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"Matt: 7 Principles of Rich Web Applications\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44680\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://ma.tt/2015/02/7-principles-of-rich-web-applications/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:165:\"<p>Automattician Guillermo Rauch writes on the <a href=\"http://rauchg.com/2014/7-principles-of-rich-web-applications/\">7 Principles of Rich Web Applications</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Feb 2015 00:50:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Customizer Theme Switcher Approved for Merge Into WordPress 4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39224\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/customizer-theme-switcher-approved-for-merge-into-wordpress-4-2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3367:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/customizer-theme-switcher.jpg\" rel=\"prettyphoto[39224]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/customizer-theme-switcher.jpg?resize=1025%2C473\" alt=\"customizer-theme-switcher\" class=\"aligncenter size-full wp-image-38931\" /></a></p>\n<p>The <a href=\"http://wptavern.com/customizer-theme-switcher-officially-proposed-for-wordpress-4-2\" target=\"_blank\">Customizer Theme Switcher</a> feature plugin was approved for merge today during the regularly scheduled WordPress core development meeting. Lead developers and contributors in attendance agreed that there are no major blocking issues.</p>\n<p>The Customizer Theme Switcher in WordPress 4.2 will make it possible for users to browse through themes that have already been installed and activate a new one on the frontend via the customizer. The idea is to unify the UI designated for customizing a site to create a more consistent experience for users on the frontend. In the future, the theme installation process will also be added to the customizer.</p>\n<p>Many users initially had concerns about adding this feature to the narrow customizer UI. &#8220;I would like to see a full-screen iteration so it doesn&#8217;t feel like I am looking through a port hole,&#8221; Andrew Nacin said during the development meeting. His comment echoes the concerns of others who have doubts about browsing themes through the small customizer window.</p>\n<p>In response to WP Tavern <a href=\"http://wptavern.com/customizer-theme-switcher-officially-proposed-for-wordpress-4-2#comment-64073\" target=\"_blank\">commenters who oppose the new feature</a>, project leader Nick Halsey encouraged users to examine how the customizer will force developers to simplify their UIs:</p>\n<blockquote><p>I’ll also point out for everyone that while the Customizer controls window is fairly small, this is a balance with providing a reasonably sized preview of the front-end, and the narrow controls UI window is mobile-first out-of-the-box. Being forced to work with less real estate in the customizer controls forces developers to simplify their UIs and make things easier to use. If you’re shoving hundreds of options into the Customizer, you’re creating something that’s just as bad of an experience to use as if you’d done that in a custom admin screen.</p></blockquote>\n<p>In response to those concerned about the next step of adding the theme installation process to the customizer, Halsey <a href=\"http://wptavern.com/customizer-theme-switcher-officially-proposed-for-wordpress-4-2#comment-64035\" target=\"_blank\">assured</a> users that they are planning on making the customizer controls area almost full-width. This will ensure a more pleasant experience while selecting a theme from a large collection. The theme switcher feature added to WordPress 4.2 will happen in the more narrow customizer pane, since it is most often limited to a small collection of already installed themes.</p>\n<p>The <a href=\"https://wordpress.org/plugins/press-this/\" target=\"_blank\">Press This Revamp project</a> is also currently under consideration for merge into WordPress 4.2 and contributors will be testing it over the next week. The merge window runs through next Wednesday, followed by two weeks of iteration before the first beta is expected.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 22:09:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"WPTavern: CMS Commander’s WordPress Site Creation Tool is Available for Free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39187\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/cms-commanders-wordpress-site-creation-tool-is-available-for-free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2784:\"<p>CMS Commander <a title=\"http://cmscommander.com/create-pre-configured-wp-blogs-free/\" href=\"http://cmscommander.com/create-pre-configured-wp-blogs-free/\">has announced</a> that their new WordPress site creation tool will be <a title=\"https://cmscommander.com/members/signup/index/c/trial\" href=\"https://cmscommander.com/members/signup/index/c/trial\">free of charge</a>. CMS Commander specializes in helping users manage WordPress sites. The tool gives users the ability to deploy new WordPress sites to any host via FTP with pre-configured settings and pre-installed plugins.</p>\n<p>WordPress is famous for its five-minute install, but users generally need to configure a few settings before they can publish their first post. CMS Commander has several settings you can pre-configure including: permalinks, deleting default content, and disabling the theme and plugin file editors.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/CMSCommanderPreconfigureSettings.jpg\" rel=\"prettyphoto[39187]\"><img class=\"size-full wp-image-39218\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/CMSCommanderPreconfigureSettings.jpg?resize=700%2C196\" alt=\"CMS Commander Pre-configured Settings\" /></a>CMS Commander Pre-configured Settings\n<p>You can also add plugins from the <a title=\"https://wordpress.org/plugins/\" href=\"https://wordpress.org/plugins/\">WordPress plugin directory</a> that will be installed and activated as part of the installation process.</p>\n<p>During the beta testing period, premium users created more than 200 websites allowing the team to fix numerous bugs. As a result of the beta testing period, CMS Commander added several other <a title=\"http://cmscommander.com/improved-site-creation-backup-features/\" href=\"http://cmscommander.com/improved-site-creation-backup-features/\">pre-configured settings</a>. The only feature not available to free users is the ability to add commercial plugins.</p>\n<h2>Removing Friction</h2>\n<p>The typical way to install WordPress on a webhost is to visit WordPress.org, download a zip file, extract the contents, and upload it to a webserver. This is a process that some find difficult, especially if FTP is as an unfamiliar concept or they&#8217;re not familiar with MySQL databases.</p>\n<p>CMS Commander and other tools like it are helping to bridge the gap between the install and set up process. This allows users to more quickly get to the publishing parts of WordPress. However, if WordPress is <a title=\"http://wptavern.com/how-important-is-jetpack-on-wordpress-road-to-50-market-share\" href=\"http://wptavern.com/how-important-is-jetpack-on-wordpress-road-to-50-market-share\">to reach 50% marketshare</a>, it needs to find a way to remove this friction instead of relying on third-parties.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 21:36:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: Join the Discussion on Defining Network Types for WordPress Multisite\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39193\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/join-the-discussion-on-defining-network-types-for-wordpress-multisite\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3760:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mailboxes.jpg\" rel=\"prettyphoto[39193]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mailboxes.jpg?resize=1024%2C496\" alt=\"mailboxes\" class=\"aligncenter size-full wp-image-39214\" /></a></p>\n<p>Towards the end of 2013, WordPress lead developer Andrew Nacin outlined a <a href=\"https://make.wordpress.org/core/2013/10/06/potential-roadmap-for-multisite/\" target=\"_blank\">potential roadmap for multisite</a> that would address a number of long-standing questions regarding network setup and organization.</p>\n<p>When multisite, formerly known as WPMU, was first introduced, building large blogging networks was the primary use case. Over the years, the uses for multisite have evolved to encompass those who use it to facilitate the management of multiple, and sometimes unrelated, sites. In the future, contributors want to add the option for super admins to select from a list of pre-configured network types when installing a new network.</p>\n<p>The <a href=\"https://wordpress.slack.com/archives/core-multisite/p1424209234000834\" target=\"_blank\">discussion</a> in the #core-multisite room on Slack this week centered around identifying and defining different network types.  The terms Open/Closed and Trusted/Untrusted were identified as possibilities, but nothing has been set in stone, as both options are ambiguous and confusing.</p>\n<p>Jeremy Felt <a href=\"https://make.wordpress.org/core/2015/02/18/multisite-objective-defining-network-types/\" target=\"_blank\">summarized</a> the questions that need to be answered before multisite development can move forward:</p>\n<ul>\n<li>What network types are there?</li>\n<li>Which of these should be pre-configured in core?</li>\n<li>What are possible ways of managing these network types?</li>\n<li>What kind of experience can we introduce during network installation that makes this simple.</li>\n</ul>\n<p>Multisite is used in a wide variety of ways, i.e. networks where super admins control everything, blogging networks where site admins have limited capabilities, private networks with closed registration and a set of trusted admins, and many more. It&#8217;s difficult to accurately nail down a small set of pre-configured network types that will be suitable for any new installation.</p>\n<p>One interesting idea, <a href=\"https://make.wordpress.org/core/2015/02/18/multisite-objective-defining-network-types/#comment-25248\" target=\"_blank\">proposed by Mike Schinkel</a>, is to allow developers to register a custom network type in order to better fit unique cases:</p>\n<blockquote><p>It would seem the first step, then, would be to identify and document all these potential configuration options at an atomic level. From there we could then “map” Network Types to their associated configuration settings.</p>\n<p>Even better, Network Types could then be registered just like how Post Types, Post Statuses, and Taxonomies are registered which would make missing out on an important use-case in core much less problematic.</p></blockquote>\n<p>Even with the option to register custom network types, WordPress core will still need to identify the most common ones to include in its set of pre-configured options. Contributors have been discussing this issue over the span of several months in order to find the best way forward.</p>\n<p>If you want to join in the conversation regarding the future of multisite, particularly as it relates to defining network types, make sure to leave your feedback on the recent Make/Core post: <a href=\"https://make.wordpress.org/core/tag/multisite/\" target=\"_blank\">Multisite Objective: Defining Network Types</a>. This will be the main topic of next week’s multisite office hours.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 18:47:20 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: Create Interactive Images in WordPress with the Draw Attention Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39165\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/create-interactive-images-in-wordpress-with-the-draw-attention-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6844:\"<p><a title=\"https://wordpress.org/plugins/draw-attention/\" href=\"https://wordpress.org/plugins/draw-attention/\">Draw Attention</a> is a new plugin created by <a title=\"http://tylerdigital.com/\" href=\"http://tylerdigital.com/\">Tyler Digital,</a> that makes it easy to create interactive images in WordPress. Some common use cases include: floor plans for trade shows, real estate properties, and seating charts. Nathan Tyler explains the inspiration behind the plugin:</p>\n<blockquote><p>Natalie and I have built custom solutions for clients for trade shows, real estate, floor plans, etc. and we&#8217;re always frustrated by the process. We wanted to build an elegant solution in WordPress that would display well on all devices and would be easy for clients and end-users to maintain themselves.</p></blockquote>\n<h2>How it Works</h2>\n<p>After installation, a new item labeled Draw Attention is added to the admin menu. Similar to a post, the edit image screen has an area to give images a title. There&#8217;s also a series of options to configure the highlight and info box styling. Users can add an image via upload or through the WordPress media library.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionEditImageScreen.png\" rel=\"prettyphoto[39165]\"><img class=\"size-full wp-image-39177\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionEditImageScreen.png?resize=1025%2C405\" alt=\"Edit Image Screen\" /></a>Edit image screen for Draw Attention\n<p>Once an image is added, you&#8217;ll see it near the bottom of the page within the Hotspot Areas section. From here, users can draw interactive hot spots on an image simply by clicking on the portion you want to highlight. It took a bit of practice, but I was able to make the entire logo a hotspot by clicking the edges of the circle. Hot spots can be manipulated by clicking and dragging on the square markers.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpots.png\" rel=\"prettyphoto[39165]\"><img class=\"size-full wp-image-39178\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpots.png?resize=1025%2C701\" alt=\"Draw Attention Hot Spots\" /></a>Draw Attention hot spots\n<p>One of the biggest drawbacks I discovered during testing, is that there&#8217;s no undo button. If you make a mistake, you need to select the clear button and start over. Depending on the size of the hot spot, it&#8217;s a frustrating user experience. Hot spots are able to have titles of their own as well as a description. You can also add a detailed image which will display above the more info box. Last but not least, you can remove the hot spot area from the image.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpotsConfig.png\" rel=\"prettyphoto[39165]\"><img class=\"size-full wp-image-39179\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpotsConfig.png?resize=1002%2C493\" alt=\"DrawAttentionHotSpotConfiguration\" /></a>Draw Attention hot spot configuration\n<p>Here&#8217;s an example of what an interactive image looks like on the WordPress frontend. What you can&#8217;t see from the screenshot, is that clicking on a hot spot displays the image title and description above the image using <a title=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a>. In order to display interactive images, the <strong>[drawattention]</strong> short code needs to be inserted into a post or page. The styling options as seen in the first screenshot control how the title and description display on the frontend. It&#8217;s also worth noting that interactive images are responsive, so they&#8217;ll look good on mobile devices.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpotsWordPressFrontend.png\" rel=\"prettyphoto[39165]\"><img class=\"size-full wp-image-39180\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/DrawAttentionHotSpotsWordPressFrontend.png?resize=1025%2C810\" alt=\"Draw Attention Hot Spots WordPress Frontend\" /></a>How hot spots look on the WordPress frontend\n<h2>Needs Improvements</h2>\n<p>Draw Attention is a neat plugin that makes it easy to create hot spots on images. However, it&#8217;s the first version and it shows. In future versions, I&#8217;d like to see a number of things addressed.</p>\n<ol>\n<li>I&#8217;m confused as to the order of options displayed in the backend as styling options are displayed above image editing. I think these option panels should be reversed.</li>\n<li>The default highlight and info box styles didn&#8217;t display well on the testing environment. I&#8217;d like to see these options inherit colors that already exist within the theme.</li>\n<li>As mentioned previously, there needs to be an undo button as starting over is a frustrating experience.</li>\n<li>Setting the opacity to 55% displays a value of 55.00000000000001%</li>\n<li>Speaking of styling colors, it&#8217;s frustrating to edit display settings, click update, then refresh the post or page to see if the changes are ok. I&#8217;d like to see some sort of visual preview or something like the customizer so that I can configure the colors and see the changes live before I apply them.</li>\n<li>Instead of displaying the short code I need to use in a small, somewhat hidden meta box, I&#8217;d like to see a button in the visual post editor to make it easier to add to a post or page.</li>\n</ol>\n<p>One of the last remaining issues I have with Draw Attention is that users are limited to adding and editing <strong>one image</strong>. That&#8217;s because there&#8217;s a <a title=\"http://tylerdigital.com/products/draw-attention/\" href=\"http://tylerdigital.com/products/draw-attention/\">pro version</a> of the plugin available for $49 that contains the following additional features:</p>\n<ul>\n<li>Ability to create more than one interactive image</li>\n<li>Unlimited number of hot spot areas for each image</li>\n<li>20 different preset color schemes</li>\n<li>Custom layout options</li>\n</ul>\n<p>Limiting the plugin to one image gives users an idea on how it works, but I&#8217;d bump the limit to three or five. Users would then have more of an opportunity to discover cool uses cases and it might lead to more sales.</p>\n<p>With that said, it performed without any issues on WordPress 4.2 alpha. Tyler says they have plenty of items on their to-do list, &#8220;We have a bunch of items still on our to-do list, and we will be releasing regular updates for the next couple months based on community feedback.&#8221; If some of the issues are addressed and the image limits are raised, I think Draw Attention will be a nice solution for creating interactive images in WordPress.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 18 Feb 2015 05:48:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"WPTavern: WordCamp Prague 2015 Aims to Bring Central European Tech Community Together\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39157\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"http://wptavern.com/wordcamp-prague-2015-aims-to-bring-central-european-tech-community-together\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2983:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/prague.jpg\" rel=\"prettyphoto[39157]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/prague.jpg?resize=1025%2C498\" alt=\"prague\" class=\"aligncenter size-full wp-image-39158\" /></a></p>\n<p><a href=\"http://prague.wordcamp.org/2015/\" target=\"_blank\">WordCamp Prague</a> is gearing up for its second edition on February 28, 2015. The event will be held at the <a href=\"http://ozs.vse.cz/english/\" target=\"_blank\">University of Economics</a>. Organizers are planning two tracks of presentations: one for end users and bloggers and the other for WordPress developers and programmers.</p>\n<p>Co-organizer <a href=\"https://twitter.com/vladamusilek\" target=\"_blank\">Vladislav Musílek</a> said that the team is expecting 300-350 attendees. &#8220;The Czech WordPress community is young and we started meeting in the summer of 2013,&#8221; he said. &#8220;There were three small meetups with a maximum of 30 attendees, but our first WordCamp Prague in 2014 had 230 attendees.&#8221;</p>\n<p>Musílek is one of three local organizers who decided to hold a larger meetup every three months, with smaller ones taking place monthly. The three meetups held in 2014 attracted 130-150 attendees each, and sessions are published on <a href=\"https://www.youtube.com/channel/UCUj8Epquc13YwVvnAzyI9Vg\" target=\"_blank\">YouTube</a>.</p>\n<p>Although the Czech WordPress community is relatively small, it is situated in central Europe with easy access for attendees from other countries. &#8220;We invited developers from other countries, because modern WordPress trends are what is missing in the Czech community,&#8221; Musílek said.</p>\n<p>&#8220;But what is unique is Prague, a beautiful city in the center, with 23 European capital cities not more than 1000 km away, i.e. Vienna, Berlin, Brussels, Copenhagen, Paris, Rome, Warsaw and more.&#8221;</p>\n<p>Musílek said the organizers&#8217; goal was to create a WordCamp not only for the Czech community but for the greater central European development community. Many of the sessions cater to developers, and Musílek said this is intentional. &#8220;I am a developer and I wanted to invite speakers who are working with modern and trending technologies that we&#8217;ll be using for development in the near future,&#8221; he said.</p>\n<p>WordCamp Prague&#8217;s schedule will host 16 sessions, including nine in English and seven in Czech. There will also be two workshops held in English and two in Czech. The variety of languages helps to make the event more accessible to international attendees. View the event&#8217;s <a href=\"http://prague.wordcamp.org/2015/program/\" target=\"_blank\">schedule</a> for more details. Tickets are still available for any attendees who decide to join at the last minute. If you&#8217;re still on the fence, check out the promotion video the organizers created for the upcoming event:</p>\n<p><span class=\"embed-youtube\"></span></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 17 Feb 2015 22:24:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Developer Employment Act\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44697\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/02/developer-employment-act/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:689:\"<blockquote><p>One theory I have is that there&#8217;s some secret &#8220;developer full-time employment act&#8221; that means these programmers have to do something even if it&#8217;s just replicating work that&#8217;s already been done. Kind of like New Jersey where every gas station is full serve (that had to be some full employment gambit back in the day).</p></blockquote>\n<p>Sounds like something that could be written today about Vox, Buzzfeed, Gawker, or any of the quixotic CMS projects at Washington Post, NY Times, Conde Nast, et al, but it was <a href=\"http://www.zdnet.com/article/wordpress-vs-an-army-of-clunky-content-management-systems/\">actually written in 2007</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 17 Feb 2015 21:50:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WPTavern: WordPress 4.2 on Track to Expand Core Support for Emoji\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39129\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wptavern.com/wordpress-4-2-on-track-to-expand-core-support-for-emoji\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4194:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/Twemoji.jpg\" rel=\"prettyphoto[39129]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/Twemoji.jpg?resize=700%2C320\" alt=\"photo credit: Twitter.com\" class=\"size-full wp-image-39143\" /></a>photo credit: <a href=\"https://blog.twitter.com/2014/open-sourcing-twitter-emoji-for-everyone\">Twitter.com</a>\n<p>Emoji characters were born in Japan in the late 90&#8217;s but took nearly a decade to break into global usage. They entered popular culture full force when select emoji character sets were incorporated into Unicode in 2010. Since that time, emoji popularity has grown, and there&#8217;s no denying that they are mainstream and here to stay.</p>\n<p>The good news is that better support for emoji will soon find its way into WordPress core. Last week, core contributor Gary Pendergast, unveiled <a href=\"https://make.wordpress.org/core/2015/02/13/emoji-chat-meeting-notes-february-12-2015/\" target=\"_blank\">a roadmap for better emoji support</a> and detailed the current state of the <a href=\"https://github.com/pento/x1f4a9\" target=\"_blank\">feature plugin</a>.</p>\n<p>Pendergast has spent quite a bit of time immersing himself in the history of emoji and the requirements for their support. Pendergast filled contributors in on the status of WordPress core support for emoji:</p>\n<blockquote><p>As of <a href=\"https://core.trac.wordpress.org/changeset/31349\" target=\"_blank\">r31349</a>, WordPress partially supports emoji. ~60% of WordPress sites are running MySQL 5.5 or later (so can be upgraded to store emoji), and ~40% of browsers natively support emoji. Emoji are a wildly popular method of communication, so we can expect them to be heavily used as soon as they’re available. The problem is, 60%/40% means a really bad experience for a huge number of our users, who’ll try to use emoji, and fail.</p></blockquote>\n<p>Getting more WordPress sites to run on  MySQL 5.5+ would be no small task, so the emoji feature plugin is working around this by adding a wp_encode_emoji() function to turn emoji characters into HTML entities for sites using the utf8 character set. This gets the remaining ~40% of sites nearly all the way there.</p>\n<h3>Twemoji Fallback</h3>\n<p>The feature plugin proposes that WordPress adopt the <a href=\"https://github.com/twitter/twemoji\" target=\"_blank\">Twemoji</a> image set as a fallback for browsers that don&#8217;t display emoji natively, which reduces the extra load, especially for mobile browsers. Twitter open sourced its Twemoji 872 character image set last November, simultaneously partnering with Automattic to <a href=\"http://wptavern.com/wordpress-com-adds-emoji-support-coming-soon-to-jetpack\" target=\"_blank\">bring emoji to WordPress.com users</a>.</p>\n<p>Pendergast reports that the plugin is close to being finished, with only a handful of remaining <a href=\"https://github.com/pento/x1f4a9/issues\" target=\"_blank\">bugs to discuss</a>. The plugin has already been briefly reviewed by the accessibility team and requires only a few minor changes. The issue of where to host the images is still under discussion, and Pendergast and contributors are considering different options:</p>\n<blockquote><p>They’re currently hosted on WP.com’s CDN, but we’re investigating other options for where to host them, probably the W.org CDN. Given that the wp-admin Dashboard also loads things from Google, I have no problem with hosting them on an external CDN. There will naturally be a filter on the URL, to allow local hosting for sites that don’t want to use the CDN.</p></blockquote>\n<p>WordPress is on track to provide more comprehensive support for emoji in the near future. Pendergast says the project is on target for the upcoming 4.2 release.</p>\n<p>In the meantime, if you&#8217;d like to add emoji support to your self-hosted WordPress site, <a href=\"http://wptavern.com/new-plugin-adds-open-source-emoji-one-support-to-wordpress\" target=\"_blank\">WP Emoji One</a> is a good option. The plugin was the first to bring support for the open source <a href=\"http://emojione.com/\" target=\"_blank\">Emoji One</a> character set to WordPress posts and pages.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 17 Feb 2015 21:29:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: This Week On WPWeekly: Wade Foster, Co-founder and CEO of Zapier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39096\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/this-week-on-wpweekly-wade-foster-co-founder-and-ceo-of-zapier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1501:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/06/ZapierFeaturedImage.png\" rel=\"prettyphoto[39096]\"><img class=\"aligncenter size-full wp-image-24443\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/06/ZapierFeaturedImage.png?resize=650%2C200\" alt=\"Zapier Featured Image\" /></a></p>\n<p>This Wednesday at 9:30 PM Eastern on <a title=\"http://wptavern.com/wordpress-weekly\" href=\"http://wptavern.com/wordpress-weekly\">WordPress Weekly</a>, Marcus Couch and I will be joined by Wade Foster, Co-founder and CEO of <a title=\"https://zapier.com/\" href=\"https://zapier.com/\">Zapier</a>. Zapier is a service that acts as an integration point for more than 300 applications. <a title=\"https://zapier.com/zapbook/gravity-forms/\" href=\"https://zapier.com/zapbook/gravity-forms/\">GravityForms</a>, <a title=\"http://wptavern.com/wp-remote-now-supports-zapier\" href=\"http://wptavern.com/wp-remote-now-supports-zapier\">WP Remote</a>, and <a title=\"http://www.woothemes.com/products/woocommerce-zapier/\" href=\"http://www.woothemes.com/products/woocommerce-zapier/\">WooCommerce</a> are just a few examples of popular WordPress plugins and services that support Zapier. The following video explains how it works.</p>\n<p><span class=\"embed-youtube\"></span></p>\n<p>We&#8217;re going to discuss the company&#8217;s history, how the service works, and interesting integrations people are creating with it. If you have questions you&#8217;d like us to ask Foster, submit them in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 17 Feb 2015 02:30:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: The Dude: A Fun Alternative to Hello Dolly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39104\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wptavern.com/the-dude-a-fun-alternative-to-hello-dolly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2280:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/the-dude.jpg\" rel=\"prettyphoto[39104]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/the-dude.jpg?resize=670%2C290\" alt=\"the-dude\" class=\"aligncenter size-full wp-image-39110\" /></a></p>\n<p>This isn&#8217;t just a plugin, man. It&#8217;s <a href=\"https://wordpress.org/plugins/the-dude/\" target=\"_blank\">The Dude</a>, so that&#8217;s what you call it. That, or His Dudeness… Duder… or El Duderino, if, you know, you&#8217;re not into the whole brevity thing.</p>\n<p>It symbolizes the realization of an entire modern lazy hippie bowling amateur private investigator generation summed up in two words spoken most famously by Jeff Bridges.</p>\n<p>The Dude was created by WordPress developer <a href=\"http://kosvrouvas.com/\" target=\"_blank\">Kostas Vrouvas</a>, who seemed to have a bit of free time on his hands. It takes inspiration (and some code) from Matt Mullenweg&#8217;s <a href=\"https://wordpress.org/plugins/hello-dolly/\" target=\"_blank\">Hello Dolly</a> plugin, replacing the musical&#8217;s lyrics at the top of admin screens with quotes from <a href=\"http://www.imdb.com/title/tt0118715/\">The Big Lebowski</a>.</p>\n<p>We tested the plugin and found that it works flawlessly. <a href=\"https://www.youtube.com/watch?v=VLR_TDO0FTg\" target=\"_blank\">The royal &#8220;we&#8221;</a>. You know, the editorial&#8230;</p>\n<p>Some of the random Lebowski quotes so far include:</p>\n<ul>\n<li>Walter, he peed on my rug!</li>\n<li>And, you know, he’s got emotional problems, man.</li>\n<li>Well, that&#8217;s like, your opinion, man.</li>\n<li>Also, my rug was stolen.</li>\n<li>You&#8217;re Mr. Lebowski. I&#8217;m the Dude.</li>\n<li>Oh, the usual. I bowl. Drive around. The occasional acid flashback.</li>\n<li>Mr. Treehorn treats objects like women, man.</li>\n<li>Hey, careful, man, there&#8217;s a beverage here!</li>\n</ul>\n<p>Amusing, yes? So if you prefer <a href=\"http://wptavern.com/ https://www.youtube.com/watch?v=sft3VHxru2s\" target=\"_blank\">Creedence</a> to Louis Armstrong, then you may want to mix yourself a white russian and activate <a href=\"https://wordpress.org/plugins/the-dude/\" target=\"_blank\">The Dude</a> on your WordPress blog.</p>\n<p>It really ties the site together.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 17 Feb 2015 00:53:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: Why WordPress Job Titles Don’t Mean Much Anymore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39069\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/why-wordpress-job-titles-dont-mean-much-anymore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3590:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/JobTitleFeaturedImage.png\" rel=\"prettyphoto[39069]\"><img class=\"size-full wp-image-39089\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/JobTitleFeaturedImage.png?resize=650%2C200\" alt=\"Job Titles Featured Image\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/58871905@N03/5565517971\">I love &#8217;84</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>Mario Peshev published a great article that looks at where the WordPress community stands on <a title=\"http://devwp.eu/wordpress-job-titles-skills-stand/\" href=\"http://devwp.eu/wordpress-job-titles-skills-stand/\">job titles and skills</a>. Peshev explains why titles are out of control and how they don&#8217;t match their expected skill sets.</p>\n<blockquote><p>The problem with a number of general titles is that they are overused and it is no longer clear what the real meaning and level of expertise is. Moreover, they are so general, that it’s easy to be fooled into misusing them, seeing how many people just tag themselves in those categories.</p></blockquote>\n<p>I find it fascinating we&#8217;re having conversations on what people in the WordPress ecosystem call themselves. This is a big problem for people looking for WordPress experts who are routinely let down, because the people they&#8217;re hiring don&#8217;t actually have the skills required to get the job done.</p>\n<p>In some ways, the conversation circles back to the idea of having a <a title=\"http://wptavern.com/should-automattic-create-and-manage-a-wordpress-certification-program\" href=\"http://wptavern.com/should-automattic-create-and-manage-a-wordpress-certification-program\">WordPress certification program</a>. With a certification program, a document would clarify a person&#8217;s proficiency in WordPress. However, I think it opens up a new can of worms and isn&#8217;t the only solution.</p>\n<h2>Comparing a Corporate World to WordPress</h2>\n<p>In a typical corporation, titles are clearly laid out and each one has a set of skills attached to it. Employees know what they need to learn to get promoted to the next level. Employees also know the skills a person has with a particular title due to standards that dictate how it&#8217;s earned. In the WordPress ecosystem, titles are not earned, but rather, routinely made up. For example, I&#8217;ve used WordPress for more than seven years and consider myself a WordPress Tinkerer.</p>\n<p>Peshev outlines three distinct problems with the lack of standards, best practices, and business know-how in the WordPress community.</p>\n<ol>\n<li>Serious clients can&#8217;t find experts since everyone is an expert.</li>\n<li>Experts don&#8217;t get approached for larger systems (due to (1) ) and their time is wasted by people with the wrong perception of <em>expert</em>.</li>\n<li>The lack of satisfied clients and contractors means fewer customers are willing to invest in WordPress, fewer contractors are able to dedicate time back to WordPress, and there are fewer products developed as a result of WordPress driven projects.</li>\n</ol>\n<p>When looking at the big picture, the situation is a mess. It seems everyone has a WordPress title with no clear way to determine the skills that back it. Outside of some sort of regulation, I don&#8217;t see how the situation can improve. Perhaps the community can rally together to create a list of titles and assign appropriate skills to them? If you use a title to express your skills and knowledge to potential clients, what is it?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Feb 2015 23:24:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"WPTavern: Keep a CHANGELOG Project Aims to Standardize Best Practices for Writing Change Logs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39051\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"http://wptavern.com/keep-a-changelog-project-aims-to-standardize-best-practices-for-writing-change-logs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3140:\"<p>A change log is the quickest, most convenient way for users and contributors to identify significant changes in a project as it moves from one version to the next. The log exists to keep users informed.</p>\n<p>Unfortunately, many open source project leaders have little motivation to provide a meaningful CHANGELOG file and are purely focused on shipping the code. Instead of writing clear, understandable logs for a release, many developers resort to dumping git logs, which are often rife with messy commit messages, into the CHANGELOG file.</p>\n<p><a href=\"http://olivierlacan.com/\" target=\"_blank\">Olivier Lacan</a>, software engineer at <a href=\"https://www.codeschool.com/\" target=\"_blank\">Code School</a>, has created a site and corresponding GitHub repository called <a href=\"http://keepachangelog.com/\" target=\"_blank\">Keep a CHANGELOG</a>, with an extensive collection of recommendations for writing better change logs.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/keep-a-changelog.png\" rel=\"prettyphoto[39051]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/keep-a-changelog.png?resize=1025%2C788\" alt=\"keep-a-changelog\" class=\"aligncenter size-full wp-image-39070\" /></a></p>\n<p>The project page offers a variety of tips for improving change logs, i.e. how to list releases, recommended date format, sections and labels for classifying changes, and file naming convention.</p>\n<p>One helpful tip Lacan offers, which isn&#8217;t commonly seen among even the finest, hand-crafted CHANGELOGs, is the recommendation for keeping an &#8220;Unreleased&#8221; section at the top. This helps users track for potential changes in progress for upcoming releases. Maintaining an &#8220;Unreleased&#8221; section  minimizes the effort of writing the logs at release time, as you can easily add the version number to the section as changes are added and create a new Unreleased header.</p>\n<h3>Software Tools Are for People</h3>\n<p>Lacan makes a strong case for prioritizing the creation of a changelog for your open source project:</p>\n<blockquote><p>Why should I care? Because software tools are for people. If you don’t care, why are you contributing to open source?</p></blockquote>\n<p>He hopes that the Keep a CHANGELOG project will help to shape a better CHANGELOG file convention for all open source projects. Discussions and suggestions are welcome in the <a href=\"https://github.com/olivierlacan/keep-a-changelog/issues\" target=\"_blank\">issues queue</a> of the project&#8217;s GitHub repository. Contributors have already logged more than two dozen considerations.</p>\n<p>WordPress.org offers some <a href=\"https://wordpress.org/news/2009/07/improving-your-plugin-changelogs/\" target=\"_blank\">basic tips for improving change logs</a>, but the official plugin directory doesn&#8217;t require developers to maintain a CHANGELOG file. Lacan&#8217;s <a href=\"http://keepachangelog.com/\" target=\"_blank\">Keep a CHANGELOG project</a> is a complementary resource that can help WordPress developers and all open source project managers to write better logs for users and contributors.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Feb 2015 21:45:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"WPTavern: Tickets On Sale For WordCamp North Canton, OH, 2015\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39054\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/tickets-on-sale-for-wordcamp-north-canton-oh-2015\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2149:\"<p>&nbsp;</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/WCNorthCanton2015FeaturedImage.png\" rel=\"prettyphoto[39054]\"><img class=\"aligncenter size-full wp-image-39055\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/02/WCNorthCanton2015FeaturedImage.png?resize=650%2C314\" alt=\"WordCamp North Canton 2015 Featured Image\" /></a>Tickets are <a title=\"http://northcanton.wordcamp.org/2015/tickets/\" href=\"http://northcanton.wordcamp.org/2015/tickets/\">on sale</a> for the 3rd annual, WordCamp North Canton, OH, May 8th-9th. Tickets are available for Friday and Saturday, Friday only, or Saturday only. <span class=\"tix-ticket-excerpt\">Friday features a full day of learning split between entrepreneur and WordPress sessions. Saturday is a full day of WordPress sessions with breakfast and lunch included in the ticket price. Ticket prices are as follows:</span></p>\n<ul>\n<li>$30 Friday and Saturday</li>\n<li>$20 Friday only</li>\n<li>$20 Saturday only</li>\n</ul>\n<p>The event takes place on the <a title=\"http://www.starkstate.edu/\" href=\"http://www.starkstate.edu/\">Stark State College campus</a> within the business and entrepreneurial center. As I <a title=\"http://wptavern.com/recap-of-wordcamp-north-canton-2014\" href=\"http://wptavern.com/recap-of-wordcamp-north-canton-2014\">mentioned last year</a>, the venue has high-speed internet so WiFi shouldn&#8217;t be a problem. Joe Rozsa, who is helping to organize the event, says lunch will be provided by <a title=\"http://www.solpiepizza.com/\" href=\"http://www.solpiepizza.com/\">SOL Pie Pizza</a>, formerly known as <a title=\"http://ermannospizza.com/\" href=\"http://ermannospizza.com/\">Ermannos Pizza</a>.</p>\n<p>Speakers have yet to be confirmed, but I&#8217;ll be participating on a panel discussion on <a title=\"http://wordpress.tv/2014/02/14/chris-lema-escaping-the-impostor-syndrome/\" href=\"http://wordpress.tv/2014/02/14/chris-lema-escaping-the-impostor-syndrome/\">imposter syndrome</a>. We&#8217;re going to share our experiences battling the syndrome on a daily basis and give advice on how to avoid its influence. Let me know if you plan on attending.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Feb 2015 20:18:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Matt: Jonathan Ive Profile\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44703\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://ma.tt/2015/02/jonathan-ive-profile/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2030:\"<blockquote><p>Jobs’s taste for merciless criticism was notorious; Ive recalled that, years ago, after seeing colleagues crushed, he protested. Jobs replied, “Why would you be vague?,” arguing that ambiguity was a form of selfishness: “You don’t care about how they feel! You’re being vain, you want them to like you.” Ive was furious, but came to agree. “It’s really demeaning to think that, in this deep desire to be liked, you’ve compromised giving clear, unambiguous feedback,” he said. He lamented that there were “so many anecdotes” about Jobs’s acerbity: “His intention, and motivation, wasn’t to be hurtful.”</p></blockquote>\n<p>Your one #longread today should be <a href=\"http://www.newyorker.com/magazine/2015/02/23/shape-things-come\">the New Yorker&#8217;s profile of Jonathan Ive</a> by Ian Parker. This anecdote resonated with me from the time I (poorly) did design for a living, and how much patience and stoicism are part of the job when working with a deciding stakeholder, often known as a client:</p>\n<blockquote><p>Bob Mansfield, a former senior hardware engineer at Apple, who is now semi-retired, recently described the pique that some colleagues felt about Ive’s privileged access. As he put it, “There’s always going to be someone vying for Dad’s attention.” But Mansfield was grateful for Ive’s cool handling of a C.E.O. who was “not the easiest guy to please.” Mansfield’s view was “Jony puts up with a lot, and, as a result of him doing it, people like me don’t have to.”</p></blockquote>\n<p>This also made me giggle.</p>\n<blockquote><p>Brunner is proud of the Beats brand, but it took him time to adjust to a design rhythm set as if for a sneaker company: “Originally, I hated it—‘Let’s do a version in the L.A. Lakers’ colors!’ ” He laughed. “ ‘Great. Purple and yellow. <em>Fantastic</em>.’ ”</p></blockquote>\n<p><a href=\"http://www.newyorker.com/magazine/2015/02/23/shape-things-come\">Check out the entire thing</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Feb 2015 16:01:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Matt: Pollan on Psychedelics\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44682\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/02/pollan-on-psychedelics/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:643:\"<p>To make it a full New Yorker weekend, here&#8217;s a <a href=\"http://longreads.com/\">longread</a> from <a href=\"http://michaelpollan.com/\">Michael Pollan</a>, best known for his book <a href=\"http://michaelpollan.com/books/the-omnivores-dilemma/\">Omnivore&#8217;s Dilemma</a>, on <a href=\"http://www.newyorker.com/magazine/2015/02/09/trip-treatment\">the reopened research on the potential therapeutic uses of psychedelics</a>. While we&#8217;re on Pollan it&#8217;s worth repeating his advice from <a href=\"http://michaelpollan.com/books/food-rules/\">Food Rules</a>, <strong>&#8220;Eat food, not too much, mostly plants.&#8221;</strong></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Feb 2015 00:54:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Matt: Ex Girlfriend Meeting\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44667\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://ma.tt/2015/02/ex-girlfriend-meeting/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:350:\"<p>Since it&#8217;s Valentine&#8217;s day, here&#8217;s a little humor from the New Yorker&#8217;s Hallie Cantor: <a href=\"http://www.newyorker.com/humor/daily-shouts/imagine-boyfriends-ex-girlfriends-right-now\">What I Imagine My Boyfriend’s Ex-Girlfriends Are Doing Right Now</a>. (That the character is named Matt is completely coincidental.)</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 14 Feb 2015 18:20:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: Mayer WordPress Theme is Now Open Source on GitHub\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=38975\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wptavern.com/mayer-wordpress-theme-is-now-open-source-on-github\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5274:\"<p>Tom McFarlin released his <a href=\"https://github.com/pressware/mayer\" target=\"_blank\">Mayer WordPress theme on GitHub</a> today. The theme was designed with writers, bloggers, and authors in mind and was previously only <a href=\"https://theme.wordpress.com/themes/mayer/\" target=\"_blank\">available to WordPress.com users for $79</a>.</p>\n<p>Mayer is unique in that it was created to get users writing immediately, without having a bunch settings pages or additional widgets to configure. Content in the post editor is styled to match the front end, so users don&#8217;t need to leave the editor in order to see how it&#8217;s going to look.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mayer-for-wordpress-1024x819.png\" rel=\"prettyphoto[38975]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mayer-for-wordpress-1024x819.png?resize=1024%2C819\" alt=\"mayer-for-wordpress-1024x819\" class=\"aligncenter size-full wp-image-39004\" /></a></p>\n<p>Technically, the theme is already open source in terms of its licensing. However, up until this point, it was only distributed commercially via WordPress.com. McFarlin has written <a href=\"https://tommcfarlin.com/open-source-wordpress-themes/\" target=\"_blank\">several</a> <a href=\"https://tommcfarlin.com/mayer-for-wordpress-now-on-github/\" target=\"_blank\">posts</a> about how he came to the decision to make his products freely available on GitHub. He cites collaboration and accountability as the driving factors in his decision:</p>\n<p>&#8220;The advantage to this means that all of the work that the team and I have backlogged for this project (and for future projects) is publicly visible if for no other reason than for accountability,&#8221; he said. &#8220;Ideally though, we’d be able to benefit from the open source community that comes in the form of code reviews, pull requests, or just general conversations to help make the core product better.&#8221;</p>\n<h3>Free Products ≠ Free Support</h3>\n<p>Any theme or plugin author who decides to distribute a product for free will inevitably find the burden of support knocking at the door. It&#8217;s important to specify how much support, if any, is included for users who are receiving a product for free.</p>\n<p>&#8220;If the code itself falls under an open source license, then I’m willing to make the code freely available,&#8221; McFarlin said. <strong>&#8220;This does not mean that I’m willing to support the code base for those who haven’t paid, but that leads into an entirely different discussion.&#8221;</strong></p>\n<p>McFarlin will continue to sell the Mayer theme through his <a href=\"http://shop.pressware.co/mayer/\" target=\"_blank\">Pressware shop</a>. The $99/year price tag offers users professional support for a year.</p>\n<p>&#8220;To be clear, I’m not attempting yet-another-way to monetize or popularize a theme in hopes of making money,&#8221; McFarlin said. &#8220;The short of it is that the theme will sell given the right marketplace. If someone wants to freely use the theme, that’s fine – why not? After all, it may result in some pull requests or other issues that will improve the core theme.&#8221;</p>\n<p>Based on his experience navigating user expectations from open source software, McFarlin believes that there is no escaping the issue of support.</p>\n<p>&#8220;<span class=\"pullquote alignleft\">I think that if you’re in the business of WordPress products (versus services), you’re in the support business whether you intend to be or not.</span> Everything that you release – regardless of where the transaction actually happens – is going to yield support from some of the customers,&#8221; he said.</p>\n<p>&#8220;In order to gain access to said support, the transaction just moves back one step from after accessing the source code rather than before accessing the source code.&#8221;</p>\n<p>This model is almost entirely the opposite of the larger theme marketplaces, such as Themeforest, where the customer has no option to preview the code or have a developer preview the code before purchasing the product. It&#8217;s essentially a blind purchase in hopes that you won&#8217;t have to ask for too much support.</p>\n<p>McFarlin is banking on the fact that users who need professional support will be willing to pay for it. <a href=\"http://themehybrid.com/\" target=\"_blank\">Theme Hybrid</a> is one notable shop that has pioneered this model for years, offering all of its open source products for free and charging for paid support. WordPress.com does something similar, with many of its free themes mirrored on WordPress.org. Pressware is moving in a similar direction and will be creating a products division to further experiment with the model. McFarlin plans to put more work up on GitHub in the future and will continue to write about his experience.</p>\n<p>The vast majority of WordPress theme developers have not experimented with this distribution model. For the most part, theme shops sell their products and free versions, if offered, are only available with a limited set of features. McFarlin hopes to prove that in an open source marketplace, a business can successfully sell support for a product that it&#8217;s already giving away for free.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 13 Feb 2015 23:56:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: Excellent Primer on the WordPress REST API Project\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=39010\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wptavern.com/excellent-primer-on-the-wordpress-rest-api-project\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1981:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WordPressRestAPIPrimerFeaturedImage.png\" rel=\"prettyphoto[39010]\"><img class=\"size-full wp-image-39017\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/WordPressRestAPIPrimerFeaturedImage.png?resize=655%2C327\" alt=\"Rest API Primer Featured Image\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/22280677@N07/3349296482\">The Poor Man&#8217;s Racehorse?</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-nd/2.0/\">(license)</a>\n<p>In the past two years, there&#8217;s been a lot of discussion surrounding the <a title=\"https://github.com/WP-API/WP-API\" href=\"https://github.com/WP-API/WP-API\">WordPress REST API project</a>. If you&#8217;re not familiar with it, Brian Krogsgard <a title=\"https://poststatus.com/wordpress-json-rest-api/\" href=\"https://poststatus.com/wordpress-json-rest-api/\">published a great article</a> that explains what it is, how to get involved, and the possibilities it opens up to developers. Krogsgard believes the REST API is &#8220;the most exciting project for the platform since custom post types were introduced in WordPress 2.9 and 3.0.&#8221;</p>\n<p>While the article does a good job explaining what the API is, I find it to be developer heavy for my understanding. I think it&#8217;s a project that I won&#8217;t truly understand how great it is until I use products built with it.</p>\n<p>For additional information, read our <a title=\"http://wptavern.com/ryan-mccue-on-creating-the-json-rest-api-for-wordpress\" href=\"http://wptavern.com/ryan-mccue-on-creating-the-json-rest-api-for-wordpress\">interview from 2013 with Ryan McCue</a>, project lead for the WordPress REST API. In the interview, McCue explains why the API is such a big deal and lists a few practical use cases. There&#8217;s also a great presentation from WordCamp San Francisco 2014 by Sam Hotchkiss, that explains how APIs like the REST API are changing the internet.</p>\n<p></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 13 Feb 2015 22:46:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 27 Feb 2015 14:07:48 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:6:\"197653\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Fri, 27 Feb 2015 14:00:13 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(17087,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1425089269','no'),(17088,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1425046069','no'),(17089,'_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109','1425089269','no'),(17090,'_transient_feed_b9388c83948825c1edaef0d856b7b109','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:72:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins/browse/popular/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 27 Feb 2015 13:36:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:15:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"WordPress SEO by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://wordpress.org/plugins/wordpress-seo/#post-8321\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 Jan 2009 20:34:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"8321@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:131:\"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using Yoast&#039;s WordPress SEO plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/jetpack/#post-23862\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"23862@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Your WordPress, Streamlined.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Tim Moore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/contact-form-7/#post-2141\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:45:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2141@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WooCommerce - excelling eCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/woocommerce/#post-29860\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Sep 2011 08:13:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29860@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WooThemes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/plugins/akismet/#post-15\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:11:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"15@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"Akismet checks your comments against the Akismet Web service to see if they look like spam or not.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Google Analytics by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/plugins/google-analytics-for-wordpress/#post-2316\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Sep 2007 12:15:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2316@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:124:\"Track your WordPress site easily with the latest tracking codes and lots added data for search result pages and error pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"NextGEN Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/nextgen-gallery/#post-1169\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Apr 2007 20:08:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"1169@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:121:\"The most popular WordPress gallery plugin and one of the most popular plugins of all time with over 12 million downloads.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Alex Rabe\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/all-in-one-seo-pack/#post-753\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 20:08:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"753@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"All in One SEO Pack is a WordPress SEO plugin to automatically optimize your WordPress blog for Search Engines such as Google.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Google Analytics Dashboard for WP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://wordpress.org/plugins/google-analytics-dashboard-for-wp/#post-50539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 10 Mar 2013 17:07:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"50539@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Displays Google Analytics reports and real-time statistics in your WordPress Dashboard. Inserts the latest tracking code in every page of your site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Alin Marcu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wordpress-importer/#post-18101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 17:42:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"18101@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"iThemes Security (formerly Better WP Security)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/better-wp-security/#post-21738\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 22 Oct 2010 22:06:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"21738@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"The easiest, most effective way to secure WordPress in seconds.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Chris Wiegman\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"NextGEN Facebook - Advanced Social SEO for Facebook, Google+, Pinterest, Twitter &amp; More\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/nextgen-facebook/#post-40409\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Jul 2012 20:13:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"40409@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:132:\"Display your content in the best possible way on Facebook, Google+, Twitter, Pinterest, etc. - no matter how your webpage is shared!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"JS Morisset\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Wordfence Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wordfence/#post-29832\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 03:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29832@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:137:\"Wordfence Security is a free enterprise class security and performance plugin that makes your site up to 50 times faster and more secure.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Wordfence\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Google XML Sitemaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/google-sitemap-generator/#post-132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:31:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"132@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"This plugin will generate a special XML sitemap which will help search engines to better index your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Arne Brachhold\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Meta Slider\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/ml-slider/#post-49521\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Feb 2013 16:56:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"49521@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:145:\"Easy to use WordPress slider plugin. Create SEO optimised responsive slideshows with Nivo Slider, Flex Slider, Coin Slider and Responsive Slides.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Matcha Labs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://wordpress.org/plugins/rss/view/popular\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:11:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 27 Feb 2015 14:07:49 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:7:\"expires\";s:29:\"Fri, 27 Feb 2015 14:11:16 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Fri, 27 Feb 2015 13:36:16 +0000\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(17091,'_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109','1425089269','no'),(17092,'_transient_feed_mod_b9388c83948825c1edaef0d856b7b109','1425046069','no'),(17093,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1425089269','no'),(17094,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2015/02/wordpress-4-1-1/\'>WordPress 4.1.1 Maintenance Release</a> <span class=\"rss-date\">February 18, 2015</span><div class=\"rssSummary\">WordPress 4.1.1 is now available. This maintenance release fixes 21 bugs in version 4.1. Some of you may have been waiting to update to the latest version until now, but there just wasn’t much to address. WordPress 4.1 was a smooth-sailing release and has seen more than 14 million downloads in the last two months. For a full [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://wptavern.com/wordpress-theme-directory-launches-new-design\'>WPTavern: WordPress Theme Directory Launches New Design</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/add-infinite-scroll-to-the-wordpress-admin\'>WPTavern: Add Infinite Scroll to the WordPress Admin</a></li><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/02/net-neutrality-win/\'>Matt: Net Neutrality Win</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\'dashboard-news-plugin\'><span>Popular Plugin:</span> <a href=\'https://wordpress.org/plugins/google-analytics-dashboard-for-wp/\' class=\'dashboard-news-plugin-link\'>Google Analytics Dashboard for WP</a>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=google-analytics-dashboard-for-wp&amp;_wpnonce=ef3d1d6341&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Google Analytics Dashboard for WP\'>Install</a>)</span></li></ul></div>','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=9488 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,4,'_edit_last','1'),(3,4,'_wp_page_template','home.php'),(4,4,'_edit_lock','1424890110:1'),(5,6,'_edit_last','1'),(6,6,'_edit_lock','1425046290:1'),(7,6,'_wp_page_template','about.php'),(8,8,'_edit_last','1'),(9,8,'_edit_lock','1402442057:1'),(10,8,'cfs_fields','a:2:{i:0;a:8:{s:2:\"id\";s:1:\"1\";s:4:\"name\";s:12:\"header_image\";s:5:\"label\";s:12:\"Header Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:2:\"16\";s:4:\"name\";s:9:\"post_type\";s:5:\"label\";s:9:\"Post Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(11,8,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:2:{i:0;s:9:\"posts.php\";i:1;s:10:\"skills.php\";}}}'),(12,8,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(13,9,'_wp_attached_file','2014/06/beer-header.jpg'),(14,9,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:400;s:4:\"file\";s:23:\"2014/06/beer-header.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"beer-header-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"beer-header-300x80.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:80;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"beer-header-1024x273.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:273;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(19,13,'_edit_last','1'),(20,13,'_wp_page_template','skills.php'),(21,13,'_edit_lock','1417648399:1'),(24,16,'_edit_last','1'),(25,16,'_wp_page_template','posts.php'),(26,16,'_edit_lock','1413202325:1'),(90,25,'_menu_item_type','post_type'),(91,25,'_menu_item_menu_item_parent','0'),(92,25,'_menu_item_object_id','6'),(93,25,'_menu_item_object','page'),(94,25,'_menu_item_target',''),(95,25,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(96,25,'_menu_item_xfn',''),(97,25,'_menu_item_url',''),(99,26,'_menu_item_type','post_type'),(100,26,'_menu_item_menu_item_parent','0'),(101,26,'_menu_item_object_id','16'),(102,26,'_menu_item_object','page'),(103,26,'_menu_item_target',''),(104,26,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(105,26,'_menu_item_xfn',''),(106,26,'_menu_item_url',''),(108,27,'_menu_item_type','post_type'),(109,27,'_menu_item_menu_item_parent','0'),(110,27,'_menu_item_object_id','13'),(111,27,'_menu_item_object','page'),(112,27,'_menu_item_target',''),(113,27,'_menu_item_classes','a:1:{i:0;s:15:\"nav-call-action\";}'),(114,27,'_menu_item_xfn',''),(115,27,'_menu_item_url',''),(135,30,'_edit_last','1'),(136,30,'_edit_lock','1424873191:1'),(137,30,'_wp_page_template','posts.php'),(138,32,'_menu_item_type','post_type'),(139,32,'_menu_item_menu_item_parent','0'),(140,32,'_menu_item_object_id','30'),(141,32,'_menu_item_object','page'),(142,32,'_menu_item_target',''),(143,32,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(144,32,'_menu_item_xfn',''),(145,32,'_menu_item_url',''),(148,6,'header_image','9'),(149,35,'_wp_attached_file','2014/06/stockvault-atlantic-sunset135250.jpg'),(150,35,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:44:\"2014/06/stockvault-atlantic-sunset135250.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-atlantic-sunset135250-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:22;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:12:\"Canon EOS 7D\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:2:\"12\";s:3:\"iso\";s:3:\"100\";s:13:\"shutter_speed\";s:3:\"0.5\";s:5:\"title\";s:0:\"\";}}'),(153,37,'_edit_last','1'),(154,37,'_edit_lock','1402367051:1'),(155,37,'cfs_fields','a:10:{i:0;a:8:{s:2:\"id\";s:1:\"7\";s:4:\"name\";s:12:\"project_type\";s:5:\"label\";s:12:\"Project Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:1:\"6\";s:4:\"name\";s:9:\"languages\";s:5:\"label\";s:9:\"Languages\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:1:\"8\";s:4:\"name\";s:4:\"role\";s:5:\"label\";s:4:\"Role\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:1:\"9\";s:4:\"name\";s:4:\"link\";s:5:\"label\";s:4:\"Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:4;a:8:{s:2:\"id\";i:10;s:4:\"name\";s:7:\"company\";s:5:\"label\";s:7:\"Company\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";i:11;s:4:\"name\";s:12:\"company_link\";s:5:\"label\";s:12:\"Company Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:6;a:8:{s:2:\"id\";s:1:\"2\";s:4:\"name\";s:11:\"screenshots\";s:5:\"label\";s:11:\"Screenshots\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:6;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:22:\"Screenshot - {caption}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:7;a:8:{s:2:\"id\";s:1:\"3\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:7;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:8;a:8:{s:2:\"id\";s:1:\"4\";s:4:\"name\";s:5:\"image\";s:5:\"label\";s:5:\"Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:10:\"Real Image\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:8;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:9;a:8:{s:2:\"id\";s:1:\"5\";s:4:\"name\";s:7:\"caption\";s:5:\"label\";s:7:\"Caption\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:9;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(156,37,'cfs_rules','a:1:{s:10:\"post_types\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:7:\"project\";}}}'),(157,37,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(158,38,'_edit_last','1'),(159,38,'_edit_lock','1408399762:1'),(160,39,'_wp_attached_file','2014/06/th-77nrg.png'),(161,39,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:20:\"2014/06/th-77nrg.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-77nrg-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-77nrg-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(162,40,'_wp_attached_file','2014/06/th-baton.png'),(163,40,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:20:\"2014/06/th-baton.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-baton-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-baton-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(164,41,'_wp_attached_file','2014/06/th-carnegie-chart.png'),(165,41,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:451;s:4:\"file\";s:29:\"2014/06/th-carnegie-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(166,42,'_wp_attached_file','2014/06/th-enviro.png'),(167,42,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:21:\"2014/06/th-enviro.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-enviro-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-enviro-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(168,43,'_wp_attached_file','2014/06/th-soundingboard.png'),(169,43,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:28:\"2014/06/th-soundingboard.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(170,44,'_wp_attached_file','2014/06/th-tea-chart.png'),(171,44,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:24:\"2014/06/th-tea-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(172,45,'_wp_attached_file','2014/06/th-tea-timers.png'),(173,45,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:449;s:4:\"file\";s:25:\"2014/06/th-tea-timers.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(174,46,'_wp_attached_file','2014/06/th-tle.png'),(175,46,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:452;s:4:\"file\";s:18:\"2014/06/th-tle.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"th-tle-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-tle-298x300.png\";s:5:\"width\";i:298;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(200,47,'_wp_attached_file','2014/06/big-77-1.jpg'),(201,47,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:663;s:4:\"file\";s:20:\"2014/06/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x565.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:565;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(202,48,'_wp_attached_file','2014/06/big-77-2.jpg'),(203,48,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-2-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(204,49,'_wp_attached_file','2014/06/big-77-3.jpg'),(205,49,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-3-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(206,50,'_wp_attached_file','2014/06/big-77-4.jpg'),(207,50,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:664;s:4:\"file\";s:20:\"2014/06/big-77-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-4-300x166.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:166;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-4-1024x566.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:566;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(208,51,'_wp_attached_file','2014/06/big-tle-1.jpg'),(209,51,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:21:\"2014/06/big-tle-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(210,52,'_wp_attached_file','2014/06/big-tle-2.jpg'),(211,52,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:21:\"2014/06/big-tle-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(212,53,'_wp_attached_file','2014/06/big-tle-3.jpg'),(213,53,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-3-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(214,54,'_wp_attached_file','2014/06/big-tle-4.jpg'),(215,54,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-4-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(216,55,'_wp_attached_file','2014/06/th-77-1.jpg'),(217,55,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(218,56,'_wp_attached_file','2014/06/th-77-2.jpg'),(219,56,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(220,57,'_wp_attached_file','2014/06/th-77-3.jpg'),(221,57,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(222,58,'_wp_attached_file','2014/06/th-77-4.jpg'),(223,58,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(226,60,'_wp_attached_file','2014/06/th-tle-2.jpg'),(227,60,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(228,61,'_wp_attached_file','2014/06/th-tle-3.jpg'),(229,61,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(230,62,'_wp_attached_file','2014/06/th-tle-4.jpg'),(231,62,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(244,63,'_edit_last','1'),(245,63,'_edit_lock','1408399696:1'),(403,64,'_edit_last','1'),(404,64,'_edit_lock','1408399706:1'),(429,65,'_edit_last','1'),(430,65,'_edit_lock','1412544297:1'),(437,66,'_edit_last','1'),(438,66,'_edit_lock','1424874413:1'),(445,67,'_edit_last','1'),(446,67,'_edit_lock','1424874453:1'),(465,68,'_edit_last','1'),(466,68,'_edit_lock','1408399747:1'),(497,72,'_wp_attached_file','2014/06/big-77-responsive.jpg'),(498,72,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:1372;s:4:\"file\";s:29:\"2014/06/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-168x300.jpg\";s:5:\"width\";i:168;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-574x1024.jpg\";s:5:\"width\";i:574;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(499,73,'_wp_attached_file','2014/06/big-es-responsive.jpg'),(500,73,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:628;s:4:\"file\";s:29:\"2014/06/big-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(501,74,'_wp_attached_file','2014/06/th-77-responsive.jpg'),(502,74,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/06/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(523,76,'_wp_attached_file','2014/06/big-tle-responsive.jpg'),(524,76,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:763;s:6:\"height\";i:1200;s:4:\"file\";s:30:\"2014/06/big-tle-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"big-tle-responsive-651x1024.jpg\";s:5:\"width\";i:651;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(545,78,'_wp_attached_file','2014/06/big-bt-1.jpg'),(546,78,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-1-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(547,79,'_wp_attached_file','2014/06/big-bt-2.jpg'),(548,79,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-2-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(549,80,'_wp_attached_file','2014/06/big-bt-3.jpg'),(550,80,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-bt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-3-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-3-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(551,81,'_wp_attached_file','2014/06/big-bt-4.jpg'),(552,81,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:661;s:4:\"file\";s:20:\"2014/06/big-bt-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-4-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(553,82,'_wp_attached_file','2014/06/big-cc-1.jpg'),(554,82,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-1-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-1-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(555,83,'_wp_attached_file','2014/06/big-cc-2.jpg'),(556,83,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-2-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-2-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(557,84,'_wp_attached_file','2014/06/big-cc-3.jpg'),(558,84,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:889;s:4:\"file\";s:20:\"2014/06/big-cc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-3-1024x758.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:758;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(559,85,'_wp_attached_file','2014/06/big-cc-responsive.jpg'),(560,85,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:534;s:6:\"height\";i:1000;s:4:\"file\";s:29:\"2014/06/big-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(561,86,'_wp_attached_file','2014/06/big-es-1.jpg'),(562,86,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:865;s:4:\"file\";s:20:\"2014/06/big-es-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-1-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(563,87,'_wp_attached_file','2014/06/big-es-2.jpg'),(564,87,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-2-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(565,88,'_wp_attached_file','2014/06/big-es-3.jpg'),(566,88,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-3-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(567,89,'_wp_attached_file','2014/06/th-baton1.png'),(568,89,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:21:\"2014/06/th-baton1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-baton1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-baton1-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(569,90,'_wp_attached_file','2014/06/th-bt-1.jpg'),(570,90,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(571,91,'_wp_attached_file','2014/06/th-bt-2.jpg'),(572,91,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(573,92,'_wp_attached_file','2014/06/th-bt-3.jpg'),(574,92,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-bt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(575,93,'_wp_attached_file','2014/06/th-bt-4.jpg'),(576,93,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:220;s:4:\"file\";s:19:\"2014/06/th-bt-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(577,94,'_wp_attached_file','2014/06/th-cc-1.jpg'),(578,94,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-1-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(579,95,'_wp_attached_file','2014/06/th-cc-2.jpg'),(580,95,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-2-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(581,96,'_wp_attached_file','2014/06/th-cc-3.jpg'),(582,96,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(585,98,'_wp_attached_file','2014/06/th-es-1.jpg'),(586,98,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-es-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(587,99,'_wp_attached_file','2014/06/th-es-2.jpg'),(588,99,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(589,100,'_wp_attached_file','2014/06/th-es-3.jpg'),(590,100,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(663,101,'_wp_attached_file','2014/06/big-kk-1.jpg'),(664,101,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-kk-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-1-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(665,102,'_wp_attached_file','2014/06/big-kk-2.jpg'),(666,102,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:20:\"2014/06/big-kk-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(667,103,'_wp_attached_file','2014/06/big-kk-3.jpg'),(668,103,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:353;s:4:\"file\";s:20:\"2014/06/big-kk-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"big-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-3-1024x301.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:301;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(669,104,'_wp_attached_file','2014/06/big-kk-4.jpg'),(670,104,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:483;s:4:\"file\";s:20:\"2014/06/big-kk-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-4-1024x412.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:412;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(671,105,'_wp_attached_file','2014/06/big-mc-1.jpg'),(672,105,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:545;s:4:\"file\";s:20:\"2014/06/big-mc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-1-1024x465.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:465;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(673,106,'_wp_attached_file','2014/06/big-mc-2.jpg'),(674,106,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:443;s:4:\"file\";s:20:\"2014/06/big-mc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-2-300x110.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-2-1024x378.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:378;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(675,107,'_wp_attached_file','2014/06/big-sb-1.jpg'),(676,107,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-sb-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(677,108,'_wp_attached_file','2014/06/big-sb-2.jpg'),(678,108,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:764;s:4:\"file\";s:20:\"2014/06/big-sb-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-2-1024x651.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:651;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(679,109,'_wp_attached_file','2014/06/big-sb-3.jpg'),(680,109,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:762;s:4:\"file\";s:20:\"2014/06/big-sb-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-3-1024x650.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:650;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(681,110,'_wp_attached_file','2014/06/big-tc-1.jpg'),(682,110,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:823;s:4:\"file\";s:20:\"2014/06/big-tc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-1-1024x702.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:702;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(683,111,'_wp_attached_file','2014/06/big-tc-2.jpg'),(684,111,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:819;s:4:\"file\";s:20:\"2014/06/big-tc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-2-1024x698.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:698;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(685,112,'_wp_attached_file','2014/06/big-tc-3.jpg'),(686,112,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:822;s:4:\"file\";s:20:\"2014/06/big-tc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-3-1024x701.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:701;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(687,113,'_wp_attached_file','2014/06/big-tc-responsive.jpg'),(688,113,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1090;s:6:\"height\";i:1484;s:4:\"file\";s:29:\"2014/06/big-tc-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tc-responsive-752x1024.jpg\";s:5:\"width\";i:752;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(689,114,'_wp_attached_file','2014/06/big-tt-1.jpg'),(690,114,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-tt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(691,115,'_wp_attached_file','2014/06/big-tt-2.jpg'),(692,115,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:758;s:4:\"file\";s:20:\"2014/06/big-tt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-2-1024x646.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:646;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(693,116,'_wp_attached_file','2014/06/big-tt-3.jpg'),(694,116,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:755;s:4:\"file\";s:20:\"2014/06/big-tt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-3-300x188.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-3-1024x644.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:644;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(695,117,'_wp_attached_file','2014/06/big-tt-responsive.jpg'),(696,117,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:790;s:6:\"height\";i:1478;s:4:\"file\";s:29:\"2014/06/big-tt-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tt-responsive-547x1024.jpg\";s:5:\"width\";i:547;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(697,118,'_wp_attached_file','2014/06/th-kk-1.jpg'),(698,118,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-kk-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(699,119,'_wp_attached_file','2014/06/th-kk-2.jpg'),(700,119,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-kk-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(701,120,'_wp_attached_file','2014/06/th-kk-3.jpg'),(702,120,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:118;s:4:\"file\";s:19:\"2014/06/th-kk-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-3-150x118.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:118;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(703,121,'_wp_attached_file','2014/06/th-kk-4.jpg'),(704,121,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:161;s:4:\"file\";s:19:\"2014/06/th-kk-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(705,122,'_wp_attached_file','2014/06/th-mc-1.jpg'),(706,122,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:182;s:4:\"file\";s:19:\"2014/06/th-mc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(707,123,'_wp_attached_file','2014/06/th-mc-2.jpg'),(708,123,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:148;s:4:\"file\";s:19:\"2014/06/th-mc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-2-150x148.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:148;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-2-300x111.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(709,124,'_wp_attached_file','2014/06/th-sb-1.jpg'),(710,124,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-sb-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(711,125,'_wp_attached_file','2014/06/th-sb-2.jpg'),(712,125,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:255;s:4:\"file\";s:19:\"2014/06/th-sb-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(713,126,'_wp_attached_file','2014/06/th-sb-3.jpg'),(714,126,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:254;s:4:\"file\";s:19:\"2014/06/th-sb-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(715,127,'_wp_attached_file','2014/06/th-tc-1.jpg'),(716,127,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(717,128,'_wp_attached_file','2014/06/th-tc-2.jpg'),(718,128,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:273;s:4:\"file\";s:19:\"2014/06/th-tc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(719,129,'_wp_attached_file','2014/06/th-tc-3.jpg'),(720,129,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(721,130,'_wp_attached_file','2014/06/th-tc-responsive.jpg'),(722,130,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:545;s:4:\"file\";s:28:\"2014/06/th-tc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(723,131,'_wp_attached_file','2014/06/th-tt-1.jpg'),(724,131,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(725,132,'_wp_attached_file','2014/06/th-tt-2.jpg'),(726,132,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(727,133,'_wp_attached_file','2014/06/th-tt-3.jpg'),(728,133,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:19:\"2014/06/th-tt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(729,134,'_wp_attached_file','2014/06/th-tt-responsive.jpg'),(730,134,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:748;s:4:\"file\";s:28:\"2014/06/th-tt-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(839,135,'_wp_attached_file','2014/06/th-cc-responsive.jpg'),(840,135,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:655;s:4:\"file\";s:28:\"2014/06/th-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(841,136,'_wp_attached_file','2014/06/th-es-responsive.jpg'),(842,136,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:549;s:4:\"file\";s:28:\"2014/06/th-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(843,137,'_wp_attached_file','2014/06/th-tle-1.jpg'),(844,137,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(845,138,'_wp_attached_file','2014/06/th-tle-responsive.jpg'),(846,138,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:550;s:4:\"file\";s:29:\"2014/06/th-tle-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(901,139,'_edit_last','1'),(902,139,'_edit_lock','1402276997:1'),(903,139,'cfs_fields','a:4:{i:0;a:8:{s:2:\"id\";s:2:\"12\";s:4:\"name\";s:8:\"projects\";s:5:\"label\";s:8:\"Projects\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:17:\"Project - {label}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:1;a:8:{s:2:\"id\";s:2:\"13\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"14\";s:4:\"name\";s:5:\"label\";s:5:\"label\";s:5:\"Label\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"15\";s:4:\"name\";s:3:\"url\";s:5:\"label\";s:3:\"URL\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(904,139,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:8:\"home.php\";}}}'),(905,139,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(936,140,'_wp_attached_file','2014/06/stockvault-dramatic-landscape106482.jpg'),(937,140,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:47:\"2014/06/stockvault-dramatic-landscape106482.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:48:\"stockvault-dramatic-landscape106482-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:4.9000000000000004;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:5:\"E5600\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"5.69\";s:3:\"iso\";s:2:\"50\";s:13:\"shutter_speed\";s:18:\"0.0022805017103763\";s:5:\"title\";s:0:\"\";}}'),(940,141,'_wp_attached_file','2014/06/stockvault-path-in-nature124348.jpg'),(941,141,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:43:\"2014/06/stockvault-path-in-nature124348.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:44:\"stockvault-path-in-nature124348-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(946,142,'_edit_last','1'),(947,142,'_edit_lock','1402366993:1'),(956,145,'_wp_attached_file','2014/06/stockvault-cabot-trail-hdr133670.jpg'),(957,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:44:\"2014/06/stockvault-cabot-trail-hdr133670.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-cabot-trail-hdr133670-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(966,150,'_edit_last','1'),(967,150,'_edit_lock','1402369491:1'),(968,150,'cfs_fields','a:6:{i:0;a:8:{s:2:\"id\";s:2:\"17\";s:4:\"name\";s:10:\"categories\";s:5:\"label\";s:10:\"Categories\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:24:\"Skill - {category_title}\";s:12:\"button_label\";s:12:\"Add Category\";}}i:1;a:8:{s:2:\"id\";s:2:\"18\";s:4:\"name\";s:14:\"category_title\";s:5:\"label\";s:14:\"Category Title\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"22\";s:4:\"name\";s:5:\"color\";s:5:\"label\";s:5:\"Color\";s:4:\"type\";s:5:\"color\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:2;s:7:\"options\";a:1:{s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"19\";s:4:\"name\";s:6:\"skills\";s:5:\"label\";s:6:\"Skills\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:3;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:31:\"Skill - {skill} - {percentage}%\";s:12:\"button_label\";s:9:\"Add Skill\";}}i:4;a:8:{s:2:\"id\";s:2:\"20\";s:4:\"name\";s:5:\"skill\";s:5:\"label\";s:5:\"Skill\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";s:2:\"21\";s:4:\"name\";s:10:\"percentage\";s:5:\"label\";s:10:\"Percentage\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(969,150,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:10:\"skills.php\";}}}'),(970,150,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(1271,151,'_menu_item_type','custom'),(1272,151,'_menu_item_menu_item_parent','0'),(1273,151,'_menu_item_object_id','151'),(1274,151,'_menu_item_object','custom'),(1275,151,'_menu_item_target','_blank'),(1276,151,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1277,151,'_menu_item_xfn',''),(1278,151,'_menu_item_url','http://thesocietea.org/resume'),(1821,154,'_edit_last','1'),(1822,154,'_edit_lock','1424875012:1'),(1957,158,'_edit_last','1'),(1958,158,'_edit_lock','1403184805:1'),(1963,167,'_edit_last','1'),(1964,167,'_edit_lock','1404151981:1'),(2385,172,'_edit_last','1'),(2386,172,'_edit_lock','1409793896:1'),(2387,172,'_syntaxhighlighter_encoded','1'),(2774,74,'_edit_lock','1405377184:1'),(2775,206,'_wp_attached_file','2014/07/big-json-1.jpg'),(2776,206,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:720;s:6:\"height\";i:276;s:4:\"file\";s:22:\"2014/07/big-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-1-300x115.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2777,207,'_wp_attached_file','2014/07/big-json-2.jpg'),(2778,207,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:870;s:6:\"height\";i:212;s:4:\"file\";s:22:\"2014/07/big-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2779,208,'_wp_attached_file','2014/07/big-json-3.jpg'),(2780,208,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:334;s:4:\"file\";s:22:\"2014/07/big-json-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-json-3-1024x285.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:285;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2781,209,'_wp_attached_file','2014/07/big-json-4.jpg'),(2782,209,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:808;s:4:\"file\";s:22:\"2014/07/big-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2783,210,'_wp_attached_file','2014/07/th-json-1.jpg'),(2784,210,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:153;s:4:\"file\";s:21:\"2014/07/th-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-1-300x114.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:114;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2785,211,'_wp_attached_file','2014/07/th-json-2.jpg'),(2786,211,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:657;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2787,212,'_wp_attached_file','2014/07/th-json-3.jpg'),(2788,212,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:575;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2789,213,'_wp_attached_file','2014/07/th-json-4.jpg'),(2790,213,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:420;s:4:\"file\";s:21:\"2014/07/th-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2791,214,'_edit_last','1'),(2792,214,'_edit_lock','1408399735:1'),(2811,215,'_wp_attached_file','2014/07/big-77-1.jpg'),(2812,215,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:686;s:4:\"file\";s:20:\"2014/07/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x585.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:585;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2813,216,'_wp_attached_file','2014/07/big-77-responsive.jpg'),(2814,216,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:794;s:6:\"height\";i:1288;s:4:\"file\";s:29:\"2014/07/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-631x1024.jpg\";s:5:\"width\";i:631;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2815,217,'_wp_attached_file','2014/07/th-77-1.jpg'),(2816,217,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:229;s:4:\"file\";s:19:\"2014/07/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2817,218,'_wp_attached_file','2014/07/th-77-responsive.jpg'),(2818,218,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/07/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2861,220,'_edit_last','1'),(2862,220,'_edit_lock','1408729445:1'),(2863,220,'_syntaxhighlighter_encoded','1'),(2864,226,'_wp_attached_file','2014/07/vim_tutor.jpg'),(2865,226,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:393;s:4:\"file\";s:21:\"2014/07/vim_tutor.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"vim_tutor-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"vim_tutor-300x235.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:235;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2870,16,'header_image','141'),(2871,16,'post_type','post'),(2872,233,'_edit_last','1'),(2873,233,'_edit_lock','1424874874:1'),(2874,233,'_syntaxhighlighter_encoded','1'),(2878,233,'dsq_thread_id','2929367235'),(2881,172,'dsq_thread_id','2929382650'),(2893,220,'dsq_thread_id','2932682347'),(2894,154,'dsq_thread_id','2932682419'),(2903,167,'dsq_thread_id','2933729832'),(2904,158,'dsq_thread_id','2933729884'),(2907,142,'dsq_thread_id','2933750176'),(2911,73,'_edit_lock','1408301920:1'),(2988,252,'_edit_last','1'),(2989,252,'_edit_lock','1408399686:1'),(2996,253,'_wp_attached_file','2014/08/big-odoc-1.jpg'),(2997,253,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:692;s:4:\"file\";s:22:\"2014/08/big-odoc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-1-1024x590.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:590;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2998,254,'_wp_attached_file','2014/08/big-odoc-2.jpg'),(2999,254,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:691;s:4:\"file\";s:22:\"2014/08/big-odoc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-2-1024x589.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:589;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3000,255,'_wp_attached_file','2014/08/big-odoc-3.jpg'),(3001,255,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:693;s:4:\"file\";s:22:\"2014/08/big-odoc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-3-1024x591.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:591;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3002,256,'_wp_attached_file','2014/08/big-odoc-4.jpg'),(3003,256,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:1047;s:4:\"file\";s:22:\"2014/08/big-odoc-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-4-586x1024.jpg\";s:5:\"width\";i:586;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3004,257,'_wp_attached_file','2014/08/th-odoc-1.jpg'),(3005,257,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3006,258,'_wp_attached_file','2014/08/th-odoc-2.jpg'),(3007,258,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:230;s:4:\"file\";s:21:\"2014/08/th-odoc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3008,259,'_wp_attached_file','2014/08/th-odoc-3.jpg'),(3009,259,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3010,260,'_wp_attached_file','2014/08/th-odoc-4.jpg'),(3011,260,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:524;s:4:\"file\";s:21:\"2014/08/th-odoc-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3048,252,'project_type','Web Site'),(3049,252,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3050,252,'role','Full-Stack Developer'),(3051,252,'link','http://new.okcommerce.gov/'),(3052,252,'company','Staplegun'),(3053,252,'company_link','http://staplegun.us/'),(3054,252,'thumbnail','257'),(3055,252,'image','253'),(3056,252,'caption','Home Page'),(3057,252,'thumbnail','258'),(3058,252,'image','254'),(3059,252,'caption','Subpage'),(3060,252,'thumbnail','259'),(3061,252,'image','255'),(3062,252,'caption','Popup Form'),(3063,252,'thumbnail','260'),(3064,252,'image','256'),(3065,252,'caption','Responsive Design'),(3066,63,'project_type','Web Site'),(3067,63,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3068,63,'role','Full-Stack Developer'),(3069,63,'link','http://77nrg.staplegun.us/'),(3070,63,'company','Staplegun'),(3071,63,'company_link','http://staplegun.us/'),(3072,63,'thumbnail','217'),(3073,63,'image','215'),(3074,63,'caption','Home Page Top (Video Background)'),(3075,63,'thumbnail','56'),(3076,63,'image','48'),(3077,63,'caption','Home Page Bottom (Parallax Background)'),(3078,63,'thumbnail','57'),(3079,63,'image','49'),(3080,63,'caption','Subpage'),(3081,63,'thumbnail','218'),(3082,63,'image','216'),(3083,63,'caption','Responsive Design'),(3084,64,'project_type','Web Site'),(3085,64,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3086,64,'role','Full-Stack Developer'),(3087,64,'link','http://www.enviro-ok.com/'),(3088,64,'company','Staplegun'),(3089,64,'company_link','http://staplegun.us/'),(3090,64,'thumbnail','98'),(3091,64,'image','86'),(3092,64,'caption','Home Page'),(3093,64,'thumbnail','99'),(3094,64,'image','87'),(3095,64,'caption','Subpage with Interactive 3D Images'),(3096,64,'thumbnail','100'),(3097,64,'image','88'),(3098,64,'caption','Subpage with Multiple Job Openings'),(3099,64,'thumbnail','136'),(3100,64,'image','73'),(3101,64,'caption','Responsive Design'),(3120,214,'project_type','Web Application'),(3121,214,'languages','Node.js, Faye.js'),(3122,214,'role','Back-End Developer'),(3123,214,'link','https://github.com/Staplegun-US/json-api-websocket-wrapper'),(3124,214,'company','Staplegun'),(3125,214,'company_link','http://staplegun.us/'),(3126,214,'thumbnail','213'),(3127,214,'image','209'),(3128,214,'caption','Example Stock Ticker Using JSON API Websocket Wrapper'),(3129,214,'thumbnail','212'),(3130,214,'image','208'),(3131,214,'caption','HTML Interface'),(3132,214,'thumbnail','210'),(3133,214,'image','206'),(3134,214,'caption','Server Logs'),(3135,214,'thumbnail','211'),(3136,214,'image','207'),(3137,214,'caption','Sample Config File'),(3138,68,'project_type','Ruby Gem'),(3139,68,'languages','Ruby'),(3140,68,'role','Back-End Developer'),(3141,68,'link','https://github.com/brightbit/markdown_checkboxes'),(3142,68,'company','Brightbit'),(3143,68,'company_link','http://brightbit.com/'),(3144,68,'thumbnail','123'),(3145,68,'image','106'),(3146,68,'caption','Rendering Markdown Checkboxes'),(3147,68,'thumbnail','122'),(3148,68,'image','105'),(3149,68,'caption','Editing Markdown Checkboxes Text'),(3150,38,'project_type','Web Site'),(3151,38,'languages','HTML5, Sass, Javascript, PHP (ModX)'),(3152,38,'role','Full-Stack Developer'),(3153,38,'link','http://totalenvironmentinc.com/'),(3154,38,'company','Staplegun'),(3155,38,'company_link','http://staplegun.us/'),(3156,38,'thumbnail','137'),(3157,38,'image','51'),(3158,38,'caption','Home Page'),(3159,38,'thumbnail','61'),(3160,38,'image','53'),(3161,38,'caption','Contact Page'),(3162,38,'thumbnail','62'),(3163,38,'image','54'),(3164,38,'caption','Sub Page with Lightbox'),(3165,38,'thumbnail','138'),(3166,38,'image','76'),(3167,38,'caption','Responsive Design'),(3336,261,'_edit_last','1'),(3337,261,'_edit_lock','1424879340:1'),(3338,261,'_syntaxhighlighter_encoded','1'),(3351,261,'dsq_thread_id','2953640271'),(3363,282,'_edit_last','1'),(3364,282,'_edit_lock','1410983185:1'),(3365,282,'_syntaxhighlighter_encoded','1'),(3367,282,'dsq_thread_id','2966714576'),(3934,301,'_edit_last','1'),(3935,301,'_edit_lock','1412391546:1'),(4265,305,'_edit_last','1'),(4266,305,'_edit_lock','1409866484:1'),(4269,305,'_syntaxhighlighter_encoded','1'),(4359,305,'dsq_thread_id','2986163533'),(4869,301,'dsq_thread_id','3081164551'),(5183,335,'_menu_item_type','custom'),(5184,335,'_menu_item_menu_item_parent','0'),(5185,335,'_menu_item_object_id','335'),(5186,335,'_menu_item_object','custom'),(5187,335,'_menu_item_target','_blank'),(5188,335,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(5189,335,'_menu_item_xfn',''),(5190,335,'_menu_item_url','http://labs.thesocietea.org'),(5343,336,'_edit_last','1'),(5344,336,'_edit_lock','1412543328:1'),(5345,337,'_wp_attached_file','2014/10/big-onie-1.jpg'),(5346,337,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:780;s:4:\"file\";s:22:\"2014/10/big-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5347,338,'_wp_attached_file','2014/10/big-onie-2.jpg'),(5348,338,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:776;s:4:\"file\";s:22:\"2014/10/big-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5349,339,'_wp_attached_file','2014/10/big-onie-3.jpg'),(5350,339,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:782;s:4:\"file\";s:22:\"2014/10/big-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5351,340,'_wp_attached_file','2014/10/big-onie-responsive.jpg'),(5352,340,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:700;s:6:\"height\";i:1081;s:4:\"file\";s:31:\"2014/10/big-onie-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-194x300.jpg\";s:5:\"width\";i:194;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"big-onie-responsive-663x1024.jpg\";s:5:\"width\";i:663;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5353,341,'_wp_attached_file','2014/10/th-onie-1.jpg'),(5354,341,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:351;s:4:\"file\";s:21:\"2014/10/th-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5355,342,'_wp_attached_file','2014/10/th-onie-2.jpg'),(5356,342,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:349;s:4:\"file\";s:21:\"2014/10/th-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5357,343,'_wp_attached_file','2014/10/th-onie-3.jpg'),(5358,343,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2014/10/th-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5359,344,'_wp_attached_file','2014/10/th-onie-responsive.jpg'),(5360,344,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:438;s:4:\"file\";s:30:\"2014/10/th-onie-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-300x292.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:292;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5361,336,'project_type','Web Site'),(5362,336,'languages','HTML5, Sass, Javascript'),(5363,336,'role','Full-Stack Developer'),(5364,336,'link','http://chooseonepercent.com/'),(5365,336,'company','Staplegun'),(5366,336,'company_link','http://staplegun.us/'),(5367,336,'thumbnail','341'),(5368,336,'image','337'),(5369,336,'caption','Home Page - Top'),(5370,336,'thumbnail','343'),(5371,336,'image','339'),(5372,336,'caption','Home Page - Bottom (Parallax Footer)'),(5373,336,'thumbnail','342'),(5374,336,'image','338'),(5375,336,'caption','Home Page - Spanish'),(5376,336,'thumbnail','344'),(5377,336,'image','340'),(5378,336,'caption','Responsive Design'),(5379,65,'project_type','Web Application'),(5380,65,'languages','Ember.js, Handlebars, Ruby on Rails, Faye.js, PostgreSQL'),(5381,65,'role','Back-End Developer - Team'),(5382,65,'link',''),(5383,65,'company','Brightbit'),(5384,65,'company_link','http://brightbit.com/'),(5385,65,'thumbnail','118'),(5386,65,'image','101'),(5387,65,'caption','Chat Room View'),(5388,65,'thumbnail','102'),(5389,65,'image','102'),(5390,65,'caption','Edit User View'),(5391,65,'thumbnail','120'),(5392,65,'image','103'),(5393,65,'caption','Edit Messages Instantly'),(5394,65,'thumbnail','121'),(5395,65,'image','104'),(5396,65,'caption','Log In View'),(5576,346,'_edit_last','1'),(5577,346,'_edit_lock','1415996550:1'),(5659,346,'dsq_thread_id','3093844327'),(5738,357,'_edit_last','1'),(5739,357,'_edit_lock','1421867672:1'),(5740,357,'_syntaxhighlighter_encoded','1'),(5741,357,'_oembed_286a0db3c7806c6f1856a0198b270234','{{unknown}}'),(6051,357,'dsq_thread_id','3157997784'),(7264,13,'header_image','145'),(7265,13,'post_type',''),(7266,13,'category_title','Development'),(7267,13,'color','#00e7ad'),(7268,13,'skill','Ruby / Rails'),(7269,13,'percentage','98'),(7270,13,'skill','Angular.js'),(7271,13,'percentage','93'),(7272,13,'skill','PHP / CMS Development'),(7273,13,'percentage','90'),(7274,13,'skill','Ember.js'),(7275,13,'percentage','90'),(7276,13,'skill','Node.js'),(7277,13,'percentage','84'),(7278,13,'skill','Relational Databases'),(7279,13,'percentage','90'),(7280,13,'skill','NoSQL Databases'),(7281,13,'percentage','86'),(7282,13,'skill','Java'),(7283,13,'percentage','70'),(7284,13,'skill','C / C++'),(7285,13,'percentage','70'),(7286,13,'skill','HTTP & REST APIs'),(7287,13,'percentage','95'),(7288,13,'skill','Go'),(7289,13,'percentage','60'),(7290,13,'category_title','Design'),(7291,13,'color','#146fe7'),(7292,13,'skill','HTML5'),(7293,13,'percentage','98'),(7294,13,'skill','CSS / Sass'),(7295,13,'percentage','96'),(7296,13,'skill','Javascript / jQuery'),(7297,13,'percentage','94'),(7298,13,'skill','Responsive Design'),(7299,13,'percentage','90'),(7300,13,'skill','D3.js'),(7301,13,'percentage','80'),(7302,13,'skill','Zurb Foundation'),(7303,13,'percentage','85'),(7304,13,'skill','Page & Image Optimization'),(7305,13,'percentage','94'),(7306,13,'skill','Browser Support (IE8+)'),(7307,13,'percentage','88'),(7308,13,'skill','Gimp'),(7309,13,'percentage','83'),(7310,13,'skill','SEO'),(7311,13,'percentage','80'),(7312,13,'skill','Accessibility'),(7313,13,'percentage','90'),(7314,13,'category_title','Dev Tools'),(7315,13,'color','#ff5e00'),(7316,13,'skill','Git'),(7317,13,'percentage','100'),(7318,13,'skill','Vim'),(7319,13,'percentage','98'),(7320,13,'skill','Shell'),(7321,13,'percentage','94'),(7322,13,'skill','Tmux'),(7323,13,'percentage','90'),(7324,13,'skill','Grunt.js'),(7325,13,'percentage','95'),(7326,13,'skill','Sass'),(7327,13,'percentage','94'),(7328,13,'skill','Coffeescript'),(7329,13,'percentage','90'),(7330,13,'skill','Haml / Slim'),(7331,13,'percentage','87'),(7332,13,'skill','Gtk+'),(7333,13,'percentage','84'),(7334,13,'skill','DNS'),(7335,13,'percentage','85'),(7336,13,'skill','Heroku'),(7337,13,'percentage','85'),(8091,381,'_edit_last','1'),(8092,381,'_edit_lock','1424492497:1'),(8108,383,'_edit_last','1'),(8109,383,'_edit_lock','1421958922:1'),(8114,383,'dsq_thread_id','3446070632'),(8145,388,'title','Galleries'),(8146,388,'name','galleries'),(8147,388,'has_variations',''),(8148,388,'variation','0'),(8149,388,'filter','raw'),(8150,388,'returns','WyJpbWFnZSJd'),(8151,388,'aliases','WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXQ=='),(8152,388,'id_field','ID'),(8153,389,'title','Albums'),(8154,389,'name','albums'),(8155,389,'has_variations',''),(8156,389,'variation','0'),(8157,389,'filter','raw'),(8158,389,'returns','WyJnYWxsZXJ5IiwiYWxidW0iXQ=='),(8159,389,'aliases','WyJhbGJ1bSJd'),(8160,389,'id_field','ID'),(8161,390,'title','Tags'),(8162,390,'name','tags'),(8163,390,'has_variations',''),(8164,390,'variation','0'),(8165,390,'filter','raw'),(8166,390,'returns','WyJpbWFnZSJd'),(8167,390,'aliases','WyJ0YWciLCJpbWFnZV90YWciLCJpbWFnZV90YWdzIl0='),(8168,390,'id_field','ID'),(8169,391,'title','Random Images'),(8170,391,'has_variations','1'),(8171,391,'name','random_images'),(8172,391,'variation','0'),(8173,391,'filter','raw'),(8174,391,'returns','WyJpbWFnZSJd'),(8175,391,'aliases','WyJyYW5kb20iLCJyYW5kb21faW1hZ2UiXQ=='),(8176,391,'id_field','ID'),(8177,392,'title','Recent images'),(8178,392,'name','recent_images'),(8179,392,'has_variations',''),(8180,392,'variation','0'),(8181,392,'filter','raw'),(8182,392,'returns','WyJpbWFnZSJd'),(8183,392,'aliases','WyJyZWNlbnQiLCJyZWNlbnRfaW1hZ2UiXQ=='),(8184,392,'id_field','ID'),(8185,393,'name','none'),(8186,393,'title','No lightbox'),(8187,393,'code',''),(8188,393,'styles',''),(8189,393,'scripts',''),(8190,393,'filter','raw'),(8191,393,'values','W10='),(8192,393,'i18n','W10='),(8193,393,'id_field','ID'),(8194,393,'display_settings','W10='),(8195,394,'name','lightbox'),(8196,394,'title','Lightbox'),(8197,394,'code','class=\'ngg_lightbox\''),(8198,394,'styles','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.css'),(8199,394,'scripts','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.min.js\nphotocrati-lightbox#jquery.lightbox/nextgen_lightbox_init.js'),(8200,394,'filter','raw'),(8201,394,'values','eyJuZXh0Z2VuX2xpZ2h0Ym94X2xvYWRpbmdfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1pY28tbG9hZGluZy5naWYiLCJuZXh0Z2VuX2xpZ2h0Ym94X2Nsb3NlX2J0bl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLWNsb3NlLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX3ByZXZfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1wcmV2LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX25leHRfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1uZXh0LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYmxhbmtfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1ibGFuay5naWYifQ=='),(8202,394,'i18n','W10='),(8203,394,'id_field','ID'),(8204,394,'display_settings','W10='),(8205,395,'name','fancybox'),(8206,395,'title','Fancybox'),(8207,395,'code','class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"'),(8208,395,'styles','photocrati-lightbox#fancybox/jquery.fancybox-1.3.4.css'),(8209,395,'scripts','photocrati-lightbox#fancybox/jquery.easing-1.3.pack.js\nphotocrati-lightbox#fancybox/jquery.fancybox-1.3.4.pack.js\nphotocrati-lightbox#fancybox/nextgen_fancybox_init.js'),(8210,395,'filter','raw'),(8211,395,'values','W10='),(8212,395,'i18n','W10='),(8213,395,'id_field','ID'),(8214,395,'display_settings','W10='),(8215,396,'name','highslide'),(8216,396,'title','Highslide'),(8217,396,'code','class=\"highslide\" onclick=\"return hs.expand(this, {slideshowGroup: \'%GALLERY_NAME%\'});\"'),(8218,396,'styles','photocrati-lightbox#highslide/highslide.css'),(8219,396,'scripts','photocrati-lightbox#highslide/highslide-full.packed.js\nphotocrati-lightbox#highslide/nextgen_highslide_init.js'),(8220,396,'filter','raw'),(8221,396,'values','eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifQ=='),(8222,396,'i18n','eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9'),(8223,396,'id_field','ID'),(8224,396,'display_settings','W10='),(8225,397,'name','shutter'),(8226,397,'title','Shutter'),(8227,397,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8228,397,'styles','photocrati-lightbox#shutter/shutter.css'),(8229,397,'scripts','photocrati-lightbox#shutter/shutter.js\nphotocrati-lightbox#shutter/nextgen_shutter.js'),(8230,397,'filter','raw'),(8231,397,'values','W10='),(8232,397,'i18n','eyJtc2dMb2FkaW5nIjoiTCBPIEEgRCBJIE4gRyIsIm1zZ0Nsb3NlIjoiQ2xpY2sgdG8gQ2xvc2UifQ=='),(8233,397,'id_field','ID'),(8234,397,'display_settings','W10='),(8235,398,'name','shutter2'),(8236,398,'title','Shutter 2'),(8237,398,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8238,398,'styles','photocrati-lightbox#shutter_reloaded/shutter.css'),(8239,398,'scripts','photocrati-lightbox#shutter_reloaded/shutter.js\nphotocrati-lightbox#shutter_reloaded/nextgen_shutter_reloaded.js'),(8240,398,'filter','raw'),(8241,398,'values','W10='),(8242,398,'i18n','WyJQcmV2aW91cyIsIk5leHQiLCJDbG9zZSIsIkZ1bGwgU2l6ZSIsIkZpdCB0byBTY3JlZW4iLCJJbWFnZSIsIm9mIiwiTG9hZGluZy4uLiJd'),(8243,398,'id_field','ID'),(8244,398,'display_settings','W10='),(8245,399,'name','thickbox'),(8246,399,'title','Thickbox'),(8247,399,'code','class=\'thickbox\' rel=\'%GALLERY_NAME%\''),(8248,399,'styles','wordpress#thickbox'),(8249,399,'scripts','photocrati-lightbox#thickbox/nextgen_thickbox_init.js\nwordpress#thickbox'),(8250,399,'filter','raw'),(8251,399,'values','W10='),(8252,399,'i18n','eyJuZXh0IjoiTmV4dCAmZ3Q7IiwicHJldiI6IiZsdDsgUHJldiIsImltYWdlIjoiSW1hZ2UiLCJvZiI6Im9mIiwiY2xvc2UiOiJDbG9zZSIsIm5vaWZyYW1lcyI6IlRoaXMgZmVhdHVyZSByZXF1aXJlcyBpbmxpbmUgZnJhbWVzLiBZb3UgaGF2ZSBpZnJhbWVzIGRpc2FibGVkIG9yIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZW0uIn0='),(8253,399,'id_field','ID'),(8254,399,'display_settings','W10='),(8255,400,'title','NextGEN Basic Compact Album'),(8256,400,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/compact_preview.jpg'),(8257,400,'default_source','albums'),(8258,400,'view_order','10200'),(8259,400,'name','photocrati-nextgen_basic_compact_album'),(8260,400,'installed_at_version','2.0.66.37'),(8261,400,'filter','raw'),(8262,400,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8263,400,'id_field','ID'),(8264,400,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJnYWxsZXJ5X2Rpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIn0='),(8265,401,'title','NextGEN Basic Extended Album'),(8266,401,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/extended_preview.jpg'),(8267,401,'default_source','albums'),(8268,401,'view_order','10210'),(8269,401,'name','photocrati-nextgen_basic_extended_album'),(8270,401,'installed_at_version','2.0.66.37'),(8271,401,'filter','raw'),(8272,401,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8273,401,'id_field','ID'),(8274,401,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJvdmVycmlkZV90aHVtYm5haWxfc2V0dGluZ3MiOjAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwidGh1bWJuYWlsX3F1YWxpdHkiOjEwMCwidGh1bWJuYWlsX2Nyb3AiOnRydWUsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifQ=='),(8275,402,'title','NextGEN Basic Thumbnails'),(8276,402,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/thumb_preview.jpg'),(8277,402,'default_source','galleries'),(8278,402,'view_order','10000'),(8279,402,'name','photocrati-nextgen_basic_thumbnails'),(8280,402,'installed_at_version','2.0.66.37'),(8281,402,'filter','raw'),(8282,402,'entity_types','WyJpbWFnZSJd'),(8283,402,'id_field','ID'),(8284,402,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJpbWFnZXNfcGVyX3BhZ2UiOiIyMCIsIm51bWJlcl9vZl9jb2x1bW5zIjowLCJ0aHVtYm5haWxfd2lkdGgiOjEyMCwidGh1bWJuYWlsX2hlaWdodCI6OTAsInNob3dfYWxsX2luX2xpZ2h0Ym94IjowLCJhamF4X3BhZ2luYXRpb24iOjAsInVzZV9pbWFnZWJyb3dzZXJfZWZmZWN0IjowLCJ0ZW1wbGF0ZSI6IiIsImRpc3BsYXlfbm9faW1hZ2VzX2Vycm9yIjoxLCJkaXNhYmxlX3BhZ2luYXRpb24iOjAsInNob3dfc2xpZGVzaG93X2xpbmsiOjEsInNsaWRlc2hvd19saW5rX3RleHQiOiJbU2hvdyBzbGlkZXNob3ddIiwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfcXVhbGl0eSI6IjEwMCIsInRodW1ibmFpbF9jcm9wIjoxLCJ0aHVtYm5haWxfd2F0ZXJtYXJrIjowLCJwaWNsZW5zX2xpbmtfdGV4dCI6IltTaG93IFBpY0xlbnNdIiwic2hvd19waWNsZW5zX2xpbmsiOjAsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8285,403,'title','NextGEN Basic Slideshow'),(8286,403,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/slideshow_preview.jpg'),(8287,403,'default_source','galleries'),(8288,403,'view_order','10010'),(8289,403,'name','photocrati-nextgen_basic_slideshow'),(8290,403,'installed_at_version','2.0.66.37'),(8291,403,'filter','raw'),(8292,403,'entity_types','WyJpbWFnZSJd'),(8293,403,'id_field','ID'),(8294,403,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8295,404,'title','NextGEN Basic ImageBrowser'),(8296,404,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_imagebrowser/static/preview.jpg'),(8297,404,'default_source','galleries'),(8298,404,'view_order','10020'),(8299,404,'name','photocrati-nextgen_basic_imagebrowser'),(8300,404,'installed_at_version','2.0.66.37'),(8301,404,'filter','raw'),(8302,404,'entity_types','WyJpbWFnZSJd'),(8303,404,'id_field','ID'),(8304,404,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8305,405,'title','NextGEN Basic SinglePic'),(8306,405,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_singlepic/static/preview.gif'),(8307,405,'default_source','galleries'),(8308,405,'view_order','10060'),(8309,405,'name','photocrati-nextgen_basic_singlepic'),(8310,405,'installed_at_version','2.0.66.37'),(8311,405,'filter','raw'),(8312,405,'entity_types','WyJpbWFnZSJd'),(8313,405,'id_field','ID'),(8314,405,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ3aWR0aCI6IiIsImhlaWdodCI6IiIsIm1vZGUiOiIiLCJkaXNwbGF5X3dhdGVybWFyayI6MCwiZGlzcGxheV9yZWZsZWN0aW9uIjowLCJmbG9hdCI6IiIsImxpbmsiOiIiLCJsaW5rX3RhcmdldCI6Il9ibGFuayIsInF1YWxpdHkiOjEwMCwiY3JvcCI6MCwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0='),(8315,406,'title','NextGEN Basic TagCloud'),(8316,406,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_tagcloud/static/preview.gif'),(8317,406,'default_source','tags'),(8318,406,'view_order','10100'),(8319,406,'name','photocrati-nextgen_basic_tagcloud'),(8320,406,'installed_at_version','2.0.66.37'),(8321,406,'filter','raw'),(8322,406,'entity_types','WyJpbWFnZSJd'),(8323,406,'id_field','ID'),(8324,406,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJkaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsIm51bWJlciI6NDV9'),(8325,407,'filter','raw'),(8326,407,'id_field','ID'),(8327,408,'filter','raw'),(8328,408,'id_field','ID'),(8329,409,'filter','raw'),(8330,409,'id_field','ID'),(8331,410,'filter','raw'),(8332,410,'id_field','ID'),(8798,381,'_syntaxhighlighter_encoded','1'),(8800,381,'_oembed_9dc20beeef6461f9c5efb3524dbf60a4','{{unknown}}'),(8801,381,'_oembed_7e554423ce8327dc8f05893a85da539e','{{unknown}}'),(8802,381,'_oembed_7061682afbac650ece3c83cc7fd58af3','{{unknown}}'),(8840,421,'_wp_attached_file','2014/06/oea_big_1.jpg'),(8841,421,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:705;s:4:\"file\";s:21:\"2014/06/oea_big_1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_1-1024x602.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:602;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8842,422,'_wp_attached_file','2014/06/oea_big_2.jpg'),(8843,422,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:793;s:4:\"file\";s:21:\"2014/06/oea_big_2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_2-1024x677.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:677;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8844,423,'_wp_attached_file','2014/06/oea_big_3.jpg'),(8845,423,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:790;s:4:\"file\";s:21:\"2014/06/oea_big_3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_3-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_3-1024x674.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:674;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8846,424,'_wp_attached_file','2014/06/oea_big_4.jpg'),(8847,424,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:817;s:4:\"file\";s:21:\"2014/06/oea_big_4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_4-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_4-1024x697.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:697;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8848,425,'_wp_attached_file','2014/06/oea_th_1.jpg'),(8849,425,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:264;s:4:\"file\";s:20:\"2014/06/oea_th_1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8850,426,'_wp_attached_file','2014/06/oea_th_2.jpg'),(8851,426,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:297;s:4:\"file\";s:20:\"2014/06/oea_th_2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8852,427,'_wp_attached_file','2014/06/oea_th_3.jpg'),(8853,427,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:296;s:4:\"file\";s:20:\"2014/06/oea_th_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_3-300x197.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:197;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8854,428,'_wp_attached_file','2014/06/oea_th_4.jpg'),(8855,428,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:307;s:4:\"file\";s:20:\"2014/06/oea_th_4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_4-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8904,429,'_edit_last','1'),(8905,429,'_edit_lock','1424465532:1'),(8924,429,'project_type','Web Application'),(8925,429,'languages','HTML5, Sass, Javascript, Browserify'),(8926,429,'role','Full-Stack Developer'),(8927,429,'link','http://notohighstakes.com/'),(8928,429,'company','Staplegun'),(8929,429,'company_link','http://staplegun.us/'),(8930,429,'thumbnail','428'),(8931,429,'image','424'),(8932,429,'caption','No To High Stakes - Top'),(8933,429,'thumbnail','427'),(8934,429,'image','423'),(8935,429,'caption','No To High Stakes - Bottom'),(8936,429,'thumbnail','426'),(8937,429,'image','422'),(8938,429,'caption','Find Your Representatives'),(8939,429,'thumbnail','425'),(8940,429,'image','421'),(8941,429,'caption','Facebook Your Rep'),(8946,381,'dsq_thread_id','3533827247'),(9315,30,'header_image','35'),(9316,30,'post_type','project'),(9317,66,'project_type','Web Application'),(9318,66,'languages','Ruby on Rails, Javascript, PostgreSQL'),(9319,66,'role','Developer'),(9320,66,'link',''),(9321,66,'company','Brightbit'),(9322,66,'company_link','http://brightbit.com/'),(9323,66,'thumbnail','90'),(9324,66,'image','78'),(9325,66,'caption','Home Page (No Icons)'),(9326,66,'thumbnail','91'),(9327,66,'image','79'),(9328,66,'caption','Index View (No Icons)'),(9329,66,'thumbnail','92'),(9330,66,'image','80'),(9331,66,'caption','Show View (No Icons)'),(9332,66,'thumbnail','93'),(9333,66,'image','81'),(9334,66,'caption','Edit View (No Icons)'),(9335,67,'project_type','Web Application'),(9336,67,'languages','Ruby on Rails, Javascript, PostgreSQL, E-Commerce (Stripe)'),(9337,67,'role','Back-End Developer - Team'),(9338,67,'link',''),(9339,67,'company','Brightbit'),(9340,67,'company_link','http://brightbit.com/'),(9341,67,'thumbnail','124'),(9342,67,'image','107'),(9343,67,'caption','Home Page'),(9344,67,'thumbnail','125'),(9345,67,'image','108'),(9346,67,'caption','Timeslots Index View'),(9347,67,'thumbnail','126'),(9348,67,'image','109'),(9349,67,'caption','New Booking View - Payments Handled via Stripe API'),(9350,438,'_wp_attached_file','2014/06/go_wiki_th.jpg'),(9351,438,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:850;s:6:\"height\";i:450;s:4:\"file\";s:22:\"2014/06/go_wiki_th.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-300x159.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:159;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9376,4,'thumbnail','257'),(9377,4,'label','OK Commerce'),(9378,4,'url','http://new.okcommerce.gov'),(9379,4,'thumbnail','428'),(9380,4,'label','OEA'),(9381,4,'url','http://notohighstakes.com/'),(9382,4,'thumbnail','341'),(9383,4,'label','ONIE'),(9384,4,'url','http://chooseonepercent.com/'),(9385,4,'thumbnail','217'),(9386,4,'label','77 Energy'),(9387,4,'url','http://77nrg.com'),(9388,4,'thumbnail','98'),(9389,4,'label','Enviro Systems'),(9390,4,'url','http://www.enviro-ok.com/'),(9391,4,'thumbnail','137'),(9392,4,'label','Total Environment'),(9393,4,'url','http://totalenvironmentinc.com/'),(9394,4,'thumbnail','117'),(9395,4,'label','Tea Timers'),(9396,4,'url','http://labs.thesocietea.org/tea-timer/'),(9397,4,'thumbnail','94'),(9398,4,'label','Carnegie Chart'),(9399,4,'url','http://labs.thesocietea.org/carnegie-chart/'),(9425,443,'_edit_last','1'),(9426,443,'_edit_lock','1424979291:1'),(9470,443,'_syntaxhighlighter_encoded','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=459 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (4,1,'2014-06-02 22:41:51','2014-06-02 22:41:51','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','publish','open','open','','home','','','2015-02-25 14:35:25','2015-02-25 14:35:25','',0,'http://localhost:8000/?page_id=4',0,'page','',0),(5,1,'2014-06-02 22:41:51','2014-06-02 22:41:51','','Home','','inherit','open','open','','4-revision-v1','','','2014-06-02 22:41:51','2014-06-02 22:41:51','',4,'http://localhost:8000/?p=5',0,'revision','',0),(6,1,'2014-06-03 03:57:47','2014-06-03 03:57:47','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','publish','open','open','','about','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',0,'http://localhost:8000/?page_id=6',0,'page','',1),(7,1,'2014-06-03 03:57:47','2014-06-03 03:57:47','','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 03:57:47','2014-06-03 03:57:47','',6,'http://localhost:8000/?p=7',0,'revision','',0),(8,1,'2014-06-03 04:30:00','2014-06-03 04:30:00','','Subpage','','publish','closed','closed','','subpage','','','2014-06-10 23:14:17','2014-06-10 23:14:17','',0,'http://localhost:8000/?post_type=cfs&#038;p=8',0,'cfs','',0),(9,1,'2014-06-03 04:30:22','2014-06-03 04:30:22','','beer-header','','inherit','open','open','','beer-header','','','2014-06-03 04:30:22','2014-06-03 04:30:22','',6,'http://thesocietea.org/wp-content/uploads/2014/06/beer-header.jpg',0,'attachment','image/jpeg',0),(13,1,'2014-06-03 04:35:26','2014-06-03 04:35:26','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','publish','open','open','','hire-me','','','2014-12-03 23:15:42','2014-12-03 23:15:42','',0,'http://localhost:8000/?page_id=13',0,'page','',0),(14,1,'2014-06-03 04:35:26','2014-06-03 04:35:26','','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-03 04:35:26','2014-06-03 04:35:26','',13,'http://localhost:8000/?p=14',0,'revision','',0),(16,1,'2014-06-03 04:35:37','2014-06-03 04:35:37','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','publish','open','closed','','blog','','','2014-07-28 01:55:02','2014-07-28 01:55:02','',0,'http://localhost:8000/?page_id=16',0,'page','',0),(17,1,'2014-06-03 04:35:37','2014-06-03 04:35:37','','Blog','','inherit','open','open','','16-revision-v1','','','2014-06-03 04:35:37','2014-06-03 04:35:37','',16,'http://localhost:8000/?p=17',0,'revision','',0),(25,1,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','25','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://localhost:8000/?p=25',1,'nav_menu_item','',0),(26,1,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','26','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://localhost:8000/?p=26',2,'nav_menu_item','',0),(27,1,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','27','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://localhost:8000/?p=27',6,'nav_menu_item','',0),(30,1,'2014-06-03 04:44:37','2014-06-03 04:44:37','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','publish','open','open','','projects','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',0,'http://localhost:8000/?page_id=30',0,'page','',0),(31,1,'2014-06-03 04:44:37','2014-06-03 04:44:37','','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-03 04:44:37','2014-06-03 04:44:37','',30,'http://localhost:8000/?p=31',0,'revision','',0),(32,1,'2014-06-03 04:44:54','2014-06-03 04:44:54',' ','','','publish','open','open','','32','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://localhost:8000/?p=32',3,'nav_menu_item','',0),(33,1,'2014-06-03 04:46:17','2014-06-03 04:46:17','<p style=\"color: #000000;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus luctus libero vel laoreet ornare. Vestibulum non porttitor eros. Curabitur nulla nulla, eleifend in mi ac, accumsan sodales est. Nulla et orci nec massa rhoncus ultrices. Praesent quis arcu et diam euismod consectetur vitae sed sapien. Suspendisse pulvinar tempor gravida. Cras urna felis, viverra aliquam magna ac, imperdiet sodales leo. Proin cursus condimentum mi eu lacinia. Aenean quis dolor volutpat, vehicula ante in, malesuada augue. Nunc purus purus, vulputate vitae ornare vitae, pellentesque nec nisl. Duis eu accumsan lacus, eu lobortis leo. Donec vel mi lacus. Nunc risus risus, ullamcorper sed mi vel, sodales viverra leo. Pellentesque tincidunt at tellus id dictum. Vivamus euismod tempus magna a venenatis. Nunc at sagittis metus, eu mollis urna.</p>\r\n<p style=\"color: #000000;\">Proin scelerisque at odio vitae porttitor. Aenean purus lorem, consequat sit amet magna et, tristique condimentum augue. Ut convallis dapibus volutpat. Sed interdum, velit eu feugiat euismod, purus nulla tincidunt lorem, at molestie arcu libero ac leo. Nam ultricies mauris neque, et tincidunt magna tincidunt eu. Morbi id elementum massa. Donec iaculis magna purus, vel scelerisque sem molestie nec. Pellentesque ipsum purus, posuere pretium rhoncus ac, lacinia sed enim. Morbi non feugiat dolor. Fusce bibendum ullamcorper urna, non volutpat neque pharetra ac. Morbi ut ipsum non lacus pharetra luctus suscipit eu diam. Curabitur sodales vitae mi ac feugiat. Nulla egestas vel enim eu dictum.</p>\r\n<p style=\"color: #000000;\">Integer urna leo, dapibus elementum malesuada ut, commodo id risus. Donec sed sem sit amet libero gravida bibendum. Nullam a faucibus velit. In viverra eu ante id fringilla. Fusce vulputate suscipit leo rhoncus molestie. Pellentesque non libero id velit cursus placerat. Maecenas ac neque mauris. Etiam faucibus lectus ante. Nam adipiscing tristique fermentum. Aenean dolor dui, ultrices sed enim sed, pretium tempus purus. In luctus massa neque, et luctus metus accumsan a. Sed sed commodo ante. Vestibulum tempus cursus tincidunt. Suspendisse non lorem sit amet lectus interdum gravida.</p>','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 04:46:17','2014-06-03 04:46:17','',6,'http://localhost:8000/?p=33',0,'revision','',0),(34,1,'2014-06-06 05:09:43','2014-06-06 05:09:43','','About','','inherit','open','open','','6-revision-v1','','','2014-06-06 05:09:43','2014-06-06 05:09:43','',6,'http://localhost:8000/?p=34',0,'revision','',0),(35,1,'2014-06-06 18:05:54','2014-06-06 18:05:54','','stockvault--atlantic-sunset135250','','inherit','open','open','','stockvault-atlantic-sunset135250','','','2014-06-06 18:05:54','2014-06-06 18:05:54','',30,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-atlantic-sunset135250.jpg',0,'attachment','image/jpeg',0),(36,1,'2014-06-06 18:11:31','2014-06-06 18:11:31','Check out some of the projects I\'ve worked on recently:','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-06 18:11:31','2014-06-06 18:11:31','',30,'http://localhost:8000/?p=36',0,'revision','',0),(37,1,'2014-06-06 18:14:38','2014-06-06 18:14:38','','Project Fields','','publish','closed','closed','','project-screenshots','','','2014-06-06 21:53:44','2014-06-06 21:53:44','',0,'http://localhost:8000/?post_type=cfs&#038;p=37',0,'cfs','',0),(38,1,'2014-06-06 18:15:59','2014-06-06 18:15:59','This is Total Environment Inc.','Total Environment Inc.','','publish','closed','closed','','total-environment-inc','','','2014-08-18 22:11:45','2014-08-18 22:11:45','',0,'http://localhost:8000/?post_type=project&#038;p=38',8,'project','',0),(39,1,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-77nrg','','inherit','open','open','','th-77nrg','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-77nrg.png',0,'attachment','image/png',0),(40,1,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-baton','','inherit','open','open','','th-baton','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton.png',0,'attachment','image/png',0),(41,1,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-carnegie-chart','','inherit','open','open','','th-carnegie-chart','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-carnegie-chart.png',0,'attachment','image/png',0),(42,1,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-enviro','','inherit','open','open','','th-enviro','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-enviro.png',0,'attachment','image/png',0),(43,1,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-soundingboard','','inherit','open','open','','th-soundingboard','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-soundingboard.png',0,'attachment','image/png',0),(44,1,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-chart','','inherit','open','open','','th-tea-chart','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-chart.png',0,'attachment','image/png',0),(45,1,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-timers','','inherit','open','open','','th-tea-timers','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-timers.png',0,'attachment','image/png',0),(46,1,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tle','','inherit','open','open','','th-tle','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle.png',0,'attachment','image/png',0),(47,1,'2014-06-06 21:03:45','2014-06-06 21:03:45','','big-77-1','','inherit','open','open','','big-77-1','','','2014-06-06 21:03:45','2014-06-06 21:03:45','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-1.jpg',0,'attachment','image/jpeg',0),(48,1,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-2','','inherit','open','open','','big-77-2','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-2.jpg',0,'attachment','image/jpeg',0),(49,1,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-3','','inherit','open','open','','big-77-3','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-3.jpg',0,'attachment','image/jpeg',0),(50,1,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-77-4','','inherit','open','open','','big-77-4','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-4.jpg',0,'attachment','image/jpeg',0),(51,1,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-1','','inherit','open','open','','big-tle-1','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-1.jpg',0,'attachment','image/jpeg',0),(52,1,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-2','','inherit','open','open','','big-tle-2','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-2.jpg',0,'attachment','image/jpeg',0),(53,1,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-3','','inherit','open','open','','big-tle-3','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-3.jpg',0,'attachment','image/jpeg',0),(54,1,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-4','','inherit','open','open','','big-tle-4','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-4.jpg',0,'attachment','image/jpeg',0),(55,1,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-1','','inherit','open','open','','th-77-1','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-1.jpg',0,'attachment','image/jpeg',0),(56,1,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-2','','inherit','open','open','','th-77-2','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-2.jpg',0,'attachment','image/jpeg',0),(57,1,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-3','','inherit','open','open','','th-77-3','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-3.jpg',0,'attachment','image/jpeg',0),(58,1,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-77-4','','inherit','open','open','','th-77-4','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-4.jpg',0,'attachment','image/jpeg',0),(60,1,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-2','','inherit','open','open','','th-tle-2','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-2.jpg',0,'attachment','image/jpeg',0),(61,1,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-3','','inherit','open','open','','th-tle-3','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-3.jpg',0,'attachment','image/jpeg',0),(62,1,'2014-06-06 21:04:06','2014-06-06 21:04:06','','th-tle-4','','inherit','open','open','','th-tle-4','','','2014-06-06 21:04:06','2014-06-06 21:04:06','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-4.jpg',0,'attachment','image/jpeg',0),(63,1,'2014-06-06 21:10:11','2014-06-06 21:10:11','This is 77 Energy','77 Energy','','publish','closed','closed','','77-energy','','','2014-08-18 22:10:40','2014-08-18 22:10:40','',0,'http://localhost:8000/?post_type=project&#038;p=63',1,'project','',0),(64,1,'2014-06-08 03:04:15','2014-06-08 03:04:15','','Enviro Systems','','publish','closed','closed','','enviro-systems','','','2014-08-18 22:10:49','2014-08-18 22:10:49','',0,'http://localhost:8000/?post_type=project&#038;p=64',2,'project','',0),(65,1,'2014-06-08 03:12:01','2014-06-08 03:12:01','','Kikuchat 2.0','','publish','closed','closed','','kikuchat-2-0','','','2014-10-05 21:11:33','2014-10-05 21:11:33','',0,'http://localhost:8000/?post_type=project&#038;p=65',3,'project','',0),(66,1,'2014-06-08 03:13:44','2014-06-08 03:13:44','','Baton','','publish','closed','closed','','baton','','','2015-02-25 14:29:13','2015-02-25 14:29:13','',0,'http://localhost:8000/?post_type=project&#038;p=66',7,'project','',0),(67,1,'2014-06-08 03:15:11','2014-06-08 03:15:11','','Soundingboard','','publish','closed','closed','','soundingboard','','','2015-02-25 14:29:33','2015-02-25 14:29:33','',0,'http://localhost:8000/?post_type=project&#038;p=67',9,'project','',0),(68,1,'2014-06-08 03:18:14','2014-06-08 03:18:14','','Markdown Checkboxes','','publish','closed','closed','','markdown-checkboxes','','','2014-08-18 22:11:30','2014-08-18 22:11:30','',0,'http://localhost:8000/?post_type=project&#038;p=68',6,'project','',0),(72,1,'2014-06-08 04:08:14','2014-06-08 04:08:14','','big-77-responsive','','inherit','open','open','','big-77-responsive','','','2014-06-08 04:08:14','2014-06-08 04:08:14','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(73,1,'2014-06-08 04:08:15','2014-06-08 04:08:15','','big-es-responsive','','inherit','open','open','','big-es-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-responsive.jpg',0,'attachment','image/jpeg',0),(74,1,'2014-06-08 04:08:15','2014-06-08 04:08:15','','th-77-responsive','','inherit','open','open','','th-77-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(76,1,'2014-06-08 05:59:32','2014-06-08 05:59:32','','big-tle-responsive','','inherit','open','open','','big-tle-responsive','','','2014-06-08 05:59:32','2014-06-08 05:59:32','',38,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-responsive.jpg',0,'attachment','image/jpeg',0),(78,1,'2014-06-08 06:09:38','2014-06-08 06:09:38','','big-bt-1','','inherit','open','open','','big-bt-1','','','2014-06-08 06:09:38','2014-06-08 06:09:38','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-1.jpg',0,'attachment','image/jpeg',0),(79,1,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-2','','inherit','open','open','','big-bt-2','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-2.jpg',0,'attachment','image/jpeg',0),(80,1,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-3','','inherit','open','open','','big-bt-3','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-3.jpg',0,'attachment','image/jpeg',0),(81,1,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-4','','inherit','open','open','','big-bt-4','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-4.jpg',0,'attachment','image/jpeg',0),(82,1,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-cc-1','','inherit','open','open','','big-cc-1','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-1.jpg',0,'attachment','image/jpeg',0),(83,1,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-2','','inherit','open','open','','big-cc-2','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-2.jpg',0,'attachment','image/jpeg',0),(84,1,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-3','','inherit','open','open','','big-cc-3','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-3.jpg',0,'attachment','image/jpeg',0),(85,1,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-responsive','','inherit','open','open','','big-cc-responsive','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-responsive.jpg',0,'attachment','image/jpeg',0),(86,1,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-es-1','','inherit','open','open','','big-es-1','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-1.jpg',0,'attachment','image/jpeg',0),(87,1,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-2','','inherit','open','open','','big-es-2','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-2.jpg',0,'attachment','image/jpeg',0),(88,1,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-3','','inherit','open','open','','big-es-3','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-3.jpg',0,'attachment','image/jpeg',0),(89,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-baton','','inherit','open','open','','th-baton-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton1.png',0,'attachment','image/png',0),(90,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-1','','inherit','open','open','','th-bt-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-1.jpg',0,'attachment','image/jpeg',0),(91,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-2','','inherit','open','open','','th-bt-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-2.jpg',0,'attachment','image/jpeg',0),(92,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-3','','inherit','open','open','','th-bt-3','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-3.jpg',0,'attachment','image/jpeg',0),(93,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-4','','inherit','open','open','','th-bt-4','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-4.jpg',0,'attachment','image/jpeg',0),(94,1,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-cc-1','','inherit','open','open','','th-cc-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-1.jpg',0,'attachment','image/jpeg',0),(95,1,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-2','','inherit','open','open','','th-cc-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-2.jpg',0,'attachment','image/jpeg',0),(96,1,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-3','','inherit','open','open','','th-cc-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-3.jpg',0,'attachment','image/jpeg',0),(98,1,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-1','','inherit','open','open','','th-es-1','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-1.jpg',0,'attachment','image/jpeg',0),(99,1,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-2','','inherit','open','open','','th-es-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-2.jpg',0,'attachment','image/jpeg',0),(100,1,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-3','','inherit','open','open','','th-es-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-3.jpg',0,'attachment','image/jpeg',0),(101,1,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-1','','inherit','open','open','','big-kk-1','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-1.jpg',0,'attachment','image/jpeg',0),(102,1,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-2','','inherit','open','open','','big-kk-2','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-2.jpg',0,'attachment','image/jpeg',0),(103,1,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-3','','inherit','open','open','','big-kk-3','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-3.jpg',0,'attachment','image/jpeg',0),(104,1,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-4','','inherit','open','open','','big-kk-4','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-4.jpg',0,'attachment','image/jpeg',0),(105,1,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-1','','inherit','open','open','','big-mc-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-1.jpg',0,'attachment','image/jpeg',0),(106,1,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-2','','inherit','open','open','','big-mc-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-2.jpg',0,'attachment','image/jpeg',0),(107,1,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-1','','inherit','open','open','','big-sb-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-1.jpg',0,'attachment','image/jpeg',0),(108,1,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-2','','inherit','open','open','','big-sb-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-2.jpg',0,'attachment','image/jpeg',0),(109,1,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-sb-3','','inherit','open','open','','big-sb-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-3.jpg',0,'attachment','image/jpeg',0),(110,1,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-1','','inherit','open','open','','big-tc-1','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-1.jpg',0,'attachment','image/jpeg',0),(111,1,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-2','','inherit','open','open','','big-tc-2','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-2.jpg',0,'attachment','image/jpeg',0),(112,1,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-3','','inherit','open','open','','big-tc-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-3.jpg',0,'attachment','image/jpeg',0),(113,1,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tc-responsive','','inherit','open','open','','big-tc-responsive','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-responsive.jpg',0,'attachment','image/jpeg',0),(114,1,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-1','','inherit','open','open','','big-tt-1','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-1.jpg',0,'attachment','image/jpeg',0),(115,1,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-2','','inherit','open','open','','big-tt-2','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-2.jpg',0,'attachment','image/jpeg',0),(116,1,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-3','','inherit','open','open','','big-tt-3','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-3.jpg',0,'attachment','image/jpeg',0),(117,1,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-responsive','','inherit','open','open','','big-tt-responsive','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-responsive.jpg',0,'attachment','image/jpeg',0),(118,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-1','','inherit','open','open','','th-kk-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-1.jpg',0,'attachment','image/jpeg',0),(119,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-2','','inherit','open','open','','th-kk-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-2.jpg',0,'attachment','image/jpeg',0),(120,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-3','','inherit','open','open','','th-kk-3','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-3.jpg',0,'attachment','image/jpeg',0),(121,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-4','','inherit','open','open','','th-kk-4','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-4.jpg',0,'attachment','image/jpeg',0),(122,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-1','','inherit','open','open','','th-mc-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-1.jpg',0,'attachment','image/jpeg',0),(123,1,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-2','','inherit','open','open','','th-mc-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-2.jpg',0,'attachment','image/jpeg',0),(124,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-1','','inherit','open','open','','th-sb-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-1.jpg',0,'attachment','image/jpeg',0),(125,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-2','','inherit','open','open','','th-sb-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-2.jpg',0,'attachment','image/jpeg',0),(126,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-3','','inherit','open','open','','th-sb-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-3.jpg',0,'attachment','image/jpeg',0),(127,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-1','','inherit','open','open','','th-tc-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-1.jpg',0,'attachment','image/jpeg',0),(128,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-2','','inherit','open','open','','th-tc-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-2.jpg',0,'attachment','image/jpeg',0),(129,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-3','','inherit','open','open','','th-tc-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-3.jpg',0,'attachment','image/jpeg',0),(130,1,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-responsive','','inherit','open','open','','th-tc-responsive','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-responsive.jpg',0,'attachment','image/jpeg',0),(131,1,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-1','','inherit','open','open','','th-tt-1','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-1.jpg',0,'attachment','image/jpeg',0),(132,1,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-2','','inherit','open','open','','th-tt-2','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-2.jpg',0,'attachment','image/jpeg',0),(133,1,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-3','','inherit','open','open','','th-tt-3','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-3.jpg',0,'attachment','image/jpeg',0),(134,1,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-responsive','','inherit','open','open','','th-tt-responsive','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-responsive.jpg',0,'attachment','image/jpeg',0),(135,1,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-cc-responsive','','inherit','open','open','','th-cc-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-responsive.jpg',0,'attachment','image/jpeg',0),(136,1,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-es-responsive','','inherit','open','open','','th-es-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-responsive.jpg',0,'attachment','image/jpeg',0),(137,1,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-1','','inherit','open','open','','th-tle-1','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-1.jpg',0,'attachment','image/jpeg',0),(138,1,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-responsive','','inherit','open','open','','th-tle-responsive','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-responsive.jpg',0,'attachment','image/jpeg',0),(139,1,'2014-06-09 01:10:49','2014-06-09 01:10:49','','Home Page Projects','','publish','closed','closed','','home-page-projects','','','2014-06-09 01:25:41','2014-06-09 01:25:41','',0,'http://localhost:8000/?post_type=cfs&#038;p=139',0,'cfs','',0),(140,1,'2014-06-09 22:27:46','2014-06-09 22:27:46','','stockvault-dramatic-landscape106482','','inherit','open','open','','stockvault-dramatic-landscape106482','','','2014-06-09 22:27:46','2014-06-09 22:27:46','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-dramatic-landscape106482.jpg',0,'attachment','image/jpeg',0),(141,1,'2014-06-09 22:32:04','2014-06-09 22:32:04','','stockvault-path-in-nature124348','','inherit','open','open','','stockvault-path-in-nature124348','','','2014-06-09 22:32:04','2014-06-09 22:32:04','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-path-in-nature124348.jpg',0,'attachment','image/jpeg',0),(142,1,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','publish','open','open','','where-i-buy-tea','','','2014-06-10 02:01:14','2014-06-10 02:01:14','',0,'http://localhost:8000/?p=142',0,'post','',1),(143,1,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing &lt;i&gt;exactly&lt;/i&gt; when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-09 22:58:48','2014-06-09 22:58:48','',142,'http://localhost:8000/?p=143',0,'revision','',0),(144,1,'2014-06-10 01:59:45','2014-06-10 01:59:45','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-10 01:59:45','2014-06-10 01:59:45','',142,'http://localhost:8000/?p=144',0,'revision','',0),(145,1,'2014-06-10 02:32:09','2014-06-10 02:32:09','','stockvault-cabot-trail---hdr133670','','inherit','open','open','','stockvault-cabot-trail-hdr133670','','','2014-06-10 02:32:09','2014-06-10 02:32:09','',13,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-cabot-trail-hdr133670.jpg',0,'attachment','image/jpeg',0),(146,1,'2014-06-10 02:41:57','2014-06-10 02:41:57','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need.\n\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools, and have a base outli','Hire Me','','inherit','open','open','','13-autosave-v1','','','2014-06-10 02:41:57','2014-06-10 02:41:57','',13,'http://localhost:8000/?p=146',0,'revision','',0),(147,1,'2014-06-10 02:34:57','2014-06-10 02:34:57','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then you\'ve found your guy.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:34:57','2014-06-10 02:34:57','',13,'http://localhost:8000/?p=147',0,'revision','',0),(148,1,'2014-06-10 02:43:56','2014-06-10 02:43:56','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> as well.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:43:56','2014-06-10 02:43:56','',13,'http://localhost:8000/?p=148',0,'revision','',0),(149,1,'2014-06-10 02:47:46','2014-06-10 02:47:46','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:47:46','2014-06-10 02:47:46','',13,'http://localhost:8000/?p=149',0,'revision','',0),(150,1,'2014-06-10 02:50:33','2014-06-10 02:50:33','','Skills','','publish','closed','closed','','skills','','','2014-06-10 03:07:12','2014-06-10 03:07:12','',0,'http://localhost:8000/?post_type=cfs&#038;p=150',0,'cfs','',0),(151,1,'2014-06-10 04:18:26','2014-06-10 04:18:26','','Resume','','publish','open','open','','resume','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://localhost:8000/?p=151',5,'nav_menu_item','',0),(154,1,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','publish','open','open','','vim-as-your-editor','','\nhttp://thesocietea.org/2014/07/how-to-learn-vim/','2015-02-25 14:38:57','2015-02-25 14:38:57','',0,'http://thesocietea.org/?p=154',0,'post','',1),(155,1,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-06-11 18:12:41','2014-06-11 18:12:41','',154,'http://thesocietea.org/2014/06/154-revision-v1/',0,'revision','',0),(156,1,'2014-06-17 02:42:59','2014-06-17 02:42:59','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-17 02:42:59','2014-06-17 02:42:59','',13,'http://thesocietea.org/2014/06/13-revision-v1/',0,'revision','',0),(158,1,'2014-06-19 03:07:34','2014-06-19 03:07:34','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','publish','open','open','','what-this-site-runs-on-part-1','','','2014-06-19 03:13:57','2014-06-19 03:13:57','',0,'http://thesocietea.org/?p=158',0,'post','',3),(159,1,'2014-06-18 23:20:28','2014-06-18 23:20:28','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:20:28','2014-06-18 23:20:28','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(160,1,'2014-06-18 23:46:00','2014-06-18 23:46:00','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS\r\n\r\n<strong>Slight speed boost</strong> - Since the site now interacts with a database, it\'s certainly not faster than a purely static page being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local du','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:46:00','2014-06-18 23:46:00','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(161,1,'2014-06-19 02:57:46','2014-06-19 02:57:46','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial on a new','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 02:57:46','2014-06-19 02:57:46','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(162,1,'2014-06-19 03:00:55','2014-06-19 03:00:55','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:00:55','2014-06-19 03:00:55','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(163,1,'2014-06-19 03:01:24','2014-06-19 03:01:24','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:01:24','2014-06-19 03:01:24','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(164,1,'2014-06-19 03:06:54','2014-06-19 03:06:54','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:06:54','2014-06-19 03:06:54','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(165,1,'2014-06-19 03:13:57','2014-06-19 03:13:57','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:13:57','2014-06-19 03:13:57','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(167,1,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','publish','open','open','','what-this-site-runs-on-part-2','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\nhttp://thesocietea.org/about/','2014-06-30 18:15:25','2014-06-30 18:15:25','',0,'http://thesocietea.org/?p=167',0,'post','',0),(168,1,'2014-06-30 17:57:14','2014-06-30 17:57:14','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS options such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and cleaffixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 17:57:14','2014-06-30 17:57:14','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(169,1,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related to specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:11:26','2014-06-30 18:11:26','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(170,1,'2014-06-30 18:15:25','2014-06-30 18:15:25','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:15:25','2014-06-30 18:15:25','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(172,1,'2014-07-11 02:03:02','2014-07-11 02:03:02','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','publish','open','open','','developing-for-accessibility','','\nhttp://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/','2014-07-11 21:37:10','2014-07-11 21:37:10','',0,'http://thesocietea.org/?p=172',0,'post','',0),(173,1,'2014-07-11 01:42:00','2014-07-11 01:42:00','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"color: #444444;\">[code language=\"html\"]</span><br style=\"color: #444444;\" />&lt;img src=\"some-source\" alt=\"A cool image of a penguin. Just chillin.\" /&gt;<br style=\"color: #444444;\" /><span style=\"color: #444444;\">[/code]</span>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:42:00','2014-07-11 01:42:00','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(174,1,'2014-07-11 01:51:21','2014-07-11 01:51:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code language=\"html\"]&lt;/span&gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&amp;lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&amp;gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&lt;span style=&quot;color: #444444;&quot;&gt;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:21','2014-07-11 01:51:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(175,1,'2014-07-11 01:51:52','2014-07-11 01:51:52','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:52','2014-07-11 01:51:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(176,1,'2014-07-11 01:54:15','2014-07-11 01:54:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[php]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/php]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:54:15','2014-07-11 01:54:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(177,1,'2014-07-11 01:55:01','2014-07-11 01:55:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:01','2014-07-11 01:55:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(178,1,'2014-07-11 01:55:23','2014-07-11 01:55:23','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:23','2014-07-11 01:55:23','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(179,1,'2014-07-11 01:57:09','2014-07-11 01:57:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:57:09','2014-07-11 01:57:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(180,1,'2014-07-11 02:02:38','2014-07-11 02:02:38','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]your code here[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:38','2014-07-11 02:02:38','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(181,1,'2014-07-11 02:02:53','2014-07-11 02:02:53','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:53','2014-07-11 02:02:53','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(182,1,'2014-07-11 02:03:42','2014-07-11 02:03:42','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:03:42','2014-07-11 02:03:42','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(183,1,'2014-07-11 02:07:34','2014-07-11 02:07:34','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n<pre>```javascript\r\nvar test;\r\n```</pre>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:34','2014-07-11 02:07:34','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(184,1,'2014-07-11 02:07:49','2014-07-11 02:07:49','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]`\r\nvar test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:49','2014-07-11 02:07:49','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(185,1,'2014-07-11 02:09:52','2014-07-11 02:09:52','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</h3>\n\n<pre>```javascript\nvar test;\n```</pre>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:09:52','2014-07-11 02:09:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(186,1,'2014-07-11 02:10:12','2014-07-11 02:10:12','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>javascript\nvar test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:12','2014-07-11 02:10:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(187,1,'2014-07-11 02:10:24','2014-07-11 02:10:24','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>var test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:24','2014-07-11 02:10:24','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(188,1,'2014-07-11 02:11:36','2014-07-11 02:11:36','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<code>var test;</code>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:11:36','2014-07-11 02:11:36','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(189,1,'2014-07-11 18:14:59','2014-07-11 18:14:59','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:14:59','2014-07-11 18:14:59','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(190,1,'2014-07-11 18:22:54','2014-07-11 18:22:54','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:22:54','2014-07-11 18:22:54','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(191,1,'2014-07-11 18:23:55','2014-07-11 18:23:55','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:23:55','2014-07-11 18:23:55','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(192,1,'2014-07-11 18:24:15','2014-07-11 18:24:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:24:15','2014-07-11 18:24:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(193,1,'2014-07-11 18:25:09','2014-07-11 18:25:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n&nbsp;\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:25:09','2014-07-11 18:25:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(194,1,'2014-07-11 18:27:45','2014-07-11 18:27:45','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:27:45','2014-07-11 18:27:45','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(195,1,'2014-07-11 20:58:21','2014-07-11 20:58:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]&lt;/pre&gt;\r\n&lt;pre&gt;&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:58:21','2014-07-11 20:58:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(196,1,'2014-07-11 20:59:13','2014-07-11 20:59:13','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:13','2014-07-11 20:59:13','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(197,1,'2014-07-11 20:59:48','2014-07-11 20:59:48','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:48','2014-07-11 20:59:48','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(198,1,'2014-07-11 21:19:01','2014-07-11 21:19:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:19:01','2014-07-11 21:19:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(199,1,'2014-07-11 21:21:26','2014-07-11 21:21:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:26','2014-07-11 21:21:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(200,1,'2014-07-11 21:21:46','2014-07-11 21:21:46','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:46','2014-07-11 21:21:46','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(201,1,'2014-07-11 21:22:12','2014-07-11 21:22:12','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to in the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:12','2014-07-11 21:22:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(202,1,'2014-07-11 21:22:26','2014-07-11 21:22:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:26','2014-07-11 21:22:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(203,1,'2014-07-11 21:28:37','2014-07-11 21:28:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding for the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:28:37','2014-07-11 21:28:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(204,1,'2014-07-11 21:34:50','2014-07-11 21:34:50','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:34:50','2014-07-11 21:34:50','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(205,1,'2014-07-11 21:35:37','2014-07-11 21:35:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:35:37','2014-07-11 21:35:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(206,1,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-1','','inherit','open','open','','big-json-1','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-1.jpg',0,'attachment','image/jpeg',0),(207,1,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-2','','inherit','open','open','','big-json-2','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-2.jpg',0,'attachment','image/jpeg',0),(208,1,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-3','','inherit','open','open','','big-json-3','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-3.jpg',0,'attachment','image/jpeg',0),(209,1,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-4','','inherit','open','open','','big-json-4','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-4.jpg',0,'attachment','image/jpeg',0),(210,1,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-1','','inherit','open','open','','th-json-1','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-1.jpg',0,'attachment','image/jpeg',0),(211,1,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-2','','inherit','open','open','','th-json-2','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-2.jpg',0,'attachment','image/jpeg',0),(212,1,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-3','','inherit','open','open','','th-json-3','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-3.jpg',0,'attachment','image/jpeg',0),(213,1,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-4','','inherit','open','open','','th-json-4','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-4.jpg',0,'attachment','image/jpeg',0),(214,1,'2014-07-14 22:30:01','2014-07-14 22:30:01','','JSON API Websocket Wrapper','','publish','closed','closed','','json-api-websocket-wrapper','','','2014-08-18 22:11:18','2014-08-18 22:11:18','',0,'http://thesocietea.org/?post_type=project&#038;p=214',4,'project','',0),(215,1,'2014-07-14 22:36:58','2014-07-14 22:36:58','','big-77-1','','inherit','open','open','','big-77-1-2','','','2014-07-14 22:36:58','2014-07-14 22:36:58','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-1.jpg',0,'attachment','image/jpeg',0),(216,1,'2014-07-14 22:36:59','2014-07-14 22:36:59','','big-77-responsive','','inherit','open','open','','big-77-responsive-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(217,1,'2014-07-14 22:36:59','2014-07-14 22:36:59','','th-77-1','','inherit','open','open','','th-77-1-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-1.jpg',0,'attachment','image/jpeg',0),(218,1,'2014-07-14 22:37:00','2014-07-14 22:37:00','','th-77-responsive','','inherit','open','open','','th-77-responsive-2','','','2014-07-14 22:37:00','2014-07-14 22:37:00','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(220,1,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','publish','open','open','','how-to-learn-vim','','\nhttp://thesocietea.org/2014/06/vim-as-your-editor/','2014-08-22 17:46:28','2014-08-22 17:46:28','',0,'http://thesocietea.org/?p=220',0,'post','',0),(221,1,'2014-07-24 17:40:24','2014-07-24 17:40:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:40:24','2014-07-24 17:40:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(222,1,'2014-07-24 17:45:13','2014-07-24 17:45:13','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:45:13','2014-07-24 17:45:13','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(223,1,'2014-07-24 17:54:44','2014-07-24 17:54:44','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n<h2>Plugins</h2>\r\nThe Vim community is very, very active and is completely focused on productivity.','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:54:44','2014-07-24 17:54:44','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(224,1,'2014-07-24 18:00:17','2014-07-24 18:00:17','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:00:17','2014-07-24 18:00:17','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(225,1,'2014-07-24 18:08:45','2014-07-24 18:08:45','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:08:45','2014-07-24 18:08:45','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(226,1,'2014-07-24 18:11:37','2014-07-24 18:11:37','','vim_tutor','','inherit','open','open','','vim_tutor','','','2014-07-24 18:11:37','2014-07-24 18:11:37','',220,'http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg',0,'attachment','image/jpeg',0),(227,1,'2014-07-24 18:11:51','2014-07-24 18:11:51','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignright wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:11:51','2014-07-24 18:11:51','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(228,1,'2014-07-24 18:12:24','2014-07-24 18:12:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:12:24','2014-07-24 18:12:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(229,1,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:18:14','2014-07-24 18:18:14','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(230,1,'2014-07-28 01:53:58','2014-07-28 01:53:58','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-autosave-v1','','','2014-07-28 01:53:58','2014-07-28 01:53:58','',16,'http://thesocietea.org/2014/07/16-autosave-v1/',0,'revision','',0),(231,1,'2014-07-28 01:55:02','2014-07-28 01:55:02','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-revision-v1','','','2014-07-28 01:55:02','2014-07-28 01:55:02','',16,'http://thesocietea.org/2014/07/16-revision-v1/',0,'revision','',0),(233,1,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','publish','open','open','','getting-familiar-with-bower-and-browserify','','','2015-02-25 14:36:46','2015-02-25 14:36:46','',0,'http://thesocietea.org/?p=233',0,'post','',0),(234,1,'2014-08-14 22:47:24','2014-08-14 22:47:24','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple \r\n[code]bower install &lt;package&gt;[/code]\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:24','2014-08-14 22:47:24','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(235,1,'2014-08-14 22:47:28','2014-08-14 22:47:28','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:28','2014-08-14 22:47:28','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(236,1,'2014-08-14 22:52:44','2014-08-14 22:52:44','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n<pre>[<span style=\"color: #444444;\">sourcecode language=\"plain\"</span>]bower install &lt;package&gt;[/sourcecode]</pre>\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:44','2014-08-14 22:52:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(237,1,'2014-08-14 22:52:58','2014-08-14 22:52:58','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;plain&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:58','2014-08-14 22:52:58','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(238,1,'2014-08-14 22:53:11','2014-08-14 22:53:11','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;bash&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:11','2014-08-14 22:53:11','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(239,1,'2014-08-14 22:53:17','2014-08-14 22:53:17','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;php&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:17','2014-08-14 22:53:17','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(240,1,'2014-08-14 22:53:33','2014-08-14 22:53:33','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:33','2014-08-14 22:53:33','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(241,1,'2014-08-14 23:00:23','2014-08-14 23:00:23','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}&lt;/pre&gt;\r\n&lt;pre&gt;[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:23','2014-08-14 23:00:23','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(242,1,'2014-08-14 23:00:41','2014-08-14 23:00:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]{&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:41','2014-08-14 23:00:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(243,1,'2014-08-14 23:01:06','2014-08-14 23:01:06','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:06','2014-08-14 23:01:06','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(244,1,'2014-08-14 23:01:54','2014-08-14 23:01:54','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:54','2014-08-14 23:01:54','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(245,1,'2014-08-14 23:09:52','2014-08-14 23:09:52','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. This tool seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while writing purely front-end code','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:09:52','2014-08-14 23:09:52','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(246,1,'2014-08-14 23:15:46','2014-08-14 23:15:46','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;var $ = require(\'./jquery.min.js\');\r\n\r\n// External Libs\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});&lt;/pre&gt;\r\n&lt;pre&gt;[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:15:46','2014-08-14 23:15:46','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(247,1,'2014-08-14 23:16:32','2014-08-14 23:16:32','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]\r\nvar $ = require(\'./jquery.min.js\');\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:16:32','2014-08-14 23:16:32','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(248,1,'2014-08-14 23:26:12','2014-08-14 23:26:12','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\"/>\r\n\r\n&nbsp;','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:26:12','2014-08-14 23:26:12','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(249,1,'2014-08-14 23:31:41','2014-08-14 23:31:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also showed how you can install vendor packages with bower and then include them into your files using browserify, all while writing modular javascript. Now this is a big improvement over manually finding and downloading vendor packages from the internet, and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this method. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t like manual labor like that.\r\n\r\nSo stay tuned, we\'ve got our basics covered here, and next time we can get into maximizing your javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:31:41','2014-08-14 23:31:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(250,1,'2014-08-15 02:46:25','2014-08-15 02:46:25','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been into grunt for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard \'bower\' and \'browserify\' thrown around a on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a \'bower_components\' directory at the root of where you run your command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes Bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is simple; only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like Grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 02:46:25','2014-08-15 02:46:25','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(251,1,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 03:00:44','2014-08-15 03:00:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(252,1,'2014-08-18 21:57:29','2014-08-18 21:57:29','','Oklahoma Department of Commerce','','publish','closed','closed','','oklahoma-department-of-commerce','','','2014-08-18 22:10:29','2014-08-18 22:10:29','',0,'http://thesocietea.org/?post_type=project&#038;p=252',0,'project','',0),(253,1,'2014-08-18 21:55:25','2014-08-18 21:55:25','','big-odoc-1','','inherit','open','open','','big-odoc-1','','','2014-08-18 21:55:25','2014-08-18 21:55:25','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-1.jpg',0,'attachment','image/jpeg',0),(254,1,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-2','','inherit','open','open','','big-odoc-2','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-2.jpg',0,'attachment','image/jpeg',0),(255,1,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-3','','inherit','open','open','','big-odoc-3','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-3.jpg',0,'attachment','image/jpeg',0),(256,1,'2014-08-18 21:55:27','2014-08-18 21:55:27','','big-odoc-4','','inherit','open','open','','big-odoc-4','','','2014-08-18 21:55:27','2014-08-18 21:55:27','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-4.jpg',0,'attachment','image/jpeg',0),(257,1,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-1','','inherit','open','open','','th-odoc-1','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-1.jpg',0,'attachment','image/jpeg',0),(258,1,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-2','','inherit','open','open','','th-odoc-2','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-2.jpg',0,'attachment','image/jpeg',0),(259,1,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-3','','inherit','open','open','','th-odoc-3','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-3.jpg',0,'attachment','image/jpeg',0),(260,1,'2014-08-18 21:55:29','2014-08-18 21:55:29','','th-odoc-4','','inherit','open','open','','th-odoc-4','','','2014-08-18 21:55:29','2014-08-18 21:55:29','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-4.jpg',0,'attachment','image/jpeg',0),(261,1,'2014-08-28 14:00:39','2014-08-28 14:00:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','publish','open','open','','building-javascript-with-grunt-bower-browserify','','\nhttp://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/','2015-02-25 15:42:32','2015-02-25 15:42:32','',0,'http://thesocietea.org/?p=261',0,'post','',12),(262,1,'2014-08-21 12:52:15','2014-08-21 12:52:15','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\n\r\nNow that we have the grunt CLI installed,','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:52:15','2014-08-21 12:52:15','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(263,1,'2014-08-21 12:58:12','2014-08-21 12:58:12','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[json]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\json]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:12','2014-08-21 12:58:12','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(264,1,'2014-08-21 12:58:32','2014-08-21 12:58:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[javascript][/javascript]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\javascript]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:32','2014-08-21 12:58:32','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(265,1,'2014-08-21 12:58:42','2014-08-21 12:58:42','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[javascript][/javascript]\r\n\r\n\"devDependencies\": { \"grunt-bower-task\": \"0.4.0\", \"grunt-browserify\": \"2.1.4\", \"grunt-pagespeed\": \"0.3.0\", \"grunt-concurrent\": \"0.5.0\", \"browserify\": \"~4.2.3\" } [\\javascript]','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:42','2014-08-21 12:58:42','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(266,1,'2014-08-21 13:00:09','2014-08-21 13:00:09','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:09','2014-08-21 13:00:09','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(267,1,'2014-08-21 13:00:28','2014-08-21 13:00:28','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:28','2014-08-21 13:00:28','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(268,1,'2014-08-21 13:10:37','2014-08-21 13:10:37','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. <strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.\r\n\r\nTo install:\r\n\r\n[shell]npm install[/shell]\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:10:37','2014-08-21 13:10:37','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(269,1,'2014-08-21 13:16:25','2014-08-21 13:16:25','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:16:25','2014-08-21 13:16:25','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(270,1,'2014-08-21 13:29:16','2014-08-21 13:29:16','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:29:16','2014-08-21 13:29:16','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(271,1,'2014-08-21 13:37:18','2014-08-21 13:37:18','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:18','2014-08-21 13:37:18','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(272,1,'2014-08-21 13:37:41','2014-08-21 13:37:41','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\n.\r\n.\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n.\r\n.\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:41','2014-08-21 13:37:41','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(273,1,'2014-08-21 13:38:00','2014-08-21 13:38:00','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:38:00','2014-08-21 13:38:00','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(274,1,'2014-08-22 17:46:28','2014-08-22 17:46:28','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-08-22 17:46:28','2014-08-22 17:46:28','',220,'http://thesocietea.org/2014/08/220-revision-v1/',0,'revision','',0),(276,1,'2014-08-24 00:12:48','2014-08-24 00:12:48','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require Common-JS style scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own Common-JS style scripts? No, absolutely not! We can fix this with an awesome browserify plugin called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\nBrowserify-shim','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:12:48','2014-08-24 00:12:48','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(277,1,'2014-08-24 00:34:39','2014-08-24 00:34:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:34:39','2014-08-24 00:34:39','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(278,1,'2014-08-24 00:35:49','2014-08-24 00:35:49','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:35:49','2014-08-24 00:35:49','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(279,1,'2014-08-24 00:50:36','2014-08-24 00:50:36','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:50:36','2014-08-24 00:50:36','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(281,1,'2014-08-25 12:19:06','2014-08-25 12:19:06','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-25 12:19:06','2014-08-25 12:19:06','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(282,1,'2014-09-18 14:00:37','2014-09-18 14:00:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','publish','open','open','','using-geojson-files-with-google-maps-api','','\nhttp://thesocietea.org/2014/06/where-i-buy-tea/','2014-09-09 23:58:01','2014-09-09 23:58:01','',0,'http://thesocietea.org/?p=282',0,'post','',0),(283,1,'2014-08-27 18:09:28','2014-08-27 18:09:28','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n\r\n[html]\r\n\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n// Set basic map attributes\r\nvar map, polys = [];\r\nvar mapOptions = {\r\nzoom: 5,\r\ncenter: new google.maps.LatLng(39.16,-100.72)\r\n\r\n};\r\n\r\nmap = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n\r\n[/html]\r\n\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:09:28','2014-08-27 18:09:28','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(284,1,'2014-08-27 18:10:18','2014-08-27 18:10:18','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:10:18','2014-08-27 18:10:18','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(285,1,'2014-08-27 18:20:26','2014-08-27 18:20:26','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[json title=\"arkansas.geo.json\r\n{\r\n\"type\":\"FeatureCollection\",\r\n\"features\":[\r\n{\r\n\"type\":\"Feature\",\r\n\"id\":\"USA-AR\",\r\n\"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n\"geometry\":{\r\n\"type\":\"Polygon\",\r\n\"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n}\r\n[/json]','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:20:26','2014-08-27 18:20:26','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(286,1,'2014-08-27 18:22:41','2014-08-27 18:22:41','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[json title=\"arkansas.geo.json]\r\n{\r\n  \"type\":\"FeatureCollection\",\r\n  \"features\":[\r\n    {\r\n      \"type\":\"Feature\",\r\n      \"id\":\"USA-AR\",\r\n      \"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n      \"geometry\":{\r\n        \"type\":\"Polygon\",\r\n        \"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/json]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:22:41','2014-08-27 18:22:41','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(287,1,'2014-08-27 18:23:14','2014-08-27 18:23:14','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[code language=\"title=&quot;arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:23:14','2014-08-27 18:23:14','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(288,1,'2014-08-27 18:24:34','2014-08-27 18:24:34','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:24:34','2014-08-27 18:24:34','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(289,1,'2014-08-27 18:25:51','2014-08-27 18:25:51','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:25:51','2014-08-27 18:25:51','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(290,1,'2014-08-28 12:36:57','2014-08-28 12:36:57','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 12:36:57','2014-08-28 12:36:57','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(291,1,'2014-08-28 13:05:30','2014-08-28 13:05:30','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:05:30','2014-08-28 13:05:30','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(292,1,'2014-08-28 13:06:33','2014-08-28 13:06:33','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:06:33','2014-08-28 13:06:33','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(293,1,'2014-08-28 13:10:05','2014-08-28 13:10:05','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:10:05','2014-08-28 13:10:05','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(294,1,'2014-08-28 13:15:12','2014-08-28 13:15:12','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API if you want to see what we discussed here in action.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:15:12','2014-08-28 13:15:12','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(295,1,'2014-08-28 13:20:19','2014-08-28 13:20:19','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"mini\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:19','2014-08-28 13:20:19','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(296,1,'2014-08-28 13:20:37','2014-08-28 13:20:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:37','2014-08-28 13:20:37','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(297,1,'2014-08-29 00:02:31','2014-08-29 00:02:31','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 00:02:31','2014-08-29 00:02:31','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(298,1,'2014-08-29 13:30:34','2014-08-29 13:30:34','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\n\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, this largely comes off as meaning you don\'t have use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\n<ul>\n	<li>Vim makes you lightning fast</li>\n</ul>\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\n<ul>\n	<li>Vim is super customizable</li>\n</ul>\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\n<ul>\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\n</ul>\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\n<ul>\n	<li>Vim is absolutely free</li>\n</ul>\nNo Gimmicks. Nuff\' said here.\n<ul>\n	<li>Vim is used in the terminal itself</li>\n</ul>\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\n\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-autosave-v1','','','2014-08-29 13:30:34','2014-08-29 13:30:34','',154,'http://thesocietea.org/2014/08/154-autosave-v1/',0,'revision','',0),(299,1,'2014-08-29 13:31:15','2014-08-29 13:31:15','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:31:15','2014-08-29 13:31:15','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(300,1,'2014-08-29 13:33:20','2014-08-29 13:33:20','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:33:20','2014-08-29 13:33:20','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(301,1,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','publish','open','open','','programming-concepts-the-stack-and-the-heap','','','2014-10-04 02:57:25','2014-10-04 02:57:25','',0,'http://thesocietea.org/?p=301',0,'post','',0),(302,1,'2014-08-31 06:04:37','2014-08-31 06:04:37','Being a developer, we often throw around a lot of words that sounds like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend like we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be unfamiliar about everything that it entails; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more)\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the \'old-school\' topics that we may miss out on these days, but are very important.\r\n\r\nThis will probably turn into a series, as today I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 06:04:37','2014-08-31 06:04:37','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(303,1,'2014-08-31 16:13:56','2014-08-31 16:13:56','Being a developer, we often throw around a lot of words that sound like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be a little unfamiliar with; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more).\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nThis may easily turn into a series, as right now I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 16:13:56','2014-08-31 16:13:56','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(305,1,'2014-09-04 14:00:19','2014-09-04 14:00:19','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','publish','open','open','','power-tools-using-grep-xargs-and-sed','','','2014-09-04 19:50:49','2014-09-04 19:50:49','',0,'http://thesocietea.org/?p=305',0,'post','',3),(306,1,'2014-09-02 16:58:11','2014-09-02 16:58:11','I was recently inspired to write this post after I came across a situation where I needed to do a change to multiple files where all I was doing was changing all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a good deal of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\n&nbsp;\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 16:58:11','2014-09-02 16:58:11','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(307,1,'2014-09-02 17:13:00','2014-09-02 17:13:00','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the -G flag:\r\n\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:13:00','2014-09-02 17:13:00','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(308,1,'2014-09-02 17:40:13','2014-09-02 17:40:13','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:40:13','2014-09-02 17:40:13','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(309,1,'2014-09-03 19:25:14','2014-09-03 19:25:14','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-03 19:25:14','2014-09-03 19:25:14','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(310,1,'2014-09-04 00:44:41','2014-09-04 00:44:41','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:44:41','2014-09-04 00:44:41','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(311,1,'2014-09-04 00:54:05','2014-09-04 00:54:05','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:54:05','2014-09-04 00:54:05','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(312,1,'2014-09-04 00:56:08','2014-09-04 00:56:08','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the\r\n\r\nbase shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:08','2014-09-04 00:56:08','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(313,1,'2014-09-04 00:56:17','2014-09-04 00:56:17','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:17','2014-09-04 00:56:17','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(314,1,'2014-09-04 00:58:15','2014-09-04 00:58:15','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:58:15','2014-09-04 00:58:15','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(315,1,'2014-09-04 01:00:37','2014-09-04 01:00:37','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:00:37','2014-09-04 01:00:37','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(316,1,'2014-09-04 01:01:52','2014-09-04 01:01:52','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and just print out the filenames. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:01:52','2014-09-04 01:01:52','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(317,1,'2014-09-04 01:13:30','2014-09-04 01:13:30','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored seeing as how you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:13:30','2014-09-04 01:13:30','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(318,1,'2014-09-04 01:16:47','2014-09-04 01:16:47','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:16:47','2014-09-04 01:16:47','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(319,1,'2014-09-04 19:48:33','2014-09-04 19:48:33','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\n\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\n\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\n\n<hr class=\"short\" />\n\n<h2>Grep</h2>\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\n\n[shell]cat index.html | grep footer[/shell]\n\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\n\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\n\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\n\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\n\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\n<h2>Xargs</h2>\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\n\nSound too wordy? An example is worth a thousand words:\n\n[shell]ls | xargs -0 -n 1 echo[/shell]\n\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to only accepThe <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\n\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\n\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\n\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\n\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\n<h2>Sed</h2>\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\n\n[shell]sed \'s/start/end/g\' ./*[/shell]\n\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\n\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\n\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\n<h2>Combining Them</h2>\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\n\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\n\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\n\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-autosave-v1','','','2014-09-04 19:48:33','2014-09-04 19:48:33','',305,'http://thesocietea.org/2014/09/305-autosave-v1/',0,'revision','',0),(320,1,'2014-09-04 19:49:50','2014-09-04 19:49:50','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore accept arguments based on a full line (this is very important; you probably don\'t want xargs breaking up args based on spaces). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:49:50','2014-09-04 19:49:50','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(321,1,'2014-09-04 19:50:49','2014-09-04 19:50:49','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:50:49','2014-09-04 19:50:49','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(322,1,'2014-09-05 12:33:20','2014-09-05 12:33:20','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-09-05 12:33:20','2014-09-05 12:33:20','',282,'http://thesocietea.org/2014/09/282-revision-v1/',0,'revision','',0),(325,1,'2014-09-17 00:03:04','2014-09-17 00:03:04','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically variables) is managed, with significantly different strategies\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) fashion, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\"Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to know how large they will be prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and predefined in terms of size, and not global in nature. But what if you need data structures with a more dynamic nature, or global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-09-17 00:03:04','2014-09-17 00:03:04','',301,'http://thesocietea.org/2014/09/301-revision-v1/',0,'revision','',0),(329,1,'2014-10-03 02:11:12','2014-10-03 02:11:12','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a chunk of memory that is completely dynamic, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location to store a variable of some sort, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:11:12','2014-10-03 02:11:12','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(330,1,'2014-10-03 02:12:43','2014-10-03 02:12:43','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store that is allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:12:43','2014-10-03 02:12:43','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(331,1,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because those are the variables always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer (or the garbage collector if the language supports one) to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:51:01','2014-10-04 02:51:01','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(332,1,'2014-10-04 02:57:25','2014-10-04 02:57:25','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:57:25','2014-10-04 02:57:25','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(333,1,'2014-10-05 04:41:12','2014-10-05 04:41:12','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-autosave-v1','','','2014-10-05 04:41:12','2014-10-05 04:41:12','',30,'http://thesocietea.org/2014/10/30-autosave-v1/',0,'revision','',0),(334,1,'2014-10-05 04:41:15','2014-10-05 04:41:15','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2014-10-05 04:41:15','2014-10-05 04:41:15','',30,'http://thesocietea.org/2014/10/30-revision-v1/',0,'revision','',0),(335,1,'2014-10-05 04:42:29','2014-10-05 04:42:29','','Labs','','publish','open','open','','labs','','','2015-02-24 18:17:56','2015-02-24 18:17:56','',0,'http://thesocietea.org/?p=335',4,'nav_menu_item','',0),(336,1,'2014-10-05 21:08:53','2014-10-05 21:08:53','','Oklahoma Nutrition Information & Education Project','','publish','closed','closed','','oklahoma-nutrition-information-education-project','','','2014-10-05 21:08:53','2014-10-05 21:08:53','',0,'http://thesocietea.org/?post_type=project&#038;p=336',5,'project','',0),(337,1,'2014-10-05 21:06:43','2014-10-05 21:06:43','','big-onie-1','','inherit','open','open','','big-onie-1','','','2014-10-05 21:06:43','2014-10-05 21:06:43','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-1.jpg',0,'attachment','image/jpeg',0),(338,1,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-2','','inherit','open','open','','big-onie-2','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-2.jpg',0,'attachment','image/jpeg',0),(339,1,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-3','','inherit','open','open','','big-onie-3','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-3.jpg',0,'attachment','image/jpeg',0),(340,1,'2014-10-05 21:06:45','2014-10-05 21:06:45','','big-onie-responsive','','inherit','open','open','','big-onie-responsive','','','2014-10-05 21:06:45','2014-10-05 21:06:45','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-responsive.jpg',0,'attachment','image/jpeg',0),(341,1,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-1','','inherit','open','open','','th-onie-1','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-1.jpg',0,'attachment','image/jpeg',0),(342,1,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-2','','inherit','open','open','','th-onie-2','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-2.jpg',0,'attachment','image/jpeg',0),(343,1,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-3','','inherit','open','open','','th-onie-3','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-3.jpg',0,'attachment','image/jpeg',0),(344,1,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-responsive','','inherit','open','open','','th-onie-responsive','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-responsive.jpg',0,'attachment','image/jpeg',0),(346,1,'2014-11-14 14:00:44','2014-11-14 14:00:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','publish','open','open','','software-licensing-drm-vs-gpl','','','2014-11-14 20:24:50','2014-11-14 20:24:50','',0,'http://thesocietea.org/?p=346',0,'post','',0),(347,1,'2014-10-06 18:04:44','2014-10-06 18:04:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by the copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:04:44','2014-10-06 18:04:44','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(348,1,'2014-10-06 18:06:22','2014-10-06 18:06:22','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:06:22','2014-10-06 18:06:22','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(349,1,'2014-10-06 18:07:42','2014-10-06 18:07:42','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:07:42','2014-10-06 18:07:42','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(350,1,'2014-10-07 22:53:55','2014-10-07 22:53:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing pirating copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop copying works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 22:53:55','2014-10-07 22:53:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(351,1,'2014-10-07 23:09:04','2014-10-07 23:09:04','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:09:04','2014-10-07 23:09:04','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(352,1,'2014-10-07 23:17:23','2014-10-07 23:17:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This legislation would give original publishers even more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and, innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:17:23','2014-10-07 23:17:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(353,1,'2014-10-07 23:20:23','2014-10-07 23:20:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:20:23','2014-10-07 23:20:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(354,1,'2014-10-07 23:21:53','2014-10-07 23:21:53','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:21:53','2014-10-07 23:21:53','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(356,1,'2014-10-09 22:28:55','2014-10-09 22:28:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-09 22:28:55','2014-10-09 22:28:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(357,1,'2014-10-24 15:00:20','2014-10-24 15:00:20','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','publish','open','open','','the-building-of-go-wiki-part-1','','','2014-10-16 23:26:06','2014-10-16 23:26:06','',0,'http://thesocietea.org/?p=357',0,'post','',1),(358,1,'2014-10-09 22:35:09','2014-10-09 22:35:09','I recently completed my first true project in Go, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:35:09','2014-10-09 22:35:09','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(359,1,'2014-10-09 22:41:41','2014-10-09 22:41:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n<pre>[go title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  \"net/http\"\r\n  \"./modules/helpers\"\r\n  \"./modules/routes\"\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(\"/edit/\", helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(\"/save/\", helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(\"/delete/\", helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(\"/\", routes.IndexHandler)\r\n  http.ListenAndServe(\":8080\", nil)\r\n}\r\n[/go]\r\n</pre>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:41:41','2014-10-09 22:41:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(360,1,'2014-10-09 22:49:36','2014-10-09 22:49:36','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"java\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first 2 lines is I\'m reading a config file I have to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP servero on port 8080, and routing different urls to certain handlers. You may notice the use of the keyword \r\n[code]go[/code]\r\n here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:49:36','2014-10-09 22:49:36','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(361,1,'2014-10-09 23:25:21','2014-10-09 23:25:21','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:25:21','2014-10-09 23:25:21','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(362,1,'2014-10-09 23:36:13','2014-10-09 23:36:13','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:36:13','2014-10-09 23:36:13','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(363,1,'2014-10-09 23:40:48','2014-10-09 23:40:48','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:48','2014-10-09 23:40:48','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(364,1,'2014-10-09 23:40:56','2014-10-09 23:40:56','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:56','2014-10-09 23:40:56','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(365,1,'2014-10-09 23:42:41','2014-10-09 23:42:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:42:41','2014-10-09 23:42:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(366,1,'2014-10-09 23:45:07','2014-10-09 23:45:07','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:45:07','2014-10-09 23:45:07','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(367,1,'2014-10-10 12:27:52','2014-10-10 12:27:52','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and use a templating language to write some Go in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:27:52','2014-10-10 12:27:52','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(368,1,'2014-10-10 12:49:04','2014-10-10 12:49:04','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:49:04','2014-10-10 12:49:04','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(369,1,'2014-10-13 12:22:03','2014-10-13 12:22:03','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\n\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\nsuper cool girlfriend.','Home','','inherit','open','open','','4-autosave-v1','','','2014-10-13 12:22:03','2014-10-13 12:22:03','',4,'http://thesocietea.org/2014/10/4-autosave-v1/',0,'revision','',0),(370,1,'2014-10-13 12:25:01','2014-10-13 12:25:01','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\r\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\r\nsuper cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2014-10-13 12:25:01','2014-10-13 12:25:01','',4,'http://thesocietea.org/2014/10/4-revision-v1/',0,'revision','',0),(371,1,'2014-10-13 12:42:52','2014-10-13 12:42:52','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\n<h2>Background</h2>\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\n\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\n\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\n\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\n<h2>My Interests</h2>\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\n\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise.\nPlus, I get to listen to a lot of podcasts, which leads me to...\n\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out.\nMy favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before.\nHowStuffWorks is easily my favorite network of podcasts.\n\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks,\nbrown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types.\nI was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle.\nIt has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\n\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss.\nShe makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;).\nI couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her.\nShe’s an incredibly talented cake decorator too!\n\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-autosave-v1','','','2014-10-13 12:42:52','2014-10-13 12:42:52','',6,'http://thesocietea.org/2014/10/6-autosave-v1/',0,'revision','',0),(372,1,'2014-10-13 12:43:24','2014-10-13 12:43:24','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2014-10-13 12:43:24','2014-10-13 12:43:24','',6,'http://thesocietea.org/2014/10/6-revision-v1/',0,'revision','',0),(374,1,'2014-10-16 22:37:19','2014-10-16 22:37:19','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 22:37:19','2014-10-16 22:37:19','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(375,1,'2014-10-16 23:26:06','2014-10-16 23:26:06','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 23:26:06','2014-10-16 23:26:06','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(377,1,'2014-11-14 20:22:28','2014-11-14 20:22:28','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\n\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\n<h2>What is Software Licensing?</h2>\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\n\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\n<h2>DRM</h2>\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\n\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\n<h2>GPL</h2>\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\n\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\n<h2>Final Thoughts</h2>\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-autosave-v1','','','2014-11-14 20:22:28','2014-11-14 20:22:28','',346,'http://thesocietea.org/2014/11/346-autosave-v1/',0,'revision','',0),(378,1,'2014-11-14 20:23:55','2014-11-14 20:23:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-11-14 20:23:55','2014-11-14 20:23:55','',346,'http://thesocietea.org/2014/11/346-revision-v1/',0,'revision','',0),(381,1,'2015-02-20 21:18:13','2015-02-20 21:18:13','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','publish','open','open','','building-a-json-api-with-rails-part-1-getting-started','','','2015-02-21 04:23:59','2015-02-21 04:23:59','',0,'http://thesocietea.org/?p=381',0,'post','',4),(382,1,'2015-01-21 19:22:04','2015-01-21 19:22:04','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Staring Out</h2>','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-01-21 19:22:04','2015-01-21 19:22:04','',381,'http://thesocietea.org/2015/01/381-revision-v1/',0,'revision','',0),(383,1,'2015-01-22 19:21:57','2015-01-22 19:21:57','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','publish','open','open','','brief-blogging-hiatus','','','2015-01-22 19:21:57','2015-01-22 19:21:57','',0,'http://thesocietea.org/?p=383',0,'post','',0),(384,1,'2015-01-22 19:20:03','2015-01-22 19:20:03','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my time right now (as well as rekindling old ones):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:03','2015-01-22 19:20:03','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(385,1,'2015-01-22 19:20:50','2015-01-22 19:20:50','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:50','2015-01-22 19:20:50','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(386,1,'2015-01-22 19:21:09','2015-01-22 19:21:09','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:09','2015-01-22 19:21:09','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(387,1,'2015-01-22 19:21:44','2015-01-22 19:21:44','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:44','2015-01-22 19:21:44','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(388,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Galleries','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=388',0,'gal_display_source','',0),(389,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Albums','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=389',0,'gal_display_source','',0),(390,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Tags','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=390',0,'gal_display_source','',0),(391,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9','Random Images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9',0,'http://thesocietea.org/?p=391',0,'gal_display_source','',0),(392,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==','Recent images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==',0,'http://thesocietea.org/?p=392',0,'gal_display_source','',0),(393,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','none','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=393',0,'lightbox_library','',0),(394,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','lightbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=394',0,'lightbox_library','',0),(395,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','fancybox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=395',0,'lightbox_library','',0),(396,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','highslide','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=396',0,'lightbox_library','',0),(397,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','shutter','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=397',0,'lightbox_library','',0),(398,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','shutter2','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=398',0,'lightbox_library','',0),(399,1,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','thickbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=399',0,'lightbox_library','',0),(400,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=','NextGEN Basic Compact Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=',0,'http://thesocietea.org/?p=400',0,'display_type','',0),(401,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==','NextGEN Basic Extended Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==',0,'http://thesocietea.org/?p=401',0,'display_type','',0),(402,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic Thumbnails','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=402',0,'display_type','',0),(403,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=','NextGEN Basic Slideshow','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=',0,'http://thesocietea.org/?p=403',0,'display_type','',0),(404,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic ImageBrowser','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=404',0,'display_type','',0),(405,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==','NextGEN Basic SinglePic','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==',0,'http://thesocietea.org/?p=405',0,'display_type','',0),(406,1,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19','NextGEN Basic TagCloud','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19',0,'http://thesocietea.org/?p=406',0,'display_type','',0),(407,1,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=407',0,'ngg_gallery','',0),(408,1,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=408',0,'ngg_pictures','',0),(409,1,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=409',0,'ngg_pictures','',0),(410,1,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=410',0,'ngg_gallery','',0),(412,1,'2015-02-10 17:06:35','2015-02-10 17:06:35','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2015-02-10 17:06:35','2015-02-10 17:06:35','',4,'http://thesocietea.org/2015/02/4-revision-v1/',0,'revision','',0),(414,1,'2015-02-18 19:43:01','2015-02-18 19:43:01','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\n\r\nrails-api new my_blog\r\n\r\ncd my_blog\r\n\r\n[/shell]\r\n','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:43:01','2015-02-18 19:43:01','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(415,1,'2015-02-18 19:47:17','2015-02-18 19:47:17','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:47:17','2015-02-18 19:47:17','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(416,1,'2015-02-18 19:49:28','2015-02-18 19:49:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[ruby]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/ruby]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:28','2015-02-18 19:49:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(417,1,'2015-02-18 19:49:43','2015-02-18 19:49:43','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:43','2015-02-18 19:49:43','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(418,1,'2015-02-18 19:57:33','2015-02-18 19:57:33','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n has_many :posts\r\n has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\nhas_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n\r\n[shell]rake db:seed[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:57:33','2015-02-18 19:57:33','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(419,1,'2015-02-18 20:11:14','2015-02-18 20:11:14','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\n&nbsp;\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:14','2015-02-18 20:11:14','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(420,1,'2015-02-18 20:11:51','2015-02-18 20:11:51','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:51','2015-02-18 20:11:51','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(421,1,'2015-02-20 20:46:23','2015-02-20 20:46:23','','oea_big_1','','inherit','open','open','','oea_big_1','','','2015-02-20 20:46:23','2015-02-20 20:46:23','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_1.jpg',0,'attachment','image/jpeg',0),(422,1,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_2','','inherit','open','open','','oea_big_2','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_2.jpg',0,'attachment','image/jpeg',0),(423,1,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_3','','inherit','open','open','','oea_big_3','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_3.jpg',0,'attachment','image/jpeg',0),(424,1,'2015-02-20 20:46:25','2015-02-20 20:46:25','','oea_big_4','','inherit','open','open','','oea_big_4','','','2015-02-20 20:46:25','2015-02-20 20:46:25','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_4.jpg',0,'attachment','image/jpeg',0),(425,1,'2015-02-20 20:46:26','2015-02-20 20:46:26','','oea_th_1','','inherit','open','open','','oea_th_1','','','2015-02-20 20:46:26','2015-02-20 20:46:26','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_1.jpg',0,'attachment','image/jpeg',0),(426,1,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_2','','inherit','open','open','','oea_th_2','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_2.jpg',0,'attachment','image/jpeg',0),(427,1,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_3','','inherit','open','open','','oea_th_3','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_3.jpg',0,'attachment','image/jpeg',0),(428,1,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_4','','inherit','open','open','','oea_th_4','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_4.jpg',0,'attachment','image/jpeg',0),(429,1,'2015-02-20 20:51:13','2015-02-20 20:51:13','','No To High Stakes','','publish','closed','closed','','no-to-high-stakes','','','2015-02-20 20:54:35','2015-02-20 20:54:35','',0,'http://thesocietea.org/?post_type=project&#038;p=429',0,'project','',0),(430,1,'2015-02-20 20:58:26','2015-02-20 20:58:26','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 20:58:26','2015-02-20 20:58:26','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(431,1,'2015-02-20 21:11:48','2015-02-20 21:11:48','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (SOA), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:11:48','2015-02-20 21:11:48','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(432,1,'2015-02-20 21:12:28','2015-02-20 21:12:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:12:28','2015-02-20 21:12:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(433,1,'2015-02-20 21:13:11','2015-02-20 21:13:11','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:13:11','2015-02-20 21:13:11','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(434,1,'2015-02-20 21:17:28','2015-02-20 21:17:28','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"mini\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:28','2015-02-20 21:17:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(435,1,'2015-02-20 21:17:37','2015-02-20 21:17:37','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:37','2015-02-20 21:17:37','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(436,1,'2015-02-21 04:23:59','2015-02-21 04:23:59','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-21 04:23:59','2015-02-21 04:23:59','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(437,1,'2015-02-25 14:08:53','2015-02-25 14:08:53','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',30,'http://thesocietea.org/2015/02/30-revision-v1/',0,'revision','',0),(438,1,'2015-02-25 14:33:05','2015-02-25 14:33:05','','go_wiki_th','','inherit','open','open','','go_wiki_th','','','2015-02-25 14:33:05','2015-02-25 14:33:05','',4,'http://thesocietea.org/wp-content/uploads/2014/06/go_wiki_th.jpg',0,'attachment','image/jpeg',0),(439,1,'2015-02-25 14:36:46','2015-02-25 14:36:46','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2015-02-25 14:36:46','2015-02-25 14:36:46','',233,'http://thesocietea.org/2015/02/233-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (440,1,'2015-02-25 14:38:57','2015-02-25 14:38:57','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2015-02-25 14:38:57','2015-02-25 14:38:57','',154,'http://thesocietea.org/2015/02/154-revision-v1/',0,'revision','',0),(441,1,'2015-02-25 14:42:12','2015-02-25 14:42:12','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-25 14:42:12','2015-02-25 14:42:12','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(442,1,'2015-02-25 15:42:32','2015-02-25 15:42:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2015-02-25 15:42:32','2015-02-25 15:42:32','',261,'http://thesocietea.org/2015/02/261-revision-v1/',0,'revision','',0),(443,1,'2015-02-26 19:37:13','0000-00-00 00:00:00','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','draft','open','open','','','','','2015-02-26 19:37:13','2015-02-26 19:37:13','',0,'http://thesocietea.org/?p=443',0,'post','',0),(444,1,'2015-02-25 18:53:49','2015-02-25 18:53:49','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. In the last post, we focused on setting a basic JSON API up using Rails and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 18:53:49','2015-02-25 18:53:49','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(445,1,'2015-02-25 19:01:03','2015-02-25 19:01:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting a basic JSON API up using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:03','2015-02-25 19:01:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(446,1,'2015-02-25 19:01:38','2015-02-25 19:01:38','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:38','2015-02-25 19:01:38','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(447,1,'2015-02-25 19:03:03','2015-02-25 19:03:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:03','2015-02-25 19:03:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(448,1,'2015-02-25 19:03:41','2015-02-25 19:03:41','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:41','2015-02-25 19:03:41','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(449,1,'2015-02-25 19:04:30','2015-02-25 19:04:30','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:04:30','2015-02-25 19:04:30','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(450,1,'2015-02-26 19:02:57','2015-02-26 19:02:57','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n\r\n[shell]\r\n\r\ngem install active_model_serializers -v 0.8.3\r\n\r\n[/shell]\r\n\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\n\r\nAnd that will create the following file:\r\n\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\n\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\nattributes :id\r\nend\r\n\r\n[/ruby]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:02:57','2015-02-26 19:02:57','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(451,1,'2015-02-26 19:05:46','2015-02-26 19:05:46','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n&nbsp;\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:05:46','2015-02-26 19:05:46','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(452,1,'2015-02-26 19:09:11','2015-02-26 19:09:11','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? Now go ahead and run the serializers for the remaining Post and Comment models, and then we\'ll get into some configuration:\r\n\r\n\r\n[shell]\r\n\r\nrails g serializer post\r\n\r\nrails g serializer comment\r\n\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:09:11','2015-02-26 19:09:11','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(453,1,'2015-02-26 19:29:25','2015-02-26 19:29:25','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when your query you User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are not return each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because it\'s only meant for specific serialization cases, you don\'t want to dirty up the model files. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable. Nifty, huh? <strong>Pro Tip</strong>: You can also serialize model methods in this same way, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old JSON syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:29:25','2015-02-26 19:29:25','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(454,1,'2015-02-26 19:36:45','2015-02-26 19:36:45','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:36:45','2015-02-26 19:36:45','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(455,1,'2015-02-27 14:07:46','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2015-02-27 14:07:46','0000-00-00 00:00:00','',0,'http://thesocietea.org/?p=455',0,'post','',0),(456,1,'2015-02-27 14:08:09','2015-02-27 14:08:09','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:09','2015-02-27 14:08:09','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(457,1,'2015-02-27 14:08:48','2015-02-27 14:08:48','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:48','2015-02-27 14:08:48','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(458,1,'2015-02-27 14:11:30','2015-02-27 14:11:30','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (25,2,0),(26,2,0),(27,2,0),(32,2,0),(142,1,0),(142,3,0),(151,2,0),(154,1,0),(158,1,0),(167,1,0),(172,1,0),(220,1,0),(233,1,0),(261,1,0),(282,1,0),(301,1,0),(305,1,0),(335,2,0),(346,1,0),(357,1,0),(381,1,0),(383,1,0),(443,1,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,15),(2,2,'nav_menu','',0,6),(3,3,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `name` (`name`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Main Menu','main-menu',0),(3,'tea','tea',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'first_name',''),(2,1,'last_name',''),(3,1,'nickname','admin'),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'show_admin_bar_front','true'),(10,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(11,1,'wp_user_level','10'),(12,1,'dismissed_wp_pointers','wp350_media,wp360_revisions,wp360_locks,wp390_widgets,disqus_settings_pointer,wp410_dfw'),(13,1,'show_welcome_panel','1'),(14,1,'wp_user-settings','dfw_width=662&hidetb=1&editor=tinymce&libraryContent=browse&wplink=1&widgets_access=off&imgsize=full&ed_size=503'),(15,1,'wp_user-settings-time','1424977541'),(16,1,'wp_dashboard_quick_press_last_post_id','455'),(17,1,'managenav-menuscolumnshidden','a:2:{i:0;s:3:\"xfn\";i:1;s:11:\"description\";}'),(18,1,'metaboxhidden_nav-menus','a:3:{i:0;s:8:\"add-post\";i:1;s:12:\"add-post_tag\";i:2;s:15:\"add-post_format\";}'),(19,1,'nav_menu_recently_edited','2'),(21,1,'wp_media_library_mode','grid'),(24,1,'session_tokens','a:1:{s:64:\"855809363847925c1ea9bbbacd94b3235d78fa8cef5c2c7fb5ec0f9b9484d1af\";a:4:{s:10:\"expiration\";i:1425149408;s:2:\"ip\";s:15:\"216.201.130.138\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\";s:5:\"login\";i:1424976608;}}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'admin','$P$B3.hraBpGpvkwjMDee6SpKEfmSTXdZ0','admin','alkrauss48@gmail.com','','2014-06-02 22:35:10','',0,'admin');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-02-27  9:13:06
