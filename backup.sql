-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: the_societea_2
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_cfs_sessions`
--

DROP TABLE IF EXISTS `wp_cfs_sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_sessions` (
  `id` varchar(32) NOT NULL DEFAULT '',
  `data` text,
  `expires` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_sessions`
--

LOCK TABLES `wp_cfs_sessions` WRITE;
/*!40000 ALTER TABLE `wp_cfs_sessions` DISABLE KEYS */;
INSERT INTO `wp_cfs_sessions` VALUES ('d452a1a677063d3420f30cafe11484a2','a:7:{s:7:\"post_id\";i:16;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:8;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1429150336'),('f0c7d9aa440af4d0a958e1054415a3a5','a:7:{s:7:\"post_id\";i:16;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:1:{i:0;i:8;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1429150319');
/*!40000 ALTER TABLE `wp_cfs_sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_cfs_values`
--

DROP TABLE IF EXISTS `wp_cfs_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_values` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `field_id` int(10) unsigned DEFAULT NULL,
  `meta_id` int(10) unsigned DEFAULT NULL,
  `post_id` int(10) unsigned DEFAULT NULL,
  `base_field_id` int(10) unsigned DEFAULT '0',
  `hierarchy` text,
  `depth` int(10) unsigned DEFAULT '0',
  `weight` int(10) unsigned DEFAULT '0',
  `sub_weight` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `field_id_idx` (`field_id`),
  KEY `post_id_idx` (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4022 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_values`
--

LOCK TABLES `wp_cfs_values` WRITE;
/*!40000 ALTER TABLE `wp_cfs_values` DISABLE KEYS */;
INSERT INTO `wp_cfs_values` VALUES (3,1,148,6,0,'',0,0,0),(2538,7,3048,252,0,'',0,0,0),(2539,6,3049,252,0,'',0,0,0),(2540,8,3050,252,0,'',0,0,0),(2541,9,3051,252,0,'',0,0,0),(2542,10,3052,252,0,'',0,0,0),(2543,11,3053,252,0,'',0,0,0),(2544,3,3054,252,2,'2:0:3',1,0,0),(2545,4,3055,252,2,'2:0:4',1,0,0),(2546,5,3056,252,2,'2:0:5',1,0,0),(2547,3,3057,252,2,'2:1:3',1,1,0),(2548,4,3058,252,2,'2:1:4',1,1,0),(2549,5,3059,252,2,'2:1:5',1,1,0),(2550,3,3060,252,2,'2:2:3',1,2,0),(2551,4,3061,252,2,'2:2:4',1,2,0),(2552,5,3062,252,2,'2:2:5',1,2,0),(2553,3,3063,252,2,'2:3:3',1,3,0),(2554,4,3064,252,2,'2:3:4',1,3,0),(2555,5,3065,252,2,'2:3:5',1,3,0),(2556,7,3066,63,0,'',0,0,0),(2557,6,3067,63,0,'',0,0,0),(2558,8,3068,63,0,'',0,0,0),(2559,9,3069,63,0,'',0,0,0),(2560,10,3070,63,0,'',0,0,0),(2561,11,3071,63,0,'',0,0,0),(2562,3,3072,63,2,'2:0:3',1,0,0),(2563,4,3073,63,2,'2:0:4',1,0,0),(2564,5,3074,63,2,'2:0:5',1,0,0),(2565,3,3075,63,2,'2:1:3',1,1,0),(2566,4,3076,63,2,'2:1:4',1,1,0),(2567,5,3077,63,2,'2:1:5',1,1,0),(2568,3,3078,63,2,'2:2:3',1,2,0),(2569,4,3079,63,2,'2:2:4',1,2,0),(2570,5,3080,63,2,'2:2:5',1,2,0),(2571,3,3081,63,2,'2:3:3',1,3,0),(2572,4,3082,63,2,'2:3:4',1,3,0),(2573,5,3083,63,2,'2:3:5',1,3,0),(2574,7,3084,64,0,'',0,0,0),(2575,6,3085,64,0,'',0,0,0),(2576,8,3086,64,0,'',0,0,0),(2577,9,3087,64,0,'',0,0,0),(2578,10,3088,64,0,'',0,0,0),(2579,11,3089,64,0,'',0,0,0),(2580,3,3090,64,2,'2:0:3',1,0,0),(2581,4,3091,64,2,'2:0:4',1,0,0),(2582,5,3092,64,2,'2:0:5',1,0,0),(2583,3,3093,64,2,'2:1:3',1,1,0),(2584,4,3094,64,2,'2:1:4',1,1,0),(2585,5,3095,64,2,'2:1:5',1,1,0),(2586,3,3096,64,2,'2:2:3',1,2,0),(2587,4,3097,64,2,'2:2:4',1,2,0),(2588,5,3098,64,2,'2:2:5',1,2,0),(2589,3,3099,64,2,'2:3:3',1,3,0),(2590,4,3100,64,2,'2:3:4',1,3,0),(2591,5,3101,64,2,'2:3:5',1,3,0),(2610,7,3120,214,0,'',0,0,0),(2611,6,3121,214,0,'',0,0,0),(2612,8,3122,214,0,'',0,0,0),(2613,9,3123,214,0,'',0,0,0),(2614,10,3124,214,0,'',0,0,0),(2615,11,3125,214,0,'',0,0,0),(2616,3,3126,214,2,'2:0:3',1,0,0),(2617,4,3127,214,2,'2:0:4',1,0,0),(2618,5,3128,214,2,'2:0:5',1,0,0),(2619,3,3129,214,2,'2:1:3',1,1,0),(2620,4,3130,214,2,'2:1:4',1,1,0),(2621,5,3131,214,2,'2:1:5',1,1,0),(2622,3,3132,214,2,'2:2:3',1,2,0),(2623,4,3133,214,2,'2:2:4',1,2,0),(2624,5,3134,214,2,'2:2:5',1,2,0),(2625,3,3135,214,2,'2:3:3',1,3,0),(2626,4,3136,214,2,'2:3:4',1,3,0),(2627,5,3137,214,2,'2:3:5',1,3,0),(2628,7,3138,68,0,'',0,0,0),(2629,6,3139,68,0,'',0,0,0),(2630,8,3140,68,0,'',0,0,0),(2631,9,3141,68,0,'',0,0,0),(2632,10,3142,68,0,'',0,0,0),(2633,11,3143,68,0,'',0,0,0),(2634,3,3144,68,2,'2:0:3',1,0,0),(2635,4,3145,68,2,'2:0:4',1,0,0),(2636,5,3146,68,2,'2:0:5',1,0,0),(2637,3,3147,68,2,'2:1:3',1,1,0),(2638,4,3148,68,2,'2:1:4',1,1,0),(2639,5,3149,68,2,'2:1:5',1,1,0),(2640,7,3150,38,0,'',0,0,0),(2641,6,3151,38,0,'',0,0,0),(2642,8,3152,38,0,'',0,0,0),(2643,9,3153,38,0,'',0,0,0),(2644,10,3154,38,0,'',0,0,0),(2645,11,3155,38,0,'',0,0,0),(2646,3,3156,38,2,'2:0:3',1,0,0),(2647,4,3157,38,2,'2:0:4',1,0,0),(2648,5,3158,38,2,'2:0:5',1,0,0),(2649,3,3159,38,2,'2:1:3',1,1,0),(2650,4,3160,38,2,'2:1:4',1,1,0),(2651,5,3161,38,2,'2:1:5',1,1,0),(2652,3,3162,38,2,'2:2:3',1,2,0),(2653,4,3163,38,2,'2:2:4',1,2,0),(2654,5,3164,38,2,'2:2:5',1,2,0),(2655,3,3165,38,2,'2:3:3',1,3,0),(2656,4,3166,38,2,'2:3:4',1,3,0),(2657,5,3167,38,2,'2:3:5',1,3,0),(3041,7,5361,336,0,'',0,0,0),(3042,6,5362,336,0,'',0,0,0),(3043,8,5363,336,0,'',0,0,0),(3044,9,5364,336,0,'',0,0,0),(3045,10,5365,336,0,'',0,0,0),(3046,11,5366,336,0,'',0,0,0),(3047,3,5367,336,2,'2:0:3',1,0,0),(3048,4,5368,336,2,'2:0:4',1,0,0),(3049,5,5369,336,2,'2:0:5',1,0,0),(3050,3,5370,336,2,'2:1:3',1,1,0),(3051,4,5371,336,2,'2:1:4',1,1,0),(3052,5,5372,336,2,'2:1:5',1,1,0),(3053,3,5373,336,2,'2:2:3',1,2,0),(3054,4,5374,336,2,'2:2:4',1,2,0),(3055,5,5375,336,2,'2:2:5',1,2,0),(3056,3,5376,336,2,'2:3:3',1,3,0),(3057,4,5377,336,2,'2:3:4',1,3,0),(3058,5,5378,336,2,'2:3:5',1,3,0),(3059,7,5379,65,0,'',0,0,0),(3060,6,5380,65,0,'',0,0,0),(3061,8,5381,65,0,'',0,0,0),(3062,9,5382,65,0,'',0,0,0),(3063,10,5383,65,0,'',0,0,0),(3064,11,5384,65,0,'',0,0,0),(3065,3,5385,65,2,'2:0:3',1,0,0),(3066,4,5386,65,2,'2:0:4',1,0,0),(3067,5,5387,65,2,'2:0:5',1,0,0),(3068,3,5388,65,2,'2:1:3',1,1,0),(3069,4,5389,65,2,'2:1:4',1,1,0),(3070,5,5390,65,2,'2:1:5',1,1,0),(3071,3,5391,65,2,'2:2:3',1,2,0),(3072,4,5392,65,2,'2:2:4',1,2,0),(3073,5,5393,65,2,'2:2:5',1,2,0),(3074,3,5394,65,2,'2:3:3',1,3,0),(3075,4,5395,65,2,'2:3:4',1,3,0),(3076,5,5396,65,2,'2:3:5',1,3,0),(3387,7,8924,429,0,'',0,0,0),(3388,6,8925,429,0,'',0,0,0),(3389,8,8926,429,0,'',0,0,0),(3390,9,8927,429,0,'',0,0,0),(3391,10,8928,429,0,'',0,0,0),(3392,11,8929,429,0,'',0,0,0),(3393,3,8930,429,2,'2:0:3',1,0,0),(3394,4,8931,429,2,'2:0:4',1,0,0),(3395,5,8932,429,2,'2:0:5',1,0,0),(3396,3,8933,429,2,'2:1:3',1,1,0),(3397,4,8934,429,2,'2:1:4',1,1,0),(3398,5,8935,429,2,'2:1:5',1,1,0),(3399,3,8936,429,2,'2:2:3',1,2,0),(3400,4,8937,429,2,'2:2:4',1,2,0),(3401,5,8938,429,2,'2:2:5',1,2,0),(3402,3,8939,429,2,'2:3:3',1,3,0),(3403,4,8940,429,2,'2:3:4',1,3,0),(3404,5,8941,429,2,'2:3:5',1,3,0),(3405,1,9315,30,0,'',0,0,0),(3406,16,9316,30,0,'',0,0,0),(3407,7,9317,66,0,'',0,0,0),(3408,6,9318,66,0,'',0,0,0),(3409,8,9319,66,0,'',0,0,0),(3410,9,9320,66,0,'',0,0,0),(3411,10,9321,66,0,'',0,0,0),(3412,11,9322,66,0,'',0,0,0),(3413,3,9323,66,2,'2:0:3',1,0,0),(3414,4,9324,66,2,'2:0:4',1,0,0),(3415,5,9325,66,2,'2:0:5',1,0,0),(3416,3,9326,66,2,'2:1:3',1,1,0),(3417,4,9327,66,2,'2:1:4',1,1,0),(3418,5,9328,66,2,'2:1:5',1,1,0),(3419,3,9329,66,2,'2:2:3',1,2,0),(3420,4,9330,66,2,'2:2:4',1,2,0),(3421,5,9331,66,2,'2:2:5',1,2,0),(3422,3,9332,66,2,'2:3:3',1,3,0),(3423,4,9333,66,2,'2:3:4',1,3,0),(3424,5,9334,66,2,'2:3:5',1,3,0),(3425,7,9335,67,0,'',0,0,0),(3426,6,9336,67,0,'',0,0,0),(3427,8,9337,67,0,'',0,0,0),(3428,9,9338,67,0,'',0,0,0),(3429,10,9339,67,0,'',0,0,0),(3430,11,9340,67,0,'',0,0,0),(3431,3,9341,67,2,'2:0:3',1,0,0),(3432,4,9342,67,2,'2:0:4',1,0,0),(3433,5,9343,67,2,'2:0:5',1,0,0),(3434,3,9344,67,2,'2:1:3',1,1,0),(3435,4,9345,67,2,'2:1:4',1,1,0),(3436,5,9346,67,2,'2:1:5',1,1,0),(3437,3,9347,67,2,'2:2:3',1,2,0),(3438,4,9348,67,2,'2:2:4',1,2,0),(3439,5,9349,67,2,'2:2:5',1,2,0),(3557,7,10753,515,0,'',0,0,0),(3558,6,10754,515,0,'',0,0,0),(3559,8,10755,515,0,'',0,0,0),(3560,9,10756,515,0,'',0,0,0),(3561,10,10757,515,0,'',0,0,0),(3562,11,10758,515,0,'',0,0,0),(3563,3,10759,515,2,'2:0:3',1,0,0),(3564,4,10760,515,2,'2:0:4',1,0,0),(3565,5,10761,515,2,'2:0:5',1,0,0),(3566,3,10762,515,2,'2:1:3',1,1,0),(3567,4,10763,515,2,'2:1:4',1,1,0),(3568,5,10764,515,2,'2:1:5',1,1,0),(3569,3,10765,515,2,'2:2:3',1,2,0),(3570,4,10766,515,2,'2:2:4',1,2,0),(3571,5,10767,515,2,'2:2:5',1,2,0),(3572,3,10768,515,2,'2:3:3',1,3,0),(3573,4,10769,515,2,'2:3:4',1,3,0),(3574,5,10770,515,2,'2:3:5',1,3,0),(3575,7,10771,459,0,'',0,0,0),(3576,6,10772,459,0,'',0,0,0),(3577,8,10773,459,0,'',0,0,0),(3578,9,10774,459,0,'',0,0,0),(3579,10,10775,459,0,'',0,0,0),(3580,11,10776,459,0,'',0,0,0),(3581,3,10777,459,2,'2:0:3',1,0,0),(3582,4,10778,459,2,'2:0:4',1,0,0),(3583,5,10779,459,2,'2:0:5',1,0,0),(3584,3,10780,459,2,'2:1:3',1,1,0),(3585,4,10781,459,2,'2:1:4',1,1,0),(3586,5,10782,459,2,'2:1:5',1,1,0),(3587,3,10783,459,2,'2:2:3',1,2,0),(3588,4,10784,459,2,'2:2:4',1,2,0),(3589,5,10785,459,2,'2:2:5',1,2,0),(3590,13,10787,4,12,'12:0:13',1,0,0),(3591,14,10788,4,12,'12:0:14',1,0,0),(3592,15,10789,4,12,'12:0:15',1,0,0),(3593,13,10790,4,12,'12:1:13',1,1,0),(3594,14,10791,4,12,'12:1:14',1,1,0),(3595,15,10792,4,12,'12:1:15',1,1,0),(3596,13,10793,4,12,'12:2:13',1,2,0),(3597,14,10794,4,12,'12:2:14',1,2,0),(3598,15,10795,4,12,'12:2:15',1,2,0),(3599,13,10796,4,12,'12:3:13',1,3,0),(3600,14,10797,4,12,'12:3:14',1,3,0),(3601,15,10798,4,12,'12:3:15',1,3,0),(3602,13,10799,4,12,'12:4:13',1,4,0),(3603,14,10800,4,12,'12:4:14',1,4,0),(3604,15,10801,4,12,'12:4:15',1,4,0),(3605,13,10802,4,12,'12:5:13',1,5,0),(3606,14,10803,4,12,'12:5:14',1,5,0),(3607,15,10804,4,12,'12:5:15',1,5,0),(3608,13,10805,4,12,'12:6:13',1,6,0),(3609,14,10806,4,12,'12:6:14',1,6,0),(3610,15,10807,4,12,'12:6:15',1,6,0),(3611,13,10808,4,12,'12:7:13',1,7,0),(3612,14,10809,4,12,'12:7:14',1,7,0),(3613,15,10810,4,12,'12:7:15',1,7,0),(3680,7,10971,562,0,'',0,0,0),(3681,6,10972,562,0,'',0,0,0),(3682,8,10973,562,0,'',0,0,0),(3683,9,10974,562,0,'',0,0,0),(3684,10,10975,562,0,'',0,0,0),(3685,11,10976,562,0,'',0,0,0),(3686,3,10977,562,2,'2:0:3',1,0,0),(3687,4,10978,562,2,'2:0:4',1,0,0),(3688,5,10979,562,2,'2:0:5',1,0,0),(3689,3,10980,562,2,'2:1:3',1,1,0),(3690,4,10981,562,2,'2:1:4',1,1,0),(3691,5,10982,562,2,'2:1:5',1,1,0),(3692,3,10983,562,2,'2:2:3',1,2,0),(3693,4,10984,562,2,'2:2:4',1,2,0),(3694,5,10985,562,2,'2:2:5',1,2,0),(3695,3,10986,562,2,'2:3:3',1,3,0),(3696,4,10987,562,2,'2:3:4',1,3,0),(3697,5,10988,562,2,'2:3:5',1,3,0),(3698,3,10989,562,2,'2:4:3',1,4,0),(3699,4,10990,562,2,'2:4:4',1,4,0),(3700,5,10991,562,2,'2:4:5',1,4,0),(3701,3,10992,562,2,'2:5:3',1,5,0),(3702,4,10993,562,2,'2:5:4',1,5,0),(3703,5,10994,562,2,'2:5:5',1,5,0),(3704,3,10995,562,2,'2:6:3',1,6,0),(3705,4,10996,562,2,'2:6:4',1,6,0),(3706,5,10997,562,2,'2:6:5',1,6,0),(3707,3,10998,562,2,'2:7:3',1,7,0),(3708,4,10999,562,2,'2:7:4',1,7,0),(3709,5,11000,562,2,'2:7:5',1,7,0),(3942,1,11293,13,0,'',0,0,0),(3943,16,11294,13,0,'',0,0,0),(3944,18,11295,13,17,'17:0:18',1,0,0),(3945,22,11296,13,17,'17:0:22',1,0,0),(3946,20,11297,13,17,'17:0:19:0:20',2,0,0),(3947,21,11298,13,17,'17:0:19:0:21',2,0,0),(3948,20,11299,13,17,'17:0:19:1:20',2,1,0),(3949,21,11300,13,17,'17:0:19:1:21',2,1,0),(3950,20,11301,13,17,'17:0:19:2:20',2,2,0),(3951,21,11302,13,17,'17:0:19:2:21',2,2,0),(3952,20,11303,13,17,'17:0:19:3:20',2,3,0),(3953,21,11304,13,17,'17:0:19:3:21',2,3,0),(3954,20,11305,13,17,'17:0:19:4:20',2,4,0),(3955,21,11306,13,17,'17:0:19:4:21',2,4,0),(3956,20,11307,13,17,'17:0:19:5:20',2,5,0),(3957,21,11308,13,17,'17:0:19:5:21',2,5,0),(3958,20,11309,13,17,'17:0:19:6:20',2,6,0),(3959,21,11310,13,17,'17:0:19:6:21',2,6,0),(3960,20,11311,13,17,'17:0:19:7:20',2,7,0),(3961,21,11312,13,17,'17:0:19:7:21',2,7,0),(3962,20,11313,13,17,'17:0:19:8:20',2,8,0),(3963,21,11314,13,17,'17:0:19:8:21',2,8,0),(3964,20,11315,13,17,'17:0:19:9:20',2,9,0),(3965,21,11316,13,17,'17:0:19:9:21',2,9,0),(3966,20,11317,13,17,'17:0:19:10:20',2,10,0),(3967,21,11318,13,17,'17:0:19:10:21',2,10,0),(3968,20,11319,13,17,'17:0:19:11:20',2,11,0),(3969,21,11320,13,17,'17:0:19:11:21',2,11,0),(3970,18,11321,13,17,'17:1:18',1,1,0),(3971,22,11322,13,17,'17:1:22',1,1,0),(3972,20,11323,13,17,'17:1:19:0:20',2,0,0),(3973,21,11324,13,17,'17:1:19:0:21',2,0,0),(3974,20,11325,13,17,'17:1:19:1:20',2,1,0),(3975,21,11326,13,17,'17:1:19:1:21',2,1,0),(3976,20,11327,13,17,'17:1:19:2:20',2,2,0),(3977,21,11328,13,17,'17:1:19:2:21',2,2,0),(3978,20,11329,13,17,'17:1:19:3:20',2,3,0),(3979,21,11330,13,17,'17:1:19:3:21',2,3,0),(3980,20,11331,13,17,'17:1:19:4:20',2,4,0),(3981,21,11332,13,17,'17:1:19:4:21',2,4,0),(3982,20,11333,13,17,'17:1:19:5:20',2,5,0),(3983,21,11334,13,17,'17:1:19:5:21',2,5,0),(3984,20,11335,13,17,'17:1:19:6:20',2,6,0),(3985,21,11336,13,17,'17:1:19:6:21',2,6,0),(3986,20,11337,13,17,'17:1:19:7:20',2,7,0),(3987,21,11338,13,17,'17:1:19:7:21',2,7,0),(3988,20,11339,13,17,'17:1:19:8:20',2,8,0),(3989,21,11340,13,17,'17:1:19:8:21',2,8,0),(3990,20,11341,13,17,'17:1:19:9:20',2,9,0),(3991,21,11342,13,17,'17:1:19:9:21',2,9,0),(3992,20,11343,13,17,'17:1:19:11:20',2,11,0),(3993,21,11344,13,17,'17:1:19:11:21',2,11,0),(3994,18,11345,13,17,'17:2:18',1,2,0),(3995,22,11346,13,17,'17:2:22',1,2,0),(3996,20,11347,13,17,'17:2:19:0:20',2,0,0),(3997,21,11348,13,17,'17:2:19:0:21',2,0,0),(3998,20,11349,13,17,'17:2:19:1:20',2,1,0),(3999,21,11350,13,17,'17:2:19:1:21',2,1,0),(4000,20,11351,13,17,'17:2:19:2:20',2,2,0),(4001,21,11352,13,17,'17:2:19:2:21',2,2,0),(4002,20,11353,13,17,'17:2:19:3:20',2,3,0),(4003,21,11354,13,17,'17:2:19:3:21',2,3,0),(4004,20,11355,13,17,'17:2:19:4:20',2,4,0),(4005,21,11356,13,17,'17:2:19:4:21',2,4,0),(4006,20,11357,13,17,'17:2:19:5:20',2,5,0),(4007,21,11358,13,17,'17:2:19:5:21',2,5,0),(4008,20,11359,13,17,'17:2:19:6:20',2,6,0),(4009,21,11360,13,17,'17:2:19:6:21',2,6,0),(4010,20,11361,13,17,'17:2:19:7:20',2,7,0),(4011,21,11362,13,17,'17:2:19:7:21',2,7,0),(4012,20,11363,13,17,'17:2:19:8:20',2,8,0),(4013,21,11364,13,17,'17:2:19:8:21',2,8,0),(4014,20,11365,13,17,'17:2:19:9:20',2,9,0),(4015,21,11366,13,17,'17:2:19:9:21',2,9,0),(4016,20,11367,13,17,'17:2:19:10:20',2,10,0),(4017,21,11368,13,17,'17:2:19:10:21',2,10,0),(4018,20,11369,13,17,'17:2:19:11:20',2,11,0),(4019,21,11370,13,17,'17:2:19:11:21',2,11,0),(4020,1,11688,16,0,'',0,0,0),(4021,16,11689,16,0,'',0,0,0);
/*!40000 ALTER TABLE `wp_cfs_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`),
  KEY `disqus_dupecheck` (`meta_key`,`meta_value`(11))
) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
INSERT INTO `wp_commentmeta` VALUES (1,4,'akismet_result','false'),(2,4,'akismet_history','a:4:{s:4:\"time\";d:1406225895.7898979;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(4,4,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9390969;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(5,3,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9453449;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(6,2,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9560931;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(9,6,'akismet_result','false'),(10,6,'akismet_history','a:4:{s:4:\"time\";d:1409235610.7454171;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(12,7,'akismet_result','false'),(13,7,'akismet_history','a:4:{s:4:\"time\";d:1409270553.9715359;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(15,8,'dsq_parent_post_id',''),(16,8,'dsq_post_id','1575120066'),(17,9,'dsq_parent_post_id',''),(18,9,'dsq_post_id','1592261029'),(19,10,'dsq_parent_post_id','1592261029'),(20,10,'dsq_post_id','1592265397'),(21,11,'akismet_result','false'),(22,11,'akismet_history','a:4:{s:4:\"time\";d:1411050709.575835;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(24,12,'dsq_parent_post_id',''),(25,12,'dsq_post_id','1619594919'),(26,13,'dsq_parent_post_id','1619594919'),(27,13,'dsq_post_id','1619602546'),(28,14,'dsq_parent_post_id',''),(29,14,'dsq_post_id','1654439967'),(30,15,'dsq_parent_post_id',''),(31,15,'dsq_post_id','1719891759'),(32,16,'dsq_parent_post_id','1719891759'),(33,16,'dsq_post_id','1726170541'),(34,17,'dsq_parent_post_id','1726170541'),(35,17,'dsq_post_id','1726923924'),(36,18,'dsq_parent_post_id','1726923924'),(37,18,'dsq_post_id','1727291516'),(38,19,'dsq_parent_post_id','1727291516'),(39,19,'dsq_post_id','1727701359'),(40,20,'dsq_parent_post_id','1726170541'),(41,20,'dsq_post_id','1799847916'),(42,21,'dsq_parent_post_id','1799847916'),(43,21,'dsq_post_id','1802415250'),(44,22,'dsq_parent_post_id','1802415250'),(45,22,'dsq_post_id','1802955843'),(46,23,'dsq_parent_post_id',''),(47,23,'dsq_post_id','1867210725'),(48,24,'dsq_parent_post_id','1867210725'),(49,24,'dsq_post_id','1867214616'),(50,25,'dsq_parent_post_id',''),(51,25,'dsq_post_id','1867491120'),(52,26,'dsq_parent_post_id','1867491120'),(53,26,'dsq_post_id','1868108751'),(54,27,'dsq_parent_post_id',''),(55,27,'dsq_post_id','1874850312'),(56,28,'dsq_parent_post_id','1874850312'),(57,28,'dsq_post_id','1874855902'),(58,29,'dsq_parent_post_id','1874855902'),(59,29,'dsq_post_id','1874908991'),(60,30,'dsq_parent_post_id','1874908991'),(61,30,'dsq_post_id','1875039091'),(66,11,'akismet_history','a:4:{s:4:\"time\";d:1425065219.853461;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(67,7,'akismet_history','a:4:{s:4:\"time\";d:1425065251.147279;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(68,6,'akismet_history','a:4:{s:4:\"time\";d:1425065252.6858671;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(69,31,'akismet_result','false'),(70,31,'akismet_history','a:4:{s:4:\"time\";d:1425650933.0096991;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(72,31,'akismet_history','a:4:{s:4:\"time\";d:1426369221.3039989;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(73,32,'akismet_result','false'),(74,32,'akismet_history','a:4:{s:4:\"time\";d:1427465861.173883;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(76,32,'akismet_history','a:4:{s:4:\"time\";d:1427467431.189749;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(77,33,'akismet_result','false'),(78,33,'akismet_history','a:4:{s:4:\"time\";d:1427479905.8194611;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(80,33,'akismet_history','a:4:{s:4:\"time\";d:1427479926.5461209;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(81,34,'dsq_parent_post_id',''),(82,34,'dsq_post_id','1932971056'),(83,35,'dsq_parent_post_id','1932971056'),(84,35,'dsq_post_id','1933226021'),(85,36,'akismet_result','false'),(86,36,'akismet_history','a:4:{s:4:\"time\";d:1427902209.2385459;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(88,36,'akismet_history','a:4:{s:4:\"time\";d:1427902239.151607;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(89,37,'akismet_result','false'),(90,37,'akismet_history','a:4:{s:4:\"time\";d:1429290272.167454;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(91,37,'akismet_as_submitted','a:11:{s:14:\"comment_author\";s:71:\"Building a JSON API with Rails – Part 2: Serialization | Aaron Krauss\";s:18:\"comment_author_url\";s:84:\"https://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:85:\"[&#8230;] Check out the next part in this series: Authentication Strategies [&#8230;]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:9:\"127.0.0.1\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/4.1.1\";s:4:\"blog\";s:23:\"https://thesocietea.org\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:96:\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\";}'),(92,38,'dsq_parent_post_id',''),(93,38,'dsq_post_id','1974185262'),(94,39,'dsq_parent_post_id',''),(95,39,'dsq_post_id','1974862930'),(96,40,'dsq_parent_post_id','1974862930'),(97,40,'dsq_post_id','1975870685'),(98,41,'dsq_parent_post_id','1974185262'),(99,41,'dsq_post_id','1975875334'),(100,37,'akismet_history','a:4:{s:4:\"time\";d:1429896750.511698;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}'),(101,42,'dsq_parent_post_id',''),(102,42,'dsq_post_id','1988517298'),(103,43,'akismet_result','false'),(104,43,'akismet_history','a:4:{s:4:\"time\";d:1430074807.688412;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(105,43,'akismet_as_submitted','a:11:{s:14:\"comment_author\";s:85:\"Building a JSON API with Rails – Part 4: Implementing Authentication | Aaron Krauss\";s:18:\"comment_author_url\";s:98:\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:233:\"[&#8230;] all the benefits of token-based authentication (don&#8217;t remember those benefits? Review them in the last post). For debugging purposes it&#8217;s often a pain to have to worry about authentication, and I kept [&#8230;]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:9:\"127.0.0.1\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/4.1.1\";s:4:\"blog\";s:23:\"https://thesocietea.org\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:96:\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\";}'),(106,44,'dsq_parent_post_id','1988517298'),(107,44,'dsq_post_id','1988720110'),(108,43,'akismet_history','a:4:{s:4:\"time\";d:1430147201.426172;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}');
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (2,158,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:11:27','2014-06-30 18:11:27','[&#8230;] we&#8217;ve established that this site is running on WordPress (wondering why I made that choice? Read about it), I want to delve in further to talk about what else I&#8217;m using, and the tools I used to build [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(3,6,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:15:26','2014-06-30 18:15:26','[&#8230;] About [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(4,154,'How to Learn Vim | Aaron Krauss','','http://thesocietea.org/2014/07/how-to-learn-vim/','162.243.14.224','2014-07-24 18:18:15','2014-07-24 18:18:15','[&#8230;] 7 months later, I&#8217;m following up with my first vim blog post about why you should use vim. If you&#8217;ve made it here, then you&#8217;re either seriously interested in learning vim (which [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(6,233,'Building Javascript with Grunt, Bower, Browserify | Aaron Krauss','','http://thesocietea.org/2014/08/building-javascript-with-grunt-bower-browserify/','162.243.14.224','2014-08-28 14:20:10','2014-08-28 14:20:10','[&#8230;] bower and browserify; if you haven&#8217;t read it yet, I highly recommend you start off by reading Getting Familiar with Bower and Browserify before starting here. Let&#8217;s review our goals regarding javascript building that we landed [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(7,220,'Vim as Your Editor? | Aaron Krauss','','http://thesocietea.org/2014/06/vim-as-your-editor/','162.243.14.224','2014-08-29 00:02:33','2014-08-29 00:02:33','[&#8230;] and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there&#8217;s a bunch of [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(8,305,'OleTange','disqus.com@tange.dk','','130.225.254.30','2014-09-05 11:28:00','2014-09-05 11:28:00','\'ls | xargs -0\' should not work. You need \'find -print0\' or you could use GNU Parallel and skip the -0 as GNU Parallel deals correctly with space, \' and \". GNU Parallel would also make some of the commands more readable:  ls | parallel echo {}\" is a file\"nnLearn more: nn* https://www.youtube.com/playlist?list=PL284C9FF2488BC6D1n* http://www.gnu.org/software/parallel/parallel_tutorial.htmln* http://www.gnu.org/software/parallel/man.html',0,'1','Disqus/1.1(2.77):1575120066','',0,0),(9,305,'somebodyelse','derrich@gmail.com','','209.6.202.77','2014-09-16 23:01:00','2014-09-16 23:01:00','I don\'t know why you felt the need to make this more complicated, since doing this as a one-liner in sed is about as simple as a sed invocation can get:\n\n$ sed -i \'s/vim/v/g\' ',0,'1','Disqus/1.1(2.77):1592261029','',0,0),(10,305,'alkrauss48','alkrauss48@gmail.com','','198.102.159.200','2014-09-16 23:05:00','2014-09-16 23:05:00','You\'re right, and I mention that in my closing paragraph. I use all of these tools but had the least familiarity with sed, and after learning more about it, I wanted to write about it. That turned into wanting to include some tools that you can often times use along with it, and I figured that there are probably other devs out there that may be unfamiliar with some of these tools.\n\n\nErgo, blog post was born!',0,'1','Disqus/1.1(2.77):1592265397','',9,0),(11,142,'Using GeoJSON files with Google Maps API | Aaron Krauss','','http://thesocietea.org/2014/09/using-geojson-files-with-google-maps-api/','162.243.14.224','2014-09-18 14:31:49','2014-09-18 14:31:49','[&#8230;] visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, I am guilty here). By just using the naked Google Maps API libraries, this is impossible. But we don&#8217;t like to [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.0','pingback',0,0),(12,158,'Xavier Combelle','xavier.combelle@gmail.com','','109.223.180.251','2014-10-04 16:57:00','2014-10-04 16:57:00','One could say Wordpress means PHP means very bad code',0,'1','Disqus/1.1(2.77):1619594919','',0,0),(13,158,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2014-10-04 17:04:00','2014-10-04 17:04:00','One could say that, but I don\'t think it\'s a very valid argument. PHP can be written poorly, as can any language, but Wordpress has done a very impressive job of modularizing their logic and allowing for themes to be cleanly built. I\'ve been very happy with it so far - and it still holds true that I\'m using it strictly to manage content. No actual design has been wordpress-theme influenced.',0,'1','Disqus/1.1(2.77):1619602546','',12,0),(14,357,'Egon Elbre','egonelbre@gmail.com','','194.126.102.221','2014-10-26 14:26:00','2014-10-26 14:26:00','go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\n\nRunning that in goroutine isn\'t necessary, that call only registers the handlers... but it doesn\'t do any handling itself.\n\n&gt; Go Wiki uses MongoDB, and there’s a very well-built ORM for Go that I chose to use called mgo.\n\nmgo is not an ORM, at least not by standard usages of ORM.\n\n    import \"../globals\"\n\nDon\'t use relative imports.\n\nglobals - I\'m not sure that package is a good design decision.\n\nhelpers - that code can be organized much better, try to get rid of utils/helpers packages. Also read [Your coding conventions are hurting you](http://www.carlopescio.com/2011/04/your-coding-conventions-are-hurting-you.html).',0,'1','Disqus/1.1(2.77):1654439967','',0,0),(15,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.108.247','2014-12-01 06:34:00','2014-12-01 06:34:00','Is there any way to automatically fetch all dependencies from bower? For example one of my projects uses a lot of external libraries, including jquery, react, noty, etc. It is going to be a little bit hard to import all those dependencies via browserify-shim.',0,'1','Disqus/1.1(2.77):1719891759','',0,0),(16,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-04 22:16:00','2014-12-04 22:16:00','Not yet I don\'t think, but this shouldn\'t be difficult to implement. One option if you are using a common lib like jquery or react is to use the node module version and include it in your package.json as normal, which would skip browserify-shim altogether. Browserify will see it in there and know how to compile it.\n\nBut more realistically for smaller libs, you should only have to add a line like this to the browser key in your package.json file like:\n\n    \"jquery\": \"./vendor/bower_components/jquery/jquery.js\",\n\nsubbing the parts out to be specific to your plugin. That should be all you need to add.',0,'1','Disqus/1.1(2.77):1726170541','',15,0),(17,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.107.189','2014-12-05 10:50:00','2014-12-05 10:50:00','A lot of packages on bower comes in compliance with CommonJS standard, but you still have to import them trough package.json, which is not cool.',0,'1','Disqus/1.1(2.77):1726923924','',16,0),(18,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-05 15:56:00','2014-12-05 15:56:00','Really? Maybe I\'ve just gotten lucky, but if I download a CommonJS dependency through bower, then I just have to \"require\" the actual file path in my pre-browserified javascript and it all seems to work. Additionally, if you want to load a non-CommonJS plugin into the general scope like you would a normal javascript file (and not assign it to a variable), you could also just require the file path as well and not assign it to anything in your pre-browserified javascript.\n\n\nHave you run into any problems using it like that? I\'m not sure what the best practices are about that, seeing as how browserify is ideally used for CommonJS modules.',0,'1','Disqus/1.1(2.77):1727291516','',17,0),(19,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','119.42.89.129','2014-12-05 19:58:00','2014-12-05 19:58:00','I actually don\'t know what are the best standards here, because I just started to use browserify with Flux/React. But actually after reading trough bunch of source code I think I\'m finally got the idea behind browserify. There is no difference between frontend and server side, your code can be executed anywhere and produce same result. That\'s why they use npm instead of browserify.',0,'1','Disqus/1.1(2.77):1727701359','',18,0),(20,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-18 17:40:00','2015-01-18 17:40:00','Considering browserify is all about requires in front-end code, wouldn\'t it be useful for it to traverse bower packages similar to node_modules for installed dependencies? This way one could easily use a lib from bower or npm with just the package name.',0,'1','Disqus/1.1(2.77):1799847916','',16,0),(21,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-01-19 15:12:00','2015-01-19 15:12:00','That would be very nice, but I haven\'t seen any tools that do that. Browserify-shim, while still very awesome, requires you to list out the file locations in your `packcage.json` of your non-CommonJS files. One thing to keep in mind too though is that a lot of front-end packages these days are being written in CommonJS style anyway, so you don\'t even need browserify-shim for those. So for your larger JS libs, you really shouldn\'t have much problem requiring them with plain browserify - but for the smaller libs, I just stick them in the browserify-shim section of the package.json',0,'1','Disqus/1.1(2.77):1802415250','',20,0),(22,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-19 20:44:00','2015-01-19 20:44:00','debowerify seems to do the trick for now https://github.com/eugeneware/debowerify, but ideally this would be built into browserify',0,'1','Disqus/1.1(2.77):1802955843','',21,0),(23,381,'Nate McGuire','natemcguire+disqus@gmail.com','','172.2.16.46','2015-02-21 04:19:00','2015-02-21 04:19:00','Very clean, nicely done. Have been thinking more about using rails like this and backbone/react on the front end. ',0,'1','Disqus/1.1(2.84):1867210725','',0,0),(24,381,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-02-21 04:23:00','2015-02-21 04:23:00','Thank you! We barely just got our feet wet here, so check back in a couple weeks as we continue on. I\'ve built 2 large projects using rails-api (one angular, one ember), and it is so, so nice and super developer friendly (just like the full Rails framework).',0,'1','Disqus/1.1(2.84):1867214616','',23,0),(25,381,'cappie013','besnard.nicolas@gmail.com','','37.228.234.210','2015-02-21 10:58:00','2015-02-21 10:58:00','And as always, no testing ...',0,'1','Disqus/1.1(2.84):1867491120','',0,0),(26,381,'alkrauss48','alkrauss48@gmail.com','','98.162.206.130','2015-02-21 19:35:00','2015-02-21 19:35:00','I wasn\'t originally planning to cover testing, but that\'s a great idea for another post. Testing is SUPER simple with an API; I mean think about it, you don\'t have any html views so you don\'t have to do any integration testing which means less complex tests that run quicker (especially if you normally use a JavaScript driver for your integration tests). My latest rails API project has over 430 tests, and the whole suite runs regularly in 12 seconds!\n\nIf you scaffold API resources like we did here, then you actually have some tests already written for you using TestUnit (though I prefer using RSpec). I\'ll add testing as part 4 - thanks for the motivation!',0,'1','Disqus/1.1(2.84):1868108751','',25,0),(27,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 15:34:00','2015-02-25 15:34:00','Your second to last screenshot \"And then add this to your package.json:\" isn\'t that actually your Gruntfile.js?',0,'1','Disqus/1.1(2.84):1874850312','',0,0),(28,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 15:37:00','2015-02-25 15:37:00','No, that\'s the package.json. Those keys (browser, browserify, and browserify-shim) are all valid keys that browserify and browserify-shim will look for. Grunt just handles the automation - both of those packages still require config in the package.json because they are both node modules.',0,'1','Disqus/1.1(2.84):1874855902','',27,0),(29,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 16:08:00','2015-02-25 16:08:00','Thanks, just learning this. How do I browserify both bower_components (jquery, bootstrap, etc.) AND application javascript files (main.js, etc.)? My goal is for all js to end up in one minified file than will work with browserify requires....',0,'1','Disqus/1.1(2.84):1874908991','',28,0),(30,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 17:23:00','2015-02-25 17:23:00','If you look at that last code block in this post, you\'ll see I both require jquery and modernizr (both of which are bower_components with paths set in the package.json). Just as you require those modules, you can also require custom modules that you write as well, and use the path of the file inside the require quotes. Now you might think \"I\'m not writing modules, I just have regular client-side code;\" if that\'s the case, I suggest you look at how to write a CommonJS style module to house your javascript. It\'s just a great way to structure your javascript, even if it\'s all client-side logic. If you do any Node.js too, that\'s the same style that node modules use too.\n\nAlternatively, if you don\'t want to write CommonJS-style javascript, then you can \'require\' the physical path of those files too, but you\'ll probably need to use browserify-shim and update your package.json to do that like we discuss in this post. Some javascript code is still \'requireable\' even if it\'s not CommonJS-style, but it\'s best to keep it CommonJS such when you use browserify with custom JS code.\n\nTo show you an example project, Staplegun (my company) has a starter-template that browserifies both vendor javascript and custom javascript in the same file:\n\nhttps://github.com/Staplegun-US/site-start/blob/master/src/js/app.js\n\n\n\nCheck out the full github repo to see how everything fits, but that repo is a full example that uses everything discussed in this blog post.',0,'1','Disqus/1.1(2.84):1875039091','',29,0),(31,158,'Launched: Labs and My Beer Adventure | Aaron Krauss','','http://thesocietea.org/2015/03/launched-labs-and-my-beer-adventure/','162.243.14.224','2015-03-06 14:08:52','2015-03-06 14:08:52','[&#8230;] project too, since all I needed was a blog and nothing fancy. My main site runs on WordPress (see why I made that choice), which has been an excellent CMS for all my various content, but I didn&#8217;t need anything that [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(32,381,'Building a JSON API with Rails – Part 2: Serialization | Aaron Krauss','','http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','127.0.0.1','2015-03-27 14:17:41','2015-03-27 14:17:41','[&#8230;] to part 2 of our API building adventure. If you haven&#8217;t read Part 1: Getting Started yet, then I highly recommend you go through that post real quick to make sure we&#8217;re all on [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(33,443,'Building a JSON API with Rails &#8211; Part 1: Getting Started | Aaron Krauss','','http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/','127.0.0.1','2015-03-27 18:11:45','2015-03-27 18:11:45','[&#8230;] No, of course that&#8217;s not it, but look at what we&#8217;ve done so far &#8211; we&#8217;ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you&#8217;re building an API, so if you&#8217;re ready, feel free to move onto part 2. [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(34,443,'Esteban','estebu@gmail.com','','203.144.92.220','2015-03-28 13:35:00','2015-03-28 13:35:00','Looking forward to the Authentication post. When are you planning to release it?',0,'1','Disqus/1.1(2.84):1932971056','',0,0),(35,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-03-28 16:59:00','2015-03-28 16:59:00','Thank you! Authentication will actually cover 2 posts, which will be released on April 17th and May 8th respectively. I\'m on a 3 week schedule with blog posts, which works out really well for me.',0,'1','Disqus/1.1(2.84):1933226021','',34,0),(36,30,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','127.0.0.1','2015-04-01 15:30:09','2015-04-01 15:30:09','[&#8230;] Projects [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(37,487,'Building a JSON API with Rails – Part 2: Serialization | Aaron Krauss','','https://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','127.0.0.1','2015-04-17 17:04:32','2015-04-17 17:04:32','[&#8230;] Check out the next part in this series: Authentication Strategies [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(38,443,'Leigh Halliday','leighhalliday@gmail.com','','108.168.35.248','2015-04-18 13:00:00','2015-04-18 13:00:00','What do you think of the json:api standard? Have you ever tried JSONAPI::Resources?',0,'1','Disqus/1.1(2.84):1974185262','',0,0),(39,443,'TheAshwaniK','aryan.ashwani@gmail.com','','78.145.240.159','2015-04-18 21:45:00','2015-04-18 21:45:00','Thank you for the series of blogs. I am trying to follow your blogs and looking forward for the rest of them to come.\nBy the way, one step seems to be missing, although it may be obvious for some.\nupdating Gemfile with \ngem \'active_model_serializers\', \'~&gt; 0.8.0\'\n\nI was getting an error without it.. \n\nCould not find generator serializers:install.',0,'1','Disqus/1.1(2.84):1974862930','',0,0),(40,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-19 16:18:00','2015-04-19 16:18:00','That\'s a good call - I should have added it to the Gemfile instead of just installing it manually. That way the app would be aware of the new serializer generators. I\'ll update that',0,'1','Disqus/1.1(2.84):1975870685','',39,0),(41,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-19 16:21:00','2015-04-19 16:21:00','I think that standard is a good one when you\'re dealing with a pretty large app, but most importantly one that has a public API for any developer to interact with. I haven\'t ever tried JSONAPI::Resources, but its API looks similar to AMS. I mostly use AMS by default because it\'s well supported and by default plays very well with Ember.js right out of the box.',0,'1','Disqus/1.1(2.84):1975875334','',38,0),(42,504,'TheAshwaniK','aryan.ashwani@gmail.com','','78.145.249.61','2015-04-26 16:59:00','2015-04-26 16:59:00','Thanks.. I have been waiting for this.  Great job.\n\nThe link is broken.',0,'1','Disqus/1.1(2.84):1988517298','',0,0),(43,487,'Building a JSON API with Rails – Part 4: Implementing Authentication | Aaron Krauss','','https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/','127.0.0.1','2015-04-26 19:00:07','2015-04-26 19:00:07','[&#8230;] all the benefits of token-based authentication (don&#8217;t remember those benefits? Review them in the last post). For debugging purposes it&#8217;s often a pain to have to worry about authentication, and I kept [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(44,504,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-26 19:02:00','2015-04-26 19:02:00','Thanks! That link is fixed now',0,'1','Disqus/1.1(2.84):1988720110','',42,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_album`
--

DROP TABLE IF EXISTS `wp_ngg_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_album` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `albumdesc` mediumtext,
  `sortorder` longtext NOT NULL,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_album`
--

LOCK TABLES `wp_ngg_album` WRITE;
/*!40000 ALTER TABLE `wp_ngg_album` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_ngg_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_gallery`
--

DROP TABLE IF EXISTS `wp_ngg_gallery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_gallery` (
  `gid` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `path` mediumtext,
  `title` mediumtext,
  `galdesc` mediumtext,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `author` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`gid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_gallery`
--

LOCK TABLES `wp_ngg_gallery` WRITE;
/*!40000 ALTER TABLE `wp_ngg_gallery` DISABLE KEYS */;
INSERT INTO `wp_ngg_gallery` VALUES (1,'test','test','/wp-content/gallery/test','Test','',0,1,1,410),(2,'test2','test2','wp-content/gallery/test2','Test2','',0,0,1,0);
/*!40000 ALTER TABLE `wp_ngg_gallery` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_pictures`
--

DROP TABLE IF EXISTS `wp_ngg_pictures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_pictures` (
  `pid` bigint(20) NOT NULL AUTO_INCREMENT,
  `image_slug` varchar(255) NOT NULL,
  `post_id` bigint(20) NOT NULL DEFAULT '0',
  `galleryid` bigint(20) NOT NULL DEFAULT '0',
  `filename` varchar(255) NOT NULL,
  `description` mediumtext,
  `alttext` mediumtext,
  `imagedate` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `exclude` tinyint(4) DEFAULT '0',
  `sortorder` bigint(20) NOT NULL DEFAULT '0',
  `meta_data` longtext,
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  `updated_at` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`pid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_pictures`
--

LOCK TABLES `wp_ngg_pictures` WRITE;
/*!40000 ALTER TABLE `wp_ngg_pictures` DISABLE KEYS */;
INSERT INTO `wp_ngg_pictures` VALUES (1,'screen-shot-2015-01-15-at-10-02-57-am',0,1,'Screen-Shot-2015-01-15-at-10.02.57-AM.png',' ','Screen Shot 2015-01-15 at 10.02.57 AM','2015-01-23 23:12:53',0,0,'eyJ3aWR0aCI6MTk2NiwiaGVpZ2h0IjoxODYwLCJmdWxsIjp7IndpZHRoIjoxOTY2LCJoZWlnaHQiOjE4NjB9LCJ0aHVtYm5haWwiOnsid2lkdGgiOjEyMCwiaGVpZ2h0Ijo5MCwiZmlsZW5hbWUiOiJ0aHVtYnNfU2NyZWVuLVNob3QtMjAxNS0wMS0xNS1hdC0xMC4wMi41Ny1BTS5wbmciLCJnZW5lcmF0ZWQiOiIwLjQ3Mzc1MDAwIDE0MjIwNTQ3NzQifSwiYXBlcnR1cmUiOmZhbHNlLCJjcmVkaXQiOmZhbHNlLCJjYW1lcmEiOmZhbHNlLCJjYXB0aW9uIjpmYWxzZSwiY3JlYXRlZF90aW1lc3RhbXAiOmZhbHNlLCJjb3B5cmlnaHQiOmZhbHNlLCJmb2NhbF9sZW5ndGgiOmZhbHNlLCJpc28iOmZhbHNlLCJzaHV0dGVyX3NwZWVkIjpmYWxzZSwiZmxhc2giOmZhbHNlLCJ0aXRsZSI6ZmFsc2UsImtleXdvcmRzIjpmYWxzZSwic2F2ZWQiOnRydWV9',409,1422054774);
/*!40000 ALTER TABLE `wp_ngg_pictures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=22862 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://thesocietea.org','yes'),(2,'blogname','Aaron Krauss','yes'),(3,'blogdescription','Developer','yes'),(4,'users_can_register','0','yes'),(5,'admin_email','alkrauss48@gmail.com','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','1','yes'),(10,'comments_notify','1','yes'),(11,'posts_per_rss','10','yes'),(12,'rss_use_excerpt','0','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','open','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','1','yes'),(21,'posts_per_page','10','yes'),(22,'date_format','F j, Y','yes'),(23,'time_format','g:i a','yes'),(24,'links_updated_date_format','F j, Y g:i a','yes'),(25,'comment_moderation','0','yes'),(26,'moderation_notify','1','yes'),(27,'permalink_structure','/%year%/%monthnum%/%postname%/','yes'),(28,'gzipcompression','0','yes'),(29,'hack_file','0','yes'),(30,'blog_charset','UTF-8','yes'),(31,'moderation_keys','','no'),(32,'active_plugins','a:8:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:37:\"post-types-order/post-types-order.php\";i:5;s:39:\"search-everything/search-everything.php\";i:6;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:7;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','yes'),(33,'home','https://thesocietea.org','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'advanced_edit','0','yes'),(37,'comment_max_links','2','yes'),(38,'gmt_offset','0','yes'),(39,'default_email_category','1','yes'),(40,'recently_edited','','no'),(41,'template','the_societea','yes'),(42,'stylesheet','the_societea','yes'),(43,'comment_whitelist','1','yes'),(44,'blacklist_keys','','no'),(45,'comment_registration','0','yes'),(46,'html_type','text/html','yes'),(47,'use_trackback','0','yes'),(48,'default_role','subscriber','yes'),(49,'db_version','30133','yes'),(50,'uploads_use_yearmonth_folders','1','yes'),(51,'upload_path','','yes'),(52,'blog_public','1','yes'),(53,'default_link_category','0','yes'),(54,'show_on_front','page','yes'),(55,'tag_base','','yes'),(56,'show_avatars','1','yes'),(57,'avatar_rating','G','yes'),(58,'upload_url_path','','yes'),(59,'thumbnail_size_w','150','yes'),(60,'thumbnail_size_h','150','yes'),(61,'thumbnail_crop','1','yes'),(62,'medium_size_w','300','yes'),(63,'medium_size_h','300','yes'),(64,'avatar_default','mystery','yes'),(65,'large_size_w','1024','yes'),(66,'large_size_h','1024','yes'),(67,'image_default_link_type','file','yes'),(68,'image_default_size','','yes'),(69,'image_default_align','','yes'),(70,'close_comments_for_old_posts','0','yes'),(71,'close_comments_days_old','14','yes'),(72,'thread_comments','1','yes'),(73,'thread_comments_depth','5','yes'),(74,'page_comments','0','yes'),(75,'comments_per_page','50','yes'),(76,'default_comments_page','newest','yes'),(77,'comment_order','asc','yes'),(78,'sticky_posts','a:0:{}','yes'),(79,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(82,'uninstall_plugins','a:1:{s:27:\"wp-markdown/wp-markdown.php\";a:2:{i:0;s:18:\"WordPress_Markdown\";i:1;s:9:\"uninstall\";}}','no'),(83,'timezone_string','','yes'),(84,'page_for_posts','0','yes'),(85,'page_on_front','4','yes'),(86,'default_post_format','0','yes'),(87,'link_manager_enabled','0','yes'),(88,'initial_db_version','27916','yes'),(89,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:72:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:24:\"NextGEN Gallery overview\";b:1;s:19:\"NextGEN Use TinyMCE\";b:1;s:21:\"NextGEN Upload images\";b:1;s:22:\"NextGEN Manage gallery\";b:1;s:19:\"NextGEN Manage tags\";b:1;s:29:\"NextGEN Manage others gallery\";b:1;s:18:\"NextGEN Edit album\";b:1;s:20:\"NextGEN Change style\";b:1;s:22:\"NextGEN Change options\";b:1;s:24:\"NextGEN Attach Interface\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(90,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(91,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(92,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(93,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(95,'sidebars_widgets','a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(96,'_transient_random_seed','53bb1a07f9ca7c5aebd1a7902df481de','yes'),(97,'logged_in_key','as>*,uS,x),u3]<T[U2:Q)n}xljY4e;)x]nWvO3P)QOn/LHEA7p/3d}=4t+@^)7}','yes'),(98,'logged_in_salt','Ypq39}RyWXsy1B3~~v)-2dDC7^;tv>.mk3!FeTW*>ERc$IG McCio3Acw-^ P0a5','yes'),(99,'cron','a:11:{i:1430240922;a:1:{s:14:\"dsq_sync_forum\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1430245095;a:1:{s:24:\"akismet_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1430248620;a:1:{s:20:\"wp_maybe_auto_update\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1430260517;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1430260521;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1430260905;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1432317639;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"2ee02375757d9b1657173557820cbf59\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:524;}}}}i:1434128442;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"e76b6b0e5ab2be81b2ec61d92fdacc3f\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:564;}}}}i:1435946456;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"1aeb0232eba4a50c140068bba47eabed\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:466;}}}}i:1437760842;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"8e0d9af8d2ac09c18b3ffc2f78ecde5f\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:607;}}}}s:7:\"version\";i:2;}','yes'),(101,'auth_key','.YPV8;p%Dgf[M</ZvwZAk9*Wgyt~NO^05,,r=FGJ/7?*!!^X^L >,y6{rq2Lmm6Z','yes'),(102,'auth_salt','mJFh)O;WpeY}AS>Tf0bWE{kRX7)G1Z-Dy,-`QxoKw}<#Ed^ZD]~(ra*6y%DobD]/','yes'),(109,'nonce_key','Q,^Q}ytXd29u^.kLt=@iW*_Q!4OYpNYyfWme[W0A.2s1-m:P@d}:mybjU.O3v~+1','yes'),(110,'nonce_salt','+celW{qLF`rD)*]f?X3k$l&8`o$Uqfo4.7&ylB&u$Mt^U%*n4]}EC|PhlM~Ep}kA','yes'),(132,'current_theme','','yes'),(133,'theme_mods_the_societea','a:7:{i:0;b:0;s:16:\"background_color\";s:6:\"ffffff\";s:16:\"background_image\";s:0:\"\";s:17:\"background_repeat\";s:6:\"repeat\";s:21:\"background_position_x\";s:4:\"left\";s:21:\"background_attachment\";s:5:\"fixed\";s:18:\"nav_menu_locations\";a:0:{}}','yes'),(134,'theme_switched','','yes'),(138,'widget_pages','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(139,'widget_calendar','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(140,'widget_tag_cloud','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(141,'widget_nav_menu','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(145,'recently_activated','a:0:{}','yes'),(146,'theme_mods_twentyfourteen','a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1401768087;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(151,'cfs_next_field_id','23','yes'),(152,'cfs_version','2.4.2','yes'),(154,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(266,'cpto_options','a:3:{s:8:\"autosort\";s:1:\"1\";s:9:\"adminsort\";s:1:\"1\";s:10:\"capability\";s:13:\"switch_themes\";}','yes'),(267,'CPT_configured','TRUE','yes'),(319,'category_children','a:0:{}','yes'),(898,'akismet_available_servers','a:4:{s:12:\"66.135.58.62\";b:1;s:12:\"66.135.58.61\";b:1;s:12:\"192.0.80.244\";b:1;s:12:\"192.0.80.246\";b:1;}','yes'),(899,'akismet_connectivity_time','1404312065','yes'),(900,'akismet_strictness','0','yes'),(901,'akismet_show_user_comments_approved','0','yes'),(902,'wordpress_api_key','ae40d7cbc870','yes'),(1126,'syntaxhighlighter_settings','a:15:{s:9:\"shversion\";i:3;s:5:\"theme\";s:5:\"rdark\";s:6:\"gutter\";i:1;s:9:\"autolinks\";i:1;s:9:\"smarttabs\";i:1;s:9:\"wraplines\";i:1;s:9:\"classname\";s:0:\"\";s:9:\"firstline\";s:1:\"1\";s:14:\"padlinenumbers\";s:5:\"false\";s:7:\"tabsize\";s:1:\"4\";s:5:\"title\";s:0:\"\";s:14:\"loadallbrushes\";i:0;s:8:\"collapse\";i:0;s:5:\"light\";i:0;s:7:\"toolbar\";i:0;}','yes'),(2086,'disqus_active','1','yes'),(2087,'disqus_version','2.77','yes'),(2088,'disqus_forum_url','thesocietea','yes'),(2089,'disqus_cc_fix','1','yes'),(2090,'disqus_api_key','0C4Uv5QN6RrHuDFrLFF6A0r59ittV0QaxfWmssw1c9qsNI30YSnCEvJAdBsA31xf','yes'),(2091,'disqus_user_api_key','aJgw8hjUIqv5lCT6fsRBqfZrHKwpWYehUZMebLxvCWAND1FSpKQJxVvcTYD7cNnE','yes'),(2092,'disqus_replace','all','yes'),(2163,'disqus_last_comment_id','1988720110','yes'),(4107,'se_meta','a:10:{s:7:\"blog_id\";b:0;s:7:\"api_key\";b:0;s:8:\"auth_key\";b:0;s:7:\"version\";s:5:\"8.1.3\";s:13:\"first_version\";s:5:\"8.1.2\";s:8:\"new_user\";b:1;s:4:\"name\";s:0:\"\";s:5:\"email\";s:0:\"\";s:24:\"show_options_page_notice\";b:0;s:16:\"se_global_notice\";N;}','yes'),(4108,'se_options','a:21:{s:21:\"se_exclude_categories\";s:0:\"\";s:26:\"se_exclude_categories_list\";s:0:\"\";s:16:\"se_exclude_posts\";s:0:\"\";s:21:\"se_exclude_posts_list\";s:0:\"\";s:18:\"se_use_page_search\";b:0;s:21:\"se_use_comment_search\";b:1;s:17:\"se_use_tag_search\";b:1;s:17:\"se_use_tax_search\";b:1;s:22:\"se_use_category_search\";b:1;s:25:\"se_approved_comments_only\";b:1;s:22:\"se_approved_pages_only\";b:0;s:21:\"se_use_excerpt_search\";b:0;s:19:\"se_use_draft_search\";b:0;s:24:\"se_use_attachment_search\";b:0;s:14:\"se_use_authors\";b:0;s:18:\"se_use_cmt_authors\";b:0;s:22:\"se_use_metadata_search\";b:1;s:16:\"se_use_highlight\";b:1;s:18:\"se_highlight_color\";s:6:\"orange\";s:18:\"se_highlight_style\";s:0:\"\";s:19:\"se_research_metabox\";a:2:{s:18:\"visible_on_compose\";b:1;s:23:\"external_search_enabled\";b:0;}}','yes'),(4885,'WPLANG','','yes'),(4886,'db_upgraded','','yes'),(11076,'auto_core_update_notified','a:4:{s:4:\"type\";s:6:\"manual\";s:5:\"email\";s:20:\"alkrauss48@gmail.com\";s:7:\"version\";s:5:\"4.0.1\";s:9:\"timestamp\";i:1416528264;}','yes'),(14330,'_site_transient_timeout_browser_0d0584c2542c12aacf9d54fa4c3b24c5','1422470965','yes'),(14331,'_site_transient_browser_0d0584c2542c12aacf9d54fa4c3b24c5','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.95\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(14336,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1421909367','no'),(14337,'_transient_feed_867bd5c64f85878d03a060509cd2f92c','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Matt: Where dreams go\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/01/where-dreams-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/01/where-dreams-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:263:\"<blockquote><p>Within your heart keep one still, secret spot where dreams may go, and sheltered so, may thrive and grow where doubt and fear are not. Oh, keep a place within your heart, for little dreams to go.</p></blockquote>\n<p>&#8212;&nbsp;Louise Driscoll</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Jan 2015 05:46:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: Archive WordPress Content with the Archived Post Status Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37591\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/archive-wordpress-content-with-the-archived-post-status-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5260:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status.jpg\" rel=\"prettyphoto[37591]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status.jpg?resize=772%2C310\" alt=\"archived-post-status\" class=\"aligncenter size-full wp-image-37597\" /></a></p>\n<p>WordPress plugin developer <a href=\"http://frankiejarrett.com/\" target=\"_blank\">Frankie Jarrett</a> has been on a roll this month, pumping out plugin releases on WordPress.org. Last year, Jarrett <a href=\"http://frankiejarrett.com/parting-ways-churchthemes-net-looking-ahead-toward-brighter-future/\" target=\"_blank\">sold ChurchThemes.net to Lift</a> co-founders Chris Wallace and Brad Miller. Since that time he has been focusing on product development for <a href=\"https://wp-stream.com/\" target=\"_blank\">WP Stream</a>, which has allowed him a few extra minutes to create some free extensions for WordPress.</p>\n<p>At the end of December and in early January, he released five small but highly useful plugins:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/compact-view-mode/\" target=\"_blank\">Compact View Mode</a></li>\n<li><a href=\"https://wordpress.org/plugins/user-session-control/\" target=\"_blank\">User Session Control</a></li>\n<li><a href=\"https://wordpress.org/plugins/prevent-concurrent-logins/\" target=\"_blank\">Prevent Concurrent Logins</a></li>\n<li><a href=\"https://wordpress.org/plugins/json-rest-api-force-ssl/\" target=\"_blank\">JSON REST API Force SSL</a></li>\n<li><a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a></li>\n</ul>\n<p>Several of his latest creations are handy for membership sites and web applications. <a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a> caught my eye, because adds more flexibility for using WordPress as a CMS. The plugin adds a new post status that enables posts and pages to be archived. This effectively allows you to unpublish content without having to send it back to draft status.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status-dropdown.png\" rel=\"prettyphoto[37591]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-post-status-dropdown.png?resize=600%2C400\" alt=\"archived-post-status-dropdown\" class=\"aligncenter size-full wp-image-37611\" /></a></p>\n<p>WordPress&#8217; default <a href=\"http://codex.wordpress.org/Post_Status\" target=\"_blank\">post statuses</a> currently work very much like an on/off switch as far as a finished post is concerned. Of the eight default statuses, Published is the only one that is public, while all the rest remain behind the curtain in various states of unreadiness. None of the statuses, apart from Published, adequately indicate that a post is complete or finished.</p>\n<p>Fortunately, WordPress makes it possible for developers to register their own <a href=\"http://codex.wordpress.org/Post_Status#Custom_Status\" target=\"_blank\">custom post statuses</a>, which is what Jarrett did with this plugin. He created it for sites where content is not always meant to be evergreen. It allows you to archive posts in the same way that you might archive email.</p>\n<p>Archived Post Status is compatible with posts, pages, and custom post types, giving you a wide array of possible use cases:</p>\n<ul>\n<li>Archive pages or posts from a conference or event for editing and re-use next year</li>\n<li>Archive real estate listings for records</li>\n<li>Cycle portfolio content in and out of the site as necessary</li>\n<li>Temporarily remove listings from a site that indexes businesses or organizations</li>\n<li>Archive products to bring back for future use</li>\n</ul>\n<p>While custom post types seem to be one of the most likely uses for this plugin, you may not want to have the archived status available to all post types. Jarrett includes a <a href=\"https://wordpress.org/plugins/archived-post-status/faq/\" target=\"_blank\">filter</a> that allows you to exclude the Archived status from appearing on certain post types.</p>\n<p>Some might be wondering why you wouldn&#8217;t use the Draft status, since the Archived post status essentially puts a post in the same state. To use drafts in this way would be to split its purpose into multiple uses, which are not clearly separated when sorting. If you are looking for previously published content that is complete, while hunting through all drafts in progress, you have to be fully knowledgeable of all the content on the site and use your memory to do the sorting. The archived status keeps everything nicely sorted for future use.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-posts-list-screen.png\" rel=\"prettyphoto[37591]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/archived-posts-list-screen.png?resize=600%2C400\" alt=\"archived-posts-list-screen\" class=\"aligncenter size-full wp-image-37614\" /></a></p>\n<p>If you need a non-public archive of completed posts, this simple plugin will do the trick. I tested it and works exactly as advertised. Download <a href=\"https://wordpress.org/plugins/archived-post-status/\" target=\"_blank\">Archived Post Status</a> from WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Jan 2015 01:29:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Modern: A Beautiful Free Blog and Portfolio Theme for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37303\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/modern-a-beautiful-free-blog-and-portfolio-theme-for-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4293:\"<p>In just one week since its release, the new <a href=\"https://wordpress.org/themes/modern\" target=\"_blank\">Modern</a> theme was downloaded nearly 2,700 times from WordPress.org. It was created by <a href=\"http://www.webmandesign.eu/\" target=\"_blank\">WebMan Design</a>, a Slovakia-based company founded by Oliver Juhas. WebMan Design has been selling WordPress themes across multiple marketplaces since 2012 and recently began focusing on producing future-proof themes that meet WordPress.org standards.</p>\n<p>Modern is the company&#8217;s second free theme on WordPress.org, following the <a href=\"https://wordpress.org/themes/mustang-lite\" target=\"_blank\">Mustang Lite</a> business theme released last year. It was designed for personal and small business portfolios.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/modern.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/modern.jpg?resize=880%2C660\" alt=\"modern\" class=\"aligncenter size-full wp-image-37554\" /></a></p>\n<p>Modern&#8217;s bold style incorporates a fullscreen header slideshow that is perfect for showcasing large images with header text. The homepage features your latest blog posts along with an optional sortable portfolio section. The header includes two menu locations for the primary navigation and the social links menu.</p>\n<p>All of the customization options for the theme are built into WordPress&#8217; native customizer, including the following:</p>\n<ul>\n<li>Add your own 1920 × 1080 header image</li>\n<li>Footer widget area</li>\n<li>Color picker to set background color, text color, accent color, and accent text color</li>\n<li>Customize predefined texts on the homepage</li>\n<li>Typography options for setting logo font, heading font, general text font, font subset, basic font size</li>\n</ul>\n<p>Modern offers unique styles for each of WordPress&#8217; default <a href=\"http://codex.wordpress.org/Post_Formats\" target=\"_blank\">post formats</a>. The demo&#8217;s <a href=\"http://themedemos.webmandesign.eu/modern/style-guide/\" target=\"_blank\">style guide</a> page shows that the theme author took many of the smaller details into consideration, including code formatting, blockquotes, lists, table styles, highlighted text style, image alignment, Jetpack Mosaic galleries and more.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/post-formats.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/post-formats.jpg?resize=1025%2C617\" alt=\"post-formats\" class=\"aligncenter size-full wp-image-37575\" /></a></p>\n<p>The heart icons you see in the single post meta are powered by the free <a href=\"http://www.themezilla.com/plugins/zillalikes\" target=\"_blank\">ZillaLikes plugin</a> from ThemeZilla. Modern includes support for Jetpack to manage the portfolio posts, logo image, and uses its featured content module to power the homepage banner. It also includes support for <a href=\"http://schema.org/\" target=\"_blank\">Schema.org</a> markup and <a href=\"https://github.com/zamoose/themehookalliance\" target=\"_blank\">Theme Hook Alliance</a> action hooks.</p>\n<p>WebMan Design developed the theme with performance in mind and links to <a href=\"http://tools.pingdom.com/fpt/#!/bHfVKJ/http://themedemos.webmandesign.eu/modern/\" target=\"_blank\">Pingdom</a> results of load tests for the demo site. The demo site takes 1.73s to load and gets a 94/100 performance grade.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/theme-demo-performance.jpg\" rel=\"prettyphoto[37303]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/theme-demo-performance.jpg?resize=631%2C235\" alt=\"theme-demo-performance\" class=\"aligncenter size-full wp-image-37567\" /></a></p>\n<p>Check out a <a href=\"http://themedemos.webmandesign.eu/modern/\" target=\"_blank\">live demo</a> of the Modern theme in action. WebMan Design has created extensive <a href=\"http://www.webmandesign.eu/manual/modern/\" target=\"_blank\">documentation</a> for the theme, its various styles, and available third-party plugin integrations. <a href=\"https://wordpress.org/themes/modern\" target=\"_blank\">Modern</a> is available for download from WordPress.org or via your admin themes browser.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 21:37:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: Calling People Out in the WordPress Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37545\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/calling-people-out-in-the-wordpress-community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3289:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/NameandShameFeaturedImage.png\" rel=\"prettyphoto[37545]\"><img class=\"size-full wp-image-37564\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/NameandShameFeaturedImage.png?resize=638%2C288\" alt=\"Name and Shame Featured Image\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/66662429@N07/8065770370/\">Adarsh A</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>The founder of <a title=\"http://www.wpsitecare.com/\" href=\"http://www.wpsitecare.com/\">WP Site Care</a>, Ryan Sullivan, <a title=\"http://www.ryandsullivan.com/negative-seo/\" href=\"http://www.ryandsullivan.com/negative-seo/\">explains </a>how a negative SEO campaign nearly took his business offline. Sullivan shares details behind the attack, how it affected the bottom line, and says it was someone in the WordPress community who orchestrated the attack.</p>\n<blockquote><p>Using some sophisticated techniques we were able to trace back to the source of the spam attack and unfortunately found out that the attack was started by someone within the WordPress community.</p>\n<p>They did everything through a third-party, an internet hitman of sorts, to try to cover their tracks, but they weren’t quite careful enough and we were able to uncover where everything started.</p></blockquote>\n<p>Instead of naming the individual, Sullivan left a message aimed specifically at the person responsible, &#8220;The only reason I even mention it is so that hopefully, that person reads this, and knows that what they’re doing is impacting the livelihood’s of people and their families.&#8221; It&#8217;s this message which has me wondering, is it time to name and shame people in the WordPress community?</p>\n<h2>The Good</h2>\n<p>In my experience, the community rarely calls people out, even if they have <a title=\"http://womenofwp.org/2014/01/how-to-report-harassment-at-wordcamps/\" href=\"http://womenofwp.org/2014/01/how-to-report-harassment-at-wordcamps/\">routinely harassed others</a> at a WordCamp. Instead, we usually find out about them through back channels. By calling people out, it warns others and makes everyone aware of the situation.</p>\n<h2>The Bad</h2>\n<p>Naming and shaming creates the potential for libel and defamation lawsuits. The internet has a long memory and if a person changes for the better, it will be hard to forget mistakes made in the past. It could hurt future employment opportunities as employers do background checks using Google. There&#8217;s likely a lot of unintended consequences as well.</p>\n<h2>Judge and Jury</h2>\n<p>I doubt the community will start calling people out, as it creates anger, grief, and drama. Besides, who are we to act as judge and jury? However, it bothers me to know that an unnamed person is negatively impacting the livelihood of WordPress businesses and people.</p>\n<p>On one hand, I want to see the individual dealt with in the public sphere and turned into an example. On the other, I feel it&#8217;s probably not the best way to go about it. Maybe the system already in place is the best way to handle these types of situations? Write a post, raise awareness, and tell others who to watch out for in the back channel. What do you think?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 20:41:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Not the Only One\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44610\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/01/not-the-only-one/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:139:\"<p>I know I&#8217;m like a year late on Sam Smith, but his voice on this is so amazing and haunting, it&#8217;s a perfect song.</p>\n<p></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Jan 2015 06:35:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: The Philanthropic Side of The WordPress Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37461\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/the-philanthropic-side-of-the-wordpress-community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14236:\"<p>Whether it&#8217;s businesses participating in charity work or individuals who need financial assistance, the WordPress community has repeatedly shown how generous it is. Here&#8217;s at look at some WordPress businesses that participate in philanthropy and individuals who experienced the community&#8217;s generosity first hand.</p>\n<h2>Matt Mullenweg Co-creator of WordPress</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/CharityWaterImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37503\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/CharityWaterImage.png?resize=874%2C561\" alt=\"CharityWater Image\" /></a></p>\n<p>Matt Mullenweg is a strong believer in providing easy access to clean drinking water to regions of the world who need it most. He works with several charities and organizations including:</p>\n<ul>\n<li><a href=\"http://archive.org/\">Archive.org</a></li>\n<li><a href=\"http://www.alaskawild.org/\">Alaska Wilderness League</a></li>\n<li><a href=\"http://apache.org/\">Apache Foundation</a></li>\n<li><a href=\"http://thebaylights.org/\">Bay Lights</a></li>\n<li><a href=\"http://charitywater.org/\">charity: water</a></li>\n<li><a href=\"http://eff.org/\">Electronic Frontier Foundation</a></li>\n<li><a href=\"http://grist.org/\">Grist</a> (board member)</li>\n<li><a href=\"http://www.innocenceproject.org/\">Innocence Project</a></li>\n<li><a href=\"http://longnow.org/\">Long Now Foundation</a></li>\n<li><a href=\"http://www.rothkochapel.org/\">Rothko Chapel</a></li>\n<li><a href=\"http://samasource.org\">Samasource</a></li>\n<li><a href=\"http://www.us-irelandalliance.org/\">US-Ireland Alliance</a></li>\n</ul>\n<p>To celebrate his 30th birthday, Mullenweg requested that donations be made to his <a title=\"https://my.charitywater.org/matt-30\" href=\"https://my.charitywater.org/matt-30\">Charity water campaign</a> in lieu of gifts. The goal was $30K, but the campaign raised over $44K.</p>\n<h2>Mitch Canter of Studionashvegas</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/JusticeandMercyImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37505\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/JusticeandMercyImage.png?resize=374%2C140\" alt=\"Justice and Mercy International\" /></a></p>\n<p>Mitch Canter runs <a title=\"http://www.studionashvegas.com\" href=\"http://www.studionashvegas.com\">Studionashvegas</a>, a full service WordPress development agency. Canter has attended two mission trips with a group called <a title=\"http://justiceandmercy.org/\" href=\"http://justiceandmercy.org/\">Justice and Mercy International</a>. The group&#8217;s mission is to <em>make justice personal for the poor, the orphaned, and the forgotten</em>. He&#8217;s also <a title=\"https://medium.com/@mitchcanter/ive-left-my-heart-in-moldova-3012799c4c60\" href=\"https://medium.com/@mitchcanter/ive-left-my-heart-in-moldova-3012799c4c60\">traveled to Chisinau, Moldova</a> and Prague, Czech Republic to help assess long-term needs and provide any necessary supplies for the short-term as well as interact with local children.</p>\n<p>Canter and his wife also sponsor Veronica, a Moldovan orphan, through Justice and Mercy International. The couple routinely writes letters to Veronica and plans to see her the next time they visit the country. They also serve in their local church and volunteer with the local food bank, <a title=\"http://www.onegenaway.com/\" href=\"http://www.onegenaway.com/\">One Gen Away</a>, to provide meals to families who are in need.</p>\n<h2>Syed Balkhi of WPBeginner</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/PencilsofPromiseLogo.png\" rel=\"prettyphoto[37461]\"><img class=\"alignright size-full wp-image-37506\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/PencilsofPromiseLogo.png?resize=245%2C72\" alt=\"Pencils of Promise Logo\" /></a>Since 2013, Syed Balkhi and WPBeginner have helped build at least three new schools in Guatemala through the <a title=\"http://pencilsofpromise.org/\" href=\"http://pencilsofpromise.org/\">Pencils of Promise</a> charity. Pencils of Promise is a for-purpose organization that builds schools, trains teachers, and funds scholarships. In 2014, WPBeginner <a title=\"http://wptavern.com/wpbeginner-turns-5-celebrates-with-campaign-to-build-two-new-schools-in-guatemala\" href=\"http://wptavern.com/wpbeginner-turns-5-celebrates-with-campaign-to-build-two-new-schools-in-guatemala\">celebrated its 5th birthday</a> by hosting a huge giveaway and launching a $50K campaign to fund two new schools. The <a title=\"http://wptavern.com/wpbeginner-reaches-funding-goal-to-build-two-new-schools\" href=\"http://wptavern.com/wpbeginner-reaches-funding-goal-to-build-two-new-schools\">campaign was successful</a> and Balkhi says the goal for this year is to build three new schools.</p>\n<h2>PressNomics</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/StJudeChildrensHospital.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37507\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/StJudeChildrensHospital.png?resize=784%2C443\" alt=\"St Jude Childrens Hospital\" /></a></p>\n<p>PressNomics is an <a title=\"http://pressnomics.com/\" href=\"http://pressnomics.com/\">annual conference</a> dedicated to the business side of WordPress. Each year, the event donates a portion of its proceeds to <a href=\"http://www.stjude.org\">St. Jude Children&#8217;s Research Hospital</a>. Pagely Co-founder, Joshua Strebel, says the decision to donate to St. Jude was made long before he and his wife had kids, &#8220;St Jude has been our charity of choice for many years. Even before Sally and I had kids, we were touched by those commercials that showed the kids fighting cancer. I&#8217;ve always had a soft spot for kids, coming from a large family. Of all the charities you could give to, St. Jude is a no brainer.&#8221;</p>\n<p>Since 2012, the event has donated over $11K to St. Jude Hospital and Strebel says funding from PressNomics 3 this year will allow them to donate over $10K to a <em>charity yet to be named</em>. &#8220;After PressNomics 1, we donated a little over $5K and there was an anonymous matching donation. After PressNomics 2, we donated a little over $6K. This year the budget has allowed us to donate just over $10K.&#8221;</p>\n<h2>DonorsChoose.org</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/DonorsChooseImage.png\" rel=\"prettyphoto[37461]\"><img class=\"aligncenter size-full wp-image-37501\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/DonorsChooseImage.png?resize=1025%2C527\" alt=\"DonorsChoose\" /></a><br />\nWhen I reached out to the community to figure out who gives to charities, I discovered a number of people who use <a title=\"http://www.donorschoose.org/\" href=\"http://www.donorschoose.org/\">DonorsChoose</a>. DonorsChoose is an organization that makes it easy to help classrooms in need. Public school teachers post classroom project requests, which range from pencils for poetry to microscopes for mitochondria-organization.</p>\n<p><a title=\"https://eamann.com/\" href=\"https://eamann.com/\">Eric Mann</a>, who contributes to the organization, had a lot of friends in college who majored in education and went on to become teachers. He discovered that many of them worked in schools with small budgets and limited supplies. He explains why he uses DonorsChoose.org.</p>\n<blockquote><p>I use DonorsChoose.org to help fund the purchase of books for classroom lessons, field trips to museums and science exhibits, and modern laptop computers for technical education. Many of the teachers I sponsor are working in low-income areas with at-risk youth and don&#8217;t have the tools available to make much of a difference without community sponsorship.</p></blockquote>\n<p>Mann believes investing in education is one of the best long-term investments you can make, &#8220;It&#8217;s easy to spend money on this Kickstarter or that IndieGoGo when you get a tangible (or digital) return on the investment. Spending money to help protect and shepherd the education of today&#8217;s youth, though, returns an investment in better educated leaders, educators, and technologists for tomorrow.&#8221;</p>\n<h2>WP Site Care</h2>\n<p>WordPress support agency, <a title=\"http://www.wpsitecare.com\" href=\"http://www.wpsitecare.com\">WP Site Care</a>, contributed to <a title=\"http://www.wpsitecare.com/5-minutes-reflection-look-back-2014/\" href=\"http://www.wpsitecare.com/5-minutes-reflection-look-back-2014/\">several different organizations and initiatives</a> throughout 2014. The list is lengthy and includes:</p>\n<ul>\n<li><a href=\"http://www.autismspeaks.org/\" target=\"_blank\">Autism Speaks</a></li>\n<li><a href=\"http://dangilmore.com/blog/2014/12/04/help-my-wife-fight-cancer/\" target=\"_blank\">Dan Gilmore’s St. Baldrick’s Cancer Campaign</a></li>\n<li><a href=\"https://www.indiegogo.com/projects/buddypress-bbpress-glotpress-development\" target=\"_blank\">BuddyPress, bbPress and GlotPress Development</a></li>\n<li><a href=\"http://www.girlswritenow.org/\" target=\"_blank\">Girls Write Now</a></li>\n<li><a href=\"http://www.girldevelopit.com/\" target=\"_blank\">Girl Develop It</a></li>\n<li><a href=\"https://www.charitywater.org/\" target=\"_blank\">Charity Water</a></li>\n<li><a href=\"http://www.alsa.org/\" target=\"_blank\">ALS Association</a></li>\n<li><a href=\"http://www.aidswalk.net/\" target=\"_blank\">AIDS Walk</a></li>\n<li><a href=\"http://www.heartspring.org/\" target=\"_blank\">HeartSpring</a></li>\n<li><a href=\"http://us.movember.com/\" target=\"_blank\">Movember</a></li>\n<li><a href=\"http://www.afsp.org/\" target=\"_blank\">American Foundation for Suicide Prevention</a></li>\n<li><a href=\"http://www.happyjoe.org/\" target=\"_blank\">Happy Joe</a></li>\n</ul>\n<p>I asked WP Site Care founder, Ryan Sullivan, why he chooses to give back to so many charities and what it means to give back.</p>\n<blockquote><p>We support a number of different causes because any charitable contributions that we’re able to make are a direct reflection of the people at our company. We found out about a number of causes from the WordPress community itself. For example, funding treatment for autism is something that has a personal impact on a few of us at WP Site Care.</p>\n<p>We like to make sure that the causes that are important to individuals become important for all of us collectively. It not only goes to help the causes themselves, but helps us get closer as a working family.</p></blockquote>\n<h2>Individuals Who Received Financial Assistance From The WordPress Community</h2>\n<p><strong>Just Tadlock</strong> &#8211; Near the end of 2013, Justin Tadlock <a title=\"http://justintadlock.com/archives/2013/12/17/help-me-get-a-house-for-christmas\" href=\"http://justintadlock.com/archives/2013/12/17/help-me-get-a-house-for-christmas\">discovered the perfect house</a>, but he didn&#8217;t have the money to cover closing costs, quarterly taxes, and appliances. He requested $5K to cover his costs, but he ended up receiving over $7K. It&#8217;s important to note that the campaign took place around Christmas which is a tough time financially for a number of people. However, the community rallied together to give Tadlock the ultimate Christmas gift.</p>\n<p><strong>Dan Griffiths</strong> &#8211; Dan Griffiths, who is known on Twitter as <a title=\"https://twitter.com/ghost1227\" href=\"https://twitter.com/ghost1227\">Ghost1227</a> and one of the creators of <a title=\"http://wptally.com/\" href=\"http://wptally.com/\">WP Tally,</a> recently found himself in a financial emergency. He needed $2,500 within 24 hours. He reached out to <a title=\"http://wptavern.com/happy-joe-uses-wordpress-to-train-and-help-veterans-find-careers-in-web-technology\" href=\"http://wptavern.com/happy-joe-uses-wordpress-to-train-and-help-veterans-find-careers-in-web-technology\">Happy Joe</a>, an organization that helps veterans in need. Happy Joe founder, James Dalman, published an all points bulletin on Twitter asking for help from the WordPress community. Within <strong>two hours</strong> of the initial call for help, Griffiths reached his goal.</p>\n<p><strong>Kim Parsell&#8217;s Son</strong> &#8211; Kim Parsell&#8217;s son was about to begin a new job when tragically, his <a title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">mother passed away</a>. He wasn&#8217;t able to start the job, putting him in a financial bind. He <a title=\"http://www.gofundme.com/wpmom\" href=\"http://www.gofundme.com/wpmom\">created a campaign</a> asking for $1K to help pay bills as he mourned the loss of his mother. Within 42 minutes, 8 people raised $760 of the requested $1,000. When it was all said and done, 33 people raised $2K.</p>\n<p><strong>John James Jacoby</strong> &#8211; In late 2014, John James Jacoby <a title=\"http://wptavern.com/john-james-jacoby-launches-indiegogo-campaign-to-fund-buddypress-bbpress-and-glotpress-development\" href=\"http://wptavern.com/john-james-jacoby-launches-indiegogo-campaign-to-fund-buddypress-bbpress-and-glotpress-development\">launched a crowdfunding campaign</a> asking for $50K in order to work on BuddyPress, GlotPress, and bbPress full-time for 6 months. The <a title=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\" href=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\">campaign was successful</a> generating nearly $52K.</p>\n<h2>Proud To Be a Member of This Community</h2>\n<p>This is just a sample of the generosity expressed by the WordPress community. Although several businesses contribute to charities, it&#8217;s the individuals who receive funding that impress me. If one of us ends up in dire straits, potentially thousands of people are ready to help. It&#8217;s just one more reason why I&#8217;m proud to be a member of this community.</p>\n<p>I&#8217;m certain I missed a few WordPress individuals and businesses that contribute to great causes, if you&#8217;re one of them, please use the comments and tell us about it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 19 Jan 2015 23:34:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WPTavern: Tackling Depression in IT\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37466\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://wptavern.com/tackling-depression-in-it\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:16947:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/yana-petrova-wceu-2014.jpg\" rel=\"prettyphoto[37466]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/yana-petrova-wceu-2014.jpg?resize=854%2C432\" alt=\"yana-petrova-wceu-2014\" class=\"aligncenter size-full wp-image-37472\" /></a></p>\n<p>One of the most unique sessions I attended at <a href=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\" target=\"_blank\">WordCamp Europe 2014</a> was Yana Petrova&#8217;s presentation on <a href=\"http://wordpress.tv/2015/01/06/yana-petrova-why-sometimes-happiness-requires-effort-depression-in-it/\" target=\"_blank\">Depression in IT &#8211; Why Sometimes Happiness Requires Effort</a>. Petrova, a marketing expert and long-time food blogger, is a member of both the WordPress community and the larger tech community in Bulgaria. She has also worked as an organizer for many local technical conferences over the years.</p>\n<p>Her motivation to address the widespread problem of depression in IT grew out of personal experiences with friends and co-workers who were struggling with it. This put her on the path to research the disease and find ways to raise awareness on the topic. I had the opportunity to interview Petrova after the event, and it&#8217;s easy to see why she is a person to whom people would come for advice. Her warm, empathetic personality is combined with a rare willingness to listen to others.</p>\n<p>Petrova&#8217;s experience in food blogging gives her a format for talking about depression in a way that people can understand, which helps to mitigate the stigma that surrounds the issue. We&#8217;ll take a look at some of the recipes she shared in her presentation, but first it&#8217;s important to have a basic understanding of depression.</p>\n<h2>Understanding Depression</h2>\n<p>Nearly everyone knows someone who is suffering from depression, as it afflicts more than <a href=\"http://www.who.int/mediacentre/factsheets/fs369/en/\" target=\"_blank\">350 million people</a> of all ages worldwide and is the leading cause of disability. In the most extreme cases it can lead to suicide.</p>\n<p>Clinical depression is the most severe form, which is often treated with psychological and pharmacological therapies. However, many more people suffer from milder forms of depression from time to time.</p>\n<p>In his TED talk, titled <a href=\"https://www.youtube.com/watch?v=-eBUcBfkVCo\" target=\"_blank\">Depression, The Secret We Share</a>, writer Andrew Solomon said, <strong>&#8220;The opposite of depression is not happiness but vitality.&#8221;</strong> He describes his own dark journey of struggling with depression, which he noticed when all the normal activities of life and work began to seem like too much.</p>\n<blockquote><p>One of the things that often gets lost in discussions of depression is that you know it&#8217;s ridiculous. You know it&#8217;s ridiculous while you&#8217;re experiencing it. You know that most people manage to listen to their messages, and eat lunch, and organize themselves to take a shower and go out the front door, and that it&#8217;s not a big deal.</p>\n<p>And yet you are in its grip and you are unable to figure out any way around it. And so I began to feel myself doing less and thinking less and feeling less. It was a kind of nullity, and then the anxiety set in.</p></blockquote>\n<p>Solomon notes that people tend to confuse depression, grief, and sadness, but understanding the trajectory and duration of these feelings will help to clarify the situation. While grief is explicitly reactive and related to loss, depression doesn&#8217;t always have an easily identifiable cause. Some forms of depression will require professional help for the person to regain a semblance of normal living.</p>\n<h2>Sources or Triggers of Depression in IT</h2>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/emergency.jpg\" rel=\"prettyphoto[37466]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/emergency.jpg?resize=1024%2C482\" alt=\"photo credit: Code & Martini by Ivana Vasilj - cc license\" class=\"size-full wp-image-21873\" /></a>photo credit: <a href=\"https://flic.kr/p/dLUWMb\">Code &#038; Martini</a> by <a href=\"https://www.flickr.com/photos/ivanavasilj/\">Ivana Vasilj</a> &#8211; cc license\n<p>Depression in the IT industry can be more difficult to address, as many tech workers are intelligent, independent, and in high demand. Three years ago, when Yana Petrova and her colleague first proposed a presentation on depression for a local tech conference, she experienced a great deal of resistance.</p>\n<p>&#8220;There were a lot of discussions surrounding it and people in the organizations were hesitant to include it,&#8221; she said. &#8220;They believed that people who are in IT are earning very well, the people who are suffering should just go to the doctor, there&#8217;s no need to discuss it at a technical conference.&#8221; The presentation was so impactful, however, that some of the top Bulgarian psychologists heard about it and encouraged them to continue raising awareness.</p>\n<p>The IT industry has several unique factors that seem to contribute to depression and anxiety. Many people in the WordPress community, in particular, work alone at home as freelancers or with distributed companies. Unless the individual is motivated, this work environment can severely limit healthy social interactions. Additional pressures can also lead to periods of depression, including:</p>\n<ul>\n<li>Client work and relationships</li>\n<li>Pressure to always be connected</li>\n<li>Interaction with the larger development community</li>\n<li>An industry emphasis on high competency forces workers to continue building skills on top of ever-changing technologies, while also completing daily work</li>\n<li>Not understanding the limits of your body/emotions</li>\n</ul>\n<p>&#8220;I think that most of the time they are trying to become really good at what they are doing, which requires most of their attention and most of their time,&#8221; Petrova said, commenting on the lifestyle of many developers with whom she is connected.</p>\n<p>&#8220;When you are reading code, coding most of your time, and doing things related to coding, then a social part is missing &#8211; the part related to relationships, self-esteem, knowing yourself. You&#8217;re just not going deeper into that, because you are giving your time and attention to something else, trying to be good at something else. Our brain resources are kind of limited.&#8221;</p>\n<p>Client interaction is also a major cause of stress and anxiety for self-employed professionals. When you work from home by yourself without a team, criticism from clients can have a severe impact on your feelings of self-worth. If you don&#8217;t have a healthy reservoir of outside interests and hobbies, you can easily become mired in client negativity.</p>\n<p>During Petrova&#8217;s presentation at WordCamp Europe, she received questions about how to deal with clients who can damage a developer&#8217;s self-confidence. Sometimes clients don&#8217;t understand that they are not working with machines but rather real people with families and lives.</p>\n<p>&#8220;Because a lot of people are working from home, what the client thinks and what the community thinks about their work can be a source of depression,&#8221; she said. &#8220;Actually, a lot of people have mentioned that clients are sometimes rude in explaining how incompetent they were.&#8221; This can have a devastating impact on a developer who is lacking self-confidence, outside social connections, and restorative hobbies.</p>\n<p>&#8220;Questions about clients wasn&#8217;t something I expected, but it&#8217;s another vertical to explore,&#8221; Petrova said. It has inspired her to start working on a talk about relationships, clients, teams, and how to preserve your team.</p>\n<p>Petrova has observed that many people working in IT don&#8217;t prioritize knowing themselves and understanding their reactions, although this is not unique to the IT industry. They are often blind to their mental health issues and don&#8217;t know when to seek help.</p>\n<h2>Tips for Dealing with Depression and Anxiety</h2>\n<p>Petrova&#8217;s presentation centered around ways to prevent depression and successfully cope with work-related stress and anxiety. &#8220;Depression is not something that defines you for a lifetime,&#8221; she said. &#8220;It might be just a problem, and it might be that, at this time, happiness requires more effort for you.&#8221;</p>\n<p>She believes that depression is an important mechanism in the human consciousness. &#8220;It&#8217;s a signal for us that change is necessary &#8211; changes about us or changes somewhere around us.&#8221;</p>\n<p>Petrova compares cooking recipes to recipes for coping with depression, noting that it&#8217;s important to adapt those recipes to work with your preferences and needs. Her presentation highlights five ways that you can discover and create your own recipes for preventing depression from setting in.</p>\n<h4>1. Take deep breaths.</h4>\n<p>Deep breathing practices help you to regain calmness and perspective. &#8220;They say that graveyards are full of irreplaceable people,&#8221; she said. &#8220;Actually, we all are, but it&#8217;s more important that we are alive, we are here, and we are happy. We can never control everything in the world, and we should never try to take responsibility for all the things here. We often tend to forget that our bodies have their limits and we are fragile.&#8221; Deep breathing reminds us that we are not machines.</p>\n<p>In addition to breathing, Petrova suggests finding other activities outside of work that will help you to gain perspective on life. &#8220;Dedicate special time for your recipes,&#8221; she said. &#8220;Start spending an hour in the morning with your coffee. Spend Sunday afternoon with someone or with friends,&#8221; she suggests.</p>\n<p><strong>&#8220;But never give away this time. Never give it away for work. Never replace it for something, never sacrifice it. It&#8217;s important that you keep this thing and slow down.&#8221;</strong></p>\n<h4>2. Make lists.</h4>\n<p>Petrova advises people to make lists of recipes that work for them in preparation for moments when it&#8217;s difficult to think clearly. &#8220;Think of those lists as emergency plans. When the grey veil of depression comes, your rituals may not seem as important or as life-saving as the day before,&#8221; she said. &#8220;You might not enjoy them as you did before, so you should have a list of things.&#8221; Perhaps it&#8217;s a list of movies you wanted watch, or places you wanted to visit, a restaurant or recipe you wanted to try.</p>\n<blockquote><p>At the beginning you won&#8217;t be willing to do anything from this list. Those things will look silly and you say no this is not the time to do this. You will be preoccupied with all of your worries right now. Force yourself and just pick a thing and start doing it. Start those lists today and obey them frequently.</p></blockquote>\n<p>Petrova shared a few simple items on her own list &#8211; i.e. eating avocados, making herself a chai latte, enjoying a local spicy soup. If you maintain a clear list of things that make you feel better, you have some activities to turn to when things start to become stressful at work.</p>\n<h4>3. Provide small wins.</h4>\n<p>Make goals for yourself that put you on the path to success with frequent, small milestones. This will help to keep you oriented towards fulfillment. &#8220;Another recipe of mine was to keep an editorial calendar,&#8221; Petrova said. &#8220;Even if I am not feeling well, I already had something planned, so I can keep moving in that direction.&#8221;</p>\n<h4>4. Think about your thinking.</h4>\n<p>People who excel at solving some of tech&#8217;s most complex problems can also be notoriously masterful at avoiding introspection. Petrova approaches the topic of introspection with the idea of &#8220;debugging yourself,&#8221; a concept with which many in tech are familiar.</p>\n<p>She suggests writing your own user manual to document how you work and what keeps you healthy. &#8220;Write your own user manual. Start writing a user manual for yourself and imagine you are giving it to someone else. This will help you think more about how you are thinking,&#8221; she said.</p>\n<p>&#8220;You can see that there are a lot of small hacks that can help you feel better. Just imagine how empowering it might be to discover more,&#8221; she said.</p>\n<p>&#8220;This requires a lot of patience and dedication. It usually takes time for reading and time for writing. It takes time to debug your mind.&#8221; Petrova suggests writing down all of the things that help your mind work better so that you have that manual for when depression tries to settle in.</p>\n<p>&#8220;Debug yourself, but if you can&#8217;t do it yourself, then try to talk to someone,&#8221; Petrova said. &#8220;We cannot resolve anything by ourselves.&#8221;</p>\n<h4>5. Learn to listen, learn to share.</h4>\n<p>You can never underestimate the importance of community in maintaining your mental health. The community is stronger when people overcome their irrational inhibitions and learn to share their stories and listen to each other.</p>\n<p>&#8220;It&#8217;s not really easy to listen the proper way, but you can sometimes save people by listening to them carefully,&#8221; Petrova said. &#8220;You can empower them by listening to them.</p>\n<p>People need to tell their stories to realize what is happening. Sometimes when you are keeping things only in your head, you are not realizing the power of your situation.&#8221;</p>\n<p>When should depression lead you to seek professional help? &#8220;In some official resources, they say if you are feeling like this for four weeks then go find some help,&#8221; Petrova said.</p>\n<p>&#8220;But I think that the more you are getting to know yourself, the more you can feel if you need to meet with someone or talk with someone. The doctor might not be the first person. The first person might be a friend or a relative or someone who is closer to you. Or just someone you see, someone you believe in and decide to tell your story to. I really believe that it&#8217;s powerful to tell stories.&#8221;</p>\n<h2>Staying Healthy and Preventing Depression</h2>\n<p>Petrova recommends a book called <a href=\"http://www.amazon.com/The-Healthy-Programmer-Pragmatic-Programmers/dp/1937785319\" target=\"_blank\">The Healthy Programmer</a>, which contains the basics of healthy living for people who work most of the time in a seated position. She believes that movement is especially important for those who work from home and set their own schedules.</p>\n<blockquote><p>The first thing is related to moving/movement. Are you moving enough? Are you doing active things, sports? This is really important, because if you are living where you are working, then you can find yourself in a situation where you are staying home, ordering food all the time. You forget all the healthy things you could do to feel better, for your body to feel better and your mind to work well. It&#8217;s really related.</p></blockquote>\n<p>If you&#8217;re staying active and able to use your normal problem-solving skills to debug yourself, you will greatly lessen the chances of falling into depression. Building up these habits takes time, but you&#8217;re also less likely to be crippled by stress and anxiety. In the future, Petrova plans to start a blog called &#8220;The Happiness Cookbook&#8221; in order to encourage people to share their recipes with the community.</p>\n<p>&#8220;Get to know yourself better and your reactions to different situations,&#8221; Petrova advises. &#8220;You really need a lot of time to know what&#8217;s happening to you and to know how to react in a timely way for prevention.</p>\n<p>&#8220;We all have our stressful moments. We all have our sad moments. You are certain to have them in your lifetime. But you can learn how to prevent your reactions, what to do when depression happens, and the best way to overcome it. The temporary feelings can be over at some point with the help of simple tips, and then you are not going to get depressed. Otherwise, you are just digging into that.&#8221;</p>\n<p>Obviously, there are some forms of depression that will ultimately require professional help. Petrova&#8217;s tips for prevention are intended to help folks before they reach a very dark place where they have lost interest in work completely and are struggling to find vitality.</p>\n<p>&#8220;Depression means that you need to change something, for yourself, around yourself, about yourself,&#8221; she said. &#8220;This is the key message. Just research the pain that made you feel like this and start debugging it step by step.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 19 Jan 2015 22:39:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Matt: Pope Francis on Climate Change\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44598\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://ma.tt/2015/01/pope-francis-on-climate-change/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:718:\"<blockquote><p>He has been called the “superman pope”, and it would be hard to deny that Pope Francis has had a good December. Cited by President Barack Obama as a key player in the thawing relations between the US and Cuba, the Argentinian pontiff followed that by lecturing his cardinals on the need to clean up Vatican politics. But can Francis achieve a feat that has so far eluded secular powers and inspire decisive action on climate change?</p></blockquote>\n<p>The Guardian on <a href=\"http://www.theguardian.com/world/2014/dec/27/pope-francis-edict-climate-change-us-rightwing\">Pope Francis’s edict on climate change will anger deniers and US churches</a>. Definitely the coolest pope in my lifetime.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 18 Jan 2015 16:30:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: No Relief for Air Travelers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44607\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2015/01/no-relief-for-air-travelers/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:420:\"<blockquote><p>Oil prices have fallen by about half since June, making it much cheaper just in time for drivers to fill up their cars for Christmas travel. But the decline in oil prices has had made no perceptible difference on the cost of flying.</p></blockquote>\n<p>New York Times: <a href=\"http://www.nytimes.com/2014/12/16/opinion/no-relief-for-air-travelers.html?_r=2&referrer=\">No Relief for Air Travelers</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 23:35:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: Proposed Enhancements to Distraction-free Writing in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37456\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://wptavern.com/proposed-enhancements-to-distraction-free-writing-in-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3711:\"<p>When we <a title=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1\" href=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1\">asked readers</a> what they thought of the new Distraction-free writing mode in WordPress 4.1, a majority of readers responded that it was an improvement. However, a number of others stated they preferred the old version. Readers also <a title=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1#comments\" href=\"http://wptavern.com/whats-your-first-impression-of-distraction-free-writing-in-wordpress-4-1#comments\">took to the comments</a> to describe their first impression of the feature.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/12/DistractionFreeWriting41.png\" rel=\"prettyphoto[37456]\"><img class=\"size-full wp-image-35707\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/12/DistractionFreeWriting41.png?resize=1025%2C501\" alt=\"Distraction Free Writing in WordPress 4.1\" /></a>Distraction Free Writing in WordPress 4.1\n<p>Since the release of 4.1, I&#8217;ve forced myself to use DFW. When I write content, I often hit the preview button several times to review changes. This results in DFW mode turning on and off multiple times which I find distracting and at times, annoying. I&#8217;m not the only one who feels this way as Brian Krogsgard of <a title=\"https://poststatus.com/distraction-free-writing-wordpress/\" href=\"https://poststatus.com/distraction-free-writing-wordpress/\">PostStatus.com explains</a>:</p>\n<blockquote><p>When I write, I tend to save and preview the post live a number of times while I’m writing, especially toward the end of my time spent writing.</p>\n<p>It gets a bit dizzying to be fixing typos and saving and previewing while going in an out of DFW.</p>\n<p>I’d like to see “Save Draft” and “Preview” buttons moved into the editor body, so that I can stay in DFW while finishing up my posts.</p></blockquote>\n<p>I like the idea of moving the Save Draft and Preview buttons to the post editor. It&#8217;s one of the reasons why <a title=\"http://wptavern.com/how-to-preview-posts-in-distraction-free-writing-mode-without-seeing-a-transition\" href=\"http://wptavern.com/how-to-preview-posts-in-distraction-free-writing-mode-without-seeing-a-transition\">I reviewed</a> the <a title=\"https://wordpress.org/plugins/fullscreen-preview-button/\" href=\"https://wordpress.org/plugins/fullscreen-preview-button/\">Distraction Free Preview Button</a> plugin by Alex King. Krogsgard also lists several other ideas with screenshots showing the changes in action, including:</p>\n<ul>\n<li>Inverted editor colors</li>\n<li>Centered post editor</li>\n<li>Setting the editor to use the Max-width available</li>\n<li>Full-height editor</li>\n</ul>\n<p>Jen Mylo, who reviewed the feature as a user, <a title=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\" href=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\">suggests</a> similar improvements. One other thing I&#8217;d like to see is a full-height editor. It&#8217;s annoying when the meta boxes fade away, the editor remains the same size as if the boxes are still in place. That&#8217;s because they are, but I think it would be better if DFW mode would go back to being a separate writing experience so meta boxes are a non-issue.</p>\n<p>I believe if the ideas proposed by Krogsgard and Mylo are implemented, DFW would likely become the primary mode in which I write content. Until then, I&#8217;m sticking with the default interface. What you do you think of the proposed ideas and are there any you&#8217;d add?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 22:09:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WPTavern: JavaScript Leads The Pack in RedMonk’s Programming Language Rankings\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37449\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/javascript-leads-the-pack-in-redmonks-programming-language-rankings\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2289:\"<p>Research and analyst firm, <a title=\"http://redmonk.com/\" href=\"http://redmonk.com/\">RedMonk, </a>released its <a title=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\" href=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\">programming language rankings</a> for January 2015. RedMonk looks at programming language discussions on <a title=\"http://stackoverflow.com/\" href=\"http://stackoverflow.com/\">Stack Overflow</a> and usage on <a title=\"https://github.com/\" href=\"https://github.com/\">GitHub</a> in an effort to extract insights into potential adoption trends.</p>\n<p>The results from the analysis are not clear indications of general usage but rather, an examination of the correlation between two populations RedMonk believes to be predictive of future use.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/RedMonkQ115ProgrammingLanguageRankings.png\" rel=\"prettyphoto[37449]\"><img class=\"size-full wp-image-37451\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/RedMonkQ115ProgrammingLanguageRankings.png?resize=1025%2C687\" alt=\"RedMonk Q115 Programming Language Rankings\" /></a>RedMonk Q115 Programming Language Rankings\n<p>It doesn&#8217;t surprise me to see JavaScript and PHP so high on the chart, especially since JavaScript is in the <a title=\"http://ianmarshall.net/articles/140511.php\" href=\"http://ianmarshall.net/articles/140511.php\">middle of a renaissance</a>. The results also mirror the suggestion that in the future, <a title=\"http://wptavern.com/in-the-next-few-years-90-of-wordpress-development-could-be-javascript-based\" href=\"http://wptavern.com/in-the-next-few-years-90-of-wordpress-development-could-be-javascript-based\">90% of WordPress development</a> could be JavaScript based.</p>\n<p>Be sure to read <a title=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\" href=\"http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/\">RedMonk&#8217;s interpretation</a> of the data and the trends worth noting. Also worth reading is <a title=\"http://www.wired.com/2015/01/redmonk-swift\" href=\"http://www.wired.com/2015/01/redmonk-swift\">Wired.com&#8217;s take</a> on the data and the rising popularity of Apple&#8217;s Swift programming language. What do you make of the rankings?</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 20:53:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Post Status: Ideas for small improvements to the new Distraction-Free Writing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7388\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://poststatus.com/distraction-free-writing-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9980:\"<p>Distraction-Free Writing has been a bit of a controversial feature in WordPress this release. It changed from a <em>you have to toggle to it every time</em> feature to <em>it&#8217;s always on feature</em> in WordPress 4.1.</p>\n<p>With that change, the DFW experience changed to be more like the regular editor, well, because it is the regular editor. It just removes stuff off of the screen that you&#8217;re not using.</p>\n<p>Here&#8217;s the editor now, with DFW not on:</p>\n<div id=\"attachment_7393\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/4-1-post-editor.png\"><img class=\"wp-image-7393 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/4-1-post-editor-752x473.png\" alt=\"4-1-post-editor\" width=\"752\" height=\"473\" /></a><p class=\"wp-caption-text\">The WordPress post editor, as of WordPress 4.1 (with custom admin theme colors)</p></div>\n<p>And here&#8217;s the editor now, with DFW on:</p>\n<div id=\"attachment_7390\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-wp-4-1.png\"><img class=\"wp-image-7390 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-wp-4-1-752x442.png\" alt=\"dfw-wp-4-1\" width=\"752\" height=\"442\" /></a><p class=\"wp-caption-text\">DFW mode as of WordPress 4.1</p></div>\n<p>Jen Mylo wrote a post about how <a href=\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\">she doesn&#8217;t like the new feature as much as the old one</a>. I&#8217;ve seen similar complaints a few times from folks.</p>\n<p>The positive trade-off is that now DFW is much more likely to be used, since the setting (the four-arrow icon in the upper right corner of the editor box) is persistent for a user once enabled. Previously, DFW had to be toggled in each use, and was probably used by a minority of users.</p>\n<p>4.1 was the first go at the feature in its new state, and I think it&#8217;s pretty great. I&#8217;m now using DFW every post I write, whereas before I almost always forgot to turn it on; plus, it previously felt like a commitment to the blog post.</p>\n<p>Nevertheless, I think Jen&#8217;s critique (as well as others&#8217;) are noteworthy, so I decided to take some of the complaints I&#8217;ve heard and hack around in the browser inspector to see if I could alleviate them.</p>\n<p>One thing Jen brought up was the height of the editor box. You no longer toggle the height from the bottom corner; instead it auto-adjusts with your content, and comes shipped with a default height.</p>\n<h3>Full-height editor box</h3>\n<p>She believes, and I agree, that it would be nice if the editor filled the available height of the window, because right now it feels a bit squished and cramped. Thankfully, we have the viewport height (vh) unit in CSS, and this can be adjusted with pure CSS and a few media queries.</p>\n<div id=\"attachment_7391\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-4-1-full-height.png\"><img class=\"wp-image-7391 size-large\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-4-1-full-height-752x451.png\" alt=\"dfw-4-1-full-height\" width=\"752\" height=\"451\" /></a><p class=\"wp-caption-text\">WordPress DFW mode with full-height content area</p></div>\n<p>I think this is a progressive feature, so I&#8217;d be for using the vh CSS unit not using Javascript on this, despite the not-great browser support in IE.</p>\n<p>In fact, I really like this concept, even when not in DFW mode. It really calms me down, not seeing the metaboxes below the post content right out of the gate. We can just keep them right below the editor, just out of sight.</p>\n<div id=\"attachment_7392\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/post-editor-full-height.png\"><img class=\"size-large wp-image-7392\" src=\"https://poststatus.com/wp-content/uploads/2015/01/post-editor-full-height-752x451.png\" alt=\"WordPress post editor with full height content area\" width=\"752\" height=\"451\" /></a><p class=\"wp-caption-text\">WordPress post editor with full height content area</p></div>\n<h3>Centered editor in DFW</h3>\n<p>Another note Jen made was that she was bothered the editor isn&#8217;t centered in DFW mode. Well, I&#8217;ve never noticed that, but <em>now I do, ugh</em>. <img src=\"https://poststatus.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" /> It&#8217;s this way because DFW simply hides the right column and admin columns, which are not the same width, and therefore the editor is left with unequal margins.</p>\n<p>Well, during the transition of those admin columns, theoretically, we could also move the editor box, though I think we should test what kind of UX effect there is of transitioning the editor your cursor is in. It might not be the most elegant solution.</p>\n<p>Nevertheless, here&#8217;s what it&#8217;d look like once you&#8217;re done, including the full-height editor box.</p>\n<div id=\"attachment_7394\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-full-height-and-centered.png\"><img class=\"size-large wp-image-7394\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-full-height-and-centered-752x471.png\" alt=\"DFW full-height editor and centered\" width=\"752\" height=\"471\" /></a><p class=\"wp-caption-text\">DFW full-height editor and centered</p></div>\n<p>I&#8217;m iffy on this one. I really don&#8217;t like the idea of moving the box you&#8217;re actively focusing on. Needs testing.</p>\n<h3>Max-width on the editor box</h3>\n<p>A critique I learned from another user was that the huge width on the DFW editor box bothered them. I agree. I think we should put a max-width on the editor box &#8212; probably whether the user is in DFW mode or not.</p>\n<p>Here&#8217;s the large version that&#8217;s unwieldy, especially in DFW mode:</p>\n<div id=\"attachment_7400\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-max-width.png\"><img class=\"size-large wp-image-7400\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-max-width-752x285.png\" alt=\"We should not let this get so wide. Line length matters!\" width=\"752\" height=\"285\" /></a><p class=\"wp-caption-text\">We should not let this get so wide. Line length matters!</p></div>\n<h3>Inverted editor colors, with centered content box</h3>\n<p>One more idea: what if we inverted the WordPress admin colors, so that the background was white, and metaboxes were gray. And then, we could ditch the &#8220;container&#8221; of the editor box altogether.</p>\n<p>Here&#8217;s a mockup of that.</p>\n<div id=\"attachment_7402\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/all-white-admin-background.jpg\"><img class=\"size-large wp-image-7402\" src=\"https://poststatus.com/wp-content/uploads/2015/01/all-white-admin-background-752x431.jpg\" alt=\"All white background, with centered editor\" width=\"752\" height=\"431\" /></a><p class=\"wp-caption-text\">All white background, with centered editor</p></div>\n<p>I think this could look really nice, but it would require a good bit of admin changes.</p>\n<p>And then the Distraction-Free Writing version:</p>\n<p><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-all-white.jpg\"><img class=\"aligncenter size-large wp-image-7404\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-all-white-752x432.jpg\" alt=\"dfw-all-white\" width=\"752\" height=\"432\" /></a></p>\n<h3>Save and Preview inline</h3>\n<p>This one is my own idea, based on drafting posts in this mode every day.</p>\n<p>Distraction-Free Writing toggles on and off pretty rapidly as you focus in and out of the editor. When I write, I tend to save and preview the post live a number of times while I&#8217;m writing, especially toward the end of my time spent writing.</p>\n<p>It gets a bit dizzying to be fixing typos and saving and previewing while going in an out of DFW.</p>\n<p>I&#8217;d like to see &#8220;Save Draft&#8221; and &#8220;Preview&#8221; buttons moved into the editor body, so that I can stay in DFW while finishing up my posts. Here&#8217;s what that looks like:</p>\n<div id=\"attachment_7389\" class=\"wp-caption aligncenter\"><a href=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-inline-save-preview.jpg\"><img class=\"size-large wp-image-7389\" src=\"https://poststatus.com/wp-content/uploads/2015/01/dfw-inline-save-preview-752x473.jpg\" alt=\"DFW with Save and Preview inline\" width=\"752\" height=\"473\" /></a><p class=\"wp-caption-text\">DFW with Save and Preview inline</p></div>\n<h3>Iteration is important</h3>\n<p>Iteration in WordPress feature development is important. I&#8217;m glad we introduced Distraction-Free Writing in the first place, and I think the changes in 4.1 are worthy. They may need some adjustments, but it&#8217;s a process that will continue to improve.</p>\n<p>Constructive feedback is always good. The more we use and figure out how others are using various features of WordPress, the more they can be improved.</p>\n<p>In preparing to write this post, I was able to reach out in <a href=\"https://poststatus.com/category/planet/feed/slack.wordpress.org\">WordPress Slack</a> and find out the best venue to give feedback, and if Jen&#8217;s post and this one help start a conversation, the changes can make their way to <a href=\"https://core.trac.wordpress.org/\">Trac tickets</a> and eventual patches to make WordPress better.</p>\n<p>I&#8217;ve seen at least a handful of folks say &#8220;Bring the old Distraction-Free Writing back!&#8221; That&#8217;s understandable; lots of folks don&#8217;t like change. Every UI-involved feature in WordPress ever has had critics.</p>\n<p>But when you look at WordPress today and WordPress 5 or more years ago, WordPress today is way more beautiful to use. That&#8217;s because the experience the core team has built has iterated over time in response to use, feedback, and contributions.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 18:01:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Jen Mylo: Distraction-free Writing Mode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"http://jenmylo.com/?p=4787\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://jenmylo.com/2015/01/17/distraction-free-writing-mode/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6729:\"<p>Once upon a time in WordPress there was a New Feature called Distraction-free writing mode. You accessed it by clicking the icon in the editor toolbar that means <em>full screen</em> pretty much everywhere on the web.</p>\n<p><img class=\"aligncenter size-full wp-image-4788\" src=\"https://jenmylo.files.wordpress.com/2015/01/dfw-icon-highlight.png?w=520&h=71\" alt=\"post editor toolbar\" width=\"520\" height=\"71\" /></p>\n<p>It would load a new screen tha mostly just consisted of a writing box not surrounded by meta boxes or formatting, and what limited formatting options there were would only appear when you moused out of the writing area. It wasn&#8217;t perfect (I would have liked that fading toolbar to have all the same formatting options as the regular editor) but it <em>was</em> pretty non-distracting, and it just felt calm.</p>\n<p><img class=\"aligncenter size-full wp-image-4790\" src=\"https://jenmylo.files.wordpress.com/2015/01/dfw-ui.png?w=520\" alt=\"old distraction-free writing interface\" /></p>\n<p>A while back I noticed some changes in the wp-admin regular editor. All the navigation and meta boxes now faded away while you were writing, and I thought, &#8220;Oh, that&#8217;s pretty nice, kind of a DFW Lite!&#8221; I didn&#8217;t pay too much attention, as I was just writing a quick post, but in my head I approved, and thought it was a good improvement. Until this morning.</p>\n<p>Most of my blog-based activity happens on work-related blogs that have front-end posting forms, so it&#8217;s been a while since I tried to access DFW mode. But I was going to be writing a long post, and I wanted to go over into that peaceful screen, so I clicked on the full-screen icon. That&#8217;s when I discovered that what I thought was DFW Lite was actually the new DFW. There was no more new screen.</p>\n<p>At first I thought,&#8221;Hm, that&#8217;s a lot more efficient. Good for them!&#8221; Then I started writing, and thought, &#8220;[Letters-in-a-configuration-to-replicate-my-slightly-alarmed-and-uncomfortable-sound]!&#8221; I hated to admit it, but I felt physically uncomfortable. Am I turning into Sheldon (<a title=\"Video from Big Bang Theory\" href=\"https://www.youtube.com/watch?v=ynUfxitGpfU\">skip to 3:34</a>)? Crap! Anyway, here&#8217;s why I don&#8217;t love the new DFW.</p>\n<p>When wp core switched over to the &#8220;toolbar anchors to top of editor no matter how long your post&#8221; setup, users lost the ability to grab a corner of the editor and drag it to make it taller. Since it is supposed to automatically resize as you write, most people thought this was a tradeoff with a net benefit, and even though I really didn&#8217;t want to lose my little corner resize handle, I agreed that the net benefit was worth it. The thing is, if in your head you&#8217;ve already thought out a long post, starting in the small box feels cramped, kind of like when you have to repack a sleeping bag and you&#8217;re smooshing it with all your might to get it to fit back into the compact stuff sack.</p>\n<p>Think about opening a New Document in MS Word (or equivalent writing program) , or a writer putting a fresh piece of paper in the typewriter (for those who are too young to remember, <a title=\"Video of someone putting paper into a typewriter\" href=\"https://www.youtube.com/watch?v=FkUXn5bOwzk\">it&#8217;s like this</a>). There have been reams written by famous authors in the past about the feeling that action engenders &#8212; a feeling of limitless possibilities, a knock on the creative door, an open road ahead. That&#8217;s what DFW tried to emulate. Starting in the small box instead of the full height box feels like possibilities with limits, a creative window that won&#8217;t open more than 3 inches for safety, a road with one lane closed for construction. Thoughts scrunch down to try to fit into the available space.</p>\n<p>Even when the box expands to be the height of the screen (minus padding against top and bottom of browser), a chunk of space is lost at the top for the toolbar. That fade it used to have really did remove distraction. I wish there had been a way to combine the zen of the fade away (Matt&#8217;s original nickname for DFW was zen mode) with the convenience of the always-at-top placement.</p>\n<p>In the old DFW, the writing window really did have that feeling of a fresh New Document or crisp new sheet of paper. Now, even once it&#8217;s tall, it&#8217;s a bit off-center to the left, because that&#8217;s where the editor box is when on a screen containing navigation and metaboxes.</p>\n<p><img class=\"aligncenter size-full wp-image-4798\" src=\"https://jenmylo.files.wordpress.com/2015/01/screen-shot-2015-01-17-at-7-54-33-am.png?w=520&h=313\" alt=\"Screenshot of current distraction-free mode\" width=\"520\" height=\"313\" /></p>\n<p>There was a time (pre-2000) when I didn&#8217;t think too much about alignment in UIs. Then I got a lot of design ideas drilled into my head that stuck, especially regarding alignment. I like asymmetry in a lot of things, always have. Hell, in a site we were just working on one of the things we said we wanted was some asymmetry. But for DFW, the symmetry &#8212; the centeredness &#8212; was a big part of what made that screen so calming. Your brain didn&#8217;t have to do any pattern recognition or internal balancing to make it feel right. But now it skews to the left and it&#8217;s driving me crazy, Sheldon style. This isn&#8217;t zen for me; it&#8217;s a misused apostrophe, a lowercase p, a cabinet door left open.</p>\n<p>I thought I&#8217;d be a holdout forever against using the new <a title=\"wordpress.com\" href=\"http://wordpress.com\">wordpress.com</a> posting interface (I have a lot of issues with it, surprise), but, well, their DFW has that open and symmetrical feeling (even if it has other problems) that makes for a non-Sheldony writing experience.</p>\n<p><img class=\"aligncenter size-full wp-image-4789\" src=\"https://jenmylo.files.wordpress.com/2015/01/screen-shot-2015-01-17-at-7-27-45-am.png?w=520&h=378\" alt=\"Screenshot of distraction-free writing mode on wordpress.com\" width=\"520\" height=\"378\" /></p>\n<p>So this might be my last post written in wp-admin DFW mode for now. Farewell, old friend!</p>\n<p><em>* * *</em></p>\n<p><em>Standard disclaimer when writing about WordPress: This is my personal opinion. I have not been the UX lead for WordPress core for a couple of years now, so this post on my personal blog should not be seen as representing the WordPress project in any way, it&#8217;s just my personal experience with a user interface.</em></p><img alt=\"\" border=\"0\" src=\"http://pixel.wp.com/b.gif?host=jenmylo.com&blog=45389656&post=4787&subd=jenmylo&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 16:08:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Jen Mylo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WPTavern: First Look at SIDEKICK\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37315\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://wptavern.com/first-look-at-sidekick\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4144:\"<p>After experiencing a <a title=\"http://wptavern.com/sidekick-delays-the-release-of-composer\" href=\"http://wptavern.com/sidekick-delays-the-release-of-composer\">significant delay</a> in late 2014, the folks over at SIDEKICK <a title=\"http://www.sidekick.pro/blog/launch-welcome-new-sidekick-pro/\" href=\"http://www.sidekick.pro/blog/launch-welcome-new-sidekick-pro/\">have launched</a> a new website along with Composer. <a title=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\" href=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\">Composer</a> is a tool that allows you to create visual, guided, walkthroughs. When SIDEKICK Co-founder, Ben Fox, showed off the initial demo last year, I described it as the <a title=\"http://www.techsmith.com/camtasia.html\" href=\"http://www.techsmith.com/camtasia.html\">Camtasia</a> of WordPress.</p>\n<p>SIDEKICK has a <a title=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\" href=\"http://www.sidekick.pro/plans/create_wp_walkthroughs/\">couple different plans</a> available depending upon how many walkthroughs you want to publish. The free account allows for three <strong>published</strong> walkthroughs, 50 monthly plays or views, 1 active website, and support for WordPress multi-site.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/SideKickActivated.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37429\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/SideKickActivated.png?resize=1025%2C501\" alt=\"SIDEKICK Activated\" /></a>SIDEKICK Activated\n<p>The walkthrough creation interface is similar to Camtasia in that it has a timeline with various steps that can be added. To supply audio, you need to upload a pre-recorded mp3 file for each step. While not as easy as recording the audio within the plugin, it&#8217;s easier to fix mishaps without having to redo the entire walkthrough.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/WalkthroughInterface.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37432\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/WalkthroughInterface.png?resize=1025%2C280\" alt=\"Walkthrough Interface\" /></a>Walkthrough Interface\n<h2>It&#8217;s Clearly The First Version</h2>\n<p>While testing SIDEKICK, I encountered several things that need to be addressed in future versions. <del>During the initial setup, there is a box that explains how to build your own walkthrough with a link to get Composer. This leads me to believe that it&#8217;s a separate product or plugin when in reality, it&#8217;s not. Composer is part of SIDEKICK out of the box.</del> <em><strong>Update</strong></em> SIDEKICK has already released an update that fixes the copy.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/getcomposerbox.png\" rel=\"prettyphoto[37315]\"><img class=\"size-full wp-image-37433\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/getcomposerbox.png?resize=610%2C207\" alt=\"Get Composer Information Box\" /></a>Old Get Composer Information Box\n<p>I encountered a few links which point to a 404 page, like their <a title=\"http://www.sidekick.pro/terms-of-use/\" href=\"http://www.sidekick.pro/terms-of-use/\">Terms of Use</a>. With so many steps in the setup process, it would be nice if SIDEKICK had a walkthrough of its own, to guide users on how to configure it. Despite these minor setbacks, they don&#8217;t detract from its usefulness. Fox says, the team is already aware of the issues and over the next few weeks, will release several updates.</p>\n<p>It took awhile, but once I understood how it works, I found creating walkthroughs a fairly easy process. With version one out the door, it will be interesting to see how it&#8217;s adopted by theme and plugin developers, considering a number of them already use <a title=\"http://theme.fm/2011/09/introducing-pointers-in-wordpress-3-3-2407/\" href=\"http://theme.fm/2011/09/introducing-pointers-in-wordpress-3-3-2407/\">admin pointers</a> that are built into WordPress. However, there&#8217;s a distinct difference between a simple pointer and walking people through a task.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 03:59:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Matt: Fasting\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44604\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"http://ma.tt/2015/01/fasting/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1053:\"<p>&#8220;Fasting for as little as three days can regenerate the entire immune system, even in the elderly, scientists have found in a breakthrough described as &#8216;remarkable&#8217;.&#8221; &#8212; <a href=\"http://www.telegraph.co.uk/news/uknews/10878625/Fasting-for-three-days-can-regenerate-entire-immune-system-study-finds.html\">Fasting for three days can regenerate entire immune system, study finds</a>.</p>\n<p>Harper&#8217;s had a <a href=\"http://harpers.org/archive/2012/03/starving-your-way-to-vigor/\">great article on fasting a few years ago</a> it&#8217;s not online at the moment but <a href=\"https://cloudup.com/cgrXJBHXyeo\">here&#8217;s a PDF of it</a>. It&#8217;s also <a href=\"http://www.yogicwayoflife.com/three-day-water-fast-and-its-benefits/\">common in yoga</a> and <a href=\"http://joshmitteldorf.scienceblog.com/2014/06/12/the-three-day-fast-day-four/\">folks trying to live longer</a>. I haven&#8217;t tried it myself yet, but perhaps will at some point this year &#8212; I like the idea of doing something by doing nothing.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Jan 2015 01:10:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Matt: The Right Problem\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44601\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://ma.tt/2015/01/the-right-problem/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:385:\"<blockquote><p>Working on the right problem is more important than working hard. &#8212; Caterina Fake</p></blockquote>\n<p>Found via <a href=\"http://davemart.in/2015/01/14/84-highlights-from-the-startup-playbook/\">84 highlights from The Startup Playbook</a> by Automattician Dave Martin.</p>\n<p>The hardest thing in the world is spending the most time on the most important things.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 22:08:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"Post Status: A small Medium experiment\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7366\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://poststatus.com/medium-vs-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9842:\"<p>I&#8217;ve always wanted to write a post on Medium. But I&#8217;ve always been too greedy to do so, because I like to own my content, and I&#8217;ve never had a topic that I really wanted to write about that didn&#8217;t better fit on my personal blog or this one.</p>\n<p>That changed today, so I got to experiment. On hearing that Teehan+Lax shut down, I felt it was a worthy time to try Medium. I had a bone to pick with their exit post, and they helped design Medium&#8217;s first version, so it seemed fitting.</p>\n<p>Here&#8217;s <a href=\"https://medium.com/@krogsgard/the-story-teehan-lax-isnt-telling-5b58e6109e88\">a link to the finished product</a>. Until today, I had never really done anything to play with their editor beyond look at it and write a few sentences to see the basics of how things worked.</p>\n<h3>First impressions of Medium&#8217;s editor</h3>\n<p>Medium&#8217;s front-end is beautiful. And the back-end looks quite similar. They try to take pretty much everything out of your way to leave you to your words. I like that.</p>\n<p>The only problem with simplicity is that it can obfuscate how to actually do stuff. In the case of the Medium editor, there are two methods to interact with text.</p>\n<p><img class=\"aligncenter size-large wp-image-7370\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-more-options-752x261.jpg\" alt=\"medium-more-options\" width=\"752\" height=\"261\" /></p>\n<p>First, you can click the little plus button, which allows you to insert a pre-formatted block of something.</p>\n<p><img class=\"aligncenter size-large wp-image-7371\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-tooltip-752x208.jpg\" alt=\"medium-tooltip\" width=\"752\" height=\"208\" /></p>\n<p>&nbsp;</p>\n<p>Second, you can highlight text and get a tooltip of formatting options.</p>\n<p>Some of these options are confusing. The tooltip one was fine, but the + button was tougher. I didn&#8217;t know what to expect by clicking the horizontal line or the play button. I thought the code brackets were odd, as surely not many people are putting code on Medium. It turned out that was an oEmbed button.</p>\n<p>Eventually though, I figured out roughly how to do what, even inserting those big full screen images everyone associates to Medium.</p>\n<p>For most people and most posts, these tools are enough. And all in all the experience was delightful, despite this minor criticism. However, a part of me wanted <em>more</em>.</p>\n<p>I like the persistent editing buttons of WordPress (though I could definitely do with fewer options in TinyMCE). I even felt a little weird about Medium&#8217;s previews. It&#8217;s basically a front-end preview when you edit, but it&#8217;s also not quite teh same. For example, you don&#8217;t get the below post items and other elements that affect the overall feel of the page, versus just the article.</p>\n<p>Still, I think the WordPress editing experience could learn from Medium&#8217;s efforts, even if we don&#8217;t mimic it entirely. And I do think the recent changes to Distraction writing help get us there.</p>\n<h3>Simple but effective stats</h3>\n<p>Medium has stats built-in. With WordPress, most people use WordPress.com&#8217;s stats module through Jetpack, or Google Analytics, or both.</p>\n<p>Medium really trims down the stats information. You basically get a few metrics: Views, &#8220;Reads&#8221;, Read Ratio, and Recommendation counts.</p>\n<p><img class=\"aligncenter size-large wp-image-7372\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-stats-752x527.jpg\" alt=\"medium-stats\" width=\"752\" height=\"527\" /></p>\n<p>I <em>love</em> the read ratio stat. Medium&#8217;s reliance on reading versus pageviews is <a href=\"https://medium.com/data-lab/mediums-metric-that-matters-total-time-reading-86c4970837d5\">pretty well documented</a>, and I&#8217;ve always thought it was great. But what I realized nearly immediately is that this gave me much greater assurance that my post is quality or not, versus metrics I have available to me with WordPress.com stats or even Google analytics.</p>\n<p>I usually determine quality of my posts based on how many tweets, comments, and pageviews I get for an article. This is great, but just because something isn&#8217;t shareworthy doesn&#8217;t mean it&#8217;s not high quality. Also, if I get 200 views but nearly everyone fully reads it, it&#8217;s better than getting 1,000 views where only 200 read it.</p>\n<p>In the latter example, I got views but I didn&#8217;t impact. My goal is to impact, and Medium&#8217;s &#8220;reads&#8221; stat helps me determine that very quickly.</p>\n<p>Referrals are also nice on Medium. I can quickly see where traffic is coming from, real time, and go see what that referring source said about my post or take part in the conversations.</p>\n<p>Most importantly, regarding referrals, is that <em>I can see them per article</em>. This is a feature I would love to see hit WordPress.com stats.</p>\n<p>Hardcore stats folks won&#8217;t be totally satisfied with Medium. And to my knowledge, you can add your own Google Analytics account to your medium account, so you have to live with what you get. For most of us, that is enough.</p>\n<p>I think there is a ton of opportunity for a solid stats plugin for WordPress that either makes great use of Google Analytics within the WordPress Dashboard, or rolls their own (outside of WordPress.com / Jetpack).</p>\n<h3>Medium-sized exposure</h3>\n<p>One element I was pretty curious of was exposure. I know that some articles have done really well on Medium, but I&#8217;m not sure what causes that.</p>\n<p>In my case, the article has had a couple thousand pageviews in a matter of an hour or two, so that&#8217;s great. However, I think it took off on Twitter and Designer News much more so than from Medium itself, besides recommendations</p>\n<p>For recommendations, it&#8217;s like a rolling snowball. I get emails from Medium every day telling me what my Twitter friends recommended on Medium. I imagine that the more people recommend my story, the more email and other distribution the story gets. That&#8217;s good, because I&#8217;ve always figured recommendation buttons were mostly useless on sites, and really only social proof for other would-be readers that are already on some kind of archive.</p>\n<p>As far as I can tell, Medium doesn&#8217;t really have a way to highlight new stories beyond recommendations. And they very much de-emphasize post dates and time-based feeds.</p>\n<h3>Tag, you&#8217;re not it</h3>\n<p>One last thing was categorization and tags. Medium no longer allows regular users to put a post in any particular category, as far as I can tell. You have to be some sort of more-certified user or author to put a post in one of their channels or tags or whatever they call them.</p>\n<p>I thought this was a little frustrating. Without some kind of tag, how can I put my story in a feed that others that don&#8217;t already follow me can find? I think it has potential to prevent lesser-known writers from ever being exposed to more eyeballs, because there is a much smaller initial audience to read their post.</p>\n<p>Furthermore, if I had 100 or 1,000 posts on Medium someday, it would make it harder for me to filter my own stuff. I often go back to certain categories on Post Status to see what I wrote about a particular topic in the past.</p>\n<h3>Notes and public previews</h3>\n<p>A couple of things that Medium excels at are notes and public previews. I can easily annotate my post in the margins, without putting the notes in the content (which I often do in WordPress). It&#8217;s very similar to Google Docs.</p>\n<p><img class=\"aligncenter size-large wp-image-7373\" src=\"https://poststatus.com/wp-content/uploads/2015/01/medium-notes-752x265.jpg\" alt=\"medium-notes\" width=\"752\" height=\"265\" /></p>\n<p>And public previews and draft sharing is exceptional. I have public preview functionality on Post Status, and it works okay; it&#8217;s built into Medium, and it has great placement and is easy to use.</p>\n<p>I think WordPress could build these features in. They simply make publishing better. Nearly every site could utilize a tool like this and I think that while there are plugin options for accomplishing these tasks, it&#8217;s pretty core to the experience and mission of publishing.</p>\n<h3>Plenty to gleam, but not a silver bullet</h3>\n<p>All in all, I liked publishing on Medium.</p>\n<p>No, I don&#8217;t own the content. Though they do have a one-click button for exporting everything you&#8217;ve ever written. (<em>edit: reader and former Medium employee Evan Solomon notes I do own the content itself. I guess I mean it more in the sense that I don&#8217;t own the platform, and can&#8217;t guarantee my content will always be there.</em>)</p>\n<p>I also can&#8217;t use my own domain. If I published there long term, that would be a problem.</p>\n<p>It&#8217;s unfair to compare Medium directly to WordPress. But from a publishing perspective, I&#8217;d say there are definitely elements WordPress could learn from. However, we shouldn&#8217;t just jump completely on the simplification bandwagon.</p>\n<p>Now, in terms of who can definitely learn from Medium, it&#8217;s WordPress.com. If I were going with a hosted platform, owning my own domain and being able to choose my own theme are pretty much the only reasons I&#8217;d choose WordPress.com versus Medium. The overall account (especially) and publishing experiences (marginally) feel more polished on Medium than WordPress.com.</p>\n<p>I don&#8217;t know if I&#8217;ll publish on Medium again. Probably, when I find a circumstance that this blog or my personal blog aren&#8217;t the right place. It was fun to play with a shiny new tool, but I&#8217;m still a WordPress guy, and I think we&#8217;re doing alright.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 17:50:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"WPTavern: The WordPress Foundation Creates a Traveling Scholarship in Memory of Kim Parsell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37415\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3126:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsellDocsTeamMeetup.jpg\" rel=\"prettyphoto[37415]\"><img class=\"size-full wp-image-36621\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/KimParsellDocsTeamMeetup.jpg?resize=750%2C460\" alt=\"Kim Parsell With the Docs Team Meetup in Cincinnati 2013\" /></a>Kim Parsell With the Docs Team Meetup in Cincinnati 2013\n<p><a title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">Kim Parsell once told me</a> that attending WordCamp San Francisco 2014 was one of the best experiences of her life. It was her first WordCamp San Francisco and although she was unemployed at the time, she was able to attend thanks to financial assistance received from the <a title=\"http://wordpressfoundation.org/\" href=\"http://wordpressfoundation.org/\">WordPress Foundation</a>. Knowing how much it meant to her to attend the event, the Foundation has launched a <a title=\"https://make.wordpress.org/community/2015/01/15/remembering-kim-parsell/\" href=\"https://make.wordpress.org/community/2015/01/15/remembering-kim-parsell/\">new scholarship program in memory of Kim </a>to provide women in the WordPress community the same opportunity.</p>\n<p>The details of the scholarship are as follows:</p>\n<ul>\n<li>It will be a scholarship for a woman contributor with financial need who has never attended the event before.</li>\n<li>It will be limited to WCSF’s replacement event rather than available for any WordCamp.</li>\n<li>When travel scholarships are announced for the event, this specific memorial scholarship will be mentioned in the post.</li>\n<li>It will cover the ticket cost, flight, and lodging.</li>\n<li>It will be awarded once per year.</li>\n<li>It will be funded by the Foundation.</li>\n<li>It will be awarded by the community team (or whoever within the project is overseeing travel scholarships that year) to the recipient 3 months in advance of the event.</li>\n</ul>\n<p>Jen Mylo, who helped turn the idea into a reality, says the program will likely live inside of a broader scholarship program, &#8220;The assumption is that it will live within a broader travel scholarship program that can be worked on this year (SF was a test of the idea, but not intended to be the only WC that would offer assistance in the future if it worked well, which we haven’t yet worked out).&#8221;</p>\n<p>By limiting the scholarship to women, the goal is to encourage more women to get involved with the project. Mylo also explained why it&#8217;s limited to first time attendees, &#8220;As a Kim memorial, we wanted this to be very Kim-specific, and that first-time experience is what we want to provide someone in her memory.&#8221;</p>\n<p>Although there <a title=\"https://twitter.com/scottbasgaard/status/551531483056578560\" href=\"https://twitter.com/scottbasgaard/status/551531483056578560\">was talk</a> of possibly naming a WordPress release after Kim, this is a much more fitting memorial as it allows her to contribute to the project for years to come.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 01:08:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: WPWeekly Episode 177 – Hanging Out With GoDaddy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=37411&preview_id=37411\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/wpweekly-episode-177-hanging-out-with-godaddy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5253:\"<p>Over the years, GoDaddy has become a company <a title=\"http://chrislema.com/turning-around-godaddy/\" href=\"http://chrislema.com/turning-around-godaddy/\">people love to hate</a>. Whether it&#8217;s poor server performance or the actions of former CEO, Bob Parsons, the company has garnered a negative reputation. Within the last two years however, GoDaddy has implemented several changes to turn the company around.</p>\n<p>In this episode, <a title=\"http://marcuscouch.com/\" href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by three GoDaddy employees:</p>\n<ul>\n<li><a title=\"https://twitter.com/kingjeff2\" href=\"https://twitter.com/kingjeff2\">Jeff King</a>, General Manager of Hosting and Security</li>\n<li><a title=\"https://twitter.com/ifyouwillit\" href=\"https://twitter.com/ifyouwillit\">Mendel Kurland</a>, WordPress evangelist</li>\n<li><a title=\"https://twitter.com/k_payne\" href=\"https://twitter.com/k_payne\">Kurt Payne</a>, developer of the <a title=\"https://wordpress.org/plugins/p3-profiler/\" href=\"https://wordpress.org/plugins/p3-profiler/\">P3 plugin</a> and GoDaddy&#8217;s Managed WordPress platform</li>\n</ul>\n<p>We discuss changes made after Bob Parsons stepped down as CEO and how they&#8217;ve helped create a new culture within the company. Kurland describes what it&#8217;s like to be the first WordPress evangelist and explains his role in helping to establish relationships with people in the WordPress ecosystem. Payne provides details on GoDaddy&#8217;s <a title=\"https://www.godaddy.com/pro/managed-wordpress-hosting\" href=\"https://www.godaddy.com/pro/managed-wordpress-hosting\">managed WordPress hosting</a> platform and what makes it different from competitors.</p>\n<p>Later in the show, we talk about the decision to <a title=\"http://wptavern.com/godaddy-removes-ticketing-and-email-support-in-favor-of-phone-and-live-chat\" href=\"http://wptavern.com/godaddy-removes-ticketing-and-email-support-in-favor-of-phone-and-live-chat\">remove ticketing and email support</a> in favor of phone and live chat support. We find out the lessons the company learned when it <a title=\"http://wptavern.com/without-notifying-customers-godaddy-and-mediatemple-auto-activate-sidekick\" href=\"http://wptavern.com/without-notifying-customers-godaddy-and-mediatemple-auto-activate-sidekick\">auto activated SIDEKICK</a> on customer&#8217;s sites without notifying them. Near the end of the interview, King shares details on a new product called <a title=\"https://www.godaddy.com/pro\" href=\"https://www.godaddy.com/pro\">GoDaddy Pro,</a> which will make it a lot easier to manage clients on the GoDaddy platform.</p>\n<p>The biggest takeaway from the interview is that, GoDaddy has made and continues to make radical changes. It&#8217;s not the same company of a few years ago. If you&#8217;ve written them off in the past, I encourage you to give them a second look.</p>\n<h2>Stories Discussed:</h2>\n<p><a title=\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\" href=\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\">WordPress 4.2 Will Automatically Enable Pretty Permalinks for New Sites on Installation</a><br />\n<a title=\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\" href=\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\">BuddyPress 2.2 Beta 1 Now Available for Testing</a><br />\n<a title=\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\" href=\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\">Preview the New Design for the WordPress Themes Directory</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a title=\"https://wordpress.org/plugins/wp-email-logs/\" href=\"https://wordpress.org/plugins/wp-email-logs/\">WP Email Logs Plugin</a> stores any email sent by the wp_mail() function in a log file within the database. Details logged include: from and to user ids, from and to email address, mail subject, mail content, component, type, send date, and more.</p>\n<p><a title=\"https://wordpress.org/plugins/internal-notes/\" href=\"https://wordpress.org/plugins/internal-notes/\">Internal Notes</a> adds a simple textarea to the post and page editors where you can add notes regarding a particular post or page.</p>\n<p><a title=\"https://wordpress.org/plugins/facebook-feed/\" href=\"https://wordpress.org/plugins/facebook-feed/\">FaceBook Feed</a> allows you to easily display a customizable feed of your Facebook Page on the frontend of WordPress.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, January 28th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #177:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Jan 2015 00:44:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Post Status: WordPress and the new European Union VAT (Value-Added Tax) rules\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7318\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://poststatus.com/wordpress-vat-eu/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:16493:\"<p>On January 1st, the EU rolled out some new rules for handling the VAT (Value-Added Tax). Let&#8217;s start with the obvious: <strong>I&#8217;m not a lawyer or accountant and this post is just me chit chatting and doesn&#8217;t constitute any official form of advice or whatever other legal disclaimer you need, consider this it.</strong></p>\n<p>For most non-Europeans, the VAT may be unfamiliar, but it is relatively similar to an American sales tax. Until now, non-European businesses could basically ignore VAT (unless they have a European office), and Europeans were able to utilize the VAT rate of their home office. Now, that&#8217;s changing.</p>\n<p>Big companies from outside the EU, of course, found some nice loopholes to avoid high VAT rates even when they have a place of business in Europe; they did so by registering their EU operations in Luxembourg, where the VAT rate is lowest. Then, they only had to pay the Luxembourg rate, no matter who they sold to in the EU. <em>The EU is now changing the rules so that the VAT rate of the consumer&#8217;s purchasing location is the rate applied, no matter where the merchant is from</em>.</p>\n<h3>General VAT information</h3>\n<p>Getting easy to read information on VAT is hard. The purpose of this post is to provide that sort of information within the context of WordPress. However, for the best way to read VAT stuff in general, I&#8217;d recommend <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/2015-digital-services-changes/\">VAT Live</a>.</p>\n<h3>Impact on European businesses</h3>\n<p>This, in a nutshell, is the big deal. Previously, European merchants knew their own VAT rate and applied that rate to everyone they needed to apply it to. Now there are something like 28 different rates in the EU and merchants have to apply them based on the purchaser, not themselves.</p>\n<p>For EU merchants, this sucks. Starting two weeks ago, they now have to track a whole lot of stuff and (theoretically) pay taxes to all sorts of entities. The EU has organizations that help with this, and now there are businesses like <a href=\"http://www.taxamo.com/\">Taxamo</a> that are helping handle the calculations and whatnot for these merchants.</p>\n<p>However, it appears actually complying is <a href=\"http://euvataction.org/2015/01/09/eu-vat-how-did-the-first-week-go-its-not-pretty/\">hard for small businesses and large</a> so far. For Europeans, these rules are a complete mess and is truly going to screw up the digital good economy for European merchants.</p>\n<h3>Impact on non-European businesses</h3>\n<p>For non-European businesses, the new VAT rules are a lot fuzzier.</p>\n<p>In short, nothing has changed. There have been European rules in place since 2003 saying that non-European merchants should pay VAT when selling to European consumers &#8212; even for digital goods. The thing is: <em>they didn&#8217;t enforce this because non-Europeans obviously aren&#8217;t under jurisdiction of European authorities</em>.</p>\n<p><span class=\"pullquote alignright\">So, most merchants not in Europe &#8212; but selling to Europeans &#8212; have ignored existing rules for years, and we still can. But there is a but.</span> According to some places I&#8217;m reading, there is the potential that American and other non-European governments could cooperate and even enforce European VAT rules on its citizens.</p>\n<p><strong>Is this likely? </strong>Heck if I know. I honestly can&#8217;t decide if companies like Taxamo are just trying to churn up fear to get more customers (which is natural) or if Americans and other non-Europeans should really pay attention to VAT.</p>\n<p>My gut tells me this policy is terrible and won&#8217;t last, at least without some kind of revenue floor (like 1 million Euros or the equivalent per year, or something). But that change could be years in the making. What until then?</p>\n<h3>The determining factors and implications</h3>\n<p>In the end, it really depends on how willing you are to roll the dice. In my heart of hearts, I hate the idea of paying a foreign government tax revenue for a digitial good when they have no jurisdiction over me.</p>\n<p>Even &#8220;digital good&#8221; is hard to define, though the UK attempts to <a href=\"https://www.gov.uk/government/publications/revenue-and-customs-brief-46-2014-vat-rule-change-and-the-vat-mini-one-stop-shop-additional-guidance/revenue-and-customs-brief-46-2014-vat-rule-change-and-the-vat-mini-one-stop-shop-additional-guidance#section-2\">define qualified services in this document</a>.</p>\n<p>I mean, I don&#8217;t even have to charge sales tax to other states in the US when Americans buy from me. Ugh. So, I really, really want to just ignore the EU &#8212; as an American at least &#8212; and tell them to screw off and catch me if they can.</p>\n<p>But.</p>\n<p>There are a few buts this time.</p>\n<p><strong>1)</strong> It is risky. Because it is possible that the IRS will collaborate with EU member states to collect tax revenue from American digital merchants, as companies like Taxamo suggest can/will happen. I don&#8217;t want to get hit with some kind of audit or fine from the IRS years down the road.</p>\n<p>A friend did make a good point to me recently, noting that the IRS barely enforces digital goods taxes in the United States, so why would they do so on behalf of a foreign entity?</p>\n<p><strong>2)</strong> Are European buyers breaking the law if I don&#8217;t comply as a seller? I don&#8217;t know, but a friend of mine that is complying brought that up. I can&#8217;t find much documentation on this front, but I wouldn&#8217;t want to cause European customers to break their laws by buying from me if I don&#8217;t comply.</p>\n<p><strong>3)</strong> It makes my product more expensive to European buyers if I comply, and it hurts my feelings as an American (Boston tea party, man!), but realistically, services will &#8212; and already are &#8212; come to save the EU with relatively simple ways to comply.</p>\n<h3>Enforcement and methods for complying</h3>\n<p>From what I can tell, each EU member state has to do its own collecting and enforcing. The EU is the regulating body but not the ones that will put feet on pavement to go and enforce these rules and taxes.</p>\n<p><span class=\"pullquote alignright\">The safe bet seems to be to pay up and deal with it.</span> But I have a feeling you could ignore these rules (if you aren&#8217;t European) and probably get by just fine.</p>\n<p>Alternatively, non-EU merchants could just ignore the EU and don&#8217;t sell to anyone there. Well, I won&#8217;t do that. I have a lot of EU-based readers and (potentially) customers. But I am pissed about these rules; <em>the European Union is hurting small businesses</em>, and the worldwide economy.</p>\n<p>I feel even worse for my EU-based friends. They don&#8217;t even have the option of ignoring EU member states. Penalties for non-compliance for them are even more frightening. They are being excluded as consumers of internationally distributed digital goods and also being pinned down as merchants by these overly cumbersome and irresponsibly drafted rules.</p>\n<h3>Self hosting eCommerce is even harder now</h3>\n<p>One additional implication of all of this is this: it is now even harder to self-host your eCommerce. If you sell at a marketplace like Etsy or ThemeForest, they can better (at least attempt to) manage the VAT rules and keep you safe. Though, from what I&#8217;ve heard, even some big marketplaces are struggling big-time with these new regulations.</p>\n<p>If you sell on your own, you have to figure out new methods on your own or with your software of choice.</p>\n<h3>How to comply with VAT</h3>\n<p>Complying with VAT has turned into a business opportunity, and &#8220;solutions&#8221; are popping up.</p>\n<p>No matter which solution you use, you&#8217;ll need to learn about <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/mini-one-stop-shop-moss/\">VATMOSS</a>. VATMOSS stands for Value-Added Tax Mini One Stop Shop. Basically, you can register with one EU country and thereafter just deal with that country for quarterly &#8220;returns&#8221; or payments.</p>\n<p>If you go through the UK, they have <a href=\"https://www.gov.uk/register-and-use-the-vat-mini-one-stop-shop\">information on registering for VATMOSS</a>.</p>\n<p>The EU member countries will divvy up the differences in taxes collected on their own.</p>\n<p>For non-EU providers, <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/non-eu-providers-vat-e-services-voes/\">VoES</a> (VAT on Electronic Services) is also worth learning about if you&#8217;re providing &#8220;digital services.&#8221;</p>\n<h3>General needs</h3>\n<p>There are some general needs for your store if you&#8217;re going to comply with VAT</p>\n<ul>\n<li>Know <a href=\"http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/2015-digital-services-changes/\">if your style of eCommerce applies</a></li>\n<li>You need to know the country of origin for the buyer</li>\n<li>You need the buyer&#8217;s IP address</li>\n<li>You need the country of origin for the buyer&#8217;s credit card</li>\n</ul>\n<p>Honestly, some WordPress plugins are playing catchup to make these things possible and / or easier.</p>\n<p>In addition to information collection, information storage is also important. You&#8217;re supposed to store this stuff for up to ten years! You are also supposed to have ready-made reports for various authorities.</p>\n<p>Some services are helping with the calculations, others with the whole gambit.</p>\n<h4>Taxamo</h4>\n<p>The number one player I&#8217;ve seen in the VAT compliance market is <a href=\"http://www.taxamo.com/\">Taxamo</a>. They are working hard to market their product, which identifies the consumer&#8217;s country, applies the appropriate VAT, integrates with your eCommerce application, stores and creates reports of your data, and fills out a quarterly return form on your behalf. They do so for 0.20 Euros per transaction, once you surpass 20 transactions per month.</p>\n<p>Taxamo is trying to handle pretty much every part of the handshake for you, from collecting to reporting. Here&#8217;s their flow:</p>\n<p><img class=\"aligncenter size-large wp-image-7350\" src=\"https://poststatus.com/wp-content/uploads/2015/01/taxamo-752x416.jpg\" alt=\"taxamo\" width=\"752\" height=\"416\" /></p>\n<p>Taxamo has a few integrations:</p>\n<p><a href=\"https://wordpress.org/plugins/rcp-taxamo/\">Taxamo for Restrict Content Pro</a></p>\n<p><a href=\"https://easydigitaldownloads.com/extensions/taxamo-integration/\">Taxamo for Easy Digital Downloads</a></p>\n<p><a href=\"http://www.woothemes.com/products/woocommerce-taxamo/\">Taxamo for WooCommerce</a></p>\n<p>EU VAT API</p>\n<p>The <a href=\"https://vatinfo.eu/\">EU VAT API</a> is more hands-on, but probably a nice option for developers looking for a minimilist solution. Developed by Radish Concepts (savvy readers may recognize WordPress community member Coen Jacobs, who works with Radish), the EU VAT API is a simple, but seemingly elegant solution for the calculation of the various EU VAT rates.</p>\n<p>The EU VAT API has WordPress integration plugins for both <a href=\"https://wordpress.org/plugins/woocommerce-vatinfoeu/\">WooCommerce</a> and <a href=\"https://wordpress.org/plugins/edd-vatinfoeu/\">Easy Digital Downloads</a>.</p>\n<p><em>edit: Coen Jacobs tells me that like Taxamo, the EU VAT API also handles more than just rates, but they haven&#8217;t fully documented all of the other features yet.</em></p>\n<h4>Other methods</h4>\n<p>The <a href=\"https://vatapi.com/\">VAT API</a> is another simple API that looks good, but I don&#8217;t know as much about it.</p>\n<h3>Compliance with specific eCommerce systems</h3>\n<p>The big WordPress eCommerce players pretty much all have VAT compliance methods in place by now:</p>\n<p>WooCommerce &#8211; they&#8217;re heavily on the Taxamo bandwagon, and have <a href=\"http://www.woothemes.com/products/woocommerce-taxamo/\">this extension</a>. But there&#8217;s also the <a href=\"https://github.com/radishconcepts/woocommerce-vatinfoeu\">Radish Concepts one</a> noted earlier.They also have a <a href=\"http://www.woothemes.com/products/eu-vat-number/\">super slim extension</a> where customers can enter an EU VAT number, that uses an API to calculate the cost. There&#8217;s a <a href=\"https://wordpress.org/plugins/woocommerce-eu-vat-assistant/\">free plugin on WordPress.org</a> too. Also, <a href=\"http://develop.woothemes.com/woocommerce/2014/11/attention-theme-authors-frontend-changes-ahead-in-woocommerce-2-3/\">WooCommerce 2.3 is beefing up some features</a> that will make it better capable for handling some of the more nuanced VAT rules.</p>\n<p>Easy Digital Downloads &#8211; Has a lot of options. Here&#8217;s their <a href=\"https://easydigitaldownloads.com/extensions?extension_s=VAT&action=extension_search\">site tag for &#8220;VAT&#8221; that lists the options</a>.</p>\n<p><a href=\"http://getshopped.org\">WP E-Commerce</a> &#8211; Has one coming, but it&#8217;s not complete yet.</p>\n<p><a href=\"http://jigoshop.com\">Jigoshop</a> &#8211; I can&#8217;t find any references to the new VAT rules, but since these guys are based in Europe, surely they either have something or are working on it.</p>\n<p><a href=\"https://ithemes.com/2014/12/30/ithemes-exchange-vat-add-updated-ready-vat-moss/\">iThemes Exchange</a> &#8211; Has what appears to be an in-house VAT add-on, up to date for 2015.</p>\n<h3>Who is complying so far?</h3>\n<p>I was interested in who is actually complying with the new VAT rules so far &#8212; both Europeans and non-Europeans.</p>\n<p>I&#8217;ve received 120 votes from shop owners selling digital goods in my poll. I think that&#8217;s a pretty great response. Here are the results:</p>\n<p><strong>Question: Do you have an eCommerce store that sells digital goods? Are you complying with the new EU VAT rules?</strong></p>\n<p><img class=\"aligncenter size-large wp-image-7351\" src=\"https://poststatus.com/wp-content/uploads/2015/01/VAT-poll-compliance-752x322.jpg\" alt=\"VAT-poll-compliance\" width=\"752\" height=\"322\" /></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Count</th>\n<th>%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I&#8217;m a European merchant and complying with new VAT rules</td>\n<td>27</td>\n<td>22.5%</td>\n</tr>\n<tr>\n<td>I&#8217;m a European merchant and not yet complying with new VAT rules</td>\n<td>20</td>\n<td>16.67%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and complying with new VAT rules for European customers</td>\n<td>6</td>\n<td>5%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and not complying with new VAT rules for European customers</td>\n<td>31</td>\n<td>25.83%</td>\n</tr>\n<tr>\n<td>I&#8217;m a non-European merchant and I no longer sell to European customers</td>\n<td>12</td>\n<td>10%</td>\n</tr>\n<tr>\n<td>I don&#8217;t know what you&#8217;re talking about</td>\n<td>3</td>\n<td>2.5%</td>\n</tr>\n<tr>\n<td>I haven&#8217;t decided what to do yet</td>\n<td>11</td>\n<td>9.17%</td>\n</tr>\n<tr>\n<td>Other:</td>\n<td>10</td>\n<td>8.33%</td>\n</tr>\n</tbody>\n</table>\n<p>I guess the numbers aren&#8217;t terribly surprising, though I am quite surprised by how many Europeans are not complying.</p>\n<h3>Now what?</h3>\n<p>I think most of us will agree that these rules suck. The most organized thing I&#8217;ve seen to protest them is the <a href=\"http://euvataction.org/\">EU VAT Action site</a>. You should go there and see how to petition and participate in the debate if you are upset by these changes.</p>\n<p>Quite personally, I have to figure out what to do. My primary reasoning for doing this research was to decide if I need to comply. I wanted to share what I&#8217;ve learned with you.</p>\n<p>In addition to the poll I did, I also asked some friends running businesses. I think you&#8217;d be surprised just how many &#8220;big&#8221; American companies aren&#8217;t complying (big in the sense of the WordPress space).</p>\n<p>It does keep coming back to me, what one friend told me about how easy it was to register for VATMOSS and get his shop setup though. I guess I have a few more days to decide.</p>\n<p>If you haven&#8217;t figured out what you&#8217;re going to do with your shop yet, I hope this has helped. If you plan to sell some digital goods in the future, this should be a decent guide to get the lay of the land in terms of selling digital goods with WordPress and complying with the new European VAT rules.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 21:52:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Matt: Venture Capital in the 80s\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44595\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"http://ma.tt/2015/01/venture-capital-in-the-80s/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:198:\"<p>For the best explanation of what&#8217;s going on with capital markets now <a href=\"http://reactionwheel.net/2015/01/80s-vc.html\">it might be best to look to Venture Capital in the 1980s</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 18:30:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"WPTavern: Papi Project Adds a Page Type API to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37377\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wptavern.com/papi-project-adds-a-page-type-api-to-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4177:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/pages.jpg\" rel=\"prettyphoto[37377]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/pages.jpg?resize=1024%2C498\" alt=\"photo credit: zenobia_joy - cc\" class=\"size-full wp-image-37381\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/zenobia_joy/5509949256/\">zenobia_joy</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc/2.0/\">cc</a>\n<p>The <a href=\"http://codex.wordpress.org/Pages\" target=\"_blank\">Pages</a> feature, although generated dynamically in WordPress, was designed for use with static, evergreen content. Pages have always been somewhat simpler than posts, which received a major boost to flexibility when custom <a href=\"http://codex.wordpress.org/Post_Types\" target=\"_blank\">post types</a> came on the scene in version 3.0.</p>\n<p><a href=\"https://twitter.com/frozzare\" target=\"_blank\">Fredrik Forsmo</a>, a systems developer in Stockholm, Sweden, wanted to do more with pages and decided that WordPress needs a Page Type API. He created <a href=\"https://wp-papi.github.io/\" target=\"_blank\">Papi</a>, an open source project that offers a less traditional approach to working with fields and page types.</p>\n<p>&#8220;Papi was started because creating page types didn&#8217;t exists in a good way,&#8221; Forsmo said. &#8220;<a href=\"https://wordpress.org/plugins/advanced-custom-fields/\" target=\"_blank\">ACF</a> and other plugins only support custom fields on different post types. This is not a good way to create page types. Additionally, the URL structure isn&#8217;t ideal with custom post types.&#8221;</p>\n<p>Inspired by the lack of adequate solutions to address this need, Forsmo spent a year developing Papi in his spare time. The idea for the project is based on EPiServer&#8217;s <a href=\"http://pagetypebuilder.codeplex.com/\" target=\"_blank\">Page Type Builder</a>, which offers a more object oriented method of building pages. Papi brings this same approach to WordPress.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/add-new-page-type-view.png\" rel=\"prettyphoto[37377]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/add-new-page-type-view.png?resize=1025%2C448\" alt=\"add-new-page-type-view\" class=\"aligncenter size-full wp-image-37397\" /></a></p>\n<p>Essentially, it allows you to create page types using an existing post type or using custom post types. It doesn&#8217;t have an admin user interface for adding all the fields. &#8220;Papi uses classes in PHP, where one class represents one page type and in your class you add all fields you need,&#8221; Forsmo explained.</p>\n<p>After running it in production, he discovered that it&#8217;s easy to work with when it&#8217;s necessary to add new fields. Using Papi&#8217;s &#8220;page&#8221; post type, you can create different page types with different fields on the same post type, while maintaining a clean URL structure.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/start-page-example-page.png\" rel=\"prettyphoto[37377]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/start-page-example-page.png?resize=1025%2C594\" alt=\"start-page-example-page\" class=\"aligncenter size-full wp-image-37401\" /></a></p>\n<p>Forsmo believes that this is the way pages should work in WordPress. Although I don&#8217;t know if the idea will catch on with developers, the project seems useful for those rare scenarios where custom post types aren&#8217;t a good match.</p>\n<p>Papi isn&#8217;t on the WordPress plugin directory but can be downloaded from <a href=\"https://wp-papi.github.io/\" target=\"_blank\">GitHub</a>. It&#8217;s also available as a <a href=\"https://packagist.org/packages/wp-papi/papi\" target=\"_blank\">Composer package</a>. Papi currently works on WordPress 3.8+ (3.9+ if on HHVM) and PHP 5.3 and above. If you want to experiment with it, Forsmo has written <a href=\"http://papi.readthedocs.org/en/latest/\" target=\"_blank\">documentation</a> on how to get started, how to add page type meta boxes and options, functions available to use in your page type, and how to register a page type directory.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 16:28:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: Edit BuddyPress Activity Posts on the Front End\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37251\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/edit-buddypress-activity-posts-on-the-front-end\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3849:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-edit-activity.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-edit-activity.png?resize=1025%2C465\" alt=\"buddypress-edit-activity\" class=\"aligncenter size-full wp-image-37345\" /></a></p>\n<p>Earlier this week, the folks at <a href=\"http://www.buddyboss.com/\" target=\"_blank\">BuddyBoss</a> released <a href=\"http://wptavern.com/new-buddypress-global-search-plugin-adds-unified-search-of-all-buddypress-components\" target=\"_blank\">BuddyPress Global Search</a>, a new plugin that allows users to search through every BuddyPress component. The company&#8217;s founder, Michael Eisenwasser, was inspired to give back to the project by creating a string of free plugins that benefit the whole community.</p>\n<p><a href=\"https://wordpress.org/plugins/buddypress-edit-activity/\" target=\"_blank\">BuddyPress Edit Activity</a> is the team&#8217;s latest contribution. This plugin is another handy tool that is likely to be useful for a wide range of social networks. It allows users to edit their activity posts and replies on the front end, similar to the &#8220;Edit Post&#8221; feature that you see available on Facebook.</p>\n<p>Once installed, you&#8217;ll find a new edit option added the activity meta buttons.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-edit-button.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-edit-button.png?resize=1025%2C351\" alt=\"buddypress-activity-edit-button\" class=\"aligncenter size-full wp-image-37348\" /></a></p>\n<p>Clicking the button allows users to edit their own activity updates and replies. It gives them the opportunity to correct errors or add to their posts, instead of having to completely delete the post and start over.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-editing.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-activity-editing.png?resize=1025%2C289\" alt=\"buddypress-activity-editing\" class=\"aligncenter size-full wp-image-37360\" /></a></p>\n<p>The plugin&#8217;s settings screen lets administrators turn editing on/off for activity posts and replies, and includes the ability to limit the feature to admins only. The panel also has an option to disable editing after a set number of minutes, a feature often available in plugins that extend WordPress comments. Setting it to zero makes comments editable indefinitely.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/bp-activity-fronted-edit-settings.png\" rel=\"prettyphoto[37251]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/bp-activity-fronted-edit-settings.png?resize=1025%2C524\" alt=\"bp-activity-fronted-edit-settings\" class=\"aligncenter size-full wp-image-37362\" /></a></p>\n<p>I tested the plugin and found that it works well and fits in like a natural part of BuddyPress. It automatically adapts to your current active theme and doesn&#8217;t force any obtrusive styles on the activity stream.</p>\n<p><a href=\"https://wordpress.org/plugins/buddypress-edit-activity/\" target=\"_blank\">BuddyPress Edit Activity</a> may seem like a small thing but it&#8217;s one of those extensions that adds an intuitive feature that greatly improves interaction between users. This is a feature that users have grown to expect based on experience with other social networks.</p>\n<p>BuddyBoss is hitting home runs with its most recent plugin releases, both of which are useful for nearly any type of BuddyPress network. The theme shop is strategically positioning itself for becoming more well-known in the market with its indispensable free plugins.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Jan 2015 07:10:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WPTavern: WP Engine Open Sources Mercury Vagrant for Running WordPress on HHVM and PHP-FPM\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37296\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"http://wptavern.com/wp-engine-open-sources-mercury-vagrant-for-running-wordpress-on-hhvm-and-php-fpm\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3808:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/11/wp-engine.jpg\" rel=\"prettyphoto[37296]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/11/wp-engine.jpg?resize=1025%2C427\" alt=\"wp-engine\" class=\"aligncenter size-full wp-image-34106\" /></a></p>\n<p><a href=\"http://wpengine.com/\" target=\"_blank\">WP Engine</a> Labs, in collaboration with the <a href=\"https://github.com/Varying-Vagrant-Vagrants/VVV\" target=\"_blank\">VVV</a> creators at <a href=\"http://10up.com/\" target=\"_blank\">10up</a>, released <a href=\"https://github.com/wpengine/hgv\" target=\"_blank\">Mercury Vagrant (HGV)</a> today.  The new open source Vagrant configuration uses HHVM to serve PHP code. It also includes the ability to run your development site using standard PHP to test against for comparison.</p>\n<p>Mercury Vagrant is useful for any WordPress developer who wants to develop on top of HHVM. Last year, WP Engine partnered with 10up to launch Mercury, its new <a href=\"http://wptavern.com/wp-engine-partners-with-10up-to-launch-enterprise-hhvm-wordpress-hosting-platform\" target=\"_blank\">enterprise HHVM WordPress hosting platform</a>. Mercury Vagrant was commissioned to help WP Engine customers with local development, but it was not designed to be specific to the host&#8217;s infrastructure. It is GPL-licensed and meant to be used with any host.</p>\n<p>After provisioning your VM, Mercury Vagrant includes the following:</p>\n<ul>\n<li><a href=\"http://percona.com/\" target=\"_blank\">Percona DB</a></li>\n<li><a href=\"http://php-fpm.org/\" target=\"_blank\">PHP-FPM</a></li>\n<li><a href=\"http://hhvm.com/\" target=\"_blank\">HHVM</a></li>\n<li><a href=\"http://nginx.com/\" target=\"_blank\">Nginx</a></li>\n<li><a href=\"http://varnish-cache.org/\" target=\"_blank\">Varnish</a></li>\n<li><a href=\"http://memcached.org/\" target=\"_blank\">Memcached</a></li>\n</ul>\n<p>HGV creates four different sites, with built-in documentation, for running code with either HHVM or PHP-FPM:</p>\n<ul>\n<li><a href=\"http://hgv.dev\" target=\"_blank\">hgv.dev</a> &#8212; General documentation and links for all of the tools</li>\n<li><a href=\"http://hhvm.hgv.dev\" target=\"_blank\">hhvm.hgv.dev</a> &#8212; A new WordPress installation running on HHVM</li>\n<li><a href=\"http://php.hgv.dev\" target=\"_blank\">php.hgv.dev</a> &#8212; A new WordPress installation running on PHP-FPM (PHP 5.5)</li>\n<li><a href=\"http://admin.hgv.dev\" target=\"_blank\">admin.hgv.dev</a> &#8212; Useful administrative tools (phpMyAdmin, etc.)</li>\n</ul>\n<p>It also includes URLs for testing Varnish caching:</p>\n<p><a href=\"http://admin.hgv.dev\" target=\"_blank\">cache.php.hgv.dev</a><br />\n<a href=\"http://cache.hhvm.hgv.dev\" target=\"_blank\">cache.hhvm.hgv.dev</a></p>\n<p>WP Engine labs is committed to supporting and improving Mercury Vagrant for the foreseeable future. The team has collaborated with Facebook to resolve many of the previous issues of using HHVM with WordPress sites. Even if you&#8217;re using different host that offers HHVM, this open source Vagrant configuration is a solid, professionally-supported tool for local testing. If you need help <a href=\"http://wpengine.com/mercury/how-to-start/\" target=\"_blank\">getting started</a>, WP Engine created a visual walk through and tutorial videos to help you set up your local machine with HHVM with Vagrant.</p>\n<p><a href=\"https://github.com/wpengine/hgv\" target=\"_blank\">Mercury Vagrant</a> is a community tool that will go a long way towards helping developers become more familiar with running sites on HHVM. <a href=\"http://wpengine.com/mercury\" target=\"_blank\">Benchmarks comparing WordPress sites on HHVM vs PHP-FPM</a> indicate a 600% performance increase with HHVM. Dramatic performance increases in this range should have more hosts looking to add support for HHVM in the near future.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 22:02:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: I Love Composer, I Love WordPress, But I Object to a Marriage\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37262\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/i-love-composer-i-love-wordpress-but-i-object-to-a-marriage\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:10606:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/composer.jpg\" rel=\"prettyphoto[37262]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/composer.jpg?resize=1024%2C509\" alt=\"photo credit: Jesse Kruger - cc\" class=\"size-full wp-image-37299\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/jessekruger/390534235/\">Jesse Kruger</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc/2.0/\">cc</a>\n<hr />\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/david-hayes.jpg\" rel=\"prettyphoto[37262]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/david-hayes.jpg?resize=150%2C150\" alt=\"david-hayes\" class=\"alignright size-thumbnail wp-image-37266\" /></a><br />\nThis post was contributed by <a href=\"http://www.davidbhayes.com/\" target=\"_blank\">David Hayes</a>. David loves solving difficult problems at <a href=\"http://pressupinc.com\">Press Up</a>, publishing new WordPress tutorials at <a href=\"http://wpshout.com\">WPShout</a>, and eating cold cereal with milk.</p>\n<hr />\n<p>The developer tool <a href=\"https://getcomposer.org/\" target=\"_blank\">Composer</a> has been sneaking in around the fringes of the WordPress community. <a href=\"http://composer.rarst.net/\" target=\"_blank\">Rarst</a> is a fan. The <a href=\"http://roots.io/using-composer-with-wordpress/\" target=\"_blank\">Roots theme framework</a> folks like it. There&#8217;s support infrastructure like <a href=\"http://wpackagist.org/\" target=\"_blank\">WPackagist</a>.</p>\n<p>Composer is widely known in the wider PHP development space. Developer types who mostly focus on WordPress probably have some passing familiarity with it. Maybe you ran across a project I mentioned, or heard about it at a WordCamp or meet-up. Or maybe you&#8217;ve seen Sarah&#8217;s intermittent coverage here at the Tavern when projects — most recently <a href=\"http://wptavern.com/buddypress-2-2-will-add-support-for-composer\" target=\"_blank\">BuddyPress</a> — take steps to support it.</p>\n<p>Composer is awesome. I think it&#8217;s the most exciting thing to happen to PHP in the last five years. WordPress is awesome. I&#8217;ve been using WordPress for nearly a decade now, and I wouldn&#8217;t recommend people use anything else for a beautiful, feature-rich publishing experience for the web. But I don&#8217;t think the two fit together as well as some would like, and that&#8217;s our focus.</p>\n<p>But don&#8217;t worry if you don&#8217;t know what Composer is, we&#8217;ll start with that. Then we&#8217;ll cover a bit about why WordPress is great and explain where the two fit together, sometimes a bit awkwardly. Finally, we&#8217;ll look at how and when it makes sense to incorporate Composer into WordPress work.</p>\n<h3>What is Composer Anyway?</h3>\n<p>In the very simplest version, Composer is dependency management for PHP. That is, it&#8217;s the way that I can pull in external code — libraries, classes, whatever you want to call them — that other people wrote, make sure it&#8217;s loaded for me to use, and never need to worry about it again. Many other languages have had solutions to this problem for awhile, of varying quality. In Ruby, <a href=\"https://rubygems.org/\" target=\"_blank\">Gems</a> are very well known. For front-end JavaScript development, there&#8217;s some standardization on Bower. Python&#8217;s pip has been around awhile. All of these things have similar roles, but the specific implementation is different.</p>\n<p>The big problem dependency managers solve is the way most people deal with dependencies — other people&#8217;s code they&#8217;re using to solve a problem. Without a tool like Composer, it is sloppy and haphazard. When you want a user-friendly date handling library, you go to your search engine, find a few hundred lines of code, copy them into a file, try your best to figure out how to work with them, and never ever know or care when the author of those lines later realizes they created a giant performance bottleneck or security vulnerability.</p>\n<p>Dependency managers also take care of the issue that some code you want to use may itself rely on other libraries, classes, etc., that you aren&#8217;t already using. This leads to big headaches. And in solving these issues, Composer also makes sure that it gets versions of all that software that work for all the various libraries your application makes use of.</p>\n<p>So with Composer, you&#8217;re saved from a lot of copy-pasting, you get super-powers about dependency issues, and you&#8217;re also given a much easier path to get performance improvements, security patches, new features, and so on.</p>\n<p>So you can, for example, tell Composer you want to use a nice date parsing library like <a href=\"https://github.com/briannesbitt/Carbon\" target=\"_blank\">Carbon</a>, set your code up to load the Composer dependencies for you before you use them (with a simple include &#8216;vendor/autoload.php\'; to use this article&#8217;s only snippet of PHP) and you&#8217;re set to go. And when Carbon, or another dependency, gets updated, you&#8217;ll be able to quickly get the latest version with a simple run of Composer&#8217;s update command.</p>\n<h3>What Makes WordPress Great</h3>\n<p>Since you&#8217;re reading WPTavern, I’ll just say, succinctly, that WordPress is an easy-to-use CMS with a rich ecosystem of plugins and themes that make it easy to accomplish a wide variety of goals.</p>\n<p>WordPress is made to be easy-to-use — specifically, for the end user. An average WordPress user, who is put a little on edge by the mention of PHP code, is still able to easily change the look or behavior of their site just by installing a new theme and a few of the thousands of great plugins out there, right from the simple user interface. Even for commercial plugins and themes, the user can probably rely on few-click updates. Users get security updates to their core WordPress code without even needing to think about it.</p>\n<h3>How Composer and WordPress Can Work Together</h3>\n<p>As Josh Pollock called out in <a href=\"http://torquemag.io/improving-wordpress-development-workflow-composer/\" target=\"_blank\">a great article about Composer</a>, there are three basic ways WordPress and Composer can be combined:</p>\n<ul>\n<li>To manage dependencies for a theme or a plugin you’re developing</li>\n<li>To manage your themes and plugins used on a site</li>\n<li>For total site dependency management</li>\n</ul>\n<p>We&#8217;ll take on the last two first, as they&#8217;re the most common way in which people are talking about Composer.</p>\n<h3>Why Composer and WordPress Aren&#8217;t as Compatible as Peanut Butter and Jelly</h3>\n<p>So WordPress is great and easy to use for slightly-more-technical-than-average people. Composer is great — really really great — for developers. Don&#8217;t two great things make a new even greater thing? I mean: I love peanut butter, and I love jelly, and I think a peanut butter and jelly sandwich is one of the top ten foods invented in America. So why don&#8217;t I love the combination of Composer and WordPress?</p>\n<p>It&#8217;s not that they&#8217;re useless together. I think they can work together quite well, but I don&#8217;t think the solution of &#8220;run your whole WordPress site with Composer&#8221; that&#8217;s creeping into more and more places works well. It takes care of one problem — WordPress being awkward to manage and deploy for developer-types — by creating another — a less-than-great experience for the mortals left with the WordPress site who just want to install this new plugin.</p>\n<p>Basically, in trying to cram WordPress into Composer we’re forcing a square peg into a round hole. WordPress’ focus on end-user ease-of-use — just jump into the admin area and search for a plugin on the WordPress.org repository, or upload the Zip archive you got from the seller — is conceptually at odds with using Composer to install WordPress.</p>\n<p>The change of behavior, and frankly the greater knowledge required, makes it the opposite of a simple experience for most. For a site with dedicated and knowledgeable developers or admins around 24/7, that’s possibly a wise trade off, but for most WordPress sites I see, that’s a losing combination.</p>\n<h3>When Composer and WordPress are a Good Combination</h3>\n<p>Even for most WordPress cases, I think there&#8217;s one place where Composer&#8217;s great: when you have some dependencies in a theme or plugin. It&#8217;s the combination of WordPress and Composer I&#8217;ve tried repeatedly and recommend heartily. It is brilliant. When you&#8217;ve got a project that you know doesn&#8217;t really need to support down to PHP 5.2, and where you really do want some helper code, Composer is fantastic as a way to get that external code and seamlessly keep it up to date. (Autoloading, a Composer feature which we&#8217;ve ignored until this point, is also a big perk.)</p>\n<p>For plugin or theme development, I think Composer is great. If you&#8217;re making a plugin that would benefit from a great date-parsing library like Carbon, <a href=\"https://github.com/thephpleague/commonmark\" target=\"_blank\">a Markdown parser</a>, or something else, by all means use Composer to pull that in. For more WordPress specific stuff, such as <a href=\"https://github.com/WebDevStudios/CMB2\" target=\"_blank\">CMB2</a> or <a href=\"https://github.com/thomasgriffin/TGM-Plugin-Activation\" target=\"_blank\">TGM Plugin Activation</a>, it&#8217;s far better to pull that from Composer than an old-school copy and paste.</p>\n<h3>There&#8217;s a Time and a Place for Composer</h3>\n<p>WordPress and Composer aren’t useless together; far from it. But the &#8220;run your whole WordPress site with Composer&#8221; solution is only right for developer-intensive use of WordPress. If you&#8217;re using something like <a href=\"http://capistranorb.com/\" target=\"_blank\">Capistrano</a> for deployments already, go ahead and slot Composer right in beside it. For casual WordPress users, even those who&#8217;ve made or modified a theme or plugin before, Composer is most likely to end up feeling like awkward-to-integrate overkill.</p>\n<p>As a developer, you should know how to use Composer to take care of complex dependencies inside of a plugin or theme and then package up your Composer dependencies in a way that is invisible to the end user. Let them be blissfully unaware that you&#8217;ve used Composer at all. Let them keep that smooth and comfortable WordPress flow with core security and easy updates. That way we get the best of both!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 19:51:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: The Features as Plugins First Model Is a Mess\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=33335\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wptavern.com/the-features-as-plugins-first-model-is-a-mess\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7987:\"<p>Released in late 2013, <a title=\"http://wptavern.com/wordpress-3-8-parker-released\" href=\"http://wptavern.com/wordpress-3-8-parker-released\">WordPress 3.8</a> was packed with new features including, a new theme browser experience, widgets area chooser, and a redesign of the backend. It&#8217;s also the first release to include a feature using a new formal development process called <strong>features-as-plugins</strong> first. The backend redesign started off as a plugin called MP6 with <a title=\"https://make.wordpress.org/design/2013/03/09/as-a-continuation-of-the-work-begun-in/\" href=\"https://make.wordpress.org/design/2013/03/09/as-a-continuation-of-the-work-begun-in/\">development beginning</a> in March, 2013.</p>\n<p>Prior to MP6, features were largely developed inside of core during the development cycle. This method caused some versions to be delayed, as was <a title=\"https://make.wordpress.org/core/version-3-6-project-schedule/\" href=\"https://make.wordpress.org/core/version-3-6-project-schedule/\">the case for WordPress 3.6</a>. The success of MP6 proved that by developing core features as plugins first, they were easier to test, manage, and merge into core at the appropriate time. Since adopting the development process, at least seven features have <a title=\"https://make.wordpress.org/core/features-as-plugins/\" href=\"https://make.wordpress.org/core/features-as-plugins/\">landed in core</a>. However, as an outsider looking in, the process seems to be falling apart.</p>\n<h2>MP6 Set The Bar</h2>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2013/10/mp6.jpg\" rel=\"prettyphoto[33335]\"><img class=\"size-full wp-image-10695\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2013/10/mp6.jpg?resize=800%2C452\" alt=\"MP6 WordPress Admin Plugin\" /></a>MP6 WordPress Admin Plugin\n<p>Each week, Matt Mullenweg and Matt Thomas released a new version for people to test. They also kept <a title=\"https://make.wordpress.org/design/tag/mp6/\" href=\"https://make.wordpress.org/design/tag/mp6/\">everyone updated</a> on what changed and left the comment form open to solicit feedback. This made it easy for people to participate in the development and testing process. By using P2 and the comment section, it was a lot easier to provide feedback. Since MP6 was a plugin, testing it was as easy as installing it on a stable version of WordPress.</p>\n<h2>The Lack of a Testing Audience</h2>\n<p>MP6 was available for download on the WordPress plugin directory. This made it accessible to anyone who wanted to test it. Recent plugins like the <a title=\"https://github.com/johnbillion/wp-session-manager\" href=\"https://github.com/johnbillion/wp-session-manager\">User Session Manager</a> by John Blackbourn don&#8217;t have any P2 posts on the Make WordPress Core site. As with several other features, discussion took place within a <a title=\"https://core.trac.wordpress.org/ticket/30264\" href=\"https://core.trac.wordpress.org/ticket/30264\">trac ticket</a>. Development of the plugin was handled on Github until it received a pass to be merged into core. Having a feature plugin only available on Github and a lack of communication surrounding the feature prevents a lot of people from potentially being part of the testing group.</p>\n<p>WordPress lead developer, Ryan Boren, <a title=\"https://make.wordpress.org/core/2014/11/03/open-update-thread/#comment-20735\" href=\"https://make.wordpress.org/core/2014/11/03/open-update-thread/#comment-20735\">noted in an open thread</a> in November of 2014, that when it comes to gathering a testing audience, no feature plugin has reached the standards set by MP6. For plugins to be merged into core, Boren suggested the following items should be met:</p>\n<ul>\n<li>Be present and up-to-date in the plugin directory.</li>\n<li>Be as ready to go on mobile as they are on desktop.</li>\n<li>Have visual records for major flows through all new interfaces on all devices.</li>\n<li>Have mature UI that isn’t going to derail the release train.</li>\n<li>Have a history of posting weekly updates to make/core.</li>\n<li>Have a history of regular plugin directory updates.</li>\n<li>Have a testing audience.</li>\n<li>Publish a merge consideration post on make/core complete with visual records and other diligence.</li>\n<li>Exist for at least one release cycle. Plugins created at the beginning of a release cycle should not be considered for merge until the next release.</li>\n</ul>\n<p>Several feature plugins fail to adhere to many of these proposed guidelines. In June of 2014, Andrew Nacin added a &#8220;<a title=\"http://wptavern.com/wordpress-trunk-adds-new-beta-testing-tab-to-plugins-screen\" href=\"http://wptavern.com/wordpress-trunk-adds-new-beta-testing-tab-to-plugins-screen\">Beta Testing</a>&#8221; tab to the add plugins screen for those who use WordPress trunk. The tab lists <a href=\"http://make.wordpress.org/core/features-as-plugins/\" target=\"_blank\">Feature Plugins</a> that are available for testing.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/FeaturedPlugins.png\" rel=\"prettyphoto[33335]\"><img class=\"size-full wp-image-37253\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/FeaturedPlugins.png?resize=1025%2C404\" alt=\"Featured Plugin Development Looks Dead\" /></a>Feature Plugin Development Looks Dead\n<p>Based on the results in the screenshot, it looks like every feature plugin is dead in the water, including the WP API. However, if you look at the activity for <a title=\"https://github.com/WP-API/WP-API\" href=\"https://github.com/WP-API/WP-API\">WP API on Github</a>, there&#8217;s plenty of development taking place. How can more people participate in the testing process if feature plugins are not routinely updated and available for download in the directory? This needs to change sooner rather than later.</p>\n<h2>Feature Plugins are More Like Experiments</h2>\n<p>Feature plugins are not guaranteed to be added to WordPress. Instead, the process is similar to a lab with each one being an experiment. Sometimes a plugin won&#8217;t be added but parts of it will. For example, many of the improvements to the post editor in 3.9, 4.0, and 4.1 are derived from the <a title=\"https://wordpress.org/plugins/wp-front-end-editor/\" href=\"https://wordpress.org/plugins/wp-front-end-editor/\">Front-end Editor</a>. Maybe the core team should think about renaming them to <strong>feature experiments</strong> as it&#8217;s more representative of what they really are.</p>\n<h2>Project Management</h2>\n<p>When I brought up the subject of feature plugin development at the January 7th core development meeting, Scott Taylor <a title=\"https://wordpress.slack.com/archives/core/p1420669524004536\" href=\"https://wordpress.slack.com/archives/core/p1420669524004536\">made an excellent point</a>, &#8220;F<span class=\"message_content\">eatures-as-plugins often become Projects without requirements or tasks, which leads to a non-schedule, and then often require all-or-nothing to go in.&#8221; Feature plugins are generally driven by one or two people who might be good developers, but lack project management skills. It&#8217;s almost like someone needs to constantly shepherd feature plugins to make sure they&#8217;re following a schedule and keeping them all on the same page.</span></p>\n<h2>The Process Needs to be Fixed</h2>\n<p>It&#8217;s clear that the feature plugin development process is disjointed at best. Communication is lacking, synchronized development between plugins on Github and WordPress.org is non-existent, and some plugins are merged too quickly. If users are to receive the maximum benefits from the experimental process, it needs to be orchestrated better. At least the core team is <a title=\"https://make.wordpress.org/core/2015/01/13/feature-plugins-in-4-2-and-beyond/\" href=\"https://make.wordpress.org/core/2015/01/13/feature-plugins-in-4-2-and-beyond/\">aware of the problems</a> and is working towards improving the situation for the 4.2 development cycle.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 19:20:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Matt: Futuristic Predictions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44568\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/01/futuristic-predictions/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:336:\"<p>Yesterday&#8217;s post was a bit of a downer, so here io9 lists <a href=\"http://io9.com/the-most-futuristic-predictions-that-came-true-in-2014-1674887659\">The Most Futuristic Predictions That Came True In 2014</a>, including technologically-assisted telepathy, 3d printing in space, laser weapons, and landing a robot on a comet.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 14 Jan 2015 15:15:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"WPTavern: Justin Tadlock Joins Forces with Emil Uzelac to Provide WordPress Theme Review as a Service\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37204\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"http://wptavern.com/justin-tadlock-joins-forces-with-emil-uzelac-to-provide-wordpress-theme-review-as-a-service\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5464:\"<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/red-pen.jpg\" rel=\"prettyphoto[37204]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/red-pen.jpg?resize=1024%2C500\" alt=\"photo credit: pollas - cc\" class=\"size-full wp-image-37241\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/pollas/526544001/\">pollas</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>Last week, Emil Uzelac <a href=\"http://wptavern.com/emil-uzelac-launches-new-wordpress-theme-review-service\" target=\"_blank\">launched a new theme review service</a> targeted at WordPress developers and companies that want their products to adhere to best practices. Just one week after launch, <a href=\"http://justintadlock.com/\" target=\"_blank\">Justin Tadlock</a>, a fellow member of the WordPress.org theme review team and author of the <a href=\"http://themehybrid.com/hybrid-core\" target=\"_blank\">Hybrid Core</a> framework, is joining forces with Uzelac to provide professional reviews to customers.</p>\n<p>&#8220;I’m interested in seeing where this goes. We (DevPress when I was there) were going to offer this service. It never took off because the business itself didn’t,&#8221; Tadlock <a href=\"http://wptavern.com/emil-uzelac-launches-new-wordpress-theme-review-service#comment-62455\" target=\"_blank\">commented</a> on the original announcement. In the past he has conducted paid reviews privately for commercial theme vendors. Uzelac noticed his interest and pounced on the opportunity to partner with him.</p>\n<p>&#8220;To quote one of my all time favorite businessman, J.C. Penney: &#8216;Growth is never by mere chance; it is the result of forces working together,\'&#8221; Uzelac said. &#8220;Justin and I exchanged a few ideas in my launching interview and that is where I learned from Jeff that he had this idea back in 2011.&#8221;</p>\n<p>Since this idea has been on Tadlock&#8217;s mind for several years, he didn&#8217;t hesitate to get involved. &#8220;It&#8217;s something I pretty much immediately hopped on.  We already have a bit of a working relationship as admins for the Theme Review Team.  I believe it&#8217;s a good fit,&#8221; he said.</p>\n<p>Based on his <a href=\"http://wptavern.com/justin-tadlock-publishes-the-results-of-his-themeforest-experiment\" target=\"_blank\">experience at ThemeForest</a> and his service on the WordPress.org Theme Review Team, Tadlock is convinced that developers of all experience levels can benefit from professional theme review:</p>\n<blockquote><p>Professional theme authors who want to bring the highest quality theme to market need assurance that their code is solid. There&#8217;s nothing worse than spending months building an awesome theme only to have it break for a bunch of users because you missed something minor.  Even the most experienced theme authors (myself included) overlook problems that a fresh, second pair of eyes could easily find.  We have editors for books, newspapers, and so on for the same reason.  Authors, whether they&#8217;re writers or theme developers, are going to miss something.</p></blockquote>\n<p>Although themes have always been critical to the success of WordPress, theme review is just now emerging as a service for which one might want to hire a dedicated professional. Tadlock attributes this to the increasing complexity of theme development. &#8220;Themes are a lot more complex than they were just 5 years ago, for example.  This isn&#8217;t just because theme authors are packing in more stuff,&#8221; he said.</p>\n<p>&#8220;Part of it is because basic WordPress theme development has gotten more complex. WordPress has been packing in a lot of new things in recent years, and themes need to account for a variety of possibilities. Just having someone running through unit tests will be a big help.&#8221;</p>\n<p>Several readers commented on the original announcement to suggest that Uzelac consider offering a certification or badge of some sort for commercial theme authors to display once their themes have passed a professional review. Tadlock is open to the idea but sees it more as a marketing tool for their customers to employ.</p>\n<p>&#8220;That&#8217;s probably a good idea, but I don&#8217;t think that&#8217;s what really matters,&#8221; he said. &#8220;I think the focus should be on giving our clients (theme devs) peace of mind.  Once we are seen as a legit and well-known service, a badge or something will most likely become a useful marketing tool for theme authors.&#8221;</p>\n<p><a href=\"http://themereview.co/\" target=\"_blank\">The Theme Review service</a> has already gained traction, and Uzelac reports that he completed his fourth review today. &#8220;I&#8217;ve taken only what I could handle alone and in time. Now that Justin is in, we will do more,&#8221; he said. &#8220;In only few days after the initial launch the response and support has been overwhelming. This confirms that our community is in great need of experienced reviewers.&#8221;</p>\n<p>When it comes to WordPress theme review skills and experience, Uzelac and Tadlock&#8217;s forces combined are unparalleled in the WordPress community. Tadlock hopes that together they can expand their efforts to serve more commercial theme providers. &#8220;I&#8217;d like to see regular business from some of the major theme shops,&#8221; he said. &#8220;That&#8217;s probably the biggest goal I&#8217;d shoot for at the moment.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 23:41:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: VersionPress RC1 Released to Early Backers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37215\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/versionpress-rc1-released-to-early-backers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3708:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/06/VersionPressFeaturedImage.png\" rel=\"prettyphoto[37215]\"><img class=\"size-full wp-image-24643\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/06/VersionPressFeaturedImage.png?resize=650%2C200\" alt=\"Version Control Featured Image\" /></a>Version Control Featured Image\n<p><a title=\"http://versionpress.net/\" href=\"http://versionpress.net/\">VersionPress</a>, the plugin that allows you to <a title=\"http://wptavern.com/versionpress-hopes-to-bring-version-control-to-the-masses\" href=\"http://wptavern.com/versionpress-hopes-to-bring-version-control-to-the-masses\">revert changes to a site</a> without having to restore a backup, is <a title=\"http://blog.versionpress.net/2015/01/announcing-early-access-program/\" href=\"http://blog.versionpress.net/2015/01/announcing-early-access-program/\">being released</a> to early backers. Near the middle of 2014, VersionPress creators <a href=\"https://twitter.com/borekb\">Borek Bernard</a> and <a href=\"https://twitter.com/JanVoracek\">Jan Voráček</a> created a crowdfunding campaign asking for $30K.</p>\n<p>The campaign started off on a rocky note, as several readers <a title=\"http://wptavern.com/versionpress-adopts-the-gpl-software-license\" href=\"http://wptavern.com/versionpress-adopts-the-gpl-software-license\">questioned what license</a> the plugin would use. Bernard decided to license the plugin using the GPLv2, but the decision was made near the middle of the campaign and the duo missed their goal by $14.5K. However, development continued and, for the past several months, the team has been hard at work getting the product to a point where people can start using it.</p>\n<p>A release candidate will be made available later this week to those who backed the project with $50 or more. If no major issues are reported, the team will release version 1.0 by the end of the month. However, the plugin will not be free to use. Those who want access to version 1.0 and future releases will need to join the <a title=\"http://versionpress.net/#get\" href=\"http://versionpress.net/#get\">early access program</a>. The program tries to strike a balance between making the plugin accessible to anyone who&#8217;s interested and funding development.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/VersionPressEarlyAccessProgramPrices.png\" rel=\"prettyphoto[37215]\"><img class=\"size-full wp-image-37221\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/VersionPressEarlyAccessProgramPrices.png?resize=956%2C308\" alt=\"VersionPress Early Access Program Prices\" /></a>Early Access Program Prices\n<p>VersionPress 1.0 is an initial release and won&#8217;t have all of the planned features such as sync and staging. Instead, those features will be rolled out in future versions of the product. According to their development plan:</p>\n<ul type=\"disc\">\n<li>Version <strong>1.0</strong> will contain all the important <strong>basics</strong> – things like <strong>Undo</strong>, <strong>Rollback</strong>, <strong>automatic change tracking</strong>, support for all the built-in WordPress types, etc.</li>\n<li>Version <strong>2.0</strong> will bring full support for <strong>sync and staging</strong>.</li>\n<li>Versions <strong>3.0</strong>, <strong>4.0</strong> etc. will bring features from the <a href=\"http://docs.versionpress.net/en/release-notes/roadmap\">roadmap</a>.</li>\n</ul>\n<p>I&#8217;m happy to see the duo remain committed to their goal of developing and shipping a working product. I still think VersionPress is a great idea and can&#8217;t wait to see how easy or difficult it is to use. Look for a thorough review on the Tavern sometime in February.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 21:31:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"WPTavern: Is 2015 The Year of WordPress Admin Themes?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37098\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/is-2015-the-year-of-wordpress-admin-themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3370:\"<p>The CPO and partner of <a title=\"http://hmn.md/\" href=\"http://hmn.md/\">Human Made</a>, Noel Tock, <a title=\"https://medium.com/@noeltock/wordpress-in-2015-ed6a4674a608\" href=\"https://medium.com/@noeltock/wordpress-in-2015-ed6a4674a608\">published</a> his WordPress predictions for 2015. His predictions include, custom dashboards, front-end editing, internationalization, and more. This could be the year of admin themes, but I think it largely depends on whether the <a title=\"https://github.com/WP-API/WP-API\" href=\"https://github.com/WP-API/WP-API\">WP API</a> is merged into core.</p>\n<p>Tock predicts we&#8217;ll see a substantial increase in different WordPress backend experiences. Although there are implementations like <a title=\"http://www.happytables.com/\" href=\"http://www.happytables.com/\">Happytables</a> and <a title=\"http://jettyapp.com/\" href=\"http://jettyapp.com/\">Jetty</a> which use the WP API, I don&#8217;t think we&#8217;ll see a lot of adoption until it&#8217;s vetted and merged into core.</p>\n<p>Regarding custom dashboard experiences, Tock makes a great point when he says:</p>\n<blockquote><p>For the most part, premium custom dashboards will fail. If it’s too generic, it likely can’t compete with WP-Admin (which actively pursues <em class=\"markup--em markup--li-em\">one size fits all). </em>On the other hand, if it’s too niche or not very extendable, it won’t be of much use either. A minimal small business dashboard with front-end editing will likely be the most popular seller.</p></blockquote>\n<p>Additionally, I think his advice to those looking to experiment with the API should be considered, &#8220;Don’t create a custom dashboard because you want to change the way it looks, change it because you significantly want to improve the experience of <em class=\"markup--em markup--p-em\">your </em>users.&#8221;</p>\n<p>Jason Schuller&#8217;s admin design for <a title=\"http://wptavern.com/jason-schuller-to-re-enter-wordpress-theme-market-with-niche-admin-designs\" href=\"http://wptavern.com/jason-schuller-to-re-enter-wordpress-theme-market-with-niche-admin-designs\">Pickle</a> is a great example of a backend that correlates with what&#8217;s on the frontend. Everything that&#8217;s unnecessary to manage the frontend of the site is removed from the backend, creating a streamlined experience.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/pickle-admin.jpg\" rel=\"prettyphoto[37098]\"><img class=\"wp-image-32235 size-full\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/pickle-admin.jpg?resize=964%2C520\" alt=\"pickle-admin\" /></a>WordPress Backend For The Pickle Theme\n<p>The WP API will make it easy for developers to create a variety of different admin experiences, but users will ultimately decide which implementation is right for them. We may even see an entire category added to the <a title=\"https://wordpress.org/themes/\" href=\"https://wordpress.org/themes/\">WordPress theme directory</a> for admin themes.</p>\n<p>Whether the API is merged this year or next, custom admin themes are inevitable. In the future, there will likely be an admin theme that matches the way you use WordPress to harmonize the user experience. What that theme looks like is anyone&#8217;s guess, but I&#8217;m looking forward to reviewing custom admin experiences created by developers using the API.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 21:18:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: Better Notifications Plugin for WordPress Now Out of Beta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37180\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/better-notifications-plugin-for-wordpress-now-out-of-beta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4881:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress-featured.png\" rel=\"prettyphoto[37180]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress-featured.png?resize=660%2C300\" alt=\"better-notifications-for-wordpress-featured\" class=\"aligncenter size-full wp-image-37196\" /></a></p>\n<p>The beta version of the <a href=\"https://wordpress.org/plugins/bnfw/\" target=\"_blank\">Better Notifications for WordPress</a> plugin was released last year, and it lay dormant for many months while its original collaborators searched for a new developer. The plugin was created to allow you to send customizable HTML emails to users based on different actions in WordPress.</p>\n<p>Jack McConnell, founder of development agency <a href=\"http://www.voltronik.co.uk/\" target=\"_blank\">Voltronik</a>, commissioned the plugin to be built while creating <a href=\"http://www.voltronik.co.uk/case-studies/building-web-app-wordpress-re-imagining-bespoke-project-management-system/\" target=\"_blank\">a custom project management system</a> on top of WordPress. &#8220;One of the requirements was for notifications of new projects (WordPress categories) via email. I couldn&#8217;t find a plugin that sent notifications for events such as these, so I decided to write my own,&#8221; McConnell said. He worked with a developer to push the beta out over the course of a weekend, but that&#8217;s as far as it went last year.</p>\n<p>After finding a new developer, McConnell was able to get the plugin out of beta and develop a roadmap for future releases. Version 1.0 is a major overhaul and a complete re-write of the plugin. New features include:</p>\n<ul>\n<li>Auto-importer: Your old notifications will be imported when updating the plugin</li>\n<li>New &#8216;Generator&#8217; for easily creating and editing your notifications</li>\n<li>More options and notification types as per feedback via the forums</li>\n<li>Granular control over choosing either user roles or individual users you&#8217;d like to send a notification to</li>\n<li>Fully translatable</li>\n</ul>\n<p>Each email can be customized using HTML, CSS, and Voltronik&#8217;s extensive list of <a href=\"http://www.voltronik.co.uk/wordpress-plugins/better-notifications-for-wordpress-shortcodes/\" target=\"_blank\">shortcodes</a>, which means you can add your site&#8217;s logo, a simple design, and all kinds of content to the emails. You can also set the notifications to go to selected individual users or limit the notifications based on user roles.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress.png\" rel=\"prettyphoto[37180]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/better-notifications-for-wordpress.png?resize=806%2C534\" alt=\"better-notifications-for-wordpress\" class=\"aligncenter size-full wp-image-37190\" /></a></p>\n<p>In addition to customizing WordPress&#8217; default notification emails (i.e. new  comments, registrations, password reset), the plugin adds options for the following:</p>\n<ul>\n<li>New category</li>\n<li>New post updated, published</li>\n<li>New [custom post type] updated, published, pending review</li>\n<li>Custom taxonomy &#8211; new term added</li>\n</ul>\n<p>Better Notifications for WordPress adds notification customization options for every custom post type you have registered on your site, which can be very useful if your CPT-based plugins don&#8217;t include notifications.</p>\n<p>If you&#8217;re trying to keep a tight rein on new category creation, this plugin will help keep you in the loop. It also makes it easy to brand your site communications better as an alternative to WordPress&#8217; ugly notification emails. The plugin was built to fit into WordPress like a natural part of the admin.</p>\n<p>McConnell identifies other scenarios where Better Notifications might be useful:</p>\n<ul>\n<li>Outreach: A blog/news site with hundreds of subscribers &#8211; use it to alert them of new blog posts</li>\n<li>Communication: A small, internal WordPress site &#8211; use it to alert staff of new posts and comments</li>\n<li>Monitor: A website for a new product or service &#8211; use it for notifications of pingbacks and trackbacks</li>\n<li>Security: To receive alerts of password reset requests and their corresponding email address</li>\n</ul>\n<p>If you need greater control and customization over WordPress&#8217; email notifications, this plugin handles just about every kind of notice on actions related to publishing. It&#8217;s well on its way to becoming a comprehensive tool and McConnell and his team are eager to improve the plugin based on user feedback. <a href=\"https://wordpress.org/plugins/bnfw/\" target=\"_blank\">Better Notifications for WordPress</a> version 1.0 is now available for download on WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:58:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Post Status: GravityView raises the bar for WordPress video advertisements\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://poststatus.com/?p=7332\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://poststatus.com/gravityview-songadaymann/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1092:\"<p>Okay, maybe it doesn&#8217;t raise the bar the way you think I mean. But this is worthwhile.</p>\n<p>I&#8217;m pretty busy building the new Post Status infrastructure, but not too busy to post this.</p>\n<p><a href=\"https://gravityview.co/\">GravityView</a> is a WordPress plugin by Zack Katz and Katz Web Services that lists Gravity Forms entries on your site in a nice way. It&#8217;s a slick plugin I&#8217;ve been meaning to dig further into since I learned about it at a WordCamp a few months back.</p>\n<p>Nevertheless, the folks behind GravityView have hired <a href=\"https://twitter.com/songadaymann\">@songadaymann</a>, <a href=\"http://jonathanmann.net/about/\">Jonathan Mann</a>, to create a new video for them, and it is&#8230; unforgettable.</p>\n<p></p>\n<p>I mean, I told you.</p>\n<p>This is the type of &#8220;hey this is funny / quirky&#8221; will probably better qualify for the members only newsletter in the future. But while I&#8217;m <a href=\"https://poststatus.com/club/\" title=\"Post Status Membership Club\">building that out</a>, you all get this nugget of fun for free.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:28:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Limits to Growth\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44525\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/01/limits-to-growth/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:637:\"<p>&#8220;They modelled data up to 1970, then developed a range of scenarios out to 2100, depending on whether humanity took serious action on environmental and resource issues. [&#8230;] The book’s central point, much criticised since, is that “the earth is finite” and the quest for unlimited growth in population, material goods etc would eventually lead to a crash. So were they right?&#8221; The answer lies in <a href=\"http://www.theguardian.com/commentisfree/2014/sep/02/limits-to-growth-was-right-new-research-shows-were-nearing-collapse\">Limits to Growth was right. New research shows we&#8217;re nearing collapse</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 19:19:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Ping-O-Matic: A Prompt a Day\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://blog.pingomatic.com/?p=115\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://blog.pingomatic.com/2015/01/13/a-prompt-a-day/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1387:\"<p><a href=\"http://pingomatic.com/\" target=\"_blank\">Ping-O-Matic</a> is all about getting your latest content out into the world and driving more traffic to your blog. Sometimes, though, we need inspiration to write.</p>\n<p>Our friends at <em><a href=\"http://dailypost.wordpress.com\" target=\"_blank\">The Daily Post</a></em> published a free ebook of daily prompts: a gentle nudge to encourage a regular blogging habit. It&#8217;s available in four languages: <strong>English</strong>, <strong>French</strong>, <strong>Spanish</strong>, and <strong>Indonesian</strong>:</p>\n<p><a href=\"https://dailypost.wordpress.com/postaday/ebook-365-writing-prompts/\" target=\"_blank\">Ebook: 365 Writing Prompts</a></p>\n<p><a href=\"https://dailypost.wordpress.com/postaday/ebook-365-writing-prompts/\"><img class=\" size-large wp-image-116 aligncenter\" src=\"https://pingomatic.files.wordpress.com/2015/01/ebook-365-featured-2.png?w=600&h=178\" alt=\"ebook-365-featured 2\" /></a></p>\n<p>Download the version you need &#8212; it&#8217;s free!</p><br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/pingomatic.wordpress.com/115/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/pingomatic.wordpress.com/115/\" /></a> <img alt=\"\" border=\"0\" src=\"http://pixel.wp.com/b.gif?host=blog.pingomatic.com&blog=68432&post=115&subd=pingomatic&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 18:16:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Cheri Lucas Rowlands\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"WPTavern: How to Customize The Body and Title Font in WordPress Default Themes Without Touching Code\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37158\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3147:\"<p>WordPress 4.1 ships with three default themes, <a title=\"https://wordpress.org/themes/twentythirteen\" href=\"https://wordpress.org/themes/twentythirteen\">Twenty Thirteen</a>, <a title=\"https://wordpress.org/themes/twentyfourteen\" href=\"https://wordpress.org/themes/twentyfourteen\">Twenty Fourteen</a>, and <a title=\"https://wordpress.org/themes/twentyfifteen\" href=\"https://wordpress.org/themes/twentyfifteen\">Twenty Fifteen</a>. Although the theme customizer enables you to edit a default theme&#8217;s colors, header image, and other attributes, it doesn&#8217;t give you the ability to change the body and title fonts. If you&#8217;d like to easily change fonts in a default theme using the customizer without using code, try the <a title=\"https://wordpress.org/plugins/styleguide/\" href=\"https://wordpress.org/plugins/styleguide/\">Styleguide plugin</a> created by <a title=\"http://www.binarymoon.co.uk/\" href=\"http://www.binarymoon.co.uk/\">Ben Gillbanks</a>.</p>\n\n<a href=\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code/2015customizerbeforestyleguide\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/2015CustomizerBeforeStyleguide.png?resize=297%2C668\" class=\"attachment-full\" alt=\"Customizer Before Styleguide is Activated\" /></a>\n<a href=\"http://wptavern.com/how-to-customize-the-body-and-title-font-in-wordpress-default-themes-without-touching-code/2015customizerafterstyleguide\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/2015CustomizerAfterStyleguide.png?resize=291%2C826\" class=\"attachment-full\" alt=\"Customizer after Styleguide is Activated\" /></a>\n\n<p>Once Styleguide is activated, you&#8217;ll see two new options added to the customizer. These allow you to edit the font for the body and title text. Styleguide will let you change fonts for headers and body text in almost any theme, but out of the box it supports Twenty Ten through Twenty Fifteen. There&#8217;s also support for <a title=\"https://creativemarket.com/BinaryMoon/108641-Puzzle-Responsive-WordPress-Theme?u=BinaryMoon\" href=\"https://creativemarket.com/BinaryMoon/108641-Puzzle-Responsive-WordPress-Theme?u=BinaryMoon\">Puzzle</a>, a theme created by Gillbanks.</p>\n<p>If you&#8217;re using one of the supported themes mentioned above then it will add font and color editing to the customizer, allowing you to style the themes as you wish. Developers can add support for their own themes by using the &#8216;add_theme_support&#8217; command. Check out the <a title=\"https://github.com/BinaryMoon/styleguide/tree/master/theme-styles\" href=\"https://github.com/BinaryMoon/styleguide/tree/master/theme-styles\">included theme-styles</a> to see live examples on how to use the command.</p>\n<p>Gillbanks notes that additional theme support will be added in the future. Until then, if you&#8217;re using one of WordPress&#8217; default themes, <a title=\"https://wordpress.org/plugins/styleguide/\" href=\"https://wordpress.org/plugins/styleguide/\">Styleguide</a> is an easy way to add the ability to customize the body and title fonts without touching a line of code.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 04:28:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Struggles of Distributed\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44585\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/01/struggles-of-distributed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:511:\"<p>I think it&#8217;s good to show both sides of what a distributed organization is like, here are two essays by different <a href=\"http://automattic.com/\">Automatticians</a>. Steph Yiu writes <a href=\"http://hoppycow.com/2015/01/04/still-figuring-it-out-communicating-remotely-with-lots-of-people/\">Still figuring it out: communicating remotely with lots of people</a> and Chris Hardie writes on <a href=\"http://www.chrishardie.com/2015/01/distributed-vs-person-teams/\">Distributed vs. In-person Teams</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Jan 2015 00:48:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"WPTavern: New BuddyPress Global Search Plugin Adds Unified Search of All BuddyPress Components\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37106\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"http://wptavern.com/new-buddypress-global-search-plugin-adds-unified-search-of-all-buddypress-components\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2938:\"<p>The developers behind the <a href=\"http://www.buddyboss.com/\" target=\"_blank\">BuddyBoss</a> theme shop released a plugin today that has the potential to benefit nearly every BuddyPress social network. <a href=\"https://wordpress.org/plugins/buddypress-global-search/\" target=\"_blank\">BuddyPress Global Search</a> adds a unified search bar, allowing users to search through every BuddyPress component, along with pages, posts, and select custom post types.</p>\n<p>Once activated, the plugin turns the site&#8217;s WordPress search inputs into a global search, capable of returning results for any of the social content on the site. It also features a live dropdown of results as you are typing.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search.png\" rel=\"prettyphoto[37106]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search.png?resize=1025%2C708\" alt=\"buddypress-global-search\" class=\"aligncenter size-full wp-image-37141\" /></a></p>\n<p>The plugin&#8217;s settings page allows administrators to include or exclude any component or custom post type from the unified search.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search-settings.png\" rel=\"prettyphoto[37106]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/buddypress-global-search-settings.png?resize=1025%2C532\" alt=\"buddypress-global-search-settings\" class=\"aligncenter size-full wp-image-37144\" /></a></p>\n<p>The plugin was designed to work with any theme out of the box and should adopt your theme&#8217;s styling for BuddyPress search results. However, every theme is different and it may require additional tweaking to get it to perfectly compliment your current design.</p>\n<p>I spoke with BuddyBoss founder Michael Eisenwasser, who said that the plugin is his company&#8217;s way of giving back to one of WordPress&#8217; sister projects. &#8220;I saw Matt at WCSF talking about WP companies giving back 5%, and was inspired to give back to BuddyPress,&#8221; he said. &#8220;Better search has always been lacking in BP. We built this one because we would use it ourselves on pretty much any site.&#8221;</p>\n<p>Eisenwasser plans to continue improving BuddyPress Global Search and will add new features based on user feedback. The BuddyBoss team is cooking up a string of free plugins and next on deck is one that will allow users to easily edit BuddyPress activity on the front end.</p>\n<p>If you administer a BuddyPress site and want your search results to return content from the social network, this plugin offers a solid option. Download <a href=\"https://wordpress.org/plugins/buddypress-global-search/\" target=\"_blank\">BuddyPress Global Search</a> for free from WordPress.org. Documentation and support can be found on the <a href=\"http://www.buddyboss.com/tutorials/\" target=\"_blank\">BuddyBoss website</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 23:21:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: Preview the New Design for the WordPress Themes Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/preview-the-new-design-for-the-wordpress-themes-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3730:\"<p>A long-awaited update to the official WordPress Themes Directory is in progress. Contributors on the <a href=\"http://make.wordpress.org/meta/\" target=\"_blank\">Meta team</a> for WordPress.org are picking up speed on the effort to move the theme repository away from bbPress and into a new plugin, comprised of a custom post type for the repository package and a theme uploader.</p>\n<p>Konstantin Obenland posted a <a href=\"https://make.wordpress.org/meta/2015/01/09/theme-directory-update-19/\" target=\"_blank\">project update</a> to inform contributors that both the <a href=\"https://meta.trac.wordpress.org/browser/sites/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-themes\" target=\"_blank\">theme</a> and the <a href=\"https://meta.trac.wordpress.org/browser/sites/trunk/wordpress.org/public_html/wp-content/plugins/theme-directory\" target=\"_blank\">plugin</a> that help to power the directory are now open source and available for anyone to view on <a href=\"https://meta.trac.wordpress.org/ticket/745\" target=\"_blank\">meta.trac</a>. The plan is to match the new directory design to the WordPress admin themes browser, allowing users to filter themes in a similar way.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/new-themes-directory.png\" rel=\"prettyphoto[37090]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/new-themes-directory.png?resize=1001%2C852\" alt=\"new-themes-directory\" class=\"aligncenter size-full wp-image-37112\" /></a></p>\n<p>As you can see in the screenshots above, much of the same UI from WordPress is being re-purposed for the directory. Users will be able to select from all available filters in order to narrow down results.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/themes-directory-filters.png\" rel=\"prettyphoto[37090]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/themes-directory-filters.png?resize=987%2C662\" alt=\"themes-directory-filters\" class=\"aligncenter size-full wp-image-37115\" /></a></p>\n<p>A <a href=\"https://wordpress.org/themesnew/\" target=\"_blank\">live preview</a> of the new directory is available, though Obenland warns it&#8217;s still a bit buggy. The new design also includes an update for the <a href=\"https://wordpress.org/themesnew/commercial/\" target=\"_blank\">commercially-supported GPL themes</a> page.</p>\n<h3>Timeline for Launching the New Themes Directory</h3>\n<p>There is no set timeline for launching the new directory, though some of the larger tasks have already been accomplished. All the necessary API changes are complete, along with the upload process, theme suspension and approval capabilities, and theme version handling.</p>\n<p>Obenland identified a list of important tasks that will need to be accomplished before launching the new directory. These items include things like importing existing themes from bbPress, rewriting the theme API and downloads handling to work with WordPress, synchronizing theme review results as a cron job, etc.</p>\n<p>Matching the UI to the admin themes browser means that users will have a consistent experience, whether they are searching on WordPress.org or browsing in the WordPress admin. It also speeds up the process by enabling contributors to reuse work that has already been done for the core software.</p>\n<p>If you are interested in contributing with the WordPress Meta team, now is an exciting time to jump in. All of the code for the project is public on <a href=\"https://meta.trac.wordpress.org/ticket/745\" target=\"_blank\">meta.trac</a>, and you can offer feedback on the <a href=\"https://make.wordpress.org/meta/2015/01/09/theme-directory-update-19/\" target=\"_blank\">Make.WordPress.org/Meta</a> blog.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 19:58:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: BuddyPress 2.2 Beta 1 Now Available for Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37060\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/buddypress-2-2-beta-1-now-available-for-testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2509:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png\" rel=\"prettyphoto[37060]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/buddypress-logo-blue.png?resize=839%2C398\" alt=\"buddypress-logo-blue\" class=\"aligncenter size-full wp-image-30655\" /></a></p>\n<p>Over the weekend, BuddyPress project lead John James Jacoby announced that <a href=\"https://buddypress.org/2015/01/buddypress-2-2-beta-1/\" target=\"_blank\">2.2 beta 1</a> is ready for testing. The upcoming release has been in development since last September. Jacoby&#8217;s campaign for six months of BuddyPress, bbPress, and GlotPress development was <a href=\"http://wptavern.com/buddypress-bbpress-and-glotpress-development-campaign-is-now-fully-funded\" target=\"_blank\">fully funded</a> in mid-December, allowing him to spend more time on the project in 2015.</p>\n<p>So far, the 2.2 milestone has <a href=\"https://buddypress.trac.wordpress.org/query?status=closed&group=resolution&milestone=2.2\" target=\"_blank\">127 resolved tickets</a>, which include enhancements and fixes across all components. Jacoby outlined the most significant changes that require more testing ahead of the official release:</p>\n<ul>\n<li><a href=\"http://wptavern.com/buddypress-2-2-on-track-to-provide-a-basic-member-type-api\" target=\"_blank\">Member types</a> will allow developers to register different types of users, i.e. ‘teacher’ vs. ‘student’.</li>\n<li>Post type activities will allow developers to <a href=\"http://wptavern.com/buddypress-2-2-to-add-custom-post-type-support-to-the-activity-stream\" target=\"_blank\">connect custom post types to activity stream items</a>.</li>\n<li>Numerous improvements to the Legacy template pack</li>\n<li>Several new query API’s (based on WordPress improvements) for retrieving more specific results</li>\n<li>Continued cache enhancements, particularly for multi-site and multi-network WordPress configurations</li>\n<li>Tons of under-the-hood improvements</li>\n<li>Increased coverage of inline code documentation, actions, and filters</li>\n</ul>\n<p>Now is good time for BuddyPress site administrators and plugin and theme developers to start testing their extensions against the beta. You can download the zip file for 2.2 beta 1 from the <a href=\"https://buddypress.org/2015/01/buddypress-2-2-beta-1/\" target=\"_blank\">release announcement</a>. The plugin&#8217;s core development team is aiming to get the official 2.2 release out to users by the end of January.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 05:31:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Matt: Thirty One\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44592\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/01/thirty-one/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3042:\"<p>The first year of my thirties was both incredibly challenging and incredibly rewarding. I started a new decade and <a href=\"http://ma.tt/2014/01/toni-automattic-ceo/\">a new role as CEO</a> at the same time, and at Automattic we grew to over 300 people and <a href=\"http://ma.tt/2014/05/new-funding-for-automattic/\">raised money for the first time in a while</a>, both of which I couldn&#8217;t have predicted five or even two years ago.</p>\n<p>My big takeaway from the year was the importance of habits and small actions for accomplishing big things. To be productive I don&#8217;t need any fancy setups or project management software, just a well-groomed todo list and a pomodoro timer. This year on my birthday I find myself in Egypt which is an awe-inspiring place in many ways, but most striking to me has been the enduring beauty of craftsmanship with access to only the simplest of tools.</p>\n<p>In running, which I started this past summer while in Italy, I was able <a href=\"http://ma.tt/2014/10/run-better/\">to slow down to go further and without injury</a>, and ended up putting in about 140 miles which took my fitness to be better than it&#8217;s been so far in my adult life. At least half of those miles were with friends and you can&#8217;t underestimate the importance of friends in helping you overcome mental blocks. (Also flew 425k miles in 2014, a new record. You can run anywhere and with minimal equipment &#8212; it&#8217;s a great way to explore a city.)</p>\n<p>Reading and writing, two of the activities still most important to me, benefitted from a &#8220;just do it&#8221; philosophy of putting one foot in front of the other. I <a href=\"http://ma.tt/2014/10/streak/\">published more words</a> on ma.tt than any year since 2007, and I find blogging one of the most rewarding pastimes in my life. It was also a year of not trying to be all business all the time: I started reading fiction regularly after a decade away and letting the topics here drift wherever my interest is at the moment. Last year I talked about balance, and I think this is what drove many of the accomplishments I&#8217;m looking back on fondly now.</p>\n<p>I&#8217;m proud of how 2014 went, and I hope to build on that foundation to be a better person and reach even more ambitious milestones in the year to come. Here&#8217;s to slowing down to go further, and tackling big tasks with friends.</p>\n<p>Previously: <a href=\"http://ma.tt/2003/01/bday/\">19</a>, <a href=\"http://ma.tt/2004/01/so-im-20/\">20</a>, <a href=\"http://ma.tt/2005/01/hot-barely-legal-matt/\">21</a>, <a href=\"http://ma.tt/2006/01/matt-22/\">22</a>, <a href=\"http://ma.tt/2007/01/twenty-three/\">23</a>, <a href=\"http://ma.tt/2008/01/twenty-four/\">24</a>, <a href=\"http://ma.tt/2009/01/twenty-five/\">25</a>, <a href=\"http://ma.tt/2010/01/twenty-six/\">26</a>, <a href=\"http://ma.tt/2011/01/twenty-seven/\">27</a>, <a href=\"http://ma.tt/2012/01/twenty-eight/\">28</a>, and <a href=\"http://ma.tt/2013/01/twenty-nine/\">29</a>, <a href=\"http://ma.tt/2014/01/matt-3-0/\">30</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Jan 2015 04:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: NFL is a Non-Profit\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44285\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/01/nfl-is-a-non-profit/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:283:\"<p>Did you know the NFL is a non-profit? Slate says <a href=\"http://www.slate.com/articles/business/moneybox/2014/09/the_nfl_should_lose_its_tax_exempt_status_the_league_is_not_a_nonprofit.html\">the NFL should lose its tax-exempt status: The league is not a “nonprofit.”</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 10 Jan 2015 18:12:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Matt: PGP Tutorial\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44579\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"http://ma.tt/2015/01/pgp-tutorial/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:373:\"<p>Speaking <a href=\"http://ma.tt/2014/12/donate-to-gnupg/\">of PGP</a> and <a href=\"http://ma.tt/?p=44577\">security</a>, this self-described<a href=\"http://notes.jerzygangi.com/the-best-pgp-tutorial-for-mac-os-x-ever/\">best PGP tutorial for Mac OS X, ever</a> actually lives up to the promise. Check it out, makes encrypting and decrypting things on the fly super easy.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 10 Jan 2015 00:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"WPTavern: Duplicate and Merge Posts: A New Editorial Plugin for WordPress Publishers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"http://wptavern.com/duplicate-and-merge-posts-a-new-editorial-plugin-for-wordpress-publishers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4489:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge.jpg?resize=772%2C330\" alt=\"duplicate-merge\" class=\"aligncenter size-full wp-image-37020\" /></a></p>\n<p>WordPress sites with multiple users often run into challenges when attempting to work on the same content. Larger publications require more robust editorial tools for efficient collaboration between administrators, editors, contributors, and authors, who often need to jump in on the same post.</p>\n<p><a href=\"https://wordpress.org/plugins/duplicate-and-merge-posts/\" target=\"_blank\">Duplicate and Merge Posts</a> is a plugin that offers a new take on WordPress drafts. This editorial tool makes it possible to clone a live post, edit it, and then merge back the updated copy into the original post. It&#8217;s a essentially a far more simplified version of the <a href=\"http://wptavern.com/introducing-wordpress-post-forking-version-control-for-writers\" target=\"_blank\">Post Forking plugin</a> in that it offers fewer capabilities. Duplicate and Merge Posts is intended for the following workflow:</p>\n<p><strong>Original Post</strong> -> <strong>Clone</strong> -> <strong>Edit</strong> -> <strong>Merge back to Original Post</strong></p>\n<p>The plugin was created by WordPress developer <a href=\"https://twitter.com/DavidWells\" target=\"_blank\">David Wells</a> as part of a client project with <a href=\"http://exygy.com/\" target=\"_blank\">Exygy</a>. &#8220;We built it for a &#8216;Fortune 10&#8242; company for them to manage an internal documentation platform they have running on WordPress and figured the rest of the WordPress community would benefit from the plugin as well,&#8221; he said.</p>\n<p>Duplicate and Merge Posts works with both posts and pages. When activated, you&#8217;ll find a new &#8220;Duplicate and Edit&#8221; button at the top of the post on the front end, as well as in the post edit screen.</p>\n<p>The plugin&#8217;s settings screen allows you to set different editorial capabilities based on user role. For example, you might only allow administrators and editors to merge changes back into posts. The buttons shown in the post editor are limited to the user&#8217;s capabilities and allow for the following:</p>\n<ul>\n<li>View side-by-side differences</li>\n<li>Submit update for review</li>\n<li>Merge back into the original post</li>\n<li>Save as a new post</li>\n</ul>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-post.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-post.jpg?resize=1025%2C523\" alt=\"duplicate-merge-post\" class=\"aligncenter size-full wp-image-37024\" /></a></p>\n<p>Users with merge capabilities will receive an email notification when a post has edits ready for review. The plugin allows you to see all of the changes side-by-side for quick comparison.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-side-by-side.jpg\" rel=\"prettyphoto[37018]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/duplicate-merge-side-by-side.jpg?resize=1025%2C523\" alt=\"duplicate-merge-side-by-side\" class=\"aligncenter size-full wp-image-37025\" /></a></p>\n<p>The primary use case for the Duplicate and Merge plugin is likely to be multi-author publications. However, it&#8217;s flexible enough to enable more creative uses, such as turning your site into a wiki or allowing visitors to submit fixes for typos. The basic ability to clone posts can also be useful for sites using WordPress as a CMS with many pages that are similar in content.</p>\n<p>After testing Duplicate and Merge, I found that it works as advertised. This tool has the potential to improve your editorial workflow without creating additional confusion for contributors. It has a natural workflow that allows a publication team to get more eyes on the content before pushing edits live.</p>\n<p>You can download <a href=\"https://wordpress.org/plugins/duplicate-and-merge-posts/\" target=\"_blank\">Duplicate and Merge</a> from WordPress.org. It&#8217;s also available for contributions on <a href=\"https://github.com/Exygy/duplicate-and-merge-posts\" target=\"_blank\">GitHub</a>. If you want to see the plugin in action before installing it, check out the video below to tour its features.</p>\n<p><span class=\"embed-youtube\"></span></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 20:02:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WPTavern: AcademiaThemes One Year Later\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37011\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://wptavern.com/academiathemes-one-year-later\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2636:\"<p>When Dumitru Brinzan launched <a title=\"http://www.academiathemes.com/\" href=\"http://www.academiathemes.com/\">AcademiaThemes</a> in <a title=\"http://wptavern.com/academiathemes-wordpress-themes-specifically-for-academia\" href=\"http://wptavern.com/academiathemes-wordpress-themes-specifically-for-academia\">early 2014</a>, he did so with the goal of providing high quality themes for the education sector. With one year under his belt, I reached out to Brinzan to find out how the business is doing. The first year was rough, thanks in large part to <a title=\"http://moz.com/google-algorithm-change\" href=\"http://moz.com/google-algorithm-change\">algorithm changes</a> implemented by Google to its search engine in early 2014.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/01/AcademiaThemesUniversityTheme.jpg\" rel=\"prettyphoto[37011]\"><img class=\"aligncenter size-full wp-image-14054\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/01/AcademiaThemesUniversityTheme.jpg?resize=983%2C536\" alt=\"Academia Themes University Theme\" /></a></p>\n<p>The updates negatively impacted a majority of AcademiaThemes affiliates, &#8220;Many of our affiliates simply lost all of their traffic, so we lost basically all sales generated by them, which is an important source of revenue for new shops.&#8221; With affiliates having a hard time getting search engine traffic, Brinzan is finding it difficult to get new traffic to his site, &#8220;Now with almost all of the main affiliates out of the picture, it&#8217;s become incredibly hard to get traffic to our shop.&#8221;</p>\n<p>Despite a significant loss in traffic and affiliate revenue, Brinzan will continue to operate the site. In fact, he&#8217;s opened a new theme shop called <a title=\"http://www.energythemes.com/\" href=\"http://www.energythemes.com/\">EnergyThemes</a> aimed at the fitness market. EnergyThemes is the third theme company he owns that&#8217;s aimed at a specific niche. In addition to AcademiaThemes, he operates <a href=\"http://www.premiumwp.com/go/hermes-themes\" target=\"_blank\" rel=\"nofollow\">HermesThemes</a> which offers themes for hotels.</p>\n<h2>The Achilles&#8217; Heel of Affiliate Programs</h2>\n<p>I&#8217;ve never owned a WordPress theme shop, but I understand how important affiliate programs are. They provide free advertising while helping to generate sales. I never realized updates to Google&#8217;s search engine could drastically reduce affiliate revenue and traffic if sites perform poorly based on those updates. This is an important thing to consider if you&#8217;re thinking about utilizing an affiliate program.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 11:50:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: 5 WordPress Initiatives That Didn’t Make it Out of 2014\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36477\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"http://wptavern.com/5-wordpress-initiatives-that-didnt-make-it-out-of-2014\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7788:\"<p>Throughout the course of a year, several new ideas, products, and businesses are launched in the WordPress ecosystem. However, not all of them are destined for success. Here are five WordPress initiatives launched in 2014 that didn&#8217;t make the cut.</p>\n<h2>WPKindness</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/02/WPKindnesslogo.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-16049\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/02/WPKindnesslogo.jpg?resize=542%2C140\" alt=\"WP Kindness Logo\" /></a></p>\n<p>Launched <a title=\"http://wptavern.com/new-site-highlights-acts-of-kindness-in-the-wordpress-community\" href=\"http://wptavern.com/new-site-highlights-acts-of-kindness-in-the-wordpress-community\">in early</a> 2014 and created by Ryan Bell,<a title=\"http://wpkindness.com/\" href=\"http://wpkindness.com/\"> WPKindness</a> shared acts of kindness that have taken place throughout the WordPress community. The site used a combination of <a href=\"http://headwaythemes.com/\">Headway</a>, <a href=\"http://www.gravityforms.com/\">Gravity Forms</a>, <a href=\"http://wp-types.com/\">Toolset</a> and <a title=\"http://www.wordpress.org\" href=\"http://www.wordpress.org\">WordPress,</a> allowing visitors to submit reports. At the time, I was concerned with a section within the site&#8217;s terms of service that explained affiliate links might be used in reports where companies are mentioned, “You understand wpkindness.com might use an affiliate link to the company you are submitting about.“ The concern is a moot point as the site is offline.</p>\n<h2>WPCollab</h2>\n<p>Fresh out of WordCamp Norway, Slobodan Manic created a <a title=\"http://make.wpcollab.co/\" href=\"http://make.wpcollab.co/\">WordPress collaboration group</a> with the idea that working together creates more opportunities to learn. The first task for the group was to create a WordPress plugin and submit it to the directory. Their first plugin, <a title=\"https://wordpress.org/plugins/hello-emoji/\" href=\"https://wordpress.org/plugins/hello-emoji/\">Hello Emoji,</a> successfully made it to the directory and was created by <strong>five people</strong> from <strong>four different continents</strong> in a <strong>two week</strong> time period.</p>\n<p>While WPCollab showed promise, <a title=\"http://make.wpcollab.co/2014/06/26/wpcollab-future/\" href=\"http://make.wpcollab.co/2014/06/26/wpcollab-future/\">the lack of focus and the inability to manage several contributors</a> from across the world caused the project to lose momentum.</p>\n<h2>Feuilles</h2>\n<p>When <a title=\"http://wptavern.com/feuilles-app-aims-to-replace-editorially-offers-publishing-to-github-wordpress-and-dropbox\" href=\"http://wptavern.com/feuilles-app-aims-to-replace-editorially-offers-publishing-to-github-wordpress-and-dropbox\">Editorially closed its</a> doors in May of 2014, it took all of its cool writing collaboration tools with it. A new project called <a title=\"https://feuill.es/\" href=\"https://feuill.es/\">Feuilles</a> picked up where Editorially left off with an app that provided some of the features Editorially users loved most.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/Feuilles.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-23799\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/Feuilles.jpg?resize=962%2C509\" alt=\"Feuilles\" /></a></p>\n<p>Feuilles allowed users to publish to Github, WordPress.com, and Dropbox at the same time. <a href=\"https://twitter.com/alexduloz\" target=\"_blank\">Alex Duloz,</a> one of the project&#8217;s creators, aimed to make Feuilles a language/device agnostic CMS with in-house publishing. Unfortunately, the project never made it that far and the website devoted to the project fails to redirect properly.</p>\n<h2>WP School</h2>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/01/WpSchoolFrontPage.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-14202\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/01/WpSchoolFrontPage.jpg?resize=928%2C452\" alt=\"WpSchoolFrontPage\" /></a></p>\n<p>Created by Pooria Asteraky, <a title=\"http://www.wpschool.org/\" href=\"http://www.wpschool.org/\">WP School</a> launched with the goal of bringing WordPress education to the masses. Classified as a (<strong>MOOC</strong>) or massive open online course, the site was dedicated to offering WordPress education and online courses in a variety of languages for people to use across the world. In order to get off the ground, Asteraky created a <a title=\"https://www.indiegogo.com/projects/wordpress-school-mooc\" href=\"https://www.indiegogo.com/projects/wordpress-school-mooc\">crowdfunding campaign</a> asking for $25K. The campaign ended with only $1,087 pledged. With a severe lack of funding, WP School never made it out of the gate.</p>\n<h2>Netropolitan</h2>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/09/netropolitan.jpg\" rel=\"prettyphoto[36477]\"><img class=\"aligncenter size-full wp-image-30802\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/09/netropolitan.jpg?resize=1025%2C640\" alt=\"netropolitan\" /></a></p>\n<p><a title=\"http://netropolitan.info/\" href=\"http://netropolitan.info/\">Netropolitan</a> also known as the &#8220;Facebook for Rich People&#8221; <a title=\"http://wptavern.com/netropolitan-facebook-for-rich-people-is-powered-by-wordpress-and-buddypress\" href=\"http://wptavern.com/netropolitan-facebook-for-rich-people-is-powered-by-wordpress-and-buddypress\">launched in late 2014</a>. The site used WordPress and BuddyPress to provide a social network for those who had nothing better to do with $9K. After paying a $9K entrance fee, it cost $3K a year to continue membership. Netropolitan was featured on <a href=\"http://www.cnn.com/2014/09/16/tech/social-media/netropolitan-social-media/\" target=\"_blank\">CNN</a> and other major news outlets across the globe.</p>\n<p>When <a title=\"http://www.vice.com/read/this-guy-is-creating-a-facebook-for-rich-people-917\" href=\"http://www.vice.com/read/this-guy-is-creating-a-facebook-for-rich-people-917\">Vice asked the site&#8217;s creator </a>James Touchi-Peters, why he created the site, he responded, &#8220;This whole thing started because when I was traveling in my work, I wanted to get in on a social event where basically I could meet people like myself.&#8221; There must not be a lot of people like him because the service recently closed. Touch-Peters left the site online with the following message:</p>\n<blockquote><p>It is with a sad heart that I report that the Netropolitan Club has been closed. In the end, there was not sufficient interest in our service among the targeted demographic to operate it as a going concern. (That said, I am happy to report that all paid members received full refunds.)</p>\n<p>I personally would like to thank all those involved in this enterprise – employees, contractors, publicists, et.al. – as well as the paying members who took a chance on an unprecedented business model. I also would like to thank both the public and the worldwide media for their relatively intense interest, whether positive or negative. (It’s not often that Jimmy Fallon tells jokes about your business on &#8216;The Tonight Show&#8217;.)</p>\n<p>Thanks again, one and all. I’ll see you at the concert hall</p></blockquote>\n<h2>There&#8217;s Likely More Than 5</h2>\n<p>There are likely several more products, ideas, and businesses outside of what we covered on the Tavern, that launched in 2014, but shut down before 2015 arrived. Keep an eye on the Tavern as there are several things that launched that are doing well and in the next few weeks, we&#8217;ll update you on how they&#8217;re doing.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 10:09:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"WPTavern: The Geeky Tech Behind WordSesh 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=37001\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wptavern.com/the-geeky-tech-behind-wordsesh-3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2756:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/11/WordSesh3FeaturedImage.png\" rel=\"prettyphoto[37001]\"><img class=\"aligncenter size-full wp-image-32961\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/11/WordSesh3FeaturedImage.png?resize=650%2C266\" alt=\"WordSesh 3 Featured Image\" /></a></p>\n<p>WordSesh 3 attracted <a title=\"http://wptavern.com/wordsesh-3-attracts-3000-unique-viewers-from-89-countries\" href=\"http://wptavern.com/wordsesh-3-attracts-3000-unique-viewers-from-89-countries\">more than 3,000 unique viewers from 89 countries</a>. This equates to nearly three times the amount of people who attended <a title=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\" href=\"http://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\">WordCamp Europe 2014</a>. With so many people interacting with the <a title=\"http://wordsesh.org/\" href=\"http://wordsesh.org/\">WordSesh site</a> and 24 hours of live video sessions, it&#8217;s imperative that a webhost be able to deliver great performance. For the third annual event, <a title=\"http://scottbasgaard.com/\" href=\"http://scottbasgaard.com/\">Scott Basgaard</a> partnered with <a title=\"http://blog.siteground.com/hosting-wordsesh-2014/\" href=\"http://blog.siteground.com/hosting-wordsesh-2014/\">SiteGround</a>.</p>\n<p>In a <a title=\"http://blog.siteground.com/hosting-wordsesh-2014/\" href=\"http://blog.siteground.com/hosting-wordsesh-2014/\">post published on the company blog</a>, SiteGround employee Hristo Pandjarov explains how they were able to hand the traffic load and keep the site online. The post is filled with geeky terminology and provides a glimpse into what it takes to host a mission critical site. The company used Linux Containers, built redundant infrastructure from the start, utilized dynamic caching, and more.</p>\n<blockquote><p>Since we didn’t want to risk any downtime with WordSesh, we opted for a hosting technology that we love for its almost unlimited ability to scale on the fly without downtime – the Linux containers. Using containers gave us the peace of mind that no matter what happens we will be able to add more resources both vertically and horizontally to each part of the infrastructure we built for WordSesh. At any moment, we had people on duty ready to add more resources or face any other potential issues.</p></blockquote>\n<p>Although I don&#8217;t understand many of the technologies involved, the end result is that the WordSesh 3 site stayed online throughout the entire event. I didn&#8217;t encounter any errors or experience problems watching sessions live. If you experienced problems accessing the WordSesh site during the event, let us know in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 09:50:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: WordPress 4.2 Will Automatically Enable Pretty Permalinks for New Sites on Installation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36867\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"http://wptavern.com/wordpress-4-2-will-automatically-enable-pretty-permalinks-for-new-sites-on-installation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2506:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/links.jpg\" rel=\"prettyphoto[36867]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/01/links.jpg?resize=1024%2C508\" alt=\"photo credit: gordon2208 - cc\" class=\"size-full wp-image-36986\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/gordon2208/4987669000/\">gordon2208</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-nd/2.0/\">cc</a>\n<p><a href=\"http://codex.wordpress.org/Changelog/1.0\" target=\"_blank\">WordPress 1.0</a> introduced search engine friendly permalinks using mod_rewrite. Setting your site to use pretty permalinks is usually one of the first things that administrators do after installation.</p>\n<p>WordPress 4.2 will add a new function that will <a href=\"https://core.trac.wordpress.org/changeset/31089\" target=\"_blank\">automatically enable pretty permalinks</a>, if the server supports it, at the time of installation. This means that in most cases you&#8217;ll never be greeted with ugly permalinks again.</p>\n<p>The new function is the result of a <a href=\"https://core.trac.wordpress.org/ticket/6481\" target=\"_blank\">ticket</a> that was originally opened seven years ago. In the upcoming release, pretty permalinks will be enabled if WordPress can verify that they work. It will cycle through the various permalink formats, and if they all fail to work, WordPress will fall back to ugly permalinks.</p>\n<p>By default, WordPress will set the following permalink structure for a new site, if possible, using mod_rewrite or nginx rewriting: <code>/%year%/%monthnum%/%day%/%postname%/</code></p>\n<p>Under configurations without rewrites enabled, it will set <code>/index.php/%year%/%monthnum%/%day%/%postname%/</code> for <a href=\"http://codex.wordpress.org/Using_Permalinks#PATHINFO:_.22Almost_Pretty.22\" target=\"_blank\">PATHINFO</a> (&#8220;Almost Pretty&#8221;) permalinks.</p>\n<p><a href=\"https://profiles.wordpress.org/ericlewis\" target=\"_blank\">Eric Lewis</a>, a contributor on the ticket, <a href=\"https://wordpress.slack.com/archives/core/p1419636021003661\" target=\"_blank\">commented</a> on the upcoming change, &#8220;Delivering pretty permalinks by default seems in line with a bunch of core philosophies &#8211; great out-of-the-box, design for the majority, simplicity, clean, lean and mean.&#8221;</p>\n<p>If you frequently create new WordPress sites or development sites, the automatically enabled pretty permalinks in 4.2 should save you a step in the setup process.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 06:11:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:117:\"WPTavern: Plugin Authors: How to Avoid Download Prompts Associated with Screenshots on the WordPress Plugin Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=36949\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"http://wptavern.com/plugin-authors-how-to-avoid-download-prompts-associated-with-screenshots-on-the-wordpress-plugin-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2599:\"<p>If you&#8217;ve ever <a title=\"https://wordpress.org/plugins/woocommerce/screenshots/\" href=\"https://wordpress.org/plugins/woocommerce/screenshots/\">clicked on a screenshot</a> in the WordPress plugin directory and received a download prompt, you&#8217;re not the only one. In fact, it&#8217;s a widespread issue that affects a number of plugins. <a title=\"http://wptavern.com/dear-wordpress-plugin-developer-please-add-screenshots\" href=\"http://wptavern.com/dear-wordpress-plugin-developer-please-add-screenshots\">Screenshots are important</a> as they help with troubleshooting, previewing features, and give users a sense of what to expect when it&#8217;s activated. But if you can&#8217;t see important details, they&#8217;re a moot point.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/PluginScreenshotDownloadPrompt.png\" rel=\"prettyphoto[36949]\"><img class=\"size-full wp-image-36950\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/01/PluginScreenshotDownloadPrompt.png?resize=609%2C406\" alt=\"Plugin Screenshot Download Prompt\" /></a>Plugin Screenshot Download Prompt\n<p>Mika Epstein, who reviews plugins before they&#8217;re added to the directory, <a title=\"https://make.wordpress.org/plugins/2014/03/20/plugin-screenshots-downloading/\" href=\"https://make.wordpress.org/plugins/2014/03/20/plugin-screenshots-downloading/\">wrote about the issue</a> in early 2014. The prompt appears for images that use the incorrect <a title=\"http://en.wikipedia.org/wiki/Internet_media_type\" href=\"http://en.wikipedia.org/wiki/Internet_media_type\">MIME Type</a>. Otto explains how to set the correct MIME Type using TortiseSVN on Windows or where to look if you use a different SVN client.</p>\n<blockquote><p>On Windows, using TortoiseSVN, you can right click the screenshot file, and select the TortoiseSVN-&gt;Properties menu. There you will find the svn:mime-type property, probably incorrectly set to “application/octet-stream”. Change that to the proper mime type of “image/png” or “image/jpg” accordingly. Afterwards, commit the change.</p>\n<p>If you prefer command line SVN:<br />\n<code>svn propset svn:mime-type image/png screenshot-1.png<br />\nsvn commit<br />\n</code><br />\nOr similar. If somebody uses a different SVN client, look for “properties” and then the svn:mime-type property.</p></blockquote>\n<p>Once the changes are made, upload them to the plugin directory. They&#8217;ll take effect once the directory is synchronized. It&#8217;s a simple change that vastly improves the effectiveness and user experience of viewing screenshots.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 01:19:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: Easy Security Guide\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44577\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/01/easy-security-guide/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:422:\"<p>There&#8217;s a simple, unattributed site called <a href=\"http://www.decentsecurity.com/\">Decent Security which has very nice common-sense but effective advice on security</a>. I believe it&#8217;s from the same person as behind <a href=\"https://twitter.com/swiftonsecurity\">the Infosec Taylor Swift account</a>. It&#8217;s refreshing like <a href=\"https://www.schneier.com/\">reading Bruce Schnier&#8217;s blog</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Jan 2015 00:40:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WPTavern: WPWeekly Episode 176 – Farewell Kim\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=36934&preview_id=36934\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://wptavern.com/wpweekly-episode-176-farewell-kim\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1643:\"<p>This special episode of WordPress Weekly doesn&#8217;t have any news or plugin picks of the week. Instead, it&#8217;s dedicated to the <a href=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\" title=\"http://wptavern.com/kim-parsell-affectionately-known-as-wpmom-passes-away\">late Kim Parsell</a>.</p>\n<p>I describe the experience of January 2nd where Brian Layman and I drive to Kim Parsell&#8217;s house to check on her. After telling the story, I share a couple of funny memories I have of Kim, like the time I called her #wpgrandma. Near the end of the show, we discuss the outpouring of support from the WordPress community and <a href=\"http://wpmom.org/about-kim-parsell/\" title=\"http://wpmom.org/about-kim-parsell/\">a special memorial page</a> created by Suzette Franck.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, January 14th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #176:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 08 Jan 2015 22:43:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 21 Jan 2015 18:49:27 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:6:\"248181\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Wed, 21 Jan 2015 18:30:16 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(14338,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1421909367','no'),(14339,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1421866167','no'),(14355,'can_compress_scripts','0','yes'),(14541,'_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a','1422065461','yes'),(14542,'_site_transient_poptags_40cd750bba9870f18aada2478b24840a','a:40:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";s:4:\"4916\";}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"Post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";s:4:\"3078\";}s:6:\"plugin\";a:3:{s:4:\"name\";s:6:\"plugin\";s:4:\"slug\";s:6:\"plugin\";s:5:\"count\";s:4:\"3022\";}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";s:4:\"2529\";}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";s:4:\"2346\";}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";s:4:\"1892\";}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";s:4:\"1729\";}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";s:4:\"1680\";}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";s:4:\"1678\";}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";s:4:\"1676\";}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";s:4:\"1612\";}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";s:4:\"1609\";}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";s:4:\"1505\";}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"Facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";s:4:\"1322\";}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";s:4:\"1276\";}s:9:\"wordpress\";a:3:{s:4:\"name\";s:9:\"wordpress\";s:4:\"slug\";s:9:\"wordpress\";s:5:\"count\";s:4:\"1175\";}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";s:4:\"1171\";}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";s:4:\"1083\";}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";s:4:\"1079\";}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";s:3:\"918\";}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";s:3:\"905\";}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";s:3:\"874\";}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";s:3:\"843\";}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";s:3:\"837\";}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";s:3:\"794\";}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";s:3:\"758\";}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"AJAX\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";s:3:\"748\";}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";s:3:\"709\";}s:11:\"woocommerce\";a:3:{s:4:\"name\";s:11:\"woocommerce\";s:4:\"slug\";s:11:\"woocommerce\";s:5:\"count\";s:3:\"700\";}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";s:3:\"692\";}s:5:\"login\";a:3:{s:4:\"name\";s:5:\"login\";s:4:\"slug\";s:5:\"login\";s:5:\"count\";s:3:\"682\";}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";s:3:\"657\";}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";s:3:\"649\";}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";s:3:\"642\";}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";s:3:\"642\";}s:9:\"ecommerce\";a:3:{s:4:\"name\";s:9:\"ecommerce\";s:4:\"slug\";s:9:\"ecommerce\";s:5:\"count\";s:3:\"623\";}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";s:3:\"620\";}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";s:3:\"605\";}s:5:\"share\";a:3:{s:4:\"name\";s:5:\"Share\";s:4:\"slug\";s:5:\"share\";s:5:\"count\";s:3:\"600\";}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";s:3:\"593\";}}','yes'),(14544,'ngg_doing_upgrade','','yes'),(14545,'photocrati_auto_update_admin_update_list','','yes'),(14546,'photocrati_auto_update_admin_check_date','','yes'),(14547,'ngg_db_version','1.8.1','yes'),(14548,'pope_module_list','a:36:{i:0;s:28:\"photocrati-nextgen|2.0.66.37\";i:1;s:17:\"photocrati-fs|0.4\";i:2;s:21:\"photocrati-router|0.6\";i:3;s:19:\"photocrati-i18n|0.1\";i:4;s:25:\"photocrati-validation|0.1\";i:5;s:32:\"photocrati-wordpress_routing|0.5\";i:6;s:23:\"photocrati-security|0.2\";i:7;s:18:\"photocrati-lzw|0.1\";i:8;s:31:\"photocrati-nextgen_settings|0.8\";i:9;s:18:\"photocrati-mvc|0.5\";i:10;s:19:\"photocrati-ajax|0.7\";i:11;s:33:\"photocrati-dynamic_stylesheet|0.3\";i:12;s:34:\"photocrati-frame_communication|0.4\";i:13;s:25:\"photocrati-datamapper|0.6\";i:14;s:30:\"photocrati-nextgen-legacy|0.13\";i:15;s:27:\"photocrati-nextgen-data|0.8\";i:16;s:33:\"photocrati-dynamic_thumbnails|0.5\";i:17;s:28:\"photocrati-nextgen_admin|0.7\";i:18;s:38:\"photocrati-nextgen_addgallery_page|0.6\";i:19;s:33:\"photocrati-nextgen_pagination|0.3\";i:20;s:38:\"photocrati-nextgen_gallery_display|0.9\";i:21;s:30:\"photocrati-attach_to_post|0.10\";i:22;s:36:\"photocrati-nextgen_other_options|0.7\";i:23;s:34:\"photocrati-nextgen_pro_upgrade|0.3\";i:24;s:23:\"photocrati-mediarss|0.4\";i:25;s:20:\"photocrati-cache|0.2\";i:26;s:24:\"photocrati-lightbox|0.14\";i:27;s:34:\"photocrati-nextgen_basic_album|0.9\";i:28;s:38:\"photocrati-nextgen_basic_templates|0.4\";i:29;s:37:\"photocrati-nextgen_basic_gallery|0.11\";i:30;s:41:\"photocrati-nextgen_basic_imagebrowser|0.9\";i:31;s:38:\"photocrati-nextgen_basic_singlepic|0.9\";i:32;s:37:\"photocrati-nextgen_basic_tagcloud|0.9\";i:33;s:21:\"photocrati-widget|0.5\";i:34;s:33:\"photocrati-third_party_compat|0.3\";i:35;s:29:\"photocrati-nextgen_xmlrpc|0.4\";}','yes'),(14549,'ngg_options','a:86:{s:22:\"router_param_separator\";s:2:\"--\";s:19:\"router_param_prefix\";s:0:\"\";s:17:\"router_param_slug\";s:9:\"nggallery\";s:11:\"gallerypath\";s:19:\"wp-content/gallery/\";s:11:\"wpmuCSSfile\";s:13:\"nggallery.css\";s:9:\"wpmuStyle\";b:0;s:9:\"wpmuRoles\";b:0;s:16:\"wpmuImportFolder\";b:0;s:13:\"wpmuZipUpload\";b:0;s:14:\"wpmuQuotaCheck\";b:0;s:17:\"datamapper_driver\";s:22:\"custom_post_datamapper\";s:21:\"gallerystorage_driver\";s:25:\"ngglegacy_gallery_storage\";s:20:\"maximum_entity_count\";i:500;s:9:\"deleteImg\";b:1;s:9:\"swfUpload\";b:1;s:13:\"usePermalinks\";b:0;s:13:\"permalinkSlug\";s:9:\"nggallery\";s:14:\"graphicLibrary\";s:2:\"gd\";s:14:\"imageMagickDir\";s:15:\"/usr/local/bin/\";s:11:\"useMediaRSS\";b:0;s:18:\"galleries_in_feeds\";b:0;s:10:\"usePicLens\";b:0;s:12:\"activateTags\";i:0;s:10:\"appendType\";s:4:\"tags\";s:9:\"maxImages\";i:7;s:14:\"relatedHeading\";s:24:\"<h3>Related Images:</h3>\";s:10:\"thumbwidth\";i:120;s:11:\"thumbheight\";i:90;s:8:\"thumbfix\";b:1;s:12:\"thumbquality\";i:100;s:8:\"imgWidth\";i:800;s:9:\"imgHeight\";i:600;s:10:\"imgQuality\";i:100;s:9:\"imgBackup\";b:1;s:13:\"imgAutoResize\";b:0;s:9:\"galImages\";s:2:\"20\";s:17:\"galPagedGalleries\";i:0;s:10:\"galColumns\";i:0;s:12:\"galShowSlide\";b:1;s:12:\"galTextSlide\";s:16:\"[Show slideshow]\";s:14:\"galTextGallery\";s:17:\"[Show thumbnails]\";s:12:\"galShowOrder\";s:7:\"gallery\";s:7:\"galSort\";s:9:\"sortorder\";s:10:\"galSortDir\";s:3:\"ASC\";s:10:\"galNoPages\";b:1;s:13:\"galImgBrowser\";i:0;s:12:\"galHiddenImg\";i:0;s:10:\"galAjaxNav\";i:0;s:11:\"thumbEffect\";s:8:\"fancybox\";s:9:\"thumbCode\";s:41:\"class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"\";s:18:\"thumbEffectContext\";s:14:\"nextgen_images\";s:5:\"wmPos\";s:8:\"botRight\";s:6:\"wmXpos\";i:5;s:6:\"wmYpos\";i:5;s:6:\"wmType\";i:0;s:6:\"wmPath\";s:0:\"\";s:6:\"wmFont\";s:9:\"arial.ttf\";s:6:\"wmSize\";i:10;s:6:\"wmText\";s:12:\"Aaron Krauss\";s:7:\"wmColor\";s:6:\"000000\";s:8:\"wmOpaque\";s:3:\"100\";s:8:\"enableIR\";i:0;s:7:\"slideFx\";s:4:\"fade\";s:5:\"irURL\";s:0:\"\";s:12:\"irXHTMLvalid\";i:0;s:7:\"irAudio\";s:0:\"\";s:7:\"irWidth\";i:600;s:8:\"irHeight\";i:400;s:9:\"irShuffle\";b:1;s:17:\"irLinkfromdisplay\";b:1;s:16:\"irShownavigation\";i:0;s:11:\"irShowicons\";i:0;s:11:\"irWatermark\";i:0;s:13:\"irOverstretch\";s:4:\"True\";s:12:\"irRotatetime\";i:10;s:12:\"irTransition\";s:6:\"random\";s:10:\"irKenburns\";i:0;s:11:\"irBackcolor\";s:6:\"000000\";s:12:\"irFrontcolor\";s:6:\"FFFFFF\";s:12:\"irLightcolor\";s:6:\"CC0000\";s:13:\"irScreencolor\";s:6:\"000000\";s:11:\"activateCSS\";i:1;s:7:\"CSSfile\";s:13:\"nggallery.css\";s:23:\"dynamic_stylesheet_slug\";s:12:\"nextgen-dcss\";s:22:\"dynamic_thumbnail_slug\";s:13:\"nextgen-image\";s:11:\"installDate\";i:1422054697;}','yes'),(15416,'_site_transient_timeout_browser_e4e8b2c988fb4f22329556a13dfdbd96','1424192664','yes'),(15417,'_site_transient_browser_e4e8b2c988fb4f22329556a13dfdbd96','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"40.0.2214.94\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(15886,'_site_transient_timeout_browser_e9c55dec9c824a4f40cec07dc0363e5d','1424893164','yes'),(15887,'_site_transient_browser_e9c55dec9c824a4f40cec07dc0363e5d','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"40.0.2214.111\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(17014,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:4:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.2.1\";s:7:\"version\";s:5:\"4.2.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":12:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.2.1\";s:7:\"version\";s:5:\"4.2.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";s:13:\"support_email\";s:26:\"updatehelp41@wordpress.org\";s:9:\"new_files\";s:1:\"1\";}i:2;O:8:\"stdClass\":12:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.4.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.4.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.1.4-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.1.4-new-bundled.zip\";s:7:\"partial\";s:69:\"https://downloads.wordpress.org/release/wordpress-4.1.4-partial-1.zip\";s:8:\"rollback\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.1.4-rollback-1.zip\";}s:7:\"current\";s:5:\"4.1.4\";s:7:\"version\";s:5:\"4.1.4\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:5:\"4.1.1\";s:13:\"support_email\";s:26:\"updatehelp41@wordpress.org\";s:9:\"new_files\";s:0:\"\";}i:3;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:0:\"\";s:7:\"version\";s:0:\"\";s:11:\"php_version\";s:3:\"4.3\";s:13:\"mysql_version\";s:5:\"4.1.2\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1430217416;s:15:\"version_checked\";s:5:\"4.1.1\";s:12:\"translations\";a:0:{}}','yes'),(17280,'_site_transient_timeout_browser_494faabc6069826e1f8cce537ed8ad87','1425846722','yes'),(17281,'_site_transient_browser_494faabc6069826e1f8cce537ed8ad87','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"40.0.2214.115\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(18331,'_site_transient_timeout_browser_40e4085baaa9278cae06c3593fabdf4e','1426973980','yes'),(18332,'_site_transient_browser_40e4085baaa9278cae06c3593fabdf4e','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"41.0.2272.89\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(18870,'_site_transient_timeout_browser_b6cf843430be704d19438f6af29c89da','1427391221','yes'),(18871,'_site_transient_browser_b6cf843430be704d19438f6af29c89da','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"41.0.2272.89\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(19065,'_site_transient_timeout_browser_ea70fa46e8a1f69b1d236262da5ac70c','1427597202','yes'),(19066,'_site_transient_browser_ea70fa46e8a1f69b1d236262da5ac70c','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"41.0.2272.101\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(19376,'_site_transient_timeout_browser_1e7b9b97f8a6aa50ba09f7b0e6e5a2fd','1427926513','yes'),(19377,'_site_transient_browser_1e7b9b97f8a6aa50ba09f7b0e6e5a2fd','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"41.0.2272.104\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(20201,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1430217418;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:9:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:2:\"15\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"3.1.1\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.3.1.1.zip\";}s:26:\"custom-field-suite/cfs.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"26058\";s:4:\"slug\";s:18:\"custom-field-suite\";s:6:\"plugin\";s:26:\"custom-field-suite/cfs.php\";s:11:\"new_version\";s:5:\"2.4.2\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/custom-field-suite/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/custom-field-suite.zip\";}s:32:\"disqus-comment-system/disqus.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4500\";s:4:\"slug\";s:21:\"disqus-comment-system\";s:6:\"plugin\";s:32:\"disqus-comment-system/disqus.php\";s:11:\"new_version\";s:4:\"2.84\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/disqus-comment-system/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/disqus-comment-system.zip\";}s:45:\"enable-media-replace/enable-media-replace.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"8351\";s:4:\"slug\";s:20:\"enable-media-replace\";s:6:\"plugin\";s:45:\"enable-media-replace/enable-media-replace.php\";s:11:\"new_version\";s:5:\"3.0.3\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/enable-media-replace/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/enable-media-replace.zip\";}s:9:\"hello.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"3564\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";}s:37:\"post-types-order/post-types-order.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"17292\";s:4:\"slug\";s:16:\"post-types-order\";s:6:\"plugin\";s:37:\"post-types-order/post-types-order.php\";s:11:\"new_version\";s:5:\"1.7.7\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/post-types-order/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/post-types-order.zip\";}s:39:\"search-everything/search-everything.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"269\";s:4:\"slug\";s:17:\"search-everything\";s:6:\"plugin\";s:39:\"search-everything/search-everything.php\";s:11:\"new_version\";s:5:\"8.1.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/search-everything/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/search-everything.8.1.3.zip\";}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"933\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:6:\"3.1.11\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.zip\";}s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4884\";s:4:\"slug\";s:24:\"velvet-blues-update-urls\";s:6:\"plugin\";s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";s:11:\"new_version\";s:5:\"3.2.3\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/velvet-blues-update-urls/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/velvet-blues-update-urls.3.2.3.zip\";}}}','yes'),(20211,'secure_auth_key','Nh@k%f531HMZYtRHV^vt*<xigNBSZZp>$C6z9e%c_1QlIal7I#-rZEpgbDR,q552','yes'),(20212,'secure_auth_salt','pw+nr_xG[l>,}La(u)?l?Vt97%,+:B]Y#H9K=&<:11I_z]pn+k]50XI:7UsP+/T|','yes'),(20213,'_site_transient_timeout_available_translations','1427923856','yes'),(20214,'_site_transient_available_translations','a:52:{s:2:\"ar\";a:8:{s:8:\"language\";s:2:\"ar\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-04-01 13:21:43\";s:12:\"english_name\";s:6:\"Arabic\";s:11:\"native_name\";s:14:\"العربية\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/ar.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:2;s:3:\"ara\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:2:\"az\";a:8:{s:8:\"language\";s:2:\"az\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:15:41\";s:12:\"english_name\";s:11:\"Azerbaijani\";s:11:\"native_name\";s:16:\"Azərbaycan dili\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/az.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:2;s:3:\"aze\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Davam\";}}s:5:\"bg_BG\";a:8:{s:8:\"language\";s:5:\"bg_BG\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:19:26\";s:12:\"english_name\";s:9:\"Bulgarian\";s:11:\"native_name\";s:18:\"Български\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/bg_BG.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bg\";i:2;s:3:\"bul\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:22:\"Продължение\";}}s:5:\"bs_BA\";a:8:{s:8:\"language\";s:5:\"bs_BA\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:22:49\";s:12:\"english_name\";s:7:\"Bosnian\";s:11:\"native_name\";s:8:\"Bosanski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/bs_BA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bs\";i:2;s:3:\"bos\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:2:\"ca\";a:8:{s:8:\"language\";s:2:\"ca\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:24:48\";s:12:\"english_name\";s:7:\"Catalan\";s:11:\"native_name\";s:7:\"Català\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/ca.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ca\";i:2;s:3:\"cat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"cy\";a:8:{s:8:\"language\";s:2:\"cy\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:30:22\";s:12:\"english_name\";s:5:\"Welsh\";s:11:\"native_name\";s:7:\"Cymraeg\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/cy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cy\";i:2;s:3:\"cym\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Parhau\";}}s:5:\"da_DK\";a:8:{s:8:\"language\";s:5:\"da_DK\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:32:23\";s:12:\"english_name\";s:6:\"Danish\";s:11:\"native_name\";s:5:\"Dansk\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/da_DK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"da\";i:2;s:3:\"dan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Forts&#230;t\";}}s:5:\"de_CH\";a:8:{s:8:\"language\";s:5:\"de_CH\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:38:25\";s:12:\"english_name\";s:20:\"German (Switzerland)\";s:11:\"native_name\";s:17:\"Deutsch (Schweiz)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/de_CH.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:5:\"de_DE\";a:8:{s:8:\"language\";s:5:\"de_DE\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:34:24\";s:12:\"english_name\";s:6:\"German\";s:11:\"native_name\";s:7:\"Deutsch\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/de_DE.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:2:\"el\";a:8:{s:8:\"language\";s:2:\"el\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:40:46\";s:12:\"english_name\";s:5:\"Greek\";s:11:\"native_name\";s:16:\"Ελληνικά\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/el.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"el\";i:2;s:3:\"ell\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Συνέχεια\";}}s:5:\"en_AU\";a:8:{s:8:\"language\";s:5:\"en_AU\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:42:35\";s:12:\"english_name\";s:19:\"English (Australia)\";s:11:\"native_name\";s:19:\"English (Australia)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/en_AU.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_GB\";a:8:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:46:15\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_CA\";a:8:{s:8:\"language\";s:5:\"en_CA\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:44:26\";s:12:\"english_name\";s:16:\"English (Canada)\";s:11:\"native_name\";s:16:\"English (Canada)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/en_CA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"eo\";a:8:{s:8:\"language\";s:2:\"eo\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:48:12\";s:12:\"english_name\";s:9:\"Esperanto\";s:11:\"native_name\";s:9:\"Esperanto\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/eo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eo\";i:2;s:3:\"epo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Daŭrigi\";}}s:5:\"es_PE\";a:8:{s:8:\"language\";s:5:\"es_PE\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:56:31\";s:12:\"english_name\";s:14:\"Spanish (Peru)\";s:11:\"native_name\";s:17:\"Español de Perú\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/es_PE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_MX\";a:8:{s:8:\"language\";s:5:\"es_MX\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:54:32\";s:12:\"english_name\";s:16:\"Spanish (Mexico)\";s:11:\"native_name\";s:19:\"Español de México\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/es_MX.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_ES\";a:8:{s:8:\"language\";s:5:\"es_ES\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 14:50:12\";s:12:\"english_name\";s:15:\"Spanish (Spain)\";s:11:\"native_name\";s:8:\"Español\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/es_ES.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"es\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CL\";a:8:{s:8:\"language\";s:5:\"es_CL\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 19:47:01\";s:12:\"english_name\";s:15:\"Spanish (Chile)\";s:11:\"native_name\";s:17:\"Español de Chile\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.0/es_CL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"eu\";a:8:{s:8:\"language\";s:2:\"eu\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-27 08:55:29\";s:12:\"english_name\";s:6:\"Basque\";s:11:\"native_name\";s:7:\"Euskara\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/eu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eu\";i:2;s:3:\"eus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Jarraitu\";}}s:5:\"fa_IR\";a:8:{s:8:\"language\";s:5:\"fa_IR\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:03:17\";s:12:\"english_name\";s:7:\"Persian\";s:11:\"native_name\";s:10:\"فارسی\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/fa_IR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:2:\"fi\";a:8:{s:8:\"language\";s:2:\"fi\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-18 08:12:21\";s:12:\"english_name\";s:7:\"Finnish\";s:11:\"native_name\";s:5:\"Suomi\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/fi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fi\";i:2;s:3:\"fin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Jatka\";}}s:5:\"fr_FR\";a:8:{s:8:\"language\";s:5:\"fr_FR\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:08:29\";s:12:\"english_name\";s:15:\"French (France)\";s:11:\"native_name\";s:9:\"Français\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/fr_FR.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"fr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:2:\"gd\";a:8:{s:8:\"language\";s:2:\"gd\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 17:37:43\";s:12:\"english_name\";s:15:\"Scottish Gaelic\";s:11:\"native_name\";s:9:\"Gàidhlig\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/4.0/gd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"gd\";i:2;s:3:\"gla\";i:3;s:3:\"gla\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"Lean air adhart\";}}s:5:\"gl_ES\";a:8:{s:8:\"language\";s:5:\"gl_ES\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:14:57\";s:12:\"english_name\";s:8:\"Galician\";s:11:\"native_name\";s:6:\"Galego\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/gl_ES.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gl\";i:2;s:3:\"glg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:3:\"haz\";a:8:{s:8:\"language\";s:3:\"haz\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:20:27\";s:12:\"english_name\";s:8:\"Hazaragi\";s:11:\"native_name\";s:15:\"هزاره گی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.1.1/haz.zip\";s:3:\"iso\";a:2:{i:1;s:3:\"haz\";i:2;s:3:\"haz\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:5:\"he_IL\";a:8:{s:8:\"language\";s:5:\"he_IL\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:22:29\";s:12:\"english_name\";s:6:\"Hebrew\";s:11:\"native_name\";s:16:\"עִבְרִית\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/he_IL.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"he\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"להמשיך\";}}s:2:\"hr\";a:8:{s:8:\"language\";s:2:\"hr\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:25:25\";s:12:\"english_name\";s:8:\"Croatian\";s:11:\"native_name\";s:8:\"Hrvatski\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/hr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hr\";i:2;s:3:\"hrv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:5:\"hu_HU\";a:8:{s:8:\"language\";s:5:\"hu_HU\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:27:28\";s:12:\"english_name\";s:9:\"Hungarian\";s:11:\"native_name\";s:6:\"Magyar\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/hu_HU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hu\";i:2;s:3:\"hun\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Tovább\";}}s:5:\"id_ID\";a:8:{s:8:\"language\";s:5:\"id_ID\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:29:34\";s:12:\"english_name\";s:10:\"Indonesian\";s:11:\"native_name\";s:16:\"Bahasa Indonesia\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/id_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"id\";i:2;s:3:\"ind\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Lanjutkan\";}}s:5:\"is_IS\";a:8:{s:8:\"language\";s:5:\"is_IS\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-15 22:23:37\";s:12:\"english_name\";s:9:\"Icelandic\";s:11:\"native_name\";s:9:\"Íslenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/is_IS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"is\";i:2;s:3:\"isl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Áfram\";}}s:5:\"it_IT\";a:8:{s:8:\"language\";s:5:\"it_IT\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:33:39\";s:12:\"english_name\";s:7:\"Italian\";s:11:\"native_name\";s:8:\"Italiano\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/it_IT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"it\";i:2;s:3:\"ita\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"ja\";a:8:{s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:35:42\";s:12:\"english_name\";s:8:\"Japanese\";s:11:\"native_name\";s:9:\"日本語\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/ja.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ja\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"続ける\";}}s:5:\"ko_KR\";a:8:{s:8:\"language\";s:5:\"ko_KR\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:43:18\";s:12:\"english_name\";s:6:\"Korean\";s:11:\"native_name\";s:9:\"한국어\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/ko_KR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ko\";i:2;s:3:\"kor\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"계속\";}}s:5:\"lt_LT\";a:8:{s:8:\"language\";s:5:\"lt_LT\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:47:56\";s:12:\"english_name\";s:10:\"Lithuanian\";s:11:\"native_name\";s:15:\"Lietuvių kalba\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/lt_LT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lt\";i:2;s:3:\"lit\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Tęsti\";}}s:5:\"my_MM\";a:8:{s:8:\"language\";s:5:\"my_MM\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:57:42\";s:12:\"english_name\";s:7:\"Burmese\";s:11:\"native_name\";s:15:\"ဗမာစာ\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/my_MM.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"my\";i:2;s:3:\"mya\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:54:\"ဆက်လက်လုပ်ေဆာင်ပါ။\";}}s:5:\"nb_NO\";a:8:{s:8:\"language\";s:5:\"nb_NO\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 15:59:41\";s:12:\"english_name\";s:19:\"Norwegian (Bokmål)\";s:11:\"native_name\";s:13:\"Norsk bokmål\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/nb_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nb\";i:2;s:3:\"nob\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsett\";}}s:5:\"nl_NL\";a:8:{s:8:\"language\";s:5:\"nl_NL\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:02:30\";s:12:\"english_name\";s:5:\"Dutch\";s:11:\"native_name\";s:10:\"Nederlands\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/nl_NL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"pl_PL\";a:8:{s:8:\"language\";s:5:\"pl_PL\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:07:08\";s:12:\"english_name\";s:6:\"Polish\";s:11:\"native_name\";s:6:\"Polski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/pl_PL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pl\";i:2;s:3:\"pol\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Kontynuuj\";}}s:2:\"ps\";a:8:{s:8:\"language\";s:2:\"ps\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-29 22:19:48\";s:12:\"english_name\";s:6:\"Pashto\";s:11:\"native_name\";s:8:\"پښتو\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/ps.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ps\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"دوام\";}}s:5:\"pt_PT\";a:8:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:11:07\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_BR\";a:8:{s:8:\"language\";s:5:\"pt_BR\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:14:41\";s:12:\"english_name\";s:19:\"Portuguese (Brazil)\";s:11:\"native_name\";s:20:\"Português do Brasil\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/pt_BR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pt\";i:2;s:3:\"por\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"ro_RO\";a:8:{s:8:\"language\";s:5:\"ro_RO\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-27 14:48:56\";s:12:\"english_name\";s:8:\"Romanian\";s:11:\"native_name\";s:8:\"Română\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/ro_RO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ro\";i:2;s:3:\"ron\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuă\";}}s:5:\"ru_RU\";a:8:{s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:19:48\";s:12:\"english_name\";s:7:\"Russian\";s:11:\"native_name\";s:14:\"Русский\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/ru_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ru\";i:2;s:3:\"rus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:5:\"sk_SK\";a:8:{s:8:\"language\";s:5:\"sk_SK\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:23:44\";s:12:\"english_name\";s:6:\"Slovak\";s:11:\"native_name\";s:11:\"Slovenčina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/sk_SK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sk\";i:2;s:3:\"slk\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Pokračovať\";}}s:5:\"sl_SI\";a:8:{s:8:\"language\";s:5:\"sl_SI\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:25:46\";s:12:\"english_name\";s:9:\"Slovenian\";s:11:\"native_name\";s:13:\"Slovenščina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/sl_SI.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sl\";i:2;s:3:\"slv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Nadaljujte\";}}s:5:\"sr_RS\";a:8:{s:8:\"language\";s:5:\"sr_RS\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:30:35\";s:12:\"english_name\";s:7:\"Serbian\";s:11:\"native_name\";s:23:\"Српски језик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/sr_RS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sr\";i:2;s:3:\"srp\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:14:\"Настави\";}}s:5:\"sv_SE\";a:8:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:33:33\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Fortsätt\";}}s:2:\"th\";a:8:{s:8:\"language\";s:2:\"th\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-27 00:00:51\";s:12:\"english_name\";s:4:\"Thai\";s:11:\"native_name\";s:9:\"ไทย\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.1.1/th.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"th\";i:2;s:3:\"tha\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"ต่อไป\";}}s:5:\"tr_TR\";a:8:{s:8:\"language\";s:5:\"tr_TR\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:43:10\";s:12:\"english_name\";s:7:\"Turkish\";s:11:\"native_name\";s:8:\"Türkçe\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/tr_TR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tr\";i:2;s:3:\"tur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Devam\";}}s:5:\"ug_CN\";a:8:{s:8:\"language\";s:5:\"ug_CN\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:45:38\";s:12:\"english_name\";s:6:\"Uighur\";s:11:\"native_name\";s:9:\"Uyƣurqə\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/ug_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ug\";i:2;s:3:\"uig\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:26:\"داۋاملاشتۇرۇش\";}}s:5:\"zh_TW\";a:8:{s:8:\"language\";s:5:\"zh_TW\";s:7:\"version\";s:5:\"4.1.1\";s:7:\"updated\";s:19:\"2015-03-26 16:55:15\";s:12:\"english_name\";s:16:\"Chinese (Taiwan)\";s:11:\"native_name\";s:12:\"繁體中文\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.1.1/zh_TW.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}s:5:\"zh_CN\";a:8:{s:8:\"language\";s:5:\"zh_CN\";s:7:\"version\";s:3:\"4.1\";s:7:\"updated\";s:19:\"2014-12-26 02:21:02\";s:12:\"english_name\";s:15:\"Chinese (China)\";s:11:\"native_name\";s:12:\"简体中文\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.1/zh_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"继续\";}}}','yes'),(20216,'rewrite_rules','a:105:{s:10:\"project/?$\";s:27:\"index.php?post_type=project\";s:40:\"project/feed/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:35:\"project/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:27:\"project/page/([0-9]{1,})/?$\";s:45:\"index.php?post_type=project&paged=$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:31:\"cfs/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:41:\"cfs/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:61:\"cfs/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)/trackback/?$\";s:45:\"index.php?post_type=cfs&name=$matches[1]&tb=1\";s:32:\"cfs/([^/]+)/page/?([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&paged=$matches[2]\";s:39:\"cfs/([^/]+)/comment-page-([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)(/[0-9]+)?/?$\";s:57:\"index.php?post_type=cfs&name=$matches[1]&page=$matches[2]\";s:20:\"cfs/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:30:\"cfs/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:50:\"cfs/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:35:\"project/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:45:\"project/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:65:\"project/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)/trackback/?$\";s:34:\"index.php?project=$matches[1]&tb=1\";s:48:\"project/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:43:\"project/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:36:\"project/([^/]+)/page/?([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&paged=$matches[2]\";s:43:\"project/([^/]+)/comment-page-([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)(/[0-9]+)?/?$\";s:46:\"index.php?project=$matches[1]&page=$matches[2]\";s:24:\"project/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:34:\"project/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:54:\"project/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:38:\"index.php?&page_id=4&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:47:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:57:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:77:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:69:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&tb=1\";s:64:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:52:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&paged=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&cpage=$matches[4]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)(/[0-9]+)?/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&page=$matches[4]\";s:36:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:46:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:66:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:51:\"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:38:\"([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)(/[0-9]+)?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(20768,'_site_transient_timeout_browser_a283ade1c8175664f3a96dd496da56fb','1429223385','yes'),(20769,'_site_transient_browser_a283ade1c8175664f3a96dd496da56fb','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"41.0.2272.118\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(21286,'_site_transient_timeout_browser_b3d75dbd25c5be445b4b3fd40c86a00d','1429895021','yes'),(21287,'_site_transient_browser_b3d75dbd25c5be445b4b3fd40c86a00d','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"41.0.2272.118\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(22397,'_site_transient_timeout_browser_7a6cce0b740e13f09d82507ff53d91cc','1430501521','yes'),(22398,'_site_transient_browser_7a6cce0b740e13f09d82507ff53d91cc','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"42.0.2311.90\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(22794,'_site_transient_timeout_theme_roots','1430219217','yes'),(22795,'_site_transient_theme_roots','a:5:{s:12:\"the_societea\";s:7:\"/themes\";s:13:\"twentyfifteen\";s:7:\"/themes\";s:14:\"twentyfourteen\";s:7:\"/themes\";s:14:\"twentythirteen\";s:7:\"/themes\";s:12:\"twentytwelve\";s:7:\"/themes\";}','yes'),(22796,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1430217419;s:7:\"checked\";a:5:{s:12:\"the_societea\";s:0:\"\";s:13:\"twentyfifteen\";s:3:\"1.0\";s:14:\"twentyfourteen\";s:3:\"1.3\";s:14:\"twentythirteen\";s:3:\"1.4\";s:12:\"twentytwelve\";s:3:\"1.6\";}s:8:\"response\";a:4:{s:13:\"twentyfifteen\";a:4:{s:5:\"theme\";s:13:\"twentyfifteen\";s:11:\"new_version\";s:3:\"1.1\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentyfifteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentyfifteen.1.1.zip\";}s:14:\"twentyfourteen\";a:4:{s:5:\"theme\";s:14:\"twentyfourteen\";s:11:\"new_version\";s:3:\"1.4\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentyfourteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentyfourteen.1.4.zip\";}s:14:\"twentythirteen\";a:4:{s:5:\"theme\";s:14:\"twentythirteen\";s:11:\"new_version\";s:3:\"1.5\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentythirteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentythirteen.1.5.zip\";}s:12:\"twentytwelve\";a:4:{s:5:\"theme\";s:12:\"twentytwelve\";s:11:\"new_version\";s:3:\"1.7\";s:3:\"url\";s:42:\"https://wordpress.org/themes/twentytwelve/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/twentytwelve.1.7.zip\";}}s:12:\"translations\";a:0:{}}','yes'),(22843,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1430283702','no'),(22844,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 18:34:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://wordpress.org/?v=4.3-alpha-32315\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.2.1 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 18:34:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3706\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:366:\"WordPress 4.2.1 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. A few hours ago, the WordPress team was made aware of a cross-site scripting vulnerability, which could enable commenters to compromise a site. The vulnerability was discovered by Jouko Pynnönen. [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gary Pendergast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1010:\"<p>WordPress 4.2.1 is now available. This is a <strong>critical security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>A few hours ago, the WordPress team was made aware of a cross-site scripting vulnerability, which could enable commenters to compromise a site. The vulnerability was discovered by <a href=\"http://klikki.fi/\">Jouko Pynnönen</a>.</p>\n<p>WordPress 4.2.1 has begun to roll out as an automatic background update, for sites that <a href=\"https://wordpress.org/plugins/background-update-tester/\">support</a> those.</p>\n<p>For more information, see the <a href=\"https://codex.wordpress.org/Version_4.2.1\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.2?rev=32311&amp;stop_rev=32300\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.2.1</a> or venture over to <strong>Dashboard → Updates</strong> and simply click &#8220;Update Now&#8221;.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"WordPress 4.2 “Powell”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/news/2015/04/powell/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/04/powell/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Apr 2015 18:35:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3642\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:343:\"Version 4.2 of WordPress, named &#8220;Powell&#8221; in honor of jazz pianist Bud Powell, is available for download or update in your WordPress dashboard. New features in 4.2 help you communicate and share, globally. An easier way to share content Clip it, edit it, publish it. Get familiar with the new and improved Press This. From [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:29252:\"<p>Version 4.2 of WordPress, named &#8220;Powell&#8221; in honor of jazz pianist <a href=\"https://en.wikipedia.org/wiki/Bud_Powell\">Bud Powell</a>, is available for <a href=\"https://wordpress.org/download/\">download</a> or update in your WordPress dashboard. New features in 4.2 help you communicate and share, globally.</p>\n<div id=\"v-e9kH4FzP-1\" class=\"video-player\"><embed id=\"v-e9kH4FzP-1-video\" src=\"https://v0.wordpress.com/player.swf?v=1.04&amp;guid=e9kH4FzP&amp;isDynamicSeeking=true\" type=\"application/x-shockwave-flash\" width=\"692\" height=\"388\" title=\"Introducing WordPress 4.2 &quot;Powell&quot;\" wmode=\"direct\" seamlesstabbing=\"true\" allowfullscreen=\"true\" allowscriptaccess=\"always\" overstretch=\"true\"></embed></div>\n<hr />\n<h2 style=\"text-align: center\">An easier way to share content</h2>\n<p><img class=\"alignnone size-full wp-image-3677\" src=\"https://wordpress.org/news/files/2015/04/4.2-press-this-2.jpg\" alt=\"Press This\" width=\"1000\" height=\"832\" />Clip it, edit it, publish it. Get familiar with the new and improved Press This. From the Tools menu, add Press This to your browser bookmark bar or your mobile device home screen. Once installed you can share your content with lightning speed. Sharing your favorite videos, images, and content has never been this fast or this easy.</p>\n<hr />\n<h2 style=\"text-align: center\">Extended character support</h2>\n<p><img class=\"alignnone size-full wp-image-3676\" src=\"https://wordpress.org/news/files/2015/04/4.2-characters.png\" alt=\"Character support for emoji, special characters\" width=\"1000\" height=\"832\" />Writing in WordPress, whatever your language, just got better. WordPress 4.2 supports a host of new characters out-of-the-box, including native Chinese, Japanese, and Korean characters, musical and mathematical symbols, and hieroglyphs.</p>\n<p>Don’t use any of those characters? You can still have fun — emoji are now available in WordPress! Get creative and decorate your content with <img src=\"https://s.w.org/images/core/emoji/72x72/1f499.png\" alt=\"','no'),(22845,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1430283702','no'),(22846,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1430240502','no'),(22847,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1430283703','no'),(22848,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Who is Steve Jobs?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://ma.tt/2015/04/who-is-steve-jobs/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3898:\"<p><a href=\"http://www.amazon.com/dp/0385347405\"><img class=\"alignright\" src=\"http://i1.wp.com/ecx.images-amazon.com/images/I/51jePfRiSOL.jpg?resize=300%2C459\" alt=\"\" /></a>I checked out the new book <a href=\"http://www.amazon.com/dp/B00N6PCWY8/\"><em>Becoming Steve Jobs</em> by Brent Schlender and Rick Tetzeli</a> because there had been some interesting excerpts published to the web, and apparently those closest to Steve didn&#8217;t like <a href=\"http://www.amazon.com/dp/B004W2UBYW/\">the Walter Isaacson book</a>, with Jony Ive saying &#8220;My regard [for Isaacson’s book] couldn’t be any lower.&#8221;</p>\n<p>Along with about a million other people I bought and read the authorized biography, and didn&#8217;t think it portrayed Jobs in a way that made me think any less of him, but there must have been some things in there that someone who knew him closely felt were so off that as a group they decided to coordinate and speak with a new author to set the record straight, as Eddy Cue said of the new <em>Becoming</em> book, &#8220;Well done and first to get it right.&#8221; I will never know who Steve Jobs really was, but it is interesting to triangulate and learn from different takes, especially Isaacson&#8217;s biography that Jobs himself endorsed but might not have read and this new one promoted by his closest friends, colleagues, and family.</p>\n<p>As an independent third party who doesn&#8217;t know any of the characters involved personally, I must say that I felt like I got a much worse impression of Steve Jobs from <em>Becoming</em> than from the authorized biography. It was great to hear the direct voices and anecdotes of so many people close to him that haven&#8217;t spoken much publicly like his wife Laurene &#8212; he was a very private man and his friends respect that. But the parts where Schlender/Tetzeli try to balance things out by acknowledging some of the rougher parts of Steve&#8217;s public life, especially the recent ones around options backdating, anti-poaching agreements, book pricing, (all overblown in my opinion) or even when trying to show his negotiating acumen with suppliers, Disney, or music labels, they make Jobs look like an insensitive jerk, which seems to be the opposite of what everyone involved was intending.</p>\n<p>The direct quotes in the book could not be kinder, and it&#8217;s clear from both books that Jobs was incredibly warm, caring, and thoughtful to those closest to him, but <em>Becoming</em> tries so hard to emphasize that it makes the contrast of some of his public and private actions seem especially callous. The personal anecdotes from the author are the best part: one of the most interesting parts of the book is actually when Jobs calls Schlender to invite him for a walk, as one of the people he reached out to and wanted to speak to before he passed, and Schlender &#8212; not knowing the context &#8212; actually chastises him for cutting off his journalistic access and other trivia, and then blows off the meeting, to his lifelong regret.</p>\n<p>It&#8217;s tragic, and it&#8217;s very <em>human</em>, and that&#8217;s what makes for great stories. No one suggests that Steve Jobs was a saint, nor did he need to be. His legacy is already well-protected both in the incredible results while he was alive, and even more so in what the team he built has accomplished since his passing, both periods which actually amaze and inspire me. <em>Becoming Steve Jobs</em> tries harder and accomplishes less to honor the man. It is worth reading if, like me, you gobble up every book around the technology leaders of the past 40 years and want a different take on a familiar tune, but if you were only to read one book about Jobs, and get the most positive impression of the man and his genius, I&#8217;d recommend <a href=\"http://www.amazon.com/dp/B004W2UBYW/\">Isaacson&#8217;s <em>Steve Jobs</em></a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Apr 2015 16:44:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"WPTavern: Poll: How Often Do You Read a WordPress Plugin’s Changelog Before Updating?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42906\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://wptavern.com/poll-how-often-do-you-read-a-wordpress-plugins-changelog-before-updating\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:840:\"<p>As <a href=\"http://wptavern.com/do-wordpress-org-themes-need-a-changelog\">the debate</a> on whether or not <a href=\"https://wordpress.org/themes/\">WordPress.org hosted themes</a> should have changelogs continues, one line of thought is that regular users don&#8217;t read them. As a long time user of WordPress, I always read a plugin&#8217;s changelog before updating.</p>\n<p>A <strong>good</strong> changelog tells me what bugs have been fixed, new features that have been added, and security issues that have been addressed. It also gives me a timeline of changes I can refer to for troubleshooting. Let us know how often you read a WordPress plugin&#8217;s changelog before updating by participating in the following poll.</p>\nNote: There is a poll embedded within this post, please visit the site to participate in this post\'s poll.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 20:16:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: WordPress 4.2.1 Released to Patch Comment Exploit Vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42873\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/wordpress-4-2-1-released-to-patch-comment-exploit-vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2486:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/security-release.jpg\" rel=\"prettyphoto[42873]\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/04/security-release.jpg?resize=1024%2C505\" alt=\"photo credit: Will Montague - cc\" class=\"size-full wp-image-20655\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/willmontague/3813295674/\">Will Montague</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc/2.0/\">cc</a>\n<p>This morning we reported on an <a href=\"http://wptavern.com/zero-day-xss-vulnerability-in-wordpress-4-2-currently-being-patched\" target=\"_blank\">XSS vulnerability in WordPress 4.2</a>, 4.1.2, 4.1.1, and 3.9.3, which allows an attacker to compromise a site via its comments. The security team quickly patched the vulnerability and <a href=\"https://wordpress.org/news/2015/04/wordpress-4-2-1/\" target=\"_blank\">released 4.2.1</a> within hours of being notified.</p>\n<p>WordPress&#8217; official statement on the security issue:</p>\n<blockquote><p>The WordPress team was made aware of a XSS issue a few hours ago that we will release an update for shortly. It is a core issue, but the number of sites vulnerable is much smaller than you may think because the vast majority of WordPress-powered sites run Akismet, which blocks this attack. When the fix is tested and ready in the coming hours WordPress users will receive an auto-update and should be safe and protected even if they don’t use Akismet.</p></blockquote>\n<p>That auto-update is now being rolled out to sites where updates have not been disabled. If you are unsure of whether or not your site can perform automatic background updates, Gary Pendergast linked to the <a href=\"https://wordpress.org/plugins/background-update-tester/\" target=\"_blank\">Background Update Tester</a> plugin in the security release. This is a core-supported plugin that will check your site for background update compatibility and explain any issues.</p>\n<p>Since <a href=\"https://wordpress.org/plugins/akismet/\" target=\"_blank\">Akismet</a> is active on more than a million websites, the number of affected users that were not protected is much smaller than it might have been otherwise.</p>\n<p>WordPress 4.2.1 is a critical security release for a widely publicized vulnerability that you do not want to ignore. Users are advised to update immediately. The background update may already have hit your site. If not, you can update manually by navigating to Dashboard → Updates.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 19:46:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Cell Phones &amp; Cancer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44995\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/04/cell-phones-cancer/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:833:\"<blockquote><p>The ability of radiation to cause cancer is dependent on whether or not the radiation is able to alter chemical bonds. This occurs when electrons involved in bonding in a molecule absorb radiation with enough energy to allow them to escape – this is called <a href=\"http://en.wikipedia.org/wiki/Ionization\" target=\"_blank\">ionization</a>. The thing is, whether or not radiation is ionizing is based solely on its energy, not on its number, and as we saw above, its energy is determined entirely from its frequency.</p></blockquote>\n<p>Cool article on WordPress.com about <a href=\"http://mitchkirby.com/2015/04/22/why-cell-phones-cant-cause-cancer-but-bananas-can/\">Why Cell Phones Can’t Cause Cancer, But Bananas Can</a>, which I read while eating (and finishing) a banana. It covers dielectric heating too.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 16:29:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WPTavern: Do WordPress.org Themes Need a Changelog?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42838\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wptavern.com/do-wordpress-org-themes-need-a-changelog\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3692:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/changelog.jpg\" rel=\"prettyphoto[42838]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/changelog.jpg?resize=1024%2C525\" alt=\"photo credit: time - (license)\" class=\"size-full wp-image-42884\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/68419214@N04/6897782843\">time</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">(license)</a>\n<p>Over the weekend, Theme Review Team member Jose Castaneda posted a <a href=\"https://make.wordpress.org/themes/2015/04/26/changelog-proposal/\" target=\"_blank\">proposal to add change logs</a> to themes hosted on WordPress.org. The discussion has been on the table for years, but renewed interest in change logs is surfacing for the upcoming 4.3 and 4.4 release cycles.</p>\n<p>Adding changelogs to themes requires action on two related tickets: a <a href=\"https://meta.trac.wordpress.org/ticket/45\" target=\"_blank\">meta ticket</a> to add support for change logs on WordPress.org and a <a href=\"https://core.trac.wordpress.org/ticket/22810\" target=\"_blank\">core ticket</a> to expose the changelog file to users in the WordPress admin.</p>\n<p>Castaneda&#8217;s proposal requests that the team select a standard format for theme authors to follow in either the readme.txt file or a new changelog.txt file. From there the team would follow the core development release cycle to complete whatever steps necessary to get changelog support added to WordPress.org themes.</p>\n<p>Theme Review Team members are divided on whether or not change logs are beneficial to users, as they already have the ability to detect changes using a .diff file when authors submit updates. Others find change logs to be a more readable addition.</p>\n<p>&#8220;Personally, I find change logs to be incredibly helpful, even when using a .diff,&#8221; Theme Review Team admin Chip Bennett said. &#8220;The changelog is the human-readable summary of changes, that can really help grok the diff changes.&#8221;</p>\n<p>Justin Tadlock isn&#8217;t convinced that WordPress users would benefit from themes including change logs:</p>\n<blockquote><p>Honestly, I don’t see change logs as all that important from a user standpoint. While I don’t have any official stats, I’d wager that the vast majority of users don’t read change logs and, of those who do happen upon one, don’t understand most of what’s actually in the file.</p>\n<p>Change logs are, by and large, a developer tool. It’s a nice-to-have feature. I don’t care one way or another. I never read them. I doubt we&#8217;ll get great change logs from the majority of theme authors. We can’t even manage to get some semantic versioning down or basic inline PHP docs. We’ll probably see a lot of Git commit logs copied/pasted or my personal favorite, “Changed a bunch of stuff. Too busy building awesome s*** to care about tracking changes”.</p></blockquote>\n<p>Active discussion on the topic is taking place on the <a href=\"https://make.wordpress.org/themes/2015/04/26/changelog-proposal/\" target=\"_blank\">make.wordpress.org/themes</a> blog. If the team concludes that change logs are beneficial, the main question to answer is whether or not they should simply take up residence in the readme.txt file, like plugins do, or have their own separate file.</p>\n<p>Ultimately, the issue boils down to whether or not WordPress users read and appreciate changelogs, or if they are more beneficial for developers. As the Theme Review Team is primarily made up of developers, it would be valuable if average users who desire theme change logs could chime in on situations where the file might be helpful.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 15:36:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: Zero Day XSS Vulnerability in WordPress 4.2 Currently Being Patched\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42843\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/zero-day-xss-vulnerability-in-wordpress-4-2-currently-being-patched\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2686:\"<p>Klikki Oy is <a href=\"http://klikki.fi/adv/wordpress2.html\" target=\"_blank\">reporting</a> a new comment XSS exploit vulnerability in WordPress 4.2, 4.1.2, 4.1.1, and 3.9.3, which allows an unauthenticated attacker to inject JavaScript into comments.</p>\n<blockquote><p>If triggered by a logged-in administrator, under default settings the attacker can leverage the vulnerability to execute arbitrary code on the server via the plugin and theme editors.</p>\n<p>Alternatively the attacker could change the administrator’s password, create new administrator accounts, or do whatever else the currently logged-in administrator can do on the target system.</p></blockquote>\n<p>This particular vulnerability is similar to one <a href=\"https://cedricvb.be/post/wordpress-stored-xss-vulnerability-4-1-2/\" target=\"_blank\">reported by Cedric Van Bockhaven in 2014</a>, which was patched in the most recent <a href=\"http://wptavern.com/wordpress-4-1-2-is-a-critical-security-release-immediate-update-recommended\" target=\"_blank\">WordPress 4.1.2 security release</a>. That particular vulnerability was related to four-byte characters being inserted into comments, causing premature truncation by MySQL.</p>\n<p>In this instance, an attacker posts an excessively long comment in order to trigger the MySQL TEXT type size limit, which truncates the comment as it is inserted into the database.</p>\n<blockquote><p>The truncation results in malformed HTML generated on the page. The attacker can supply any attributes in the allowed HTML tags, in the same way as with the two recently published stored XSS vulnerabilities affecting the WordPress core.</p>\n<p>In these two cases, the injected JavaScript apparently can&#8217;t be triggered in the administrative Dashboard so these exploits seem to require getting around comment moderation e.g. by posting one harmless comment first.</p></blockquote>\n<p>A patch from the WordPress security team should be forthcoming. At this time the team could not provide an ETA, but in the meantime there are a few things users can do to mitigate the risk.</p>\n<p>&#8220;Your best option is to install Akismet (which has already been configured to block this attack), or disable comments,&#8221; core contributor Gary Pendergast said in response to <a href=\"https://wordpress.slack.com/archives/core/p1430134328007948\" target=\"_blank\">inquiries on the WordPress #core Slack channel</a>. &#8220;JavaScript is blocked by wp_kses(). Akismet blocks this specific attack, which gets around wp_kses()’s protection.&#8221;</p>\n<p>WordPress users can also temporarily disable comments in the meantime until the patch has been issued by the WordPress security team.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 12:10:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Matt: Entanglement\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44985\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"http://ma.tt/2015/04/entanglement/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:243:\"<p>If you&#8217;re curious about quantum entanglement (and a type of synesthesia) at all, check out <a href=\"http://www.npr.org/programs/invisibilia/382451600/entanglement\">this week&#8217;s Invisibilia show on NPR called Entanglement</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 26 Apr 2015 15:19:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Matt: 100 Books\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44983\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"http://ma.tt/2015/04/100-books/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:413:\"<p>You can&#8217;t go wrong with Amazon&#8217;s <a href=\"http://www.amazon.com/b?ie=UTF8&node=8192263011\">100 Books To Read In A Lifetime</a>. I&#8217;ve only read a bit over a dozen of them, and some of those in school when I probably didn&#8217;t appreciate them. I&#8217;ve never had a time in my life when I thought, &#8220;You know, I&#8217;m reading too much.&#8221; It&#8217;s a weekend &#8212; read!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 25 Apr 2015 23:38:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: Atlantic Earth Day Pictures\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=44980\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2015/04/atlantic-earth-day-pictures/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:185:\"<p>The Atlantic <a href=\"http://www.theatlantic.com/photo/2015/04/earth-day-45/390864/\">has a set of 45 pictures that are both beautiful and shocking</a> to commemorate Earth Day.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 25 Apr 2015 04:41:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: Automattic’s Dave Martin Publishes His 5 Step Remote Hiring Process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42810\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://wptavern.com/automattics-dave-martin-publishes-his-5-step-remote-hiring-process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3389:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/05/automattic-offices.jpg\" rel=\"prettyphoto[42810]\"><img class=\"wp-image-22370 size-full\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/05/automattic-offices.jpg?resize=1025%2C478\" alt=\"photo credit: Peter Slutsky\" /></a>photo credit: <a href=\"http://peterslutsky.com/2013/05/14/pics-touring-automattics-new-office/\">Peter Slutsky</a>\n<p>If you&#8217;re thinking about applying to work for <a href=\"http://automattic.com/\">Automattic</a>, you might want to <a href=\"http://davemart.in/2015/04/22/inside-automattics-remote-hiring-process/\">read this article first</a>. Dave Martin, Creative Director at Automattic, published an in-depth look behind the scenes of the remote hiring process for the design and growth portion of the company. He explains the five step process in detail which gives future applicants a good idea of what to expect.</p>\n<p>It&#8217;s a fascinating read and I learned that every part of the process has a purpose. For instance, every trial project consists of work that would normally be completed by existing exmployees. Every question asked by Martin in the interview process has a purpose, whether it&#8217;s to glean information or get a feel for how the applicant communicates.</p>\n<p>The one area of the hiring process I&#8217;ve routinely seen scrutinized by those who don&#8217;t make the cut is the lack of specific feedback on why they&#8217;re not a good fit for a position. Dave Clements, who <a href=\"https://www.davidclements.me/2014/04/01/experience-trial-automattic/\">almost made it to the final stage</a> of the hiring process, criticized the lack of detail from Automattic on why he wasn&#8217;t a good fit.</p>\n<blockquote><p>My only criticism of my whole process from start to finish is that I wish they would have gone into more detail into on why I was not a good fit for them. They had been so verbose and open up to that point about any question that I asked of them, but when I asked why they had come to the decision to not move forward, I was given a fairly generic response as they &#8216;couldn’t go into too much detail&#8217;.</p></blockquote>\n<p>Martin tries to do his best to highlight why someone is not a good fit, but the process is not easy and the number one goal is to hire the best people.</p>\n<blockquote><p>If things don’t end up working out, I’ll do my best to highlight why. At this point the applicant has invested quite a bit of time. I try to be as specific as possible as to why they are not going to proceed to a final interview.</p>\n<p>Telling people no is hard, but mistakenly bringing on the wrong people can be much worse. While you want to always be kind, and helpful to all applicants, your primary responsibility when hiring is to ensure that only the best people get hired. That is priority number one.</p></blockquote>\n<p>Whether you&#8217;re a distributed company or someone who&#8217;s interested in working for one, there is plenty to learn from the post. I also encourage you to read this <a href=\"https://hbr.org/2014/04/the-ceo-of-automattic-on-holding-auditions-to-build-a-strong-team\">Harvard Business Review article</a> from 2014 featuring Matt Mullenweg, on holding auditions to build a strong team. If you&#8217;ve gone through the Automattic hiring process, let us know what it&#8217;s like in the comments.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 23:12:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"WPTavern: Story.am Relaunches, Now 100% Free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42704\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wptavern.com/story-am-relaunches-now-100-free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4448:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/story-am.jpg\" rel=\"prettyphoto[42704]\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/story-am.jpg?resize=774%2C337\" alt=\"story-am\" class=\"aligncenter size-full wp-image-42815\" /></a></p>\n<p>Nick Haskins launched <a href=\"https://story.am/\" target=\"_blank\">Story.am</a> earlier this year as a hosted storytelling platform that offers all the features of <a href=\"http://wptavern.com/?s=Aesop+Story+Engine\" target=\"_blank\">Aesop Story Engine</a>. Initially, the platform was only available to paying customers, but this week Haskins announced that Story.am is <a href=\"https://story.am/story-am-re-launch/\" target=\"_blank\">now available to everyone for free</a>.</p>\n<p>The platform had not received much feedback in the several months it has been open to customers, so Haskins decided to remove all barriers to account creation.</p>\n<p>&#8220;We really want feedback on <a href=\"https://lasso.is/\" target=\"_blank\">Lasso</a>, our visual web editor on Story.AM,&#8221; he said. &#8220;By making it free, we hope to garner a lot of feedback, even if that feedback isn&#8217;t good. Often times, that type of feedback is the best.&#8221;</p>\n<p>In our <a href=\"http://wptavern.com/introducing-lasso-a-new-frontend-editor-for-wordpress\" target=\"_blank\">recent review of Lasso</a>, Jeff Chandler found that the product wasn&#8217;t quite polished enough for prime time but that it has potential. Haskins is hoping to build a broader network of Lasso users who will offer the feedback he needs to improve the editing experience.</p>\n<p>Immediately following his announcement that Story.am accounts are now available for free, Haskins was averaging one signup a minute.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p>Newsletter out, story.am now averaging one signup a minute for the last few minutes. &#10;&#10;The power of free.</p>\n<p>&mdash; Nick Haskins (@nphaskins) <a href=\"https://twitter.com/nphaskins/status/591359988309708800\">April 23, 2015</a></p></blockquote>\n<p></p>\n<p>&#8220;Since the announcement yesterday evening there have been about 130 signups, so we&#8217;ve calmed down to about 5-7 signups an hour,&#8221; he said.</p>\n<p>Story.am is a multisite installation that was built to be elastic and ready to scale. In the future, Haskins will open up a Pro level that will offer additional features such as the ability to sell story subscriptions with Stripe and use your own domain.</p>\n<p>&#8220;The domain mapping and ability to sell story subscriptions are all in place and ready to go,&#8221; he said. &#8220;But rather than just releasing a Pro level straight away, I&#8217;m interested to see if what I THINK users want, is actually inline with what they REALLY want.&#8221;</p>\n<p>Haskins is taking notes of trends while monitoring the signups to get a better picture of how people plan to use Story.am.</p>\n<p>&#8220;I&#8217;m seeing a lot of what I would describe as &#8216;people who aren&#8217;t necessarily writers but want to tell stories,\'&#8221; he said. &#8220;The domains that are coming across include terms like comic, pastor, fish, school, etc. It&#8217;s quite interesting to see. We are tracking everything in great detail, so as time goes on we&#8217;ll begin to have some solid metrics.&#8221;</p>\n<p>Many Story.am users are using the platform in the education space, a trend which has continued since opening up the site to free accounts. The platform is also open to bloggers, but Haskins is not aiming to compete with WordPress.com.</p>\n<p>&#8220;I&#8217;d like to see folks use stories in their own unique ways, with their own flair, and I think this will be tough to come by on a &#8216;generalized&#8217; network. i.e, one that basically treats everyone as the same,&#8221; he said. &#8220;One thing I don&#8217;t want to purposefully do is compete with WordPress.com. I&#8217;d much rather work with them to bring our ideas and tools to their platform, in some way, shape, or form.&#8221;</p>\n<p>Story.am has no current ETA for launching Pro level features, but Haskins said that he will be gauging the demand and gathering feedback before moving on monetizing the platform. If you&#8217;re curious about how Aesop Story Engine components work with WordPress and want to try the new Lasso frontend editor, it&#8217;s now as easy as signing up for a free account on <a href=\"https://story.am/\">Story.am</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 22:18:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WPTavern: New Plugin Adds Quick Access to the “Press This” Posting Form\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42776\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/new-plugin-adds-quick-access-to-the-press-this-posting-form\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5312:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/press-this-new.png\" rel=\"prettyphoto[42776]\"><img class=\"aligncenter size-full wp-image-42649\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/press-this-new.png?resize=986%2C531\" alt=\"press-this-new\" /></a></p>\n<p>One of the highlights of the recent <a href=\"http://wptavern.com/wordpress-4-2-powell-is-now-available-for-download\" target=\"_blank\">WordPress 4.2</a> release is the <a href=\"http://wptavern.com/pressthis-revamped-with-a-new-user-interface-and-minimalist-design\" target=\"_blank\">completely revamped Press This interface</a>. The feature&#8217;s intended purpose is to make it easy to share text, images, and videos from around the web in a quick post, but many users are newly captivated by Press This&#8217; new minimalist design for post creation.</p>\n<p>Once you try Press This for publishing, you may become some so partial to the posting form that you don&#8217;t want to go back to the standard post editor. It includes only the most essential formatting buttons and a button to add media, with all other extraneous selections for post formats, categories, and tags collapsed.</p>\n<p><a href=\"https://wordpress.org/plugins/press-this-new-post/\" target=\"_blank\">Press This New Post</a> is a new plugin, created by <a href=\"https://profiles.wordpress.org/drewapicture/\" target=\"_blank\">Drew Jaynes</a>, that gives you quick access to the Press This posting form from the &#8216;+ New&#8217; drop-down in the toolbar.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/04/press-this-new-post.jpg\" rel=\"prettyphoto[42776]\"><img class=\"aligncenter size-full wp-image-42787\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/04/press-this-new-post.jpg?resize=888%2C405\" alt=\"press-this-new-post\" /></a></p>\n<p>The link takes you to the Press This editor where you can scan a URL or simply start writing a new post.</p>\n<p>In the plugin&#8217;s description, Jaynes refers to the easy access as &#8220;Quick Draft on steroids,&#8221; but it may also become a real substitute for WordPress&#8217; dearly-departed <a href=\"http://wptavern.com/wordpress-zen-mode-5-compelling-reasons-to-turn-on-distraction-free-writing\" target=\"_blank\">zen mode</a>. Many users are distracted by the sliding side menu and the fading of non-essential parts of the editor that was introduced in WordPress 4.1 when the <a href=\"http://wptavern.com/focus-project-and-session-ui-approved-for-merge-into-wordpress-4-1\" target=\"_blank\">Focus Project was merged into core</a>. These animations are guaranteed not to happen to you in Press This mode.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/pop-tarts.jpg\" rel=\"prettyphoto[42776]\"><img class=\"aligncenter size-full wp-image-42794\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/pop-tarts.jpg?resize=974%2C534\" alt=\"pop-tarts\" /></a></p>\n<p>Jaynes is a regular user of the Press This post editor, which was one of his motivations for creating the quick access plugin.</p>\n<p>&#8220;I&#8217;ve already drafted three blog posts using it instead of the standard editor,&#8221; he said. &#8220;Obviously in most cases I finish up in the standard editor, but I really like the posting interface.</p>\n<p>&#8220;I think if we get to the point where Press This supports other post types and/or even other sites in a multisite network, it could really save a lot of time.&#8221;</p>\n<p>The Press This team is actively working on continuing to iterate the feature along those lines and both <a href=\"https://twitter.com/michaelarestad\" target=\"_blank\">Michael Arestad</a> and <a href=\"https://twitter.com/stephdau\" target=\"_blank\">Stephane Daury</a> have stepped up as core component maintainers.</p>\n<p>&#8220;I know for a fact that they both have future plans for improving and iterating it,&#8221; Jaynes said. &#8220;It’s actually really cool to see a continuation of the passion beyond a feature plugin getting merged.&#8221;</p>\n<p>Michael Arestad recently posted his thoughts on <a href=\"http://blog.michaelarestad.com/2015/04/23/pressed-it/\" target=\"_blank\">the future of Press This</a> and listed a host of features that the team is looking at adding:</p>\n<ul>\n<li>Split button (gonna be awesome)</li>\n<li>Some rearranging of components</li>\n<li>Improved tags UI</li>\n<li>Featured image</li>\n<li>Browser extensions</li>\n<li>Site switching</li>\n<li>Image flow improvements are in the works, which should drastically improve the media experience in both editors</li>\n<li>Improved NUX flow</li>\n</ul>\n<p>With its committed maintainers, the Press This feature is well-positioned to evolve to support more diverse content types, which may attract even more users than the bookmarklet does in the long run. If you&#8217;re still thinking of Press This as just a simple bookmarklet for re-posting content, you may want to revisit it. The feature has the potential to influence future iterations of the standard post editor, which suddenly seems a little cluttered.</p>\n<p>If you enjoy using Press This mode for creating new posts, the <a href=\"https://wordpress.org/plugins/press-this-new-post/\" target=\"_blank\">Press This New Post</a> plugin might be a handy addition to your site. Download it for free on WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 20:06:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Insight into the Jamaican WordPress Community with Bianca Welds\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42752\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/insight-into-the-jamaican-wordpress-community-with-bianca-welds\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6221:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/bianca_edi1.jpg\" rel=\"prettyphoto[42752]\"><img class=\"alignright size-medium wp-image-42760\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/bianca_edi1.jpg?resize=300%2C226\" alt=\"bianca_edi1\" /></a>Last week, I met <a href=\"http://biancawelds.com/\">Bianca Welds</a> who lives in Jamaica. She&#8217;s used WordPress for more than 10 years and has knowledge of the developing tech scene in Jamaica. In this interview, we learn how she discovered WordPress, the Jamaican WordPress community, and if the country will ever host a WordCamp.</p>\n<p><strong>How long have you used WordPress?</strong></p>\n<p>I just celebrated my 10th anniversary. I started using WordPress in 2005 and my first post was on April 2nd, 2005.</p>\n<p><strong>What is your WordPress origin story?</strong></p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/WPProfileOriginStory.png\" rel=\"prettyphoto[42752]\"><img class=\"size-full wp-image-42763\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/WPProfileOriginStory.png?resize=736%2C227\" alt=\"As seen on the WordPress profile page\" /></a>As seen on the WordPress profile page\n<p>I was working at IBM at the time and finally decided I liked the idea of having my own <a href=\"http://biancawelds.com/\">personal website</a>. The more I thought about it, the more I realized I wanted to have a blog as well as a static site. I knew I could build an HTML site myself, so I researched this blogging thing, and I found <a href=\"https://www.blogger.com/home\">Blogspot</a>. Within a day of signing up, I became frustrated at not being able to customize it, so I looked for alternatives. I came across WordPress and fell in love, purchased a hosting account, installed it, and never looked back.</p>\n<p><strong>What is the tech scene like in Jamaica?</strong></p>\n<p>The tech scene is currently developing nicely. There has been a lot of slow foundation growth over the last decade, but in the last few years, we have seen some dramatic acceleration. The tech meetup, <a href=\"http://kingstonbeta.com/\">Kingston Beta</a>, grew to hosting a regional conference called <a href=\"http://connectimass.com/media-2/community-events/connect-events-networks/caribbean-beta/\">Caribbean Beta</a>.</p>\n<p>The Slash Roots Developer Community saw the formation of the <a href=\"http://slashroots.org/\">Slash Roots Foundation</a> which does a lot of work in the Open Data space. It expanded to organize the <a href=\"http://developingcaribbean.org/\">Developing the Caribbean</a> conference, and was instrumental in the formation of <a href=\"http://codeforthecaribbean.org/\">Code for the Caribbean</a>.</p>\n<p>Startup events have been growing with our first Startup Weekend taking place in 2013. The Digital Jam Mobile Application competition was held for three years along with several other initiatives. The first <a href=\"http://venturecapitaljamaica.com/conference/about\">Venture Capital Conference</a> was held in 2013 where the first formal angel investor group, <a href=\"http://www.firstangelsja.com/\">First Angels</a>, was created. <a href=\"http://www.start-upjamaica.com/en/p/list/57094\">StartUpJamaica</a> is our first accelerator and it launched last year with over 200 applications, where 36 teams participated in boot camps and training. This is a small sample of the things that are happening in our space.</p>\n<p><strong>Is there a vibrant WordPress community in Jamaica?</strong></p>\n<p>Vibrant on an individual level perhaps. There is no active WordPress community at present. There are a lot of WordPress sites being built and a lot of WordPress blogs being run, but they are more or less individual efforts with no real communication or collaboration to grow and develop a community.</p>\n<p>I have recently started putting out feelers to see if there is enough interest in starting a regular WordPress meetup. In the last week, I&#8217;ve had interest from about two dozen people.</p>\n<p><strong>To date, there has not been a WordCamp in Jamaica. Do you think there will ever be one and will you help organize it?</strong></p>\n<p>I hope there will be and I definitely want to be a part of it. The first goal though would be to get the meetups going and gather a core community, so that&#8217;s my focus now.</p>\n<p><strong>Have you ever attended a WordCamp? If not, which one will be your first?</strong></p>\n<p>Unfortunately, I have never attended any WordCamps. I am working on changing that in the near future by going to <a href=\"http://miami.wordcamp.org/2015/\">WordCamp Miami</a> which is the nearest one to Jamaica.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/WCMiamiFeaturedImage.png\" rel=\"prettyphoto[42752]\"><img class=\"wp-image-22707 size-full\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2014/05/WCMiamiFeaturedImage.png?resize=650%2C200\" alt=\"WordCamp Miami Featured Image\" /></a>WordCamp Miami Swag\n<p><strong>What do you like most about WordPress and what do you like the least?</strong></p>\n<p>My favorite thing about WordPress is its flexibility. While it may not be the perfect solution for every challenge, there are few things that cannot be done. My least favorite thing is how much there is to learn to truly take full advantage of its power.</p>\n<p><strong>If you wanted people to know something about Jamaica, what would it be?</strong></p>\n<p>The one thing I always try to share when I am <strong>the Jamaican</strong> in the crowd is that, Jamaica is so much more than beaches, weed and reggae. It definitely has those, but there are so many other aspects to our geography, our culture and our people who outsiders don&#8217;t yet fully grasp. But the world is learning.</p>\n<h2>Take the Jamaican WordPress Survey</h2>\n<p>Welds is trying to figure out the size and composition of the Jamaican WordPress community. Please help her out, especially if you&#8217;re a WordPress user living in Jamaica, by taking this <a href=\"http://lattitudestudios.com/wordpress-jamaica-survey/\">short survey</a>. Information will remain confidential and will help Welds develop a better picture of the size and skill level of her local community.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 17:02:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"WPTavern: WPWeekly Episode 189 – Drew Jaynes on What it’s Like to Lead a WordPress Development Cycle\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=42751&preview_id=42751\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"http://wptavern.com/wpweekly-episode-189-drew-jaynes-on-what-its-like-to-lead-a-wordpress-development-cycle\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3186:\"<p>On this episode of WordPress Weekly, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I were joined by <a href=\"http://werdswords.com/\">Drew Jaynes</a>, web engineer for <a href=\"http://10up.com/\">10up,</a> and <a href=\"http://wptavern.com/drew-jaynes-to-lead-wordpress-4-2\">release lead for WordPress 4.2</a>. Jaynes explains how a release lead is chosen, their responsibilities, and what their role is. Release leads are shepherds who work with multiple teams to keep development on track.</p>\n<p>Jaynes also explained how people can contribute to WordPress core through <a href=\"https://core.trac.wordpress.org/\">Trac</a>. We discussed new features in WordPress 4.2 and what the benefits are to <a href=\"http://wptavern.com/wordpress-core-team-announces-release-leads-for-wordpress-4-3-and-4-4\">selecting release leads ahead of time</a>. Last but not least, Jaynes helped us cover the week&#8217;s news.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"http://wptavern.com/xss-vulnerability-affects-more-than-a-dozen-popular-wordpress-plugins\">XSS Vulnerability Affects More Than a Dozen Popular WordPress Plugins</a><br />\n<a href=\"http://wptavern.com/xss-vulnerability-what-to-do-if-you-buy-or-sell-items-on-themeforest-and-codecanyon\">XSS Vulnerability: What to do if You Buy or Sell Items on Themeforest and CodeCanyon</a><br />\n<a href=\"http://wptavern.com/wordpress-4-1-2-is-a-critical-security-release-immediate-update-recommended\">WordPress 4.1.2 is a Critical Security Release, Immediate Update Recommended</a><br />\n<a href=\"http://wptavern.com/facebook-has-abandoned-its-official-wordpress-plugin\">Facebook Has Abandoned Its Official WordPress Plugin</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/cosmick-star-rating/\">Comstick Star Rating</a> conforms to the Google structured data algorithm. It allows you to capture customer reviews with a simple shortcode on any page. By inserting a single function into your theme&#8217;s header or footer, your rating will be displayed in Google search.</p>\n<p><a href=\"https://wordpress.org/plugins/employee-spotlight/\">Employee Spotlight</a> displays employees, team members, founders, or just a single person in a four column circle grid. It comes with two sidebar widgets that display featured and recent employees selected in the editor.</p>\n<p><a href=\"https://wordpress.org/plugins/web-push-notifications/\">Web Push Notifications</a> allows you to send push notifications to visitors who use Safari and Chrome.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, April 29th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #189:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 06:30:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WPTavern: Why Some Sites Automatically Updated to WordPress 4.1.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=42743\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wptavern.com/why-some-sites-automatically-updated-to-wordpress-4-1-3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1948:\"<p>Since <a href=\"http://wptavern.com/wordpress-4-2-powell-is-now-available-for-download\">WordPress 4.2 was released</a>, some users are <a href=\"https://twitter.com/clindsey/status/591436003853750272\">questioning</a> why their sites have automatically updated to WordPress 4.1.3. There&#8217;s no information about the release on the <a href=\"https://core.trac.wordpress.org/ticket/32051\">Make WordPress Core</a> site or the official <a href=\"https://wordpress.org/news/\">WordPress news blog</a>. However, <a href=\"http://codex.wordpress.org/Version_4.1.3\">this Codex article</a> explains what&#8217;s in 4.1.3 and the reason it was released.</p>\n<blockquote><p>Fix database writes for esoteric character sets, broken in the WordPress 4.1.2 security release. Neither UTF-8 nor latin1 were affected. For more information, see <a class=\"external text\" href=\"https://core.trac.wordpress.org/ticket/32051\">ticket #32051</a>.</p></blockquote>\n<p>The ticket contains a lengthy technical discussion of a critical bug and what was done to fix it. In addition to 4.1.3, the patch was merged into the following versions:</p>\n<ul>\n<li>3.7.7</li>\n<li>3.8.7</li>\n<li>3.9.5</li>\n<li>4.0.3</li>\n</ul>\n<p>Since these are point releases, sites running WordPress 3.7 and higher will automatically update unless the server doesn&#8217;t support it or they&#8217;re disabled. If you&#8217;re running an old version of WordPress, I highly encourage you to update to 4.2. Not only does it have <a href=\"http://wptavern.com/wordpress-4-2-powell-is-now-available-for-download\">some nifty new features</a>, but it also fixes <a href=\"https://core.trac.wordpress.org/query?status=accepted&status=assigned&status=closed&status=new&status=reopened&status=reviewing&type=defect+%28bug%29&version=%21&version=%21trunk&resolution=fixed&milestone=4.2&col=id&col=summary&col=milestone&col=status&col=type&col=owner&col=priority&order=priority\" target=\"_blank\">231 defects</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Apr 2015 04:25:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"Post Status: WordPress 4.2, “Powell”, released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=12432\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://poststatus.com/%e2%9d%a4%ef%b8%8f/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5937:\"<p></p>\n<h3>The consistency of WordPress</h3>\n<p>WordPress 4.2,&nbsp;<a href=\"http://wordpress.org/news/2015/04/powell/\">Powell</a>,&nbsp;marks the impressive sixth major version in a row on a four month average development cycle.</p>\n<ul>\n<li>WordPress 3.7: October 24th, 2013</li>\n<li>WordPress 3.8: December 12th, 2013</li>\n<li>WordPress 3.9: April 16th, 2014</li>\n<li>WordPress 4.0: September 4th, 2014</li>\n<li>WordPress 4.1: December 18th, 2014</li>\n<li>WordPress 4.2: April 23rd, 2015</li>\n</ul>\n<p>This streak of consistency in WordPress releases is not accidental. Groundwork was put in place organizationally, technically, and philosophically to help ensure consistent, iterative improvements for WordPress.</p>\n<p>The project has always been quite good at updates, if compared to competition. However, a few releases prior to 3.7 got sidetracked, distracted, or thrown off schedule if held to our own high standard.</p>\n<p>Concepts such as the introduction of <a href=\"https://make.wordpress.org/core/features-as-plugins/\">feature plugins</a> have helped put sanity and routine into the release schedule, even without repeat release leads these last six versions (and none will repeat at least through 4.4).</p>\n<h4>Features of WordPress 4.2</h4>\n<h3>Press This</h3>\n<p><img class=\"aligncenter size-large wp-image-12436\" src=\"https://poststatus.com/wp-content/uploads/2015/04/press-this-wp-752x517.png\" alt=\"press-this-wp\" width=\"752\" height=\"517\" /></p>\n<p>It’s quite possible even long term WordPress users have never heard of, much less used, Press This. However, the bookmarklet makes sharing and publishing others’ articles on your own blog quite simple.</p>\n<p>It was long overdue to either be cut from core or completely revamped. It was completely revamped under the “feature as plugin” model, led by Michael Arestad.</p>\n<p>I’ve been using the new Press This or a while now on my personal blog, and it’s really great. If your goal is to blog more regularly, and you like to curate or share what you’re reading/watching, you’ll love Press This. You can find the bookmarklet in the admin and primary Tools page.</p>\n<p>The editor is modern and honestly a great prototype for what could be a future full WordPress editor. The bookmarklet sits in my bookmarks, and it’s encouraged me to more often blog my thoughts on what I read — versus leave my thoughts with a single Tweet.</p>\n<p>I was at first on the fence as to whether Press This made sense to get a revamp. I’m now convinced it was a great decision, and the team that worked on most of the features was outstanding.</p>\n<p>There are more features coming to Press This. You can check some of them out <a href=\"http://blog.michaelarestad.com/2015/04/23/pressed-it/\">on Michael’s blog post</a> celebrating its inclusion in 4.2. If you’ve never pressed anything with Press This, definitely give it a shot.</p>\n<h3>Customizer Theme Switcher</h3>\n<p>Another feature plugin that made it into 4.2 is the Customizer Theme Switcher. Relatively self-explanatory, this feature brings the theme choosing experience to the customizer.</p>\n<p>The project was lead by Nick Halsey, and you can find the core proposal for the feature <a href=\"https://make.wordpress.org/core/2015/02/11/customizer-theme-switcher-feature-plugin-merge-proposal/\">on the Make WordPress blog</a>. Not many folks using WordPress as a full CMS will change themes that often, but for those that do, the move for selecting and testing themes to the customizer makes sense.</p>\n<h3>Shiny Updates</h3>\n<p><img class=\"aligncenter size-full wp-image-12438\" src=\"https://poststatus.com/wp-content/uploads/2015/04/shiny-updates.png\" alt=\"shiny-updates\" width=\"707\" height=\"391\" /></p>\n<p>Shiny Updates allows for inline updates directly in the plugins admin screen, without a redirect to the funky plugin update progression page you’re probably quite familiar with.</p>\n<p>Shiny Updates is part of a larger effort for making both updates and installs better. Due to some potential UX issues and in order to stick with the release schedule, shiny installs was postponed. However, in a future release, the install and activation process for plugins will be a simpler process as well.</p>\n<h3>Utf8mb4 support to enable special characters and emoji</h3>\n<p><img class=\"aligncenter size-large wp-image-12437\" src=\"https://poststatus.com/wp-content/uploads/2015/04/4.2-characters-752x626.png\" alt=\"4.2-characters\" width=\"752\" height=\"626\" /></p>\n<p>WordPress can now handle all sorts of special characters by default, including Chinese, but also various glyphs and other symbols. And yes, emoji.</p>\n<p>Perhaps the most discussed and also misunderstood feature of WordPress 4.2, Utf8mb4 makes WordPress more accessible in more languages, and that is awesome.</p>\n<p>Also, don’t kid yourself: everyone loves emoji. As WordPress is used more as a mobile app backend, this change will be especially welcome. Can you imagine an app that didn’t support emoji? Of course not. <img src=\"https://s.w.org/images/core/emoji/72x72/1f389.png\" alt=\"','no'),(22849,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1430283703','no'),(22850,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1430240503','no'),(22851,'_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109','1430283704','no'),(22852,'_transient_feed_b9388c83948825c1edaef0d856b7b109','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:117:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins/browse/popular/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Apr 2015 16:38:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:30:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/jetpack/#post-23862\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"23862@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Your WordPress, Streamlined.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Tim Moore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"WordPress SEO by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://wordpress.org/plugins/wordpress-seo/#post-8321\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 Jan 2009 20:34:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"8321@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:131:\"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using Yoast&#039;s WordPress SEO plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/contact-form-7/#post-2141\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:45:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2141@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/plugins/akismet/#post-15\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:11:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"15@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"Akismet checks your comments against the Akismet Web service to see if they look like spam or not.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Google Analytics by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/plugins/google-analytics-for-wordpress/#post-2316\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Sep 2007 12:15:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2316@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:124:\"Track your WordPress site easily with the latest tracking codes and lots added data for search result pages and error pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/all-in-one-seo-pack/#post-753\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 20:08:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"753@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"All in One SEO Pack is a WordPress SEO plugin to automatically optimize your WordPress blog for Search Engines such as Google.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Wordfence Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wordfence/#post-29832\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 03:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29832@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:137:\"Wordfence Security is a free enterprise class security and performance plugin that makes your site up to 50 times faster and more secure.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Wordfence\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WooCommerce - excelling eCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/woocommerce/#post-29860\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Sep 2011 08:13:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29860@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WooThemes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Broken Link Checker\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/broken-link-checker/#post-2441\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 08 Oct 2007 21:35:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2441@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:131:\"This plugin will check your posts, comments and other content for broken links and missing images, and notify you if any are found.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Janis Elsts\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"TinyMCE Advanced\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/tinymce-advanced/#post-2082\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Jun 2007 15:00:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2082@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Enables the advanced features of TinyMCE, the WordPress WYSIWYG editor.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Andrew Ozz\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"WPtouch Mobile Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://wordpress.org/plugins/wptouch/#post-5468\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 May 2008 04:58:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"5468@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"Make your WordPress website mobile-friendly with just a few clicks.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"BraveNewCode Inc.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"UpdraftPlus Backup and Restoration\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/updraftplus/#post-38058\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 21 May 2012 15:14:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"38058@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Backup and restoration made easy. Complete backups; manual or scheduled (backup to S3, Dropbox, Google Drive, Rackspace, FTP, SFTP, email + others).\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"David Anderson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wordpress-importer/#post-18101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 17:42:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"18101@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Page Builder by SiteOrigin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/siteorigin-panels/#post-51888\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Apr 2013 10:36:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"51888@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"Build responsive page layouts using the widgets you know and love using this simple drag and drop page builder.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Greg Priday\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Google Analytics Dashboard for WP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://wordpress.org/plugins/google-analytics-dashboard-for-wp/#post-50539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 10 Mar 2013 17:07:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"50539@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Displays Google Analytics reports and real-time statistics in your WordPress Dashboard. Inserts the latest tracking code in every page of your site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Alin Marcu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WP Multibyte Patch\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wp-multibyte-patch/#post-28395\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Jul 2011 12:22:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"28395@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Multibyte functionality enhancement for the WordPress Japanese package.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"plugin-master\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"P3 (Plugin Performance Profiler)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/p3-profiler/#post-32894\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 12 Dec 2011 23:11:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"32894@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"See which plugins are slowing down your site.  This plugin creates a performance report for your site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"GoDaddy.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"ManageWP Worker\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://wordpress.org/plugins/worker/#post-24528\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 18 Feb 2011 13:06:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"24528@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"ManageWP is the ultimate WordPress productivity tool, allowing you to efficiently manage your websites.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Vladimir Prelovac\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"The Events Calendar\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/plugins/the-events-calendar/#post-14790\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 16 Dec 2009 21:58:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"14790@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:128:\"The Events Calendar is a carefully crafted, extensible plugin that lets you easily share your events. Beautiful. Solid. Awesome.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Peter Chester\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Redirection\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/redirection/#post-2286\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Sep 2007 04:45:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2286@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:144:\"Redirection is a WordPress plugin to manage 301 redirections and keep track of 404 errors without requiring knowledge of Apache .htaccess files.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"John Godley\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Meta Slider\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/ml-slider/#post-49521\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Feb 2013 16:56:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"49521@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:145:\"Easy to use WordPress slider plugin. Create SEO optimised responsive slideshows with Nivo Slider, Flex Slider, Coin Slider and Responsive Slides.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Matcha Labs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Disable Comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/disable-comments/#post-26907\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 27 May 2011 04:42:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"26907@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:134:\"Allows administrators to globally disable comments on their site. Comments can be disabled according to post type. Multisite friendly.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"solarissmoke\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"bbPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/bbpress/#post-14709\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 13 Dec 2009 00:05:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"14709@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"bbPress is forum software, made the WordPress way.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"John James Jacoby\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Super Cache\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/wp-super-cache/#post-2572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Nov 2007 11:40:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2572@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"A very fast caching engine for WordPress that produces static html files.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Donncha O Caoimh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"NextGEN Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/nextgen-gallery/#post-1169\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Apr 2007 20:08:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"1169@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:121:\"The most popular WordPress gallery plugin and one of the most popular plugins of all time with over 12 million downloads.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Alex Rabe\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Google XML Sitemaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/google-sitemap-generator/#post-132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:31:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"132@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"This plugin will generate a special XML sitemap which will help search engines to better index your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Arne Brachhold\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"WP Smush\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wp-smushit/#post-7936\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Dec 2008 00:00:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"7936@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"Reduce image file sizes, improve performance and boost your SEO using the free WPMU DEV WordPress Smush API.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Alex Dunae\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Photo Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/photo-gallery/#post-63299\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Jan 2014 15:58:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"63299@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:143:\"Photo Gallery is an advanced plugin with a list of tools and options for adding and editing images for different views. It is fully responsive.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"webdorado\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"BuddyPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/buddypress/#post-10314\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Apr 2009 17:48:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"10314@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:144:\"BuddyPress helps you run any kind of social network on your WordPress, with member profiles, activity streams, user groups, messaging, and more.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Andy Peatling\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Advanced Custom Fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/advanced-custom-fields/#post-25254\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 17 Mar 2011 04:07:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"25254@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"Customise WordPress with powerful, professional and intuitive fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"elliotcondon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://wordpress.org/plugins/rss/view/popular\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:12:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Tue, 28 Apr 2015 17:01:44 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:7:\"expires\";s:29:\"Tue, 28 Apr 2015 17:13:51 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Tue, 28 Apr 2015 16:38:51 +0000\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(22853,'_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109','1430283704','no'),(22854,'_transient_feed_mod_b9388c83948825c1edaef0d856b7b109','1430240504','no'),(22855,'_transient_timeout_plugin_slugs','1430326904','no'),(22856,'_transient_plugin_slugs','a:9:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:9:\"hello.php\";i:5;s:37:\"post-types-order/post-types-order.php\";i:6;s:39:\"search-everything/search-everything.php\";i:7;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:8;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','no'),(22857,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1430283704','no'),(22858,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2015/04/wordpress-4-2-1/\'>WordPress 4.2.1 Security Release</a> <span class=\"rss-date\">April 27, 2015</span><div class=\"rssSummary\">WordPress 4.2.1 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. A few hours ago, the WordPress team was made aware of a cross-site scripting vulnerability, which could enable commenters to compromise a site. The vulnerability was discovered by Jouko Pynnönen. [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/04/who-is-steve-jobs/\'>Matt: Who is Steve Jobs?</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/poll-how-often-do-you-read-a-wordpress-plugins-changelog-before-updating\'>WPTavern: Poll: How Often Do You Read a WordPress Plugin’s Changelog Before Updating?</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/wordpress-4-2-1-released-to-patch-comment-exploit-vulnerability\'>WPTavern: WordPress 4.2.1 Released to Patch Comment Exploit Vulnerability</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\'dashboard-news-plugin\'><span>Popular Plugin:</span> <a href=\'https://wordpress.org/plugins/photo-gallery/\' class=\'dashboard-news-plugin-link\'>Photo Gallery</a>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=photo-gallery&amp;_wpnonce=4f67082d5e&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Photo Gallery\'>Install</a>)</span></li></ul></div>','no'),(22861,'_transient_is_multi_author','0','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=12602 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,4,'_edit_last','1'),(3,4,'_wp_page_template','home.php'),(4,4,'_edit_lock','1427820920:1'),(5,6,'_edit_last','1'),(6,6,'_edit_lock','1425046387:1'),(7,6,'_wp_page_template','about.php'),(8,8,'_edit_last','1'),(9,8,'_edit_lock','1402442057:1'),(10,8,'cfs_fields','a:2:{i:0;a:8:{s:2:\"id\";s:1:\"1\";s:4:\"name\";s:12:\"header_image\";s:5:\"label\";s:12:\"Header Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:2:\"16\";s:4:\"name\";s:9:\"post_type\";s:5:\"label\";s:9:\"Post Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(11,8,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:2:{i:0;s:9:\"posts.php\";i:1;s:10:\"skills.php\";}}}'),(12,8,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(13,9,'_wp_attached_file','2014/06/beer-header.jpg'),(14,9,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:400;s:4:\"file\";s:23:\"2014/06/beer-header.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"beer-header-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"beer-header-300x80.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:80;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"beer-header-1024x273.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:273;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(19,13,'_edit_last','2'),(20,13,'_wp_page_template','skills.php'),(21,13,'_edit_lock','1428013183:2'),(24,16,'_edit_last','2'),(25,16,'_wp_page_template','posts.php'),(26,16,'_edit_lock','1429135793:2'),(90,25,'_menu_item_type','post_type'),(91,25,'_menu_item_menu_item_parent','0'),(92,25,'_menu_item_object_id','6'),(93,25,'_menu_item_object','page'),(94,25,'_menu_item_target',''),(95,25,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(96,25,'_menu_item_xfn',''),(97,25,'_menu_item_url',''),(99,26,'_menu_item_type','post_type'),(100,26,'_menu_item_menu_item_parent','0'),(101,26,'_menu_item_object_id','16'),(102,26,'_menu_item_object','page'),(103,26,'_menu_item_target',''),(104,26,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(105,26,'_menu_item_xfn',''),(106,26,'_menu_item_url',''),(108,27,'_menu_item_type','post_type'),(109,27,'_menu_item_menu_item_parent','0'),(110,27,'_menu_item_object_id','13'),(111,27,'_menu_item_object','page'),(112,27,'_menu_item_target',''),(113,27,'_menu_item_classes','a:1:{i:0;s:15:\"nav-call-action\";}'),(114,27,'_menu_item_xfn',''),(115,27,'_menu_item_url',''),(135,30,'_edit_last','1'),(136,30,'_edit_lock','1427902321:2'),(137,30,'_wp_page_template','posts.php'),(138,32,'_menu_item_type','post_type'),(139,32,'_menu_item_menu_item_parent','0'),(140,32,'_menu_item_object_id','30'),(141,32,'_menu_item_object','page'),(142,32,'_menu_item_target',''),(143,32,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(144,32,'_menu_item_xfn',''),(145,32,'_menu_item_url',''),(148,6,'header_image','9'),(149,35,'_wp_attached_file','2014/06/stockvault-atlantic-sunset135250.jpg'),(150,35,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:44:\"2014/06/stockvault-atlantic-sunset135250.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-atlantic-sunset135250-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:22;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:12:\"Canon EOS 7D\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:2:\"12\";s:3:\"iso\";s:3:\"100\";s:13:\"shutter_speed\";s:3:\"0.5\";s:5:\"title\";s:0:\"\";}}'),(153,37,'_edit_last','1'),(154,37,'_edit_lock','1402367051:1'),(155,37,'cfs_fields','a:10:{i:0;a:8:{s:2:\"id\";s:1:\"7\";s:4:\"name\";s:12:\"project_type\";s:5:\"label\";s:12:\"Project Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:1:\"6\";s:4:\"name\";s:9:\"languages\";s:5:\"label\";s:9:\"Languages\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:1:\"8\";s:4:\"name\";s:4:\"role\";s:5:\"label\";s:4:\"Role\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:1:\"9\";s:4:\"name\";s:4:\"link\";s:5:\"label\";s:4:\"Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:4;a:8:{s:2:\"id\";i:10;s:4:\"name\";s:7:\"company\";s:5:\"label\";s:7:\"Company\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";i:11;s:4:\"name\";s:12:\"company_link\";s:5:\"label\";s:12:\"Company Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:6;a:8:{s:2:\"id\";s:1:\"2\";s:4:\"name\";s:11:\"screenshots\";s:5:\"label\";s:11:\"Screenshots\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:6;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:22:\"Screenshot - {caption}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:7;a:8:{s:2:\"id\";s:1:\"3\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:7;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:8;a:8:{s:2:\"id\";s:1:\"4\";s:4:\"name\";s:5:\"image\";s:5:\"label\";s:5:\"Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:10:\"Real Image\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:8;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:9;a:8:{s:2:\"id\";s:1:\"5\";s:4:\"name\";s:7:\"caption\";s:5:\"label\";s:7:\"Caption\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:9;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(156,37,'cfs_rules','a:1:{s:10:\"post_types\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:7:\"project\";}}}'),(157,37,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(158,38,'_edit_last','1'),(159,38,'_edit_lock','1408399762:1'),(160,39,'_wp_attached_file','2014/06/th-77nrg.png'),(161,39,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:20:\"2014/06/th-77nrg.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-77nrg-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-77nrg-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(162,40,'_wp_attached_file','2014/06/th-baton.png'),(163,40,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:20:\"2014/06/th-baton.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-baton-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-baton-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(164,41,'_wp_attached_file','2014/06/th-carnegie-chart.png'),(165,41,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:451;s:4:\"file\";s:29:\"2014/06/th-carnegie-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(166,42,'_wp_attached_file','2014/06/th-enviro.png'),(167,42,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:21:\"2014/06/th-enviro.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-enviro-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-enviro-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(168,43,'_wp_attached_file','2014/06/th-soundingboard.png'),(169,43,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:28:\"2014/06/th-soundingboard.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(170,44,'_wp_attached_file','2014/06/th-tea-chart.png'),(171,44,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:24:\"2014/06/th-tea-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(172,45,'_wp_attached_file','2014/06/th-tea-timers.png'),(173,45,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:449;s:4:\"file\";s:25:\"2014/06/th-tea-timers.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(174,46,'_wp_attached_file','2014/06/th-tle.png'),(175,46,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:452;s:4:\"file\";s:18:\"2014/06/th-tle.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"th-tle-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-tle-298x300.png\";s:5:\"width\";i:298;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(200,47,'_wp_attached_file','2014/06/big-77-1.jpg'),(201,47,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:663;s:4:\"file\";s:20:\"2014/06/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x565.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:565;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(202,48,'_wp_attached_file','2014/06/big-77-2.jpg'),(203,48,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-2-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(204,49,'_wp_attached_file','2014/06/big-77-3.jpg'),(205,49,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-3-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(206,50,'_wp_attached_file','2014/06/big-77-4.jpg'),(207,50,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:664;s:4:\"file\";s:20:\"2014/06/big-77-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-4-300x166.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:166;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-4-1024x566.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:566;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(208,51,'_wp_attached_file','2014/06/big-tle-1.jpg'),(209,51,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:21:\"2014/06/big-tle-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(210,52,'_wp_attached_file','2014/06/big-tle-2.jpg'),(211,52,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:21:\"2014/06/big-tle-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(212,53,'_wp_attached_file','2014/06/big-tle-3.jpg'),(213,53,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-3-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(214,54,'_wp_attached_file','2014/06/big-tle-4.jpg'),(215,54,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-4-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(216,55,'_wp_attached_file','2014/06/th-77-1.jpg'),(217,55,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(218,56,'_wp_attached_file','2014/06/th-77-2.jpg'),(219,56,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(220,57,'_wp_attached_file','2014/06/th-77-3.jpg'),(221,57,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(222,58,'_wp_attached_file','2014/06/th-77-4.jpg'),(223,58,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(226,60,'_wp_attached_file','2014/06/th-tle-2.jpg'),(227,60,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(228,61,'_wp_attached_file','2014/06/th-tle-3.jpg'),(229,61,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(230,62,'_wp_attached_file','2014/06/th-tle-4.jpg'),(231,62,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(244,63,'_edit_last','1'),(245,63,'_edit_lock','1408399696:1'),(403,64,'_edit_last','1'),(404,64,'_edit_lock','1408399706:1'),(429,65,'_edit_last','1'),(430,65,'_edit_lock','1412544297:1'),(437,66,'_edit_last','1'),(438,66,'_edit_lock','1424874413:1'),(445,67,'_edit_last','1'),(446,67,'_edit_lock','1424874453:1'),(465,68,'_edit_last','1'),(466,68,'_edit_lock','1408399747:1'),(497,72,'_wp_attached_file','2014/06/big-77-responsive.jpg'),(498,72,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:1372;s:4:\"file\";s:29:\"2014/06/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-168x300.jpg\";s:5:\"width\";i:168;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-574x1024.jpg\";s:5:\"width\";i:574;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(499,73,'_wp_attached_file','2014/06/big-es-responsive.jpg'),(500,73,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:628;s:4:\"file\";s:29:\"2014/06/big-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(501,74,'_wp_attached_file','2014/06/th-77-responsive.jpg'),(502,74,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/06/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(523,76,'_wp_attached_file','2014/06/big-tle-responsive.jpg'),(524,76,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:763;s:6:\"height\";i:1200;s:4:\"file\";s:30:\"2014/06/big-tle-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"big-tle-responsive-651x1024.jpg\";s:5:\"width\";i:651;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(545,78,'_wp_attached_file','2014/06/big-bt-1.jpg'),(546,78,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-1-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(547,79,'_wp_attached_file','2014/06/big-bt-2.jpg'),(548,79,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-2-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(549,80,'_wp_attached_file','2014/06/big-bt-3.jpg'),(550,80,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-bt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-3-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-3-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(551,81,'_wp_attached_file','2014/06/big-bt-4.jpg'),(552,81,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:661;s:4:\"file\";s:20:\"2014/06/big-bt-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-4-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(553,82,'_wp_attached_file','2014/06/big-cc-1.jpg'),(554,82,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-1-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-1-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(555,83,'_wp_attached_file','2014/06/big-cc-2.jpg'),(556,83,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-2-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-2-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(557,84,'_wp_attached_file','2014/06/big-cc-3.jpg'),(558,84,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:889;s:4:\"file\";s:20:\"2014/06/big-cc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-3-1024x758.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:758;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(559,85,'_wp_attached_file','2014/06/big-cc-responsive.jpg'),(560,85,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:534;s:6:\"height\";i:1000;s:4:\"file\";s:29:\"2014/06/big-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(561,86,'_wp_attached_file','2014/06/big-es-1.jpg'),(562,86,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:865;s:4:\"file\";s:20:\"2014/06/big-es-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-1-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(563,87,'_wp_attached_file','2014/06/big-es-2.jpg'),(564,87,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-2-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(565,88,'_wp_attached_file','2014/06/big-es-3.jpg'),(566,88,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-3-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(567,89,'_wp_attached_file','2014/06/th-baton1.png'),(568,89,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:21:\"2014/06/th-baton1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-baton1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-baton1-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(569,90,'_wp_attached_file','2014/06/th-bt-1.jpg'),(570,90,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(571,91,'_wp_attached_file','2014/06/th-bt-2.jpg'),(572,91,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(573,92,'_wp_attached_file','2014/06/th-bt-3.jpg'),(574,92,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-bt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(575,93,'_wp_attached_file','2014/06/th-bt-4.jpg'),(576,93,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:220;s:4:\"file\";s:19:\"2014/06/th-bt-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(577,94,'_wp_attached_file','2014/06/th-cc-1.jpg'),(578,94,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-1-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(579,95,'_wp_attached_file','2014/06/th-cc-2.jpg'),(580,95,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-2-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(581,96,'_wp_attached_file','2014/06/th-cc-3.jpg'),(582,96,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(585,98,'_wp_attached_file','2014/06/th-es-1.jpg'),(586,98,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-es-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(587,99,'_wp_attached_file','2014/06/th-es-2.jpg'),(588,99,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(589,100,'_wp_attached_file','2014/06/th-es-3.jpg'),(590,100,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(663,101,'_wp_attached_file','2014/06/big-kk-1.jpg'),(664,101,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-kk-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-1-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(665,102,'_wp_attached_file','2014/06/big-kk-2.jpg'),(666,102,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:20:\"2014/06/big-kk-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(667,103,'_wp_attached_file','2014/06/big-kk-3.jpg'),(668,103,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:353;s:4:\"file\";s:20:\"2014/06/big-kk-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"big-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-3-1024x301.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:301;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(669,104,'_wp_attached_file','2014/06/big-kk-4.jpg'),(670,104,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:483;s:4:\"file\";s:20:\"2014/06/big-kk-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-4-1024x412.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:412;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(671,105,'_wp_attached_file','2014/06/big-mc-1.jpg'),(672,105,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:545;s:4:\"file\";s:20:\"2014/06/big-mc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-1-1024x465.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:465;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(673,106,'_wp_attached_file','2014/06/big-mc-2.jpg'),(674,106,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:443;s:4:\"file\";s:20:\"2014/06/big-mc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-2-300x110.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-2-1024x378.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:378;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(675,107,'_wp_attached_file','2014/06/big-sb-1.jpg'),(676,107,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-sb-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(677,108,'_wp_attached_file','2014/06/big-sb-2.jpg'),(678,108,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:764;s:4:\"file\";s:20:\"2014/06/big-sb-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-2-1024x651.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:651;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(679,109,'_wp_attached_file','2014/06/big-sb-3.jpg'),(680,109,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:762;s:4:\"file\";s:20:\"2014/06/big-sb-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-3-1024x650.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:650;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(681,110,'_wp_attached_file','2014/06/big-tc-1.jpg'),(682,110,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:823;s:4:\"file\";s:20:\"2014/06/big-tc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-1-1024x702.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:702;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(683,111,'_wp_attached_file','2014/06/big-tc-2.jpg'),(684,111,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:819;s:4:\"file\";s:20:\"2014/06/big-tc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-2-1024x698.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:698;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(685,112,'_wp_attached_file','2014/06/big-tc-3.jpg'),(686,112,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:822;s:4:\"file\";s:20:\"2014/06/big-tc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-3-1024x701.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:701;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(687,113,'_wp_attached_file','2014/06/big-tc-responsive.jpg'),(688,113,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1090;s:6:\"height\";i:1484;s:4:\"file\";s:29:\"2014/06/big-tc-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tc-responsive-752x1024.jpg\";s:5:\"width\";i:752;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(689,114,'_wp_attached_file','2014/06/big-tt-1.jpg'),(690,114,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-tt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(691,115,'_wp_attached_file','2014/06/big-tt-2.jpg'),(692,115,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:758;s:4:\"file\";s:20:\"2014/06/big-tt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-2-1024x646.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:646;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(693,116,'_wp_attached_file','2014/06/big-tt-3.jpg'),(694,116,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:755;s:4:\"file\";s:20:\"2014/06/big-tt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-3-300x188.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-3-1024x644.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:644;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(695,117,'_wp_attached_file','2014/06/big-tt-responsive.jpg'),(696,117,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:790;s:6:\"height\";i:1478;s:4:\"file\";s:29:\"2014/06/big-tt-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tt-responsive-547x1024.jpg\";s:5:\"width\";i:547;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(697,118,'_wp_attached_file','2014/06/th-kk-1.jpg'),(698,118,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-kk-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(699,119,'_wp_attached_file','2014/06/th-kk-2.jpg'),(700,119,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-kk-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(701,120,'_wp_attached_file','2014/06/th-kk-3.jpg'),(702,120,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:118;s:4:\"file\";s:19:\"2014/06/th-kk-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-3-150x118.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:118;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(703,121,'_wp_attached_file','2014/06/th-kk-4.jpg'),(704,121,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:161;s:4:\"file\";s:19:\"2014/06/th-kk-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(705,122,'_wp_attached_file','2014/06/th-mc-1.jpg'),(706,122,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:182;s:4:\"file\";s:19:\"2014/06/th-mc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(707,123,'_wp_attached_file','2014/06/th-mc-2.jpg'),(708,123,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:148;s:4:\"file\";s:19:\"2014/06/th-mc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-2-150x148.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:148;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-2-300x111.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(709,124,'_wp_attached_file','2014/06/th-sb-1.jpg'),(710,124,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-sb-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(711,125,'_wp_attached_file','2014/06/th-sb-2.jpg'),(712,125,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:255;s:4:\"file\";s:19:\"2014/06/th-sb-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(713,126,'_wp_attached_file','2014/06/th-sb-3.jpg'),(714,126,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:254;s:4:\"file\";s:19:\"2014/06/th-sb-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(715,127,'_wp_attached_file','2014/06/th-tc-1.jpg'),(716,127,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(717,128,'_wp_attached_file','2014/06/th-tc-2.jpg'),(718,128,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:273;s:4:\"file\";s:19:\"2014/06/th-tc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(719,129,'_wp_attached_file','2014/06/th-tc-3.jpg'),(720,129,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(721,130,'_wp_attached_file','2014/06/th-tc-responsive.jpg'),(722,130,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:545;s:4:\"file\";s:28:\"2014/06/th-tc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(723,131,'_wp_attached_file','2014/06/th-tt-1.jpg'),(724,131,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(725,132,'_wp_attached_file','2014/06/th-tt-2.jpg'),(726,132,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(727,133,'_wp_attached_file','2014/06/th-tt-3.jpg'),(728,133,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:19:\"2014/06/th-tt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(729,134,'_wp_attached_file','2014/06/th-tt-responsive.jpg'),(730,134,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:748;s:4:\"file\";s:28:\"2014/06/th-tt-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(839,135,'_wp_attached_file','2014/06/th-cc-responsive.jpg'),(840,135,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:655;s:4:\"file\";s:28:\"2014/06/th-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(841,136,'_wp_attached_file','2014/06/th-es-responsive.jpg'),(842,136,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:549;s:4:\"file\";s:28:\"2014/06/th-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(843,137,'_wp_attached_file','2014/06/th-tle-1.jpg'),(844,137,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(845,138,'_wp_attached_file','2014/06/th-tle-responsive.jpg'),(846,138,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:550;s:4:\"file\";s:29:\"2014/06/th-tle-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(901,139,'_edit_last','1'),(902,139,'_edit_lock','1402276997:1'),(903,139,'cfs_fields','a:4:{i:0;a:8:{s:2:\"id\";s:2:\"12\";s:4:\"name\";s:8:\"projects\";s:5:\"label\";s:8:\"Projects\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:17:\"Project - {label}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:1;a:8:{s:2:\"id\";s:2:\"13\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"14\";s:4:\"name\";s:5:\"label\";s:5:\"label\";s:5:\"Label\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"15\";s:4:\"name\";s:3:\"url\";s:5:\"label\";s:3:\"URL\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(904,139,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:8:\"home.php\";}}}'),(905,139,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(936,140,'_wp_attached_file','2014/06/stockvault-dramatic-landscape106482.jpg'),(937,140,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:47:\"2014/06/stockvault-dramatic-landscape106482.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:48:\"stockvault-dramatic-landscape106482-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:4.9000000000000004;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:5:\"E5600\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"5.69\";s:3:\"iso\";s:2:\"50\";s:13:\"shutter_speed\";s:18:\"0.0022805017103763\";s:5:\"title\";s:0:\"\";}}'),(940,141,'_wp_attached_file','2014/06/stockvault-path-in-nature124348.jpg'),(941,141,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:43:\"2014/06/stockvault-path-in-nature124348.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:44:\"stockvault-path-in-nature124348-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(946,142,'_edit_last','1'),(947,142,'_edit_lock','1427902204:1'),(956,145,'_wp_attached_file','2014/06/stockvault-cabot-trail-hdr133670.jpg'),(957,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:44:\"2014/06/stockvault-cabot-trail-hdr133670.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-cabot-trail-hdr133670-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(966,150,'_edit_last','1'),(967,150,'_edit_lock','1402369491:1'),(968,150,'cfs_fields','a:6:{i:0;a:8:{s:2:\"id\";s:2:\"17\";s:4:\"name\";s:10:\"categories\";s:5:\"label\";s:10:\"Categories\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:24:\"Skill - {category_title}\";s:12:\"button_label\";s:12:\"Add Category\";}}i:1;a:8:{s:2:\"id\";s:2:\"18\";s:4:\"name\";s:14:\"category_title\";s:5:\"label\";s:14:\"Category Title\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"22\";s:4:\"name\";s:5:\"color\";s:5:\"label\";s:5:\"Color\";s:4:\"type\";s:5:\"color\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:2;s:7:\"options\";a:1:{s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"19\";s:4:\"name\";s:6:\"skills\";s:5:\"label\";s:6:\"Skills\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:3;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:31:\"Skill - {skill} - {percentage}%\";s:12:\"button_label\";s:9:\"Add Skill\";}}i:4;a:8:{s:2:\"id\";s:2:\"20\";s:4:\"name\";s:5:\"skill\";s:5:\"label\";s:5:\"Skill\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";s:2:\"21\";s:4:\"name\";s:10:\"percentage\";s:5:\"label\";s:10:\"Percentage\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(969,150,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:10:\"skills.php\";}}}'),(970,150,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(1271,151,'_menu_item_type','custom'),(1272,151,'_menu_item_menu_item_parent','0'),(1273,151,'_menu_item_object_id','151'),(1274,151,'_menu_item_object','custom'),(1275,151,'_menu_item_target',''),(1276,151,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1277,151,'_menu_item_xfn',''),(1278,151,'_menu_item_url','https://thesocietea.org/resume'),(1821,154,'_edit_last','1'),(1822,154,'_edit_lock','1424875012:1'),(1957,158,'_edit_last','1'),(1958,158,'_edit_lock','1403184805:1'),(1963,167,'_edit_last','1'),(1964,167,'_edit_lock','1404151981:1'),(2385,172,'_edit_last','1'),(2386,172,'_edit_lock','1409793896:1'),(2387,172,'_syntaxhighlighter_encoded','1'),(2774,74,'_edit_lock','1405377184:1'),(2775,206,'_wp_attached_file','2014/07/big-json-1.jpg'),(2776,206,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:720;s:6:\"height\";i:276;s:4:\"file\";s:22:\"2014/07/big-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-1-300x115.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2777,207,'_wp_attached_file','2014/07/big-json-2.jpg'),(2778,207,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:870;s:6:\"height\";i:212;s:4:\"file\";s:22:\"2014/07/big-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2779,208,'_wp_attached_file','2014/07/big-json-3.jpg'),(2780,208,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:334;s:4:\"file\";s:22:\"2014/07/big-json-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-json-3-1024x285.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:285;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2781,209,'_wp_attached_file','2014/07/big-json-4.jpg'),(2782,209,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:808;s:4:\"file\";s:22:\"2014/07/big-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2783,210,'_wp_attached_file','2014/07/th-json-1.jpg'),(2784,210,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:153;s:4:\"file\";s:21:\"2014/07/th-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-1-300x114.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:114;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2785,211,'_wp_attached_file','2014/07/th-json-2.jpg'),(2786,211,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:657;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2787,212,'_wp_attached_file','2014/07/th-json-3.jpg'),(2788,212,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:575;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2789,213,'_wp_attached_file','2014/07/th-json-4.jpg'),(2790,213,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:420;s:4:\"file\";s:21:\"2014/07/th-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2791,214,'_edit_last','1'),(2792,214,'_edit_lock','1408399735:1'),(2811,215,'_wp_attached_file','2014/07/big-77-1.jpg'),(2812,215,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:686;s:4:\"file\";s:20:\"2014/07/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x585.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:585;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2813,216,'_wp_attached_file','2014/07/big-77-responsive.jpg'),(2814,216,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:794;s:6:\"height\";i:1288;s:4:\"file\";s:29:\"2014/07/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-631x1024.jpg\";s:5:\"width\";i:631;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2815,217,'_wp_attached_file','2014/07/th-77-1.jpg'),(2816,217,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:229;s:4:\"file\";s:19:\"2014/07/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2817,218,'_wp_attached_file','2014/07/th-77-responsive.jpg'),(2818,218,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/07/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2861,220,'_edit_last','1'),(2862,220,'_edit_lock','1426913109:1'),(2863,220,'_syntaxhighlighter_encoded','1'),(2864,226,'_wp_attached_file','2014/07/vim_tutor.jpg'),(2865,226,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:393;s:4:\"file\";s:21:\"2014/07/vim_tutor.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"vim_tutor-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"vim_tutor-300x235.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:235;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2872,233,'_edit_last','1'),(2873,233,'_edit_lock','1424874874:1'),(2874,233,'_syntaxhighlighter_encoded','1'),(2878,233,'dsq_thread_id','2929367235'),(2881,172,'dsq_thread_id','2929382650'),(2893,220,'dsq_thread_id','2932682347'),(2894,154,'dsq_thread_id','2932682419'),(2903,167,'dsq_thread_id','2933729832'),(2904,158,'dsq_thread_id','2933729884'),(2907,142,'dsq_thread_id','2933750176'),(2911,73,'_edit_lock','1408301920:1'),(2988,252,'_edit_last','1'),(2989,252,'_edit_lock','1408399686:1'),(2996,253,'_wp_attached_file','2014/08/big-odoc-1.jpg'),(2997,253,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:692;s:4:\"file\";s:22:\"2014/08/big-odoc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-1-1024x590.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:590;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2998,254,'_wp_attached_file','2014/08/big-odoc-2.jpg'),(2999,254,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:691;s:4:\"file\";s:22:\"2014/08/big-odoc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-2-1024x589.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:589;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3000,255,'_wp_attached_file','2014/08/big-odoc-3.jpg'),(3001,255,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:693;s:4:\"file\";s:22:\"2014/08/big-odoc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-3-1024x591.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:591;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3002,256,'_wp_attached_file','2014/08/big-odoc-4.jpg'),(3003,256,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:1047;s:4:\"file\";s:22:\"2014/08/big-odoc-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-4-586x1024.jpg\";s:5:\"width\";i:586;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3004,257,'_wp_attached_file','2014/08/th-odoc-1.jpg'),(3005,257,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3006,258,'_wp_attached_file','2014/08/th-odoc-2.jpg'),(3007,258,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:230;s:4:\"file\";s:21:\"2014/08/th-odoc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3008,259,'_wp_attached_file','2014/08/th-odoc-3.jpg'),(3009,259,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3010,260,'_wp_attached_file','2014/08/th-odoc-4.jpg'),(3011,260,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:524;s:4:\"file\";s:21:\"2014/08/th-odoc-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3048,252,'project_type','Web Site'),(3049,252,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3050,252,'role','Full-Stack Developer'),(3051,252,'link','http://new.okcommerce.gov/'),(3052,252,'company','Staplegun'),(3053,252,'company_link','http://staplegun.us/'),(3054,252,'thumbnail','257'),(3055,252,'image','253'),(3056,252,'caption','Home Page'),(3057,252,'thumbnail','258'),(3058,252,'image','254'),(3059,252,'caption','Subpage'),(3060,252,'thumbnail','259'),(3061,252,'image','255'),(3062,252,'caption','Popup Form'),(3063,252,'thumbnail','260'),(3064,252,'image','256'),(3065,252,'caption','Responsive Design'),(3066,63,'project_type','Web Site'),(3067,63,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3068,63,'role','Full-Stack Developer'),(3069,63,'link','http://77nrg.staplegun.us/'),(3070,63,'company','Staplegun'),(3071,63,'company_link','http://staplegun.us/'),(3072,63,'thumbnail','217'),(3073,63,'image','215'),(3074,63,'caption','Home Page Top (Video Background)'),(3075,63,'thumbnail','56'),(3076,63,'image','48'),(3077,63,'caption','Home Page Bottom (Parallax Background)'),(3078,63,'thumbnail','57'),(3079,63,'image','49'),(3080,63,'caption','Subpage'),(3081,63,'thumbnail','218'),(3082,63,'image','216'),(3083,63,'caption','Responsive Design'),(3084,64,'project_type','Web Site'),(3085,64,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3086,64,'role','Full-Stack Developer'),(3087,64,'link','http://www.enviro-ok.com/'),(3088,64,'company','Staplegun'),(3089,64,'company_link','http://staplegun.us/'),(3090,64,'thumbnail','98'),(3091,64,'image','86'),(3092,64,'caption','Home Page'),(3093,64,'thumbnail','99'),(3094,64,'image','87'),(3095,64,'caption','Subpage with Interactive 3D Images'),(3096,64,'thumbnail','100'),(3097,64,'image','88'),(3098,64,'caption','Subpage with Multiple Job Openings'),(3099,64,'thumbnail','136'),(3100,64,'image','73'),(3101,64,'caption','Responsive Design'),(3120,214,'project_type','Web Application'),(3121,214,'languages','Node.js, Faye.js'),(3122,214,'role','Back-End Developer'),(3123,214,'link','https://github.com/Staplegun-US/json-api-websocket-wrapper'),(3124,214,'company','Staplegun'),(3125,214,'company_link','http://staplegun.us/'),(3126,214,'thumbnail','213'),(3127,214,'image','209'),(3128,214,'caption','Example Stock Ticker Using JSON API Websocket Wrapper'),(3129,214,'thumbnail','212'),(3130,214,'image','208'),(3131,214,'caption','HTML Interface'),(3132,214,'thumbnail','210'),(3133,214,'image','206'),(3134,214,'caption','Server Logs'),(3135,214,'thumbnail','211'),(3136,214,'image','207'),(3137,214,'caption','Sample Config File'),(3138,68,'project_type','Ruby Gem'),(3139,68,'languages','Ruby'),(3140,68,'role','Back-End Developer'),(3141,68,'link','https://github.com/brightbit/markdown_checkboxes'),(3142,68,'company','Brightbit'),(3143,68,'company_link','http://brightbit.com/'),(3144,68,'thumbnail','123'),(3145,68,'image','106'),(3146,68,'caption','Rendering Markdown Checkboxes'),(3147,68,'thumbnail','122'),(3148,68,'image','105'),(3149,68,'caption','Editing Markdown Checkboxes Text'),(3150,38,'project_type','Web Site'),(3151,38,'languages','HTML5, Sass, Javascript, PHP (ModX)'),(3152,38,'role','Full-Stack Developer'),(3153,38,'link','http://totalenvironmentinc.com/'),(3154,38,'company','Staplegun'),(3155,38,'company_link','http://staplegun.us/'),(3156,38,'thumbnail','137'),(3157,38,'image','51'),(3158,38,'caption','Home Page'),(3159,38,'thumbnail','61'),(3160,38,'image','53'),(3161,38,'caption','Contact Page'),(3162,38,'thumbnail','62'),(3163,38,'image','54'),(3164,38,'caption','Sub Page with Lightbox'),(3165,38,'thumbnail','138'),(3166,38,'image','76'),(3167,38,'caption','Responsive Design'),(3336,261,'_edit_last','1'),(3337,261,'_edit_lock','1424879340:1'),(3338,261,'_syntaxhighlighter_encoded','1'),(3351,261,'dsq_thread_id','2953640271'),(3363,282,'_edit_last','1'),(3364,282,'_edit_lock','1410983185:1'),(3365,282,'_syntaxhighlighter_encoded','1'),(3367,282,'dsq_thread_id','2966714576'),(3934,301,'_edit_last','1'),(3935,301,'_edit_lock','1412391546:1'),(4265,305,'_edit_last','1'),(4266,305,'_edit_lock','1409866484:1'),(4269,305,'_syntaxhighlighter_encoded','1'),(4359,305,'dsq_thread_id','2986163533'),(4869,301,'dsq_thread_id','3081164551'),(5183,335,'_menu_item_type','custom'),(5184,335,'_menu_item_menu_item_parent','0'),(5185,335,'_menu_item_object_id','335'),(5186,335,'_menu_item_object','custom'),(5187,335,'_menu_item_target',''),(5188,335,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(5189,335,'_menu_item_xfn',''),(5190,335,'_menu_item_url','http://labs.thesocietea.org'),(5343,336,'_edit_last','1'),(5344,336,'_edit_lock','1412543328:1'),(5345,337,'_wp_attached_file','2014/10/big-onie-1.jpg'),(5346,337,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:780;s:4:\"file\";s:22:\"2014/10/big-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5347,338,'_wp_attached_file','2014/10/big-onie-2.jpg'),(5348,338,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:776;s:4:\"file\";s:22:\"2014/10/big-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5349,339,'_wp_attached_file','2014/10/big-onie-3.jpg'),(5350,339,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:782;s:4:\"file\";s:22:\"2014/10/big-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5351,340,'_wp_attached_file','2014/10/big-onie-responsive.jpg'),(5352,340,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:700;s:6:\"height\";i:1081;s:4:\"file\";s:31:\"2014/10/big-onie-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-194x300.jpg\";s:5:\"width\";i:194;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"big-onie-responsive-663x1024.jpg\";s:5:\"width\";i:663;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5353,341,'_wp_attached_file','2014/10/th-onie-1.jpg'),(5354,341,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:351;s:4:\"file\";s:21:\"2014/10/th-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5355,342,'_wp_attached_file','2014/10/th-onie-2.jpg'),(5356,342,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:349;s:4:\"file\";s:21:\"2014/10/th-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5357,343,'_wp_attached_file','2014/10/th-onie-3.jpg'),(5358,343,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2014/10/th-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5359,344,'_wp_attached_file','2014/10/th-onie-responsive.jpg'),(5360,344,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:438;s:4:\"file\";s:30:\"2014/10/th-onie-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-300x292.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:292;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5361,336,'project_type','Web Site'),(5362,336,'languages','HTML5, Sass, Javascript'),(5363,336,'role','Full-Stack Developer'),(5364,336,'link','http://chooseonepercent.com/'),(5365,336,'company','Staplegun'),(5366,336,'company_link','http://staplegun.us/'),(5367,336,'thumbnail','341'),(5368,336,'image','337'),(5369,336,'caption','Home Page - Top'),(5370,336,'thumbnail','343'),(5371,336,'image','339'),(5372,336,'caption','Home Page - Bottom (Parallax Footer)'),(5373,336,'thumbnail','342'),(5374,336,'image','338'),(5375,336,'caption','Home Page - Spanish'),(5376,336,'thumbnail','344'),(5377,336,'image','340'),(5378,336,'caption','Responsive Design'),(5379,65,'project_type','Web Application'),(5380,65,'languages','Ember.js, Handlebars, Ruby on Rails, Faye.js, PostgreSQL'),(5381,65,'role','Back-End Developer - Team'),(5382,65,'link',''),(5383,65,'company','Brightbit'),(5384,65,'company_link','http://brightbit.com/'),(5385,65,'thumbnail','118'),(5386,65,'image','101'),(5387,65,'caption','Chat Room View'),(5388,65,'thumbnail','102'),(5389,65,'image','102'),(5390,65,'caption','Edit User View'),(5391,65,'thumbnail','120'),(5392,65,'image','103'),(5393,65,'caption','Edit Messages Instantly'),(5394,65,'thumbnail','121'),(5395,65,'image','104'),(5396,65,'caption','Log In View'),(5576,346,'_edit_last','1'),(5577,346,'_edit_lock','1415996550:1'),(5659,346,'dsq_thread_id','3093844327'),(5738,357,'_edit_last','1'),(5739,357,'_edit_lock','1421867672:1'),(5740,357,'_syntaxhighlighter_encoded','1'),(5741,357,'_oembed_286a0db3c7806c6f1856a0198b270234','{{unknown}}'),(6051,357,'dsq_thread_id','3157997784'),(8091,381,'_edit_last','1'),(8092,381,'_edit_lock','1427479904:1'),(8108,383,'_edit_last','1'),(8109,383,'_edit_lock','1421958922:1'),(8114,383,'dsq_thread_id','3446070632'),(8145,388,'title','Galleries'),(8146,388,'name','galleries'),(8147,388,'has_variations',''),(8148,388,'variation','0'),(8149,388,'filter','raw'),(8150,388,'returns','WyJpbWFnZSJd'),(8151,388,'aliases','WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXQ=='),(8152,388,'id_field','ID'),(8153,389,'title','Albums'),(8154,389,'name','albums'),(8155,389,'has_variations',''),(8156,389,'variation','0'),(8157,389,'filter','raw'),(8158,389,'returns','WyJnYWxsZXJ5IiwiYWxidW0iXQ=='),(8159,389,'aliases','WyJhbGJ1bSJd'),(8160,389,'id_field','ID'),(8161,390,'title','Tags'),(8162,390,'name','tags'),(8163,390,'has_variations',''),(8164,390,'variation','0'),(8165,390,'filter','raw'),(8166,390,'returns','WyJpbWFnZSJd'),(8167,390,'aliases','WyJ0YWciLCJpbWFnZV90YWciLCJpbWFnZV90YWdzIl0='),(8168,390,'id_field','ID'),(8169,391,'title','Random Images'),(8170,391,'has_variations','1'),(8171,391,'name','random_images'),(8172,391,'variation','0'),(8173,391,'filter','raw'),(8174,391,'returns','WyJpbWFnZSJd'),(8175,391,'aliases','WyJyYW5kb20iLCJyYW5kb21faW1hZ2UiXQ=='),(8176,391,'id_field','ID'),(8177,392,'title','Recent images'),(8178,392,'name','recent_images'),(8179,392,'has_variations',''),(8180,392,'variation','0'),(8181,392,'filter','raw'),(8182,392,'returns','WyJpbWFnZSJd'),(8183,392,'aliases','WyJyZWNlbnQiLCJyZWNlbnRfaW1hZ2UiXQ=='),(8184,392,'id_field','ID'),(8185,393,'name','none'),(8186,393,'title','No lightbox'),(8187,393,'code',''),(8188,393,'styles',''),(8189,393,'scripts',''),(8190,393,'filter','raw'),(8191,393,'values','W10='),(8192,393,'i18n','W10='),(8193,393,'id_field','ID'),(8194,393,'display_settings','W10='),(8195,394,'name','lightbox'),(8196,394,'title','Lightbox'),(8197,394,'code','class=\'ngg_lightbox\''),(8198,394,'styles','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.css'),(8199,394,'scripts','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.min.js\nphotocrati-lightbox#jquery.lightbox/nextgen_lightbox_init.js'),(8200,394,'filter','raw'),(8201,394,'values','eyJuZXh0Z2VuX2xpZ2h0Ym94X2xvYWRpbmdfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1pY28tbG9hZGluZy5naWYiLCJuZXh0Z2VuX2xpZ2h0Ym94X2Nsb3NlX2J0bl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLWNsb3NlLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX3ByZXZfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1wcmV2LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX25leHRfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1uZXh0LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYmxhbmtfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1ibGFuay5naWYifQ=='),(8202,394,'i18n','W10='),(8203,394,'id_field','ID'),(8204,394,'display_settings','W10='),(8205,395,'name','fancybox'),(8206,395,'title','Fancybox'),(8207,395,'code','class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"'),(8208,395,'styles','photocrati-lightbox#fancybox/jquery.fancybox-1.3.4.css'),(8209,395,'scripts','photocrati-lightbox#fancybox/jquery.easing-1.3.pack.js\nphotocrati-lightbox#fancybox/jquery.fancybox-1.3.4.pack.js\nphotocrati-lightbox#fancybox/nextgen_fancybox_init.js'),(8210,395,'filter','raw'),(8211,395,'values','W10='),(8212,395,'i18n','W10='),(8213,395,'id_field','ID'),(8214,395,'display_settings','W10='),(8215,396,'name','highslide'),(8216,396,'title','Highslide'),(8217,396,'code','class=\"highslide\" onclick=\"return hs.expand(this, {slideshowGroup: \'%GALLERY_NAME%\'});\"'),(8218,396,'styles','photocrati-lightbox#highslide/highslide.css'),(8219,396,'scripts','photocrati-lightbox#highslide/highslide-full.packed.js\nphotocrati-lightbox#highslide/nextgen_highslide_init.js'),(8220,396,'filter','raw'),(8221,396,'values','eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifQ=='),(8222,396,'i18n','eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9'),(8223,396,'id_field','ID'),(8224,396,'display_settings','W10='),(8225,397,'name','shutter'),(8226,397,'title','Shutter'),(8227,397,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8228,397,'styles','photocrati-lightbox#shutter/shutter.css'),(8229,397,'scripts','photocrati-lightbox#shutter/shutter.js\nphotocrati-lightbox#shutter/nextgen_shutter.js'),(8230,397,'filter','raw'),(8231,397,'values','W10='),(8232,397,'i18n','eyJtc2dMb2FkaW5nIjoiTCBPIEEgRCBJIE4gRyIsIm1zZ0Nsb3NlIjoiQ2xpY2sgdG8gQ2xvc2UifQ=='),(8233,397,'id_field','ID'),(8234,397,'display_settings','W10='),(8235,398,'name','shutter2'),(8236,398,'title','Shutter 2'),(8237,398,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8238,398,'styles','photocrati-lightbox#shutter_reloaded/shutter.css'),(8239,398,'scripts','photocrati-lightbox#shutter_reloaded/shutter.js\nphotocrati-lightbox#shutter_reloaded/nextgen_shutter_reloaded.js'),(8240,398,'filter','raw'),(8241,398,'values','W10='),(8242,398,'i18n','WyJQcmV2aW91cyIsIk5leHQiLCJDbG9zZSIsIkZ1bGwgU2l6ZSIsIkZpdCB0byBTY3JlZW4iLCJJbWFnZSIsIm9mIiwiTG9hZGluZy4uLiJd'),(8243,398,'id_field','ID'),(8244,398,'display_settings','W10='),(8245,399,'name','thickbox'),(8246,399,'title','Thickbox'),(8247,399,'code','class=\'thickbox\' rel=\'%GALLERY_NAME%\''),(8248,399,'styles','wordpress#thickbox'),(8249,399,'scripts','photocrati-lightbox#thickbox/nextgen_thickbox_init.js\nwordpress#thickbox'),(8250,399,'filter','raw'),(8251,399,'values','W10='),(8252,399,'i18n','eyJuZXh0IjoiTmV4dCAmZ3Q7IiwicHJldiI6IiZsdDsgUHJldiIsImltYWdlIjoiSW1hZ2UiLCJvZiI6Im9mIiwiY2xvc2UiOiJDbG9zZSIsIm5vaWZyYW1lcyI6IlRoaXMgZmVhdHVyZSByZXF1aXJlcyBpbmxpbmUgZnJhbWVzLiBZb3UgaGF2ZSBpZnJhbWVzIGRpc2FibGVkIG9yIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZW0uIn0='),(8253,399,'id_field','ID'),(8254,399,'display_settings','W10='),(8255,400,'title','NextGEN Basic Compact Album'),(8256,400,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/compact_preview.jpg'),(8257,400,'default_source','albums'),(8258,400,'view_order','10200'),(8259,400,'name','photocrati-nextgen_basic_compact_album'),(8260,400,'installed_at_version','2.0.66.37'),(8261,400,'filter','raw'),(8262,400,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8263,400,'id_field','ID'),(8264,400,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJnYWxsZXJ5X2Rpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIn0='),(8265,401,'title','NextGEN Basic Extended Album'),(8266,401,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/extended_preview.jpg'),(8267,401,'default_source','albums'),(8268,401,'view_order','10210'),(8269,401,'name','photocrati-nextgen_basic_extended_album'),(8270,401,'installed_at_version','2.0.66.37'),(8271,401,'filter','raw'),(8272,401,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8273,401,'id_field','ID'),(8274,401,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJvdmVycmlkZV90aHVtYm5haWxfc2V0dGluZ3MiOjAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwidGh1bWJuYWlsX3F1YWxpdHkiOjEwMCwidGh1bWJuYWlsX2Nyb3AiOnRydWUsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifQ=='),(8275,402,'title','NextGEN Basic Thumbnails'),(8276,402,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/thumb_preview.jpg'),(8277,402,'default_source','galleries'),(8278,402,'view_order','10000'),(8279,402,'name','photocrati-nextgen_basic_thumbnails'),(8280,402,'installed_at_version','2.0.66.37'),(8281,402,'filter','raw'),(8282,402,'entity_types','WyJpbWFnZSJd'),(8283,402,'id_field','ID'),(8284,402,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJpbWFnZXNfcGVyX3BhZ2UiOiIyMCIsIm51bWJlcl9vZl9jb2x1bW5zIjowLCJ0aHVtYm5haWxfd2lkdGgiOjEyMCwidGh1bWJuYWlsX2hlaWdodCI6OTAsInNob3dfYWxsX2luX2xpZ2h0Ym94IjowLCJhamF4X3BhZ2luYXRpb24iOjAsInVzZV9pbWFnZWJyb3dzZXJfZWZmZWN0IjowLCJ0ZW1wbGF0ZSI6IiIsImRpc3BsYXlfbm9faW1hZ2VzX2Vycm9yIjoxLCJkaXNhYmxlX3BhZ2luYXRpb24iOjAsInNob3dfc2xpZGVzaG93X2xpbmsiOjEsInNsaWRlc2hvd19saW5rX3RleHQiOiJbU2hvdyBzbGlkZXNob3ddIiwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfcXVhbGl0eSI6IjEwMCIsInRodW1ibmFpbF9jcm9wIjoxLCJ0aHVtYm5haWxfd2F0ZXJtYXJrIjowLCJwaWNsZW5zX2xpbmtfdGV4dCI6IltTaG93IFBpY0xlbnNdIiwic2hvd19waWNsZW5zX2xpbmsiOjAsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8285,403,'title','NextGEN Basic Slideshow'),(8286,403,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/slideshow_preview.jpg'),(8287,403,'default_source','galleries'),(8288,403,'view_order','10010'),(8289,403,'name','photocrati-nextgen_basic_slideshow'),(8290,403,'installed_at_version','2.0.66.37'),(8291,403,'filter','raw'),(8292,403,'entity_types','WyJpbWFnZSJd'),(8293,403,'id_field','ID'),(8294,403,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8295,404,'title','NextGEN Basic ImageBrowser'),(8296,404,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_imagebrowser/static/preview.jpg'),(8297,404,'default_source','galleries'),(8298,404,'view_order','10020'),(8299,404,'name','photocrati-nextgen_basic_imagebrowser'),(8300,404,'installed_at_version','2.0.66.37'),(8301,404,'filter','raw'),(8302,404,'entity_types','WyJpbWFnZSJd'),(8303,404,'id_field','ID'),(8304,404,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8305,405,'title','NextGEN Basic SinglePic'),(8306,405,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_singlepic/static/preview.gif'),(8307,405,'default_source','galleries'),(8308,405,'view_order','10060'),(8309,405,'name','photocrati-nextgen_basic_singlepic'),(8310,405,'installed_at_version','2.0.66.37'),(8311,405,'filter','raw'),(8312,405,'entity_types','WyJpbWFnZSJd'),(8313,405,'id_field','ID'),(8314,405,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ3aWR0aCI6IiIsImhlaWdodCI6IiIsIm1vZGUiOiIiLCJkaXNwbGF5X3dhdGVybWFyayI6MCwiZGlzcGxheV9yZWZsZWN0aW9uIjowLCJmbG9hdCI6IiIsImxpbmsiOiIiLCJsaW5rX3RhcmdldCI6Il9ibGFuayIsInF1YWxpdHkiOjEwMCwiY3JvcCI6MCwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0='),(8315,406,'title','NextGEN Basic TagCloud'),(8316,406,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_tagcloud/static/preview.gif'),(8317,406,'default_source','tags'),(8318,406,'view_order','10100'),(8319,406,'name','photocrati-nextgen_basic_tagcloud'),(8320,406,'installed_at_version','2.0.66.37'),(8321,406,'filter','raw'),(8322,406,'entity_types','WyJpbWFnZSJd'),(8323,406,'id_field','ID'),(8324,406,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJkaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsIm51bWJlciI6NDV9'),(8325,407,'filter','raw'),(8326,407,'id_field','ID'),(8327,408,'filter','raw'),(8328,408,'id_field','ID'),(8329,409,'filter','raw'),(8330,409,'id_field','ID'),(8331,410,'filter','raw'),(8332,410,'id_field','ID'),(8798,381,'_syntaxhighlighter_encoded','1'),(8800,381,'_oembed_9dc20beeef6461f9c5efb3524dbf60a4','{{unknown}}'),(8801,381,'_oembed_7e554423ce8327dc8f05893a85da539e','{{unknown}}'),(8802,381,'_oembed_7061682afbac650ece3c83cc7fd58af3','{{unknown}}'),(8840,421,'_wp_attached_file','2014/06/oea_big_1.jpg'),(8841,421,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:705;s:4:\"file\";s:21:\"2014/06/oea_big_1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_1-1024x602.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:602;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8842,422,'_wp_attached_file','2014/06/oea_big_2.jpg'),(8843,422,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:793;s:4:\"file\";s:21:\"2014/06/oea_big_2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_2-1024x677.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:677;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8844,423,'_wp_attached_file','2014/06/oea_big_3.jpg'),(8845,423,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:790;s:4:\"file\";s:21:\"2014/06/oea_big_3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_3-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_3-1024x674.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:674;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8846,424,'_wp_attached_file','2014/06/oea_big_4.jpg'),(8847,424,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:817;s:4:\"file\";s:21:\"2014/06/oea_big_4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_4-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_4-1024x697.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:697;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8848,425,'_wp_attached_file','2014/06/oea_th_1.jpg'),(8849,425,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:264;s:4:\"file\";s:20:\"2014/06/oea_th_1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8850,426,'_wp_attached_file','2014/06/oea_th_2.jpg'),(8851,426,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:297;s:4:\"file\";s:20:\"2014/06/oea_th_2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8852,427,'_wp_attached_file','2014/06/oea_th_3.jpg'),(8853,427,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:296;s:4:\"file\";s:20:\"2014/06/oea_th_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_3-300x197.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:197;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8854,428,'_wp_attached_file','2014/06/oea_th_4.jpg'),(8855,428,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:307;s:4:\"file\";s:20:\"2014/06/oea_th_4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_4-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8904,429,'_edit_last','1'),(8905,429,'_edit_lock','1424465532:1'),(8924,429,'project_type','Web Application'),(8925,429,'languages','HTML5, Sass, Javascript, Browserify'),(8926,429,'role','Full-Stack Developer'),(8927,429,'link','http://notohighstakes.com/'),(8928,429,'company','Staplegun'),(8929,429,'company_link','http://staplegun.us/'),(8930,429,'thumbnail','428'),(8931,429,'image','424'),(8932,429,'caption','No To High Stakes - Top'),(8933,429,'thumbnail','427'),(8934,429,'image','423'),(8935,429,'caption','No To High Stakes - Bottom'),(8936,429,'thumbnail','426'),(8937,429,'image','422'),(8938,429,'caption','Find Your Representatives'),(8939,429,'thumbnail','425'),(8940,429,'image','421'),(8941,429,'caption','Facebook Your Rep'),(8946,381,'dsq_thread_id','3533827247'),(9315,30,'header_image','35'),(9316,30,'post_type','project'),(9317,66,'project_type','Web Application'),(9318,66,'languages','Ruby on Rails, Javascript, PostgreSQL'),(9319,66,'role','Developer'),(9320,66,'link',''),(9321,66,'company','Brightbit'),(9322,66,'company_link','http://brightbit.com/'),(9323,66,'thumbnail','90'),(9324,66,'image','78'),(9325,66,'caption','Home Page (No Icons)'),(9326,66,'thumbnail','91'),(9327,66,'image','79'),(9328,66,'caption','Index View (No Icons)'),(9329,66,'thumbnail','92'),(9330,66,'image','80'),(9331,66,'caption','Show View (No Icons)'),(9332,66,'thumbnail','93'),(9333,66,'image','81'),(9334,66,'caption','Edit View (No Icons)'),(9335,67,'project_type','Web Application'),(9336,67,'languages','Ruby on Rails, Javascript, PostgreSQL, E-Commerce (Stripe)'),(9337,67,'role','Back-End Developer - Team'),(9338,67,'link',''),(9339,67,'company','Brightbit'),(9340,67,'company_link','http://brightbit.com/'),(9341,67,'thumbnail','124'),(9342,67,'image','107'),(9343,67,'caption','Home Page'),(9344,67,'thumbnail','125'),(9345,67,'image','108'),(9346,67,'caption','Timeslots Index View'),(9347,67,'thumbnail','126'),(9348,67,'image','109'),(9349,67,'caption','New Booking View - Payments Handled via Stripe API'),(9350,438,'_wp_attached_file','2014/06/go_wiki_th.jpg'),(9351,438,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:850;s:6:\"height\";i:450;s:4:\"file\";s:22:\"2014/06/go_wiki_th.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-300x159.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:159;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9425,443,'_edit_last','2'),(9426,443,'_edit_lock','1430240325:2'),(9470,443,'_syntaxhighlighter_encoded','1'),(9489,459,'_edit_last','1'),(9490,459,'_edit_lock','1427819003:1'),(9492,460,'_wp_attached_file','2015/02/intervals_big_1.jpg'),(9493,460,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:254;s:4:\"file\";s:27:\"2015/02/intervals_big_1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_1-300x64.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:64;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"intervals_big_1-1024x217.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:217;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9494,461,'_wp_attached_file','2015/02/intervals_big_2.jpg'),(9495,461,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1156;s:6:\"height\";i:292;s:4:\"file\";s:27:\"2015/02/intervals_big_2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_2-300x76.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"intervals_big_2-1024x259.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:259;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9496,462,'_wp_attached_file','2015/02/intervals_big_3.jpg'),(9497,462,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:716;s:6:\"height\";i:176;s:4:\"file\";s:27:\"2015/02/intervals_big_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_3-300x74.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:74;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9498,463,'_wp_attached_file','2015/02/intervals_th_2.jpg'),(9499,463,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:800;s:6:\"height\";i:202;s:4:\"file\";s:26:\"2015/02/intervals_th_2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"intervals_th_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"intervals_th_2-300x76.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9500,464,'_wp_attached_file','2015/02/intervals_th_3.jpg'),(9501,464,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:147;s:4:\"file\";s:26:\"2015/02/intervals_th_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"intervals_th_3-150x147.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:147;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"intervals_th_3-300x74.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:74;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9526,443,'dsq_thread_id','3554000310'),(9530,466,'_edit_last','2'),(9531,466,'_edit_lock','1430240588:2'),(9589,469,'_edit_last','1'),(9590,469,'_edit_lock','1425688648:1'),(9593,469,'_oembed_07581c7489b26ab32c7829f2c88186cc','{{unknown}}'),(9624,479,'_wp_attached_file','2015/03/The-Societea.png'),(9625,479,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:566;s:6:\"height\";i:193;s:4:\"file\";s:24:\"2015/03/The-Societea.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"The-Societea-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"The-Societea-300x102.png\";s:5:\"width\";i:300;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9627,466,'dsq_thread_id','3563652563'),(9655,487,'_edit_last','1'),(9656,487,'_edit_lock','1427004719:1'),(9660,487,'_syntaxhighlighter_encoded','1'),(9676,487,'dsq_thread_id','3568537732'),(9687,499,'_menu_item_type','custom'),(9688,499,'_menu_item_menu_item_parent','0'),(9689,499,'_menu_item_object_id','499'),(9690,499,'_menu_item_object','custom'),(9691,499,'_menu_item_target',''),(9692,499,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(9693,499,'_menu_item_xfn',''),(9694,499,'_menu_item_url','http://beer.thesocietea.org'),(9718,469,'dsq_thread_id','3574191829'),(9933,504,'_edit_last','2'),(9934,504,'_edit_lock','1430074663:2'),(9935,504,'_syntaxhighlighter_encoded','1'),(9941,504,'dsq_thread_id','3595899285'),(9953,515,'_edit_last','1'),(9954,515,'_edit_lock','1427818160:1'),(9955,516,'_wp_attached_file','2015/03/resume-big-1.jpg'),(9956,516,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:818;s:4:\"file\";s:24:\"2015/03/resume-big-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-1-1024x698.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:698;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9957,517,'_wp_attached_file','2015/03/resume-big-2.jpg'),(9958,517,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:846;s:4:\"file\";s:24:\"2015/03/resume-big-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-2-300x212.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-2-1024x722.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:722;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9959,518,'_wp_attached_file','2015/03/resume-big-3.jpg'),(9960,518,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:844;s:4:\"file\";s:24:\"2015/03/resume-big-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-3-300x211.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-3-1024x720.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:720;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9961,519,'_wp_attached_file','2015/03/resume-big-4.jpg'),(9962,519,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:544;s:6:\"height\";i:800;s:4:\"file\";s:24:\"2015/03/resume-big-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-4-204x300.jpg\";s:5:\"width\";i:204;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9963,520,'_wp_attached_file','2015/03/resume-th-1.jpg'),(9964,520,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:273;s:4:\"file\";s:23:\"2015/03/resume-th-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9965,521,'_wp_attached_file','2015/03/resume-th-2.jpg'),(9966,521,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:282;s:4:\"file\";s:23:\"2015/03/resume-th-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-2-300x212.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9967,522,'_wp_attached_file','2015/03/resume-th-3.jpg'),(9968,522,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:281;s:4:\"file\";s:23:\"2015/03/resume-th-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-3-300x211.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9969,523,'_wp_attached_file','2015/03/resume-th-4.jpg'),(9970,523,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:441;s:4:\"file\";s:23:\"2015/03/resume-th-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-4-204x300.jpg\";s:5:\"width\";i:204;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10207,524,'_edit_last','2'),(10208,524,'_edit_lock','1430240542:2'),(10209,524,'_syntaxhighlighter_encoded','1'),(10244,524,'dsq_thread_id','3617070074'),(10749,544,'_wp_attached_file','2015/03/big-resumehaus1.jpg'),(10750,544,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:828;s:4:\"file\";s:27:\"2015/03/big-resumehaus1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"big-resumehaus1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"big-resumehaus1-300x207.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:207;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"big-resumehaus1-1024x707.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:707;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10751,545,'_wp_attached_file','2015/03/th-resumehaus1.jpg'),(10752,545,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:311;s:4:\"file\";s:26:\"2015/03/th-resumehaus1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"th-resumehaus1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"th-resumehaus1-300x207.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:207;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10753,515,'project_type','Web Application'),(10754,515,'languages','HTML5, CSS, Bootstrap, Craft CMS (PHP), Twig'),(10755,515,'role','Full-Stack Developer'),(10756,515,'link','http://resumehaus.com'),(10757,515,'company','Personal Project'),(10758,515,'company_link',''),(10759,515,'thumbnail','545'),(10760,515,'image','544'),(10761,515,'caption','Home Page'),(10762,515,'thumbnail','521'),(10763,515,'image','517'),(10764,515,'caption','Professional Experience & Skill Bars'),(10765,515,'thumbnail','522'),(10766,515,'image','518'),(10767,515,'caption','Multiple Theme Options'),(10768,515,'thumbnail','523'),(10769,515,'image','519'),(10770,515,'caption','Responsive Design'),(10771,459,'project_type','Custom Browser Extension / Web Server'),(10772,459,'languages','Userscripts, Javascript, Ruby (Sinatra), Browserify'),(10773,459,'role','Back-End Developer'),(10774,459,'link',''),(10775,459,'company','Staplegun'),(10776,459,'company_link','http://staplegun.us'),(10777,459,'thumbnail','460'),(10778,459,'image','460'),(10779,459,'caption','Custom Cross-Browser Ext.'),(10780,459,'thumbnail','463'),(10781,459,'image','463'),(10782,459,'caption','Client-Side: Custom Edits to Intervals Web Page'),(10783,459,'thumbnail','464'),(10784,459,'image','462'),(10785,459,'caption','Server-Side: Sinatra Web Server Logs'),(10787,4,'thumbnail','545'),(10788,4,'label','Resume Haus'),(10789,4,'url','http://resumehaus.com'),(10790,4,'thumbnail','257'),(10791,4,'label','OK Commerce'),(10792,4,'url','http://new.okcommerce.gov'),(10793,4,'thumbnail','428'),(10794,4,'label','OEA'),(10795,4,'url','http://notohighstakes.com/'),(10796,4,'thumbnail','341'),(10797,4,'label','ONIE'),(10798,4,'url','http://chooseonepercent.com/'),(10799,4,'thumbnail','217'),(10800,4,'label','77 Energy'),(10801,4,'url','http://77nrg.com'),(10802,4,'thumbnail','98'),(10803,4,'label','Enviro Systems'),(10804,4,'url','http://www.enviro-ok.com/'),(10805,4,'thumbnail','137'),(10806,4,'label','Total Environment'),(10807,4,'url','http://totalenvironmentinc.com/'),(10808,4,'thumbnail','94'),(10809,4,'label','Carnegie Chart'),(10810,4,'url','http://labs.thesocietea.org/carnegie-chart/'),(10811,546,'_wp_attached_file','2015/03/big-hydro1.jpg'),(10812,546,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:700;s:4:\"file\";s:22:\"2015/03/big-hydro1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro1-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro1-1024x597.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:597;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10813,547,'_wp_attached_file','2015/03/big-hydro2.jpg'),(10814,547,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:698;s:4:\"file\";s:22:\"2015/03/big-hydro2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro2-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro2-1024x596.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:596;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10815,548,'_wp_attached_file','2015/03/big-hydro3.jpg'),(10816,548,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:698;s:4:\"file\";s:22:\"2015/03/big-hydro3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro3-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro3-1024x596.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:596;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10817,549,'_wp_attached_file','2015/03/big-hydro4.jpg'),(10818,549,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:837;s:4:\"file\";s:22:\"2015/03/big-hydro4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro4-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro4-1024x714.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:714;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10819,550,'_wp_attached_file','2015/03/big-hydro5.jpg'),(10820,550,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:835;s:4:\"file\";s:22:\"2015/03/big-hydro5.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro5-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro5-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro5-1024x713.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:713;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10821,551,'_wp_attached_file','2015/03/big-hydro6.jpg'),(10822,551,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:835;s:4:\"file\";s:22:\"2015/03/big-hydro6.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro6-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro6-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro6-1024x713.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:713;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10823,552,'_wp_attached_file','2015/03/big-hydro7.jpg'),(10824,552,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:747;s:4:\"file\";s:22:\"2015/03/big-hydro7.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro7-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro7-300x187.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:187;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro7-1024x637.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:637;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10825,553,'_wp_attached_file','2015/03/big-hydro8.jpg'),(10826,553,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:633;s:6:\"height\";i:1000;s:4:\"file\";s:22:\"2015/03/big-hydro8.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro8-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro8-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10827,554,'_wp_attached_file','2015/03/th-hydro1.jpg'),(10828,554,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro1-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10829,555,'_wp_attached_file','2015/03/th-hydro2.jpg'),(10830,555,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro2-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10831,556,'_wp_attached_file','2015/03/th-hydro3.jpg'),(10832,556,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro3-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10833,557,'_wp_attached_file','2015/03/th-hydro4.jpg'),(10834,557,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:314;s:4:\"file\";s:21:\"2015/03/th-hydro4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro4-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10835,558,'_wp_attached_file','2015/03/th-hydro5.jpg'),(10836,558,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2015/03/th-hydro5.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro5-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro5-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10837,559,'_wp_attached_file','2015/03/th-hydro6.jpg'),(10838,559,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2015/03/th-hydro6.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro6-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro6-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10839,560,'_wp_attached_file','2015/03/th-hydro7.jpg'),(10840,560,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:280;s:4:\"file\";s:21:\"2015/03/th-hydro7.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro7-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro7-300x187.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:187;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10841,561,'_wp_attached_file','2015/03/th-hydro8.jpg'),(10842,561,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:631;s:4:\"file\";s:21:\"2015/03/th-hydro8.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro8-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro8-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10843,562,'_edit_last','2'),(10844,562,'_edit_lock','1427902239:2'),(10971,562,'project_type','Web Application'),(10972,562,'languages','Ruby on Rails, Angular JS, Hypermedia, Foundation, PostgreSQL, Mandrill, Inbound Emails, Heroku, Workers'),(10973,562,'role','Full-Stack Developer'),(10974,562,'link','http://hydro.stplgn.us'),(10975,562,'company','Staplegun'),(10976,562,'company_link','http://staplegun.us'),(10977,562,'thumbnail','554'),(10978,562,'image','546'),(10979,562,'caption','Login Screen. Authorization using Basic & Token Authentication according to HTTP 1.1 Spec'),(10980,562,'thumbnail','555'),(10981,562,'image','547'),(10982,562,'caption','Dashboard - main table using ngTable'),(10983,562,'thumbnail','556'),(10984,562,'image','548'),(10985,562,'caption','New Order screen using Foundation layouts'),(10986,562,'thumbnail','557'),(10987,562,'image','549'),(10988,562,'caption','Edit Order screen - only visible before submitting'),(10989,562,'thumbnail','558'),(10990,562,'image','550'),(10991,562,'caption','Order Show screen - Images will lightbox - Comments also created from inbound email responses'),(10992,562,'thumbnail','559'),(10993,562,'image','551'),(10994,562,'caption','Manage Organization. Using ng-select and pulling data from third-party Intervals API'),(10995,562,'thumbnail','560'),(10996,562,'image','552'),(10997,562,'caption','Admins can edit fields on a per-template basis anytime'),(10998,562,'thumbnail','561'),(10999,562,'image','553'),(11000,562,'caption','Responsive Design'),(11007,564,'_edit_last','2'),(11008,564,'_edit_lock','1430240552:2'),(11011,564,'_syntaxhighlighter_encoded','1'),(11293,13,'header_image','145'),(11294,13,'post_type',''),(11295,13,'category_title','Development'),(11296,13,'color','#00e7ad'),(11297,13,'skill','Ruby / Rails'),(11298,13,'percentage','98'),(11299,13,'skill','Angular.js'),(11300,13,'percentage','93'),(11301,13,'skill','Wordpress'),(11302,13,'percentage','92'),(11303,13,'skill','Ember.js'),(11304,13,'percentage','90'),(11305,13,'skill','Node.js'),(11306,13,'percentage','84'),(11307,13,'skill','Relational Databases'),(11308,13,'percentage','90'),(11309,13,'skill','NoSQL Databases'),(11310,13,'percentage','86'),(11311,13,'skill','PHP'),(11312,13,'percentage','80'),(11313,13,'skill','Java'),(11314,13,'percentage','70'),(11315,13,'skill','C / C++'),(11316,13,'percentage','70'),(11317,13,'skill','HTTP & REST APIs'),(11318,13,'percentage','95'),(11319,13,'skill','Go'),(11320,13,'percentage','60'),(11321,13,'category_title','Design'),(11322,13,'color','#146fe7'),(11323,13,'skill','HTML5'),(11324,13,'percentage','98'),(11325,13,'skill','CSS / Sass'),(11326,13,'percentage','96'),(11327,13,'skill','Javascript / jQuery'),(11328,13,'percentage','94'),(11329,13,'skill','Responsive Design'),(11330,13,'percentage','90'),(11331,13,'skill','D3.js'),(11332,13,'percentage','80'),(11333,13,'skill','Zurb Foundation'),(11334,13,'percentage','85'),(11335,13,'skill','Page & Image Optimization'),(11336,13,'percentage','94'),(11337,13,'skill','Browser Support (IE8+)'),(11338,13,'percentage','88'),(11339,13,'skill','Gimp'),(11340,13,'percentage','83'),(11341,13,'skill','SEO'),(11342,13,'percentage','80'),(11343,13,'skill','Accessibility'),(11344,13,'percentage','90'),(11345,13,'category_title','Dev Tools'),(11346,13,'color','#ff5e00'),(11347,13,'skill','Git'),(11348,13,'percentage','100'),(11349,13,'skill','Vim'),(11350,13,'percentage','98'),(11351,13,'skill','Shell'),(11352,13,'percentage','94'),(11353,13,'skill','Tmux'),(11354,13,'percentage','90'),(11355,13,'skill','Grunt.js'),(11356,13,'percentage','95'),(11357,13,'skill','Sass'),(11358,13,'percentage','94'),(11359,13,'skill','Coffeescript'),(11360,13,'percentage','90'),(11361,13,'skill','Browserify'),(11362,13,'percentage','85'),(11363,13,'skill','Haml / Slim'),(11364,13,'percentage','87'),(11365,13,'skill','Gtk+'),(11366,13,'percentage','84'),(11367,13,'skill','DNS'),(11368,13,'percentage','85'),(11369,13,'skill','Heroku'),(11370,13,'percentage','85'),(11581,589,'_wp_attached_file','2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png'),(11582,589,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1112;s:6:\"height\";i:446;s:4:\"file\";s:48:\"2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.03.28-PM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.03.28-PM-300x120.png\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\";s:5:\"width\";i:1024;s:6:\"height\";i:411;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(11583,589,'_wp_attachment_image_alt','ngrok'),(11586,593,'_wp_attached_file','2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png'),(11587,593,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:812;s:6:\"height\";i:368;s:4:\"file\";s:48:\"2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.19.45-PM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.19.45-PM-300x136.png\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(11588,593,'_wp_attachment_image_alt','ngrok logs'),(11688,16,'header_image','141'),(11689,16,'post_type','post'),(12429,607,'_edit_last','2'),(12430,607,'_edit_lock','1430240593:2'),(12601,261,'dsq_needs_sync','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=635 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (4,2,'2014-06-02 22:41:51','2014-06-02 22:41:51','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','publish','open','open','','home','','','2015-03-31 16:26:26','2015-03-31 16:26:26','',0,'http://localhost:8000/?page_id=4',0,'page','',0),(5,2,'2014-06-02 22:41:51','2014-06-02 22:41:51','','Home','','inherit','open','open','','4-revision-v1','','','2014-06-02 22:41:51','2014-06-02 22:41:51','',4,'http://localhost:8000/?p=5',0,'revision','',0),(6,2,'2014-06-03 03:57:47','2014-06-03 03:57:47','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','publish','open','open','','about','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',0,'http://localhost:8000/?page_id=6',0,'page','',1),(7,2,'2014-06-03 03:57:47','2014-06-03 03:57:47','','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 03:57:47','2014-06-03 03:57:47','',6,'http://localhost:8000/?p=7',0,'revision','',0),(8,2,'2014-06-03 04:30:00','2014-06-03 04:30:00','','Subpage','','publish','closed','closed','','subpage','','','2014-06-10 23:14:17','2014-06-10 23:14:17','',0,'http://localhost:8000/?post_type=cfs&#038;p=8',0,'cfs','',0),(9,2,'2014-06-03 04:30:22','2014-06-03 04:30:22','','beer-header','','inherit','open','open','','beer-header','','','2014-06-03 04:30:22','2014-06-03 04:30:22','',6,'http://thesocietea.org/wp-content/uploads/2014/06/beer-header.jpg',0,'attachment','image/jpeg',0),(13,2,'2014-06-03 04:35:26','2014-06-03 04:35:26','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups. I have spoken at high schools, universities, and local user groups in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 40 - 45 minutes.','Hire Me','','publish','open','open','','hire-me','','','2015-04-02 22:22:06','2015-04-02 22:22:06','',0,'http://localhost:8000/?page_id=13',0,'page','',0),(14,2,'2014-06-03 04:35:26','2014-06-03 04:35:26','','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-03 04:35:26','2014-06-03 04:35:26','',13,'http://localhost:8000/?p=14',0,'revision','',0),(16,2,'2014-06-03 04:35:37','2014-06-03 04:35:37','Below you\'ll find my blog posts. You can check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','publish','open','closed','','blog','','','2015-04-15 22:12:16','2015-04-15 22:12:16','',0,'http://localhost:8000/?page_id=16',0,'page','',0),(17,2,'2014-06-03 04:35:37','2014-06-03 04:35:37','','Blog','','inherit','open','open','','16-revision-v1','','','2014-06-03 04:35:37','2014-06-03 04:35:37','',16,'http://localhost:8000/?p=17',0,'revision','',0),(25,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','25','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=25',1,'nav_menu_item','',0),(26,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','26','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=26',2,'nav_menu_item','',0),(27,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','27','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=27',7,'nav_menu_item','',0),(30,2,'2014-06-03 04:44:37','2014-06-03 04:44:37','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','publish','open','open','','projects','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',0,'http://localhost:8000/?page_id=30',0,'page','',1),(31,2,'2014-06-03 04:44:37','2014-06-03 04:44:37','','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-03 04:44:37','2014-06-03 04:44:37','',30,'http://localhost:8000/?p=31',0,'revision','',0),(32,2,'2014-06-03 04:44:54','2014-06-03 04:44:54',' ','','','publish','open','open','','32','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=32',3,'nav_menu_item','',0),(33,2,'2014-06-03 04:46:17','2014-06-03 04:46:17','<p style=\"color: #000000;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus luctus libero vel laoreet ornare. Vestibulum non porttitor eros. Curabitur nulla nulla, eleifend in mi ac, accumsan sodales est. Nulla et orci nec massa rhoncus ultrices. Praesent quis arcu et diam euismod consectetur vitae sed sapien. Suspendisse pulvinar tempor gravida. Cras urna felis, viverra aliquam magna ac, imperdiet sodales leo. Proin cursus condimentum mi eu lacinia. Aenean quis dolor volutpat, vehicula ante in, malesuada augue. Nunc purus purus, vulputate vitae ornare vitae, pellentesque nec nisl. Duis eu accumsan lacus, eu lobortis leo. Donec vel mi lacus. Nunc risus risus, ullamcorper sed mi vel, sodales viverra leo. Pellentesque tincidunt at tellus id dictum. Vivamus euismod tempus magna a venenatis. Nunc at sagittis metus, eu mollis urna.</p>\r\n<p style=\"color: #000000;\">Proin scelerisque at odio vitae porttitor. Aenean purus lorem, consequat sit amet magna et, tristique condimentum augue. Ut convallis dapibus volutpat. Sed interdum, velit eu feugiat euismod, purus nulla tincidunt lorem, at molestie arcu libero ac leo. Nam ultricies mauris neque, et tincidunt magna tincidunt eu. Morbi id elementum massa. Donec iaculis magna purus, vel scelerisque sem molestie nec. Pellentesque ipsum purus, posuere pretium rhoncus ac, lacinia sed enim. Morbi non feugiat dolor. Fusce bibendum ullamcorper urna, non volutpat neque pharetra ac. Morbi ut ipsum non lacus pharetra luctus suscipit eu diam. Curabitur sodales vitae mi ac feugiat. Nulla egestas vel enim eu dictum.</p>\r\n<p style=\"color: #000000;\">Integer urna leo, dapibus elementum malesuada ut, commodo id risus. Donec sed sem sit amet libero gravida bibendum. Nullam a faucibus velit. In viverra eu ante id fringilla. Fusce vulputate suscipit leo rhoncus molestie. Pellentesque non libero id velit cursus placerat. Maecenas ac neque mauris. Etiam faucibus lectus ante. Nam adipiscing tristique fermentum. Aenean dolor dui, ultrices sed enim sed, pretium tempus purus. In luctus massa neque, et luctus metus accumsan a. Sed sed commodo ante. Vestibulum tempus cursus tincidunt. Suspendisse non lorem sit amet lectus interdum gravida.</p>','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 04:46:17','2014-06-03 04:46:17','',6,'http://localhost:8000/?p=33',0,'revision','',0),(34,2,'2014-06-06 05:09:43','2014-06-06 05:09:43','','About','','inherit','open','open','','6-revision-v1','','','2014-06-06 05:09:43','2014-06-06 05:09:43','',6,'http://localhost:8000/?p=34',0,'revision','',0),(35,2,'2014-06-06 18:05:54','2014-06-06 18:05:54','','stockvault--atlantic-sunset135250','','inherit','open','open','','stockvault-atlantic-sunset135250','','','2014-06-06 18:05:54','2014-06-06 18:05:54','',30,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-atlantic-sunset135250.jpg',0,'attachment','image/jpeg',0),(36,2,'2014-06-06 18:11:31','2014-06-06 18:11:31','Check out some of the projects I\'ve worked on recently:','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-06 18:11:31','2014-06-06 18:11:31','',30,'http://localhost:8000/?p=36',0,'revision','',0),(37,2,'2014-06-06 18:14:38','2014-06-06 18:14:38','','Project Fields','','publish','closed','closed','','project-screenshots','','','2014-06-06 21:53:44','2014-06-06 21:53:44','',0,'http://localhost:8000/?post_type=cfs&#038;p=37',0,'cfs','',0),(38,2,'2014-06-06 18:15:59','2014-06-06 18:15:59','This is Total Environment Inc.','Total Environment Inc.','','publish','closed','closed','','total-environment-inc','','','2014-08-18 22:11:45','2014-08-18 22:11:45','',0,'http://localhost:8000/?post_type=project&#038;p=38',12,'project','',0),(39,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-77nrg','','inherit','open','open','','th-77nrg','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-77nrg.png',0,'attachment','image/png',0),(40,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-baton','','inherit','open','open','','th-baton','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton.png',0,'attachment','image/png',0),(41,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-carnegie-chart','','inherit','open','open','','th-carnegie-chart','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-carnegie-chart.png',0,'attachment','image/png',0),(42,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-enviro','','inherit','open','open','','th-enviro','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-enviro.png',0,'attachment','image/png',0),(43,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-soundingboard','','inherit','open','open','','th-soundingboard','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-soundingboard.png',0,'attachment','image/png',0),(44,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-chart','','inherit','open','open','','th-tea-chart','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-chart.png',0,'attachment','image/png',0),(45,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-timers','','inherit','open','open','','th-tea-timers','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-timers.png',0,'attachment','image/png',0),(46,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tle','','inherit','open','open','','th-tle','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle.png',0,'attachment','image/png',0),(47,2,'2014-06-06 21:03:45','2014-06-06 21:03:45','','big-77-1','','inherit','open','open','','big-77-1','','','2014-06-06 21:03:45','2014-06-06 21:03:45','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-1.jpg',0,'attachment','image/jpeg',0),(48,2,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-2','','inherit','open','open','','big-77-2','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-2.jpg',0,'attachment','image/jpeg',0),(49,2,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-3','','inherit','open','open','','big-77-3','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-3.jpg',0,'attachment','image/jpeg',0),(50,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-77-4','','inherit','open','open','','big-77-4','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-4.jpg',0,'attachment','image/jpeg',0),(51,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-1','','inherit','open','open','','big-tle-1','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-1.jpg',0,'attachment','image/jpeg',0),(52,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-2','','inherit','open','open','','big-tle-2','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-2.jpg',0,'attachment','image/jpeg',0),(53,2,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-3','','inherit','open','open','','big-tle-3','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-3.jpg',0,'attachment','image/jpeg',0),(54,2,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-4','','inherit','open','open','','big-tle-4','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-4.jpg',0,'attachment','image/jpeg',0),(55,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-1','','inherit','open','open','','th-77-1','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-1.jpg',0,'attachment','image/jpeg',0),(56,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-2','','inherit','open','open','','th-77-2','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-2.jpg',0,'attachment','image/jpeg',0),(57,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-3','','inherit','open','open','','th-77-3','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-3.jpg',0,'attachment','image/jpeg',0),(58,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-77-4','','inherit','open','open','','th-77-4','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-4.jpg',0,'attachment','image/jpeg',0),(60,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-2','','inherit','open','open','','th-tle-2','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-2.jpg',0,'attachment','image/jpeg',0),(61,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-3','','inherit','open','open','','th-tle-3','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-3.jpg',0,'attachment','image/jpeg',0),(62,2,'2014-06-06 21:04:06','2014-06-06 21:04:06','','th-tle-4','','inherit','open','open','','th-tle-4','','','2014-06-06 21:04:06','2014-06-06 21:04:06','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-4.jpg',0,'attachment','image/jpeg',0),(63,2,'2014-06-06 21:10:11','2014-06-06 21:10:11','This is 77 Energy','77 Energy','','publish','closed','closed','','77-energy','','','2014-08-18 22:10:40','2014-08-18 22:10:40','',0,'http://localhost:8000/?post_type=project&#038;p=63',4,'project','',0),(64,2,'2014-06-08 03:04:15','2014-06-08 03:04:15','','Enviro Systems','','publish','closed','closed','','enviro-systems','','','2014-08-18 22:10:49','2014-08-18 22:10:49','',0,'http://localhost:8000/?post_type=project&#038;p=64',9,'project','',0),(65,2,'2014-06-08 03:12:01','2014-06-08 03:12:01','','Kikuchat 2.0','','publish','closed','closed','','kikuchat-2-0','','','2014-10-05 21:11:33','2014-10-05 21:11:33','',0,'http://localhost:8000/?post_type=project&#038;p=65',7,'project','',0),(66,2,'2014-06-08 03:13:44','2014-06-08 03:13:44','','Baton','','publish','closed','closed','','baton','','','2015-02-25 14:29:13','2015-02-25 14:29:13','',0,'http://localhost:8000/?post_type=project&#038;p=66',11,'project','',0),(67,2,'2014-06-08 03:15:11','2014-06-08 03:15:11','','Soundingboard','','publish','closed','closed','','soundingboard','','','2015-02-25 14:29:33','2015-02-25 14:29:33','',0,'http://localhost:8000/?post_type=project&#038;p=67',13,'project','',0),(68,2,'2014-06-08 03:18:14','2014-06-08 03:18:14','','Markdown Checkboxes','','publish','closed','closed','','markdown-checkboxes','','','2014-08-18 22:11:30','2014-08-18 22:11:30','',0,'http://localhost:8000/?post_type=project&#038;p=68',8,'project','',0),(72,2,'2014-06-08 04:08:14','2014-06-08 04:08:14','','big-77-responsive','','inherit','open','open','','big-77-responsive','','','2014-06-08 04:08:14','2014-06-08 04:08:14','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(73,2,'2014-06-08 04:08:15','2014-06-08 04:08:15','','big-es-responsive','','inherit','open','open','','big-es-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-responsive.jpg',0,'attachment','image/jpeg',0),(74,2,'2014-06-08 04:08:15','2014-06-08 04:08:15','','th-77-responsive','','inherit','open','open','','th-77-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(76,2,'2014-06-08 05:59:32','2014-06-08 05:59:32','','big-tle-responsive','','inherit','open','open','','big-tle-responsive','','','2014-06-08 05:59:32','2014-06-08 05:59:32','',38,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-responsive.jpg',0,'attachment','image/jpeg',0),(78,2,'2014-06-08 06:09:38','2014-06-08 06:09:38','','big-bt-1','','inherit','open','open','','big-bt-1','','','2014-06-08 06:09:38','2014-06-08 06:09:38','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-1.jpg',0,'attachment','image/jpeg',0),(79,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-2','','inherit','open','open','','big-bt-2','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-2.jpg',0,'attachment','image/jpeg',0),(80,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-3','','inherit','open','open','','big-bt-3','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-3.jpg',0,'attachment','image/jpeg',0),(81,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-4','','inherit','open','open','','big-bt-4','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-4.jpg',0,'attachment','image/jpeg',0),(82,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-cc-1','','inherit','open','open','','big-cc-1','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-1.jpg',0,'attachment','image/jpeg',0),(83,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-2','','inherit','open','open','','big-cc-2','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-2.jpg',0,'attachment','image/jpeg',0),(84,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-3','','inherit','open','open','','big-cc-3','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-3.jpg',0,'attachment','image/jpeg',0),(85,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-responsive','','inherit','open','open','','big-cc-responsive','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-responsive.jpg',0,'attachment','image/jpeg',0),(86,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-es-1','','inherit','open','open','','big-es-1','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-1.jpg',0,'attachment','image/jpeg',0),(87,2,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-2','','inherit','open','open','','big-es-2','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-2.jpg',0,'attachment','image/jpeg',0),(88,2,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-3','','inherit','open','open','','big-es-3','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-3.jpg',0,'attachment','image/jpeg',0),(89,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-baton','','inherit','open','open','','th-baton-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton1.png',0,'attachment','image/png',0),(90,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-1','','inherit','open','open','','th-bt-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-1.jpg',0,'attachment','image/jpeg',0),(91,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-2','','inherit','open','open','','th-bt-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-2.jpg',0,'attachment','image/jpeg',0),(92,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-3','','inherit','open','open','','th-bt-3','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-3.jpg',0,'attachment','image/jpeg',0),(93,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-4','','inherit','open','open','','th-bt-4','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-4.jpg',0,'attachment','image/jpeg',0),(94,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-cc-1','','inherit','open','open','','th-cc-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-1.jpg',0,'attachment','image/jpeg',0),(95,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-2','','inherit','open','open','','th-cc-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-2.jpg',0,'attachment','image/jpeg',0),(96,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-3','','inherit','open','open','','th-cc-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-3.jpg',0,'attachment','image/jpeg',0),(98,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-1','','inherit','open','open','','th-es-1','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-1.jpg',0,'attachment','image/jpeg',0),(99,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-2','','inherit','open','open','','th-es-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-2.jpg',0,'attachment','image/jpeg',0),(100,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-3','','inherit','open','open','','th-es-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-3.jpg',0,'attachment','image/jpeg',0),(101,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-1','','inherit','open','open','','big-kk-1','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-1.jpg',0,'attachment','image/jpeg',0),(102,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-2','','inherit','open','open','','big-kk-2','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-2.jpg',0,'attachment','image/jpeg',0),(103,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-3','','inherit','open','open','','big-kk-3','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-3.jpg',0,'attachment','image/jpeg',0),(104,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-4','','inherit','open','open','','big-kk-4','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-4.jpg',0,'attachment','image/jpeg',0),(105,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-1','','inherit','open','open','','big-mc-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-1.jpg',0,'attachment','image/jpeg',0),(106,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-2','','inherit','open','open','','big-mc-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-2.jpg',0,'attachment','image/jpeg',0),(107,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-1','','inherit','open','open','','big-sb-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-1.jpg',0,'attachment','image/jpeg',0),(108,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-2','','inherit','open','open','','big-sb-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-2.jpg',0,'attachment','image/jpeg',0),(109,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-sb-3','','inherit','open','open','','big-sb-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-3.jpg',0,'attachment','image/jpeg',0),(110,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-1','','inherit','open','open','','big-tc-1','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-1.jpg',0,'attachment','image/jpeg',0),(111,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-2','','inherit','open','open','','big-tc-2','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-2.jpg',0,'attachment','image/jpeg',0),(112,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-3','','inherit','open','open','','big-tc-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-3.jpg',0,'attachment','image/jpeg',0),(113,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tc-responsive','','inherit','open','open','','big-tc-responsive','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-responsive.jpg',0,'attachment','image/jpeg',0),(114,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-1','','inherit','open','open','','big-tt-1','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-1.jpg',0,'attachment','image/jpeg',0),(115,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-2','','inherit','open','open','','big-tt-2','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-2.jpg',0,'attachment','image/jpeg',0),(116,2,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-3','','inherit','open','open','','big-tt-3','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-3.jpg',0,'attachment','image/jpeg',0),(117,2,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-responsive','','inherit','open','open','','big-tt-responsive','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-responsive.jpg',0,'attachment','image/jpeg',0),(118,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-1','','inherit','open','open','','th-kk-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-1.jpg',0,'attachment','image/jpeg',0),(119,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-2','','inherit','open','open','','th-kk-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-2.jpg',0,'attachment','image/jpeg',0),(120,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-3','','inherit','open','open','','th-kk-3','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-3.jpg',0,'attachment','image/jpeg',0),(121,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-4','','inherit','open','open','','th-kk-4','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-4.jpg',0,'attachment','image/jpeg',0),(122,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-1','','inherit','open','open','','th-mc-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-1.jpg',0,'attachment','image/jpeg',0),(123,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-2','','inherit','open','open','','th-mc-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-2.jpg',0,'attachment','image/jpeg',0),(124,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-1','','inherit','open','open','','th-sb-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-1.jpg',0,'attachment','image/jpeg',0),(125,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-2','','inherit','open','open','','th-sb-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-2.jpg',0,'attachment','image/jpeg',0),(126,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-3','','inherit','open','open','','th-sb-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-3.jpg',0,'attachment','image/jpeg',0),(127,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-1','','inherit','open','open','','th-tc-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-1.jpg',0,'attachment','image/jpeg',0),(128,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-2','','inherit','open','open','','th-tc-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-2.jpg',0,'attachment','image/jpeg',0),(129,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-3','','inherit','open','open','','th-tc-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-3.jpg',0,'attachment','image/jpeg',0),(130,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-responsive','','inherit','open','open','','th-tc-responsive','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-responsive.jpg',0,'attachment','image/jpeg',0),(131,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-1','','inherit','open','open','','th-tt-1','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-1.jpg',0,'attachment','image/jpeg',0),(132,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-2','','inherit','open','open','','th-tt-2','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-2.jpg',0,'attachment','image/jpeg',0),(133,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-3','','inherit','open','open','','th-tt-3','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-3.jpg',0,'attachment','image/jpeg',0),(134,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-responsive','','inherit','open','open','','th-tt-responsive','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-responsive.jpg',0,'attachment','image/jpeg',0),(135,2,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-cc-responsive','','inherit','open','open','','th-cc-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-responsive.jpg',0,'attachment','image/jpeg',0),(136,2,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-es-responsive','','inherit','open','open','','th-es-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-responsive.jpg',0,'attachment','image/jpeg',0),(137,2,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-1','','inherit','open','open','','th-tle-1','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-1.jpg',0,'attachment','image/jpeg',0),(138,2,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-responsive','','inherit','open','open','','th-tle-responsive','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-responsive.jpg',0,'attachment','image/jpeg',0),(139,2,'2014-06-09 01:10:49','2014-06-09 01:10:49','','Home Page Projects','','publish','closed','closed','','home-page-projects','','','2014-06-09 01:25:41','2014-06-09 01:25:41','',0,'http://localhost:8000/?post_type=cfs&#038;p=139',0,'cfs','',0),(140,2,'2014-06-09 22:27:46','2014-06-09 22:27:46','','stockvault-dramatic-landscape106482','','inherit','open','open','','stockvault-dramatic-landscape106482','','','2014-06-09 22:27:46','2014-06-09 22:27:46','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-dramatic-landscape106482.jpg',0,'attachment','image/jpeg',0),(141,2,'2014-06-09 22:32:04','2014-06-09 22:32:04','','stockvault-path-in-nature124348','','inherit','open','open','','stockvault-path-in-nature124348','','','2014-06-09 22:32:04','2014-06-09 22:32:04','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-path-in-nature124348.jpg',0,'attachment','image/jpeg',0),(142,2,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','publish','open','open','','where-i-buy-tea','','','2015-04-01 15:30:04','2015-04-01 15:30:04','',0,'http://localhost:8000/?p=142',0,'post','',1),(143,2,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing &lt;i&gt;exactly&lt;/i&gt; when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-09 22:58:48','2014-06-09 22:58:48','',142,'http://localhost:8000/?p=143',0,'revision','',0),(144,2,'2014-06-10 01:59:45','2014-06-10 01:59:45','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-10 01:59:45','2014-06-10 01:59:45','',142,'http://localhost:8000/?p=144',0,'revision','',0),(145,2,'2014-06-10 02:32:09','2014-06-10 02:32:09','','stockvault-cabot-trail---hdr133670','','inherit','open','open','','stockvault-cabot-trail-hdr133670','','','2014-06-10 02:32:09','2014-06-10 02:32:09','',13,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-cabot-trail-hdr133670.jpg',0,'attachment','image/jpeg',0),(146,2,'2014-06-10 02:41:57','2014-06-10 02:41:57','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need.\n\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools, and have a base outli','Hire Me','','inherit','open','open','','13-autosave-v1','','','2014-06-10 02:41:57','2014-06-10 02:41:57','',13,'http://localhost:8000/?p=146',0,'revision','',0),(147,2,'2014-06-10 02:34:57','2014-06-10 02:34:57','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then you\'ve found your guy.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:34:57','2014-06-10 02:34:57','',13,'http://localhost:8000/?p=147',0,'revision','',0),(148,2,'2014-06-10 02:43:56','2014-06-10 02:43:56','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> as well.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:43:56','2014-06-10 02:43:56','',13,'http://localhost:8000/?p=148',0,'revision','',0),(149,2,'2014-06-10 02:47:46','2014-06-10 02:47:46','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:47:46','2014-06-10 02:47:46','',13,'http://localhost:8000/?p=149',0,'revision','',0),(150,2,'2014-06-10 02:50:33','2014-06-10 02:50:33','','Skills','','publish','closed','closed','','skills','','','2014-06-10 03:07:12','2014-06-10 03:07:12','',0,'http://localhost:8000/?post_type=cfs&#038;p=150',0,'cfs','',0),(151,2,'2014-06-10 04:18:26','2014-06-10 04:18:26','','Resume','','publish','open','open','','resume','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=151',5,'nav_menu_item','',0),(154,2,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','publish','open','open','','vim-as-your-editor','','\nhttp://thesocietea.org/2014/07/how-to-learn-vim/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=154',0,'post','',1),(155,2,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-06-11 18:12:41','2014-06-11 18:12:41','',154,'http://thesocietea.org/2014/06/154-revision-v1/',0,'revision','',0),(156,2,'2014-06-17 02:42:59','2014-06-17 02:42:59','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-17 02:42:59','2014-06-17 02:42:59','',13,'http://thesocietea.org/2014/06/13-revision-v1/',0,'revision','',0),(158,2,'2014-06-19 03:07:34','2014-06-19 03:07:34','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','publish','open','open','','what-this-site-runs-on-part-1','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=158',0,'post','',4),(159,2,'2014-06-18 23:20:28','2014-06-18 23:20:28','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:20:28','2014-06-18 23:20:28','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(160,2,'2014-06-18 23:46:00','2014-06-18 23:46:00','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS\r\n\r\n<strong>Slight speed boost</strong> - Since the site now interacts with a database, it\'s certainly not faster than a purely static page being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local du','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:46:00','2014-06-18 23:46:00','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(161,2,'2014-06-19 02:57:46','2014-06-19 02:57:46','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial on a new','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 02:57:46','2014-06-19 02:57:46','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(162,2,'2014-06-19 03:00:55','2014-06-19 03:00:55','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:00:55','2014-06-19 03:00:55','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(163,2,'2014-06-19 03:01:24','2014-06-19 03:01:24','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:01:24','2014-06-19 03:01:24','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(164,2,'2014-06-19 03:06:54','2014-06-19 03:06:54','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:06:54','2014-06-19 03:06:54','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(165,2,'2014-06-19 03:13:57','2014-06-19 03:13:57','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:13:57','2014-06-19 03:13:57','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(167,2,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','publish','open','open','','what-this-site-runs-on-part-2','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\nhttp://thesocietea.org/about/\nhttp://thesocietea.org/projects/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=167',0,'post','',0),(168,2,'2014-06-30 17:57:14','2014-06-30 17:57:14','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS options such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and cleaffixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 17:57:14','2014-06-30 17:57:14','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(169,2,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related to specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:11:26','2014-06-30 18:11:26','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(170,2,'2014-06-30 18:15:25','2014-06-30 18:15:25','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:15:25','2014-06-30 18:15:25','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(172,2,'2014-07-11 02:03:02','2014-07-11 02:03:02','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','publish','open','open','','developing-for-accessibility','','\nhttp://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=172',0,'post','',0),(173,2,'2014-07-11 01:42:00','2014-07-11 01:42:00','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"color: #444444;\">[code language=\"html\"]</span><br style=\"color: #444444;\" />&lt;img src=\"some-source\" alt=\"A cool image of a penguin. Just chillin.\" /&gt;<br style=\"color: #444444;\" /><span style=\"color: #444444;\">[/code]</span>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:42:00','2014-07-11 01:42:00','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(174,2,'2014-07-11 01:51:21','2014-07-11 01:51:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code language=\"html\"]&lt;/span&gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&amp;lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&amp;gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&lt;span style=&quot;color: #444444;&quot;&gt;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:21','2014-07-11 01:51:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(175,2,'2014-07-11 01:51:52','2014-07-11 01:51:52','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:52','2014-07-11 01:51:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(176,2,'2014-07-11 01:54:15','2014-07-11 01:54:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[php]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/php]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:54:15','2014-07-11 01:54:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(177,2,'2014-07-11 01:55:01','2014-07-11 01:55:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:01','2014-07-11 01:55:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(178,2,'2014-07-11 01:55:23','2014-07-11 01:55:23','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:23','2014-07-11 01:55:23','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(179,2,'2014-07-11 01:57:09','2014-07-11 01:57:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:57:09','2014-07-11 01:57:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(180,2,'2014-07-11 02:02:38','2014-07-11 02:02:38','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]your code here[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:38','2014-07-11 02:02:38','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(181,2,'2014-07-11 02:02:53','2014-07-11 02:02:53','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:53','2014-07-11 02:02:53','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(182,2,'2014-07-11 02:03:42','2014-07-11 02:03:42','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:03:42','2014-07-11 02:03:42','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(183,2,'2014-07-11 02:07:34','2014-07-11 02:07:34','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n<pre>```javascript\r\nvar test;\r\n```</pre>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:34','2014-07-11 02:07:34','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(184,2,'2014-07-11 02:07:49','2014-07-11 02:07:49','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]`\r\nvar test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:49','2014-07-11 02:07:49','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(185,2,'2014-07-11 02:09:52','2014-07-11 02:09:52','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</h3>\n\n<pre>```javascript\nvar test;\n```</pre>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:09:52','2014-07-11 02:09:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(186,2,'2014-07-11 02:10:12','2014-07-11 02:10:12','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>javascript\nvar test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:12','2014-07-11 02:10:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(187,2,'2014-07-11 02:10:24','2014-07-11 02:10:24','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>var test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:24','2014-07-11 02:10:24','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(188,2,'2014-07-11 02:11:36','2014-07-11 02:11:36','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<code>var test;</code>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:11:36','2014-07-11 02:11:36','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(189,2,'2014-07-11 18:14:59','2014-07-11 18:14:59','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:14:59','2014-07-11 18:14:59','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(190,2,'2014-07-11 18:22:54','2014-07-11 18:22:54','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:22:54','2014-07-11 18:22:54','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(191,2,'2014-07-11 18:23:55','2014-07-11 18:23:55','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:23:55','2014-07-11 18:23:55','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(192,2,'2014-07-11 18:24:15','2014-07-11 18:24:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:24:15','2014-07-11 18:24:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(193,2,'2014-07-11 18:25:09','2014-07-11 18:25:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n&nbsp;\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:25:09','2014-07-11 18:25:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(194,2,'2014-07-11 18:27:45','2014-07-11 18:27:45','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:27:45','2014-07-11 18:27:45','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(195,2,'2014-07-11 20:58:21','2014-07-11 20:58:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]&lt;/pre&gt;\r\n&lt;pre&gt;&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:58:21','2014-07-11 20:58:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(196,2,'2014-07-11 20:59:13','2014-07-11 20:59:13','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:13','2014-07-11 20:59:13','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(197,2,'2014-07-11 20:59:48','2014-07-11 20:59:48','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:48','2014-07-11 20:59:48','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(198,2,'2014-07-11 21:19:01','2014-07-11 21:19:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:19:01','2014-07-11 21:19:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(199,2,'2014-07-11 21:21:26','2014-07-11 21:21:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:26','2014-07-11 21:21:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(200,2,'2014-07-11 21:21:46','2014-07-11 21:21:46','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:46','2014-07-11 21:21:46','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(201,2,'2014-07-11 21:22:12','2014-07-11 21:22:12','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to in the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:12','2014-07-11 21:22:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(202,2,'2014-07-11 21:22:26','2014-07-11 21:22:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:26','2014-07-11 21:22:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(203,2,'2014-07-11 21:28:37','2014-07-11 21:28:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding for the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:28:37','2014-07-11 21:28:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(204,2,'2014-07-11 21:34:50','2014-07-11 21:34:50','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:34:50','2014-07-11 21:34:50','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(205,2,'2014-07-11 21:35:37','2014-07-11 21:35:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:35:37','2014-07-11 21:35:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(206,2,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-1','','inherit','open','open','','big-json-1','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-1.jpg',0,'attachment','image/jpeg',0),(207,2,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-2','','inherit','open','open','','big-json-2','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-2.jpg',0,'attachment','image/jpeg',0),(208,2,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-3','','inherit','open','open','','big-json-3','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-3.jpg',0,'attachment','image/jpeg',0),(209,2,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-4','','inherit','open','open','','big-json-4','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-4.jpg',0,'attachment','image/jpeg',0),(210,2,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-1','','inherit','open','open','','th-json-1','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-1.jpg',0,'attachment','image/jpeg',0),(211,2,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-2','','inherit','open','open','','th-json-2','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-2.jpg',0,'attachment','image/jpeg',0),(212,2,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-3','','inherit','open','open','','th-json-3','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-3.jpg',0,'attachment','image/jpeg',0),(213,2,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-4','','inherit','open','open','','th-json-4','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-4.jpg',0,'attachment','image/jpeg',0),(214,2,'2014-07-14 22:30:01','2014-07-14 22:30:01','','JSON API Websocket Wrapper','','publish','closed','closed','','json-api-websocket-wrapper','','','2014-08-18 22:11:18','2014-08-18 22:11:18','',0,'http://thesocietea.org/?post_type=project&#038;p=214',6,'project','',0),(215,2,'2014-07-14 22:36:58','2014-07-14 22:36:58','','big-77-1','','inherit','open','open','','big-77-1-2','','','2014-07-14 22:36:58','2014-07-14 22:36:58','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-1.jpg',0,'attachment','image/jpeg',0),(216,2,'2014-07-14 22:36:59','2014-07-14 22:36:59','','big-77-responsive','','inherit','open','open','','big-77-responsive-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(217,2,'2014-07-14 22:36:59','2014-07-14 22:36:59','','th-77-1','','inherit','open','open','','th-77-1-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-1.jpg',0,'attachment','image/jpeg',0),(218,2,'2014-07-14 22:37:00','2014-07-14 22:37:00','','th-77-responsive','','inherit','open','open','','th-77-responsive-2','','','2014-07-14 22:37:00','2014-07-14 22:37:00','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(220,2,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','publish','open','open','','how-to-learn-vim','','\nhttp://thesocietea.org/2014/06/vim-as-your-editor/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=220',0,'post','',1),(221,2,'2014-07-24 17:40:24','2014-07-24 17:40:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:40:24','2014-07-24 17:40:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(222,2,'2014-07-24 17:45:13','2014-07-24 17:45:13','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:45:13','2014-07-24 17:45:13','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(223,2,'2014-07-24 17:54:44','2014-07-24 17:54:44','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n<h2>Plugins</h2>\r\nThe Vim community is very, very active and is completely focused on productivity.','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:54:44','2014-07-24 17:54:44','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(224,2,'2014-07-24 18:00:17','2014-07-24 18:00:17','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:00:17','2014-07-24 18:00:17','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(225,2,'2014-07-24 18:08:45','2014-07-24 18:08:45','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:08:45','2014-07-24 18:08:45','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(226,2,'2014-07-24 18:11:37','2014-07-24 18:11:37','','vim_tutor','','inherit','open','open','','vim_tutor','','','2014-07-24 18:11:37','2014-07-24 18:11:37','',220,'http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg',0,'attachment','image/jpeg',0),(227,2,'2014-07-24 18:11:51','2014-07-24 18:11:51','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignright wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:11:51','2014-07-24 18:11:51','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(228,2,'2014-07-24 18:12:24','2014-07-24 18:12:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:12:24','2014-07-24 18:12:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(229,2,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:18:14','2014-07-24 18:18:14','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(230,2,'2014-07-28 01:53:58','2014-07-28 01:53:58','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-autosave-v1','','','2014-07-28 01:53:58','2014-07-28 01:53:58','',16,'http://thesocietea.org/2014/07/16-autosave-v1/',0,'revision','',0),(231,2,'2014-07-28 01:55:02','2014-07-28 01:55:02','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-revision-v1','','','2014-07-28 01:55:02','2014-07-28 01:55:02','',16,'http://thesocietea.org/2014/07/16-revision-v1/',0,'revision','',0),(233,2,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','publish','open','open','','getting-familiar-with-bower-and-browserify','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=233',0,'post','',1),(234,2,'2014-08-14 22:47:24','2014-08-14 22:47:24','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple \r\n[code]bower install &lt;package&gt;[/code]\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:24','2014-08-14 22:47:24','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(235,2,'2014-08-14 22:47:28','2014-08-14 22:47:28','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:28','2014-08-14 22:47:28','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(236,2,'2014-08-14 22:52:44','2014-08-14 22:52:44','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n<pre>[<span style=\"color: #444444;\">sourcecode language=\"plain\"</span>]bower install &lt;package&gt;[/sourcecode]</pre>\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:44','2014-08-14 22:52:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(237,2,'2014-08-14 22:52:58','2014-08-14 22:52:58','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;plain&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:58','2014-08-14 22:52:58','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(238,2,'2014-08-14 22:53:11','2014-08-14 22:53:11','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;bash&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:11','2014-08-14 22:53:11','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(239,2,'2014-08-14 22:53:17','2014-08-14 22:53:17','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;php&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:17','2014-08-14 22:53:17','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(240,2,'2014-08-14 22:53:33','2014-08-14 22:53:33','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:33','2014-08-14 22:53:33','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(241,2,'2014-08-14 23:00:23','2014-08-14 23:00:23','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}&lt;/pre&gt;\r\n&lt;pre&gt;[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:23','2014-08-14 23:00:23','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(242,2,'2014-08-14 23:00:41','2014-08-14 23:00:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]{&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:41','2014-08-14 23:00:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(243,2,'2014-08-14 23:01:06','2014-08-14 23:01:06','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:06','2014-08-14 23:01:06','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(244,2,'2014-08-14 23:01:54','2014-08-14 23:01:54','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:54','2014-08-14 23:01:54','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(245,2,'2014-08-14 23:09:52','2014-08-14 23:09:52','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. This tool seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while writing purely front-end code','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:09:52','2014-08-14 23:09:52','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(246,2,'2014-08-14 23:15:46','2014-08-14 23:15:46','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;var $ = require(\'./jquery.min.js\');\r\n\r\n// External Libs\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});&lt;/pre&gt;\r\n&lt;pre&gt;[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:15:46','2014-08-14 23:15:46','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(247,2,'2014-08-14 23:16:32','2014-08-14 23:16:32','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]\r\nvar $ = require(\'./jquery.min.js\');\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:16:32','2014-08-14 23:16:32','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(248,2,'2014-08-14 23:26:12','2014-08-14 23:26:12','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\"/>\r\n\r\n&nbsp;','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:26:12','2014-08-14 23:26:12','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(249,2,'2014-08-14 23:31:41','2014-08-14 23:31:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also showed how you can install vendor packages with bower and then include them into your files using browserify, all while writing modular javascript. Now this is a big improvement over manually finding and downloading vendor packages from the internet, and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this method. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t like manual labor like that.\r\n\r\nSo stay tuned, we\'ve got our basics covered here, and next time we can get into maximizing your javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:31:41','2014-08-14 23:31:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(250,2,'2014-08-15 02:46:25','2014-08-15 02:46:25','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been into grunt for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard \'bower\' and \'browserify\' thrown around a on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a \'bower_components\' directory at the root of where you run your command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes Bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is simple; only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like Grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 02:46:25','2014-08-15 02:46:25','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(251,2,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 03:00:44','2014-08-15 03:00:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(252,2,'2014-08-18 21:57:29','2014-08-18 21:57:29','','Oklahoma Department of Commerce','','publish','closed','closed','','oklahoma-department-of-commerce','','','2014-08-18 22:10:29','2014-08-18 22:10:29','',0,'http://thesocietea.org/?post_type=project&#038;p=252',3,'project','',0),(253,2,'2014-08-18 21:55:25','2014-08-18 21:55:25','','big-odoc-1','','inherit','open','open','','big-odoc-1','','','2014-08-18 21:55:25','2014-08-18 21:55:25','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-1.jpg',0,'attachment','image/jpeg',0),(254,2,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-2','','inherit','open','open','','big-odoc-2','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-2.jpg',0,'attachment','image/jpeg',0),(255,2,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-3','','inherit','open','open','','big-odoc-3','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-3.jpg',0,'attachment','image/jpeg',0),(256,2,'2014-08-18 21:55:27','2014-08-18 21:55:27','','big-odoc-4','','inherit','open','open','','big-odoc-4','','','2014-08-18 21:55:27','2014-08-18 21:55:27','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-4.jpg',0,'attachment','image/jpeg',0),(257,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-1','','inherit','open','open','','th-odoc-1','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-1.jpg',0,'attachment','image/jpeg',0),(258,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-2','','inherit','open','open','','th-odoc-2','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-2.jpg',0,'attachment','image/jpeg',0),(259,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-3','','inherit','open','open','','th-odoc-3','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-3.jpg',0,'attachment','image/jpeg',0),(260,2,'2014-08-18 21:55:29','2014-08-18 21:55:29','','th-odoc-4','','inherit','open','open','','th-odoc-4','','','2014-08-18 21:55:29','2014-08-18 21:55:29','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-4.jpg',0,'attachment','image/jpeg',0),(261,2,'2014-08-28 14:00:39','2014-08-28 14:00:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','publish','open','open','','building-javascript-with-grunt-bower-browserify','','\nhttp://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=261',0,'post','',12),(262,2,'2014-08-21 12:52:15','2014-08-21 12:52:15','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\n\r\nNow that we have the grunt CLI installed,','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:52:15','2014-08-21 12:52:15','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(263,2,'2014-08-21 12:58:12','2014-08-21 12:58:12','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[json]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\json]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:12','2014-08-21 12:58:12','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(264,2,'2014-08-21 12:58:32','2014-08-21 12:58:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[javascript][/javascript]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\javascript]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:32','2014-08-21 12:58:32','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(265,2,'2014-08-21 12:58:42','2014-08-21 12:58:42','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[javascript][/javascript]\r\n\r\n\"devDependencies\": { \"grunt-bower-task\": \"0.4.0\", \"grunt-browserify\": \"2.1.4\", \"grunt-pagespeed\": \"0.3.0\", \"grunt-concurrent\": \"0.5.0\", \"browserify\": \"~4.2.3\" } [\\javascript]','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:42','2014-08-21 12:58:42','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(266,2,'2014-08-21 13:00:09','2014-08-21 13:00:09','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:09','2014-08-21 13:00:09','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(267,2,'2014-08-21 13:00:28','2014-08-21 13:00:28','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:28','2014-08-21 13:00:28','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(268,2,'2014-08-21 13:10:37','2014-08-21 13:10:37','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. <strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.\r\n\r\nTo install:\r\n\r\n[shell]npm install[/shell]\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:10:37','2014-08-21 13:10:37','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(269,2,'2014-08-21 13:16:25','2014-08-21 13:16:25','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:16:25','2014-08-21 13:16:25','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(270,2,'2014-08-21 13:29:16','2014-08-21 13:29:16','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:29:16','2014-08-21 13:29:16','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(271,2,'2014-08-21 13:37:18','2014-08-21 13:37:18','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:18','2014-08-21 13:37:18','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(272,2,'2014-08-21 13:37:41','2014-08-21 13:37:41','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\n.\r\n.\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n.\r\n.\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:41','2014-08-21 13:37:41','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(273,2,'2014-08-21 13:38:00','2014-08-21 13:38:00','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:38:00','2014-08-21 13:38:00','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(274,2,'2014-08-22 17:46:28','2014-08-22 17:46:28','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-08-22 17:46:28','2014-08-22 17:46:28','',220,'http://thesocietea.org/2014/08/220-revision-v1/',0,'revision','',0),(276,2,'2014-08-24 00:12:48','2014-08-24 00:12:48','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require Common-JS style scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own Common-JS style scripts? No, absolutely not! We can fix this with an awesome browserify plugin called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\nBrowserify-shim','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:12:48','2014-08-24 00:12:48','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(277,2,'2014-08-24 00:34:39','2014-08-24 00:34:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:34:39','2014-08-24 00:34:39','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(278,2,'2014-08-24 00:35:49','2014-08-24 00:35:49','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:35:49','2014-08-24 00:35:49','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(279,2,'2014-08-24 00:50:36','2014-08-24 00:50:36','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:50:36','2014-08-24 00:50:36','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(281,2,'2014-08-25 12:19:06','2014-08-25 12:19:06','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-25 12:19:06','2014-08-25 12:19:06','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(282,2,'2014-09-18 14:00:37','2014-09-18 14:00:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','publish','open','open','','using-geojson-files-with-google-maps-api','','\nhttp://thesocietea.org/2014/06/where-i-buy-tea/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=282',0,'post','',0),(283,2,'2014-08-27 18:09:28','2014-08-27 18:09:28','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n\r\n[html]\r\n\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n// Set basic map attributes\r\nvar map, polys = [];\r\nvar mapOptions = {\r\nzoom: 5,\r\ncenter: new google.maps.LatLng(39.16,-100.72)\r\n\r\n};\r\n\r\nmap = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n\r\n[/html]\r\n\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:09:28','2014-08-27 18:09:28','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(284,2,'2014-08-27 18:10:18','2014-08-27 18:10:18','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:10:18','2014-08-27 18:10:18','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(285,2,'2014-08-27 18:20:26','2014-08-27 18:20:26','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[json title=\"arkansas.geo.json\r\n{\r\n\"type\":\"FeatureCollection\",\r\n\"features\":[\r\n{\r\n\"type\":\"Feature\",\r\n\"id\":\"USA-AR\",\r\n\"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n\"geometry\":{\r\n\"type\":\"Polygon\",\r\n\"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n}\r\n[/json]','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:20:26','2014-08-27 18:20:26','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(286,2,'2014-08-27 18:22:41','2014-08-27 18:22:41','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[json title=\"arkansas.geo.json]\r\n{\r\n  \"type\":\"FeatureCollection\",\r\n  \"features\":[\r\n    {\r\n      \"type\":\"Feature\",\r\n      \"id\":\"USA-AR\",\r\n      \"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n      \"geometry\":{\r\n        \"type\":\"Polygon\",\r\n        \"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/json]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:22:41','2014-08-27 18:22:41','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(287,2,'2014-08-27 18:23:14','2014-08-27 18:23:14','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[code language=\"title=&quot;arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:23:14','2014-08-27 18:23:14','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(288,2,'2014-08-27 18:24:34','2014-08-27 18:24:34','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:24:34','2014-08-27 18:24:34','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(289,2,'2014-08-27 18:25:51','2014-08-27 18:25:51','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:25:51','2014-08-27 18:25:51','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(290,2,'2014-08-28 12:36:57','2014-08-28 12:36:57','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 12:36:57','2014-08-28 12:36:57','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(291,2,'2014-08-28 13:05:30','2014-08-28 13:05:30','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:05:30','2014-08-28 13:05:30','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(292,2,'2014-08-28 13:06:33','2014-08-28 13:06:33','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:06:33','2014-08-28 13:06:33','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(293,2,'2014-08-28 13:10:05','2014-08-28 13:10:05','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:10:05','2014-08-28 13:10:05','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(294,2,'2014-08-28 13:15:12','2014-08-28 13:15:12','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API if you want to see what we discussed here in action.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:15:12','2014-08-28 13:15:12','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(295,2,'2014-08-28 13:20:19','2014-08-28 13:20:19','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"mini\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:19','2014-08-28 13:20:19','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(296,2,'2014-08-28 13:20:37','2014-08-28 13:20:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:37','2014-08-28 13:20:37','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(297,2,'2014-08-29 00:02:31','2014-08-29 00:02:31','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 00:02:31','2014-08-29 00:02:31','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(298,2,'2014-08-29 13:30:34','2014-08-29 13:30:34','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\n\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, this largely comes off as meaning you don\'t have use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\n<ul>\n	<li>Vim makes you lightning fast</li>\n</ul>\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\n<ul>\n	<li>Vim is super customizable</li>\n</ul>\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\n<ul>\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\n</ul>\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\n<ul>\n	<li>Vim is absolutely free</li>\n</ul>\nNo Gimmicks. Nuff\' said here.\n<ul>\n	<li>Vim is used in the terminal itself</li>\n</ul>\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\n\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-autosave-v1','','','2014-08-29 13:30:34','2014-08-29 13:30:34','',154,'http://thesocietea.org/2014/08/154-autosave-v1/',0,'revision','',0),(299,2,'2014-08-29 13:31:15','2014-08-29 13:31:15','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:31:15','2014-08-29 13:31:15','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(300,2,'2014-08-29 13:33:20','2014-08-29 13:33:20','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:33:20','2014-08-29 13:33:20','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(301,2,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','publish','open','open','','programming-concepts-the-stack-and-the-heap','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=301',0,'post','',0),(302,2,'2014-08-31 06:04:37','2014-08-31 06:04:37','Being a developer, we often throw around a lot of words that sounds like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend like we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be unfamiliar about everything that it entails; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more)\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the \'old-school\' topics that we may miss out on these days, but are very important.\r\n\r\nThis will probably turn into a series, as today I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 06:04:37','2014-08-31 06:04:37','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(303,2,'2014-08-31 16:13:56','2014-08-31 16:13:56','Being a developer, we often throw around a lot of words that sound like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be a little unfamiliar with; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more).\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nThis may easily turn into a series, as right now I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 16:13:56','2014-08-31 16:13:56','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(305,2,'2014-09-04 14:00:19','2014-09-04 14:00:19','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','publish','open','open','','power-tools-using-grep-xargs-and-sed','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=305',0,'post','',3),(306,2,'2014-09-02 16:58:11','2014-09-02 16:58:11','I was recently inspired to write this post after I came across a situation where I needed to do a change to multiple files where all I was doing was changing all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a good deal of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\n&nbsp;\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 16:58:11','2014-09-02 16:58:11','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(307,2,'2014-09-02 17:13:00','2014-09-02 17:13:00','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the -G flag:\r\n\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:13:00','2014-09-02 17:13:00','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(308,2,'2014-09-02 17:40:13','2014-09-02 17:40:13','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:40:13','2014-09-02 17:40:13','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(309,2,'2014-09-03 19:25:14','2014-09-03 19:25:14','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-03 19:25:14','2014-09-03 19:25:14','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(310,2,'2014-09-04 00:44:41','2014-09-04 00:44:41','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:44:41','2014-09-04 00:44:41','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(311,2,'2014-09-04 00:54:05','2014-09-04 00:54:05','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:54:05','2014-09-04 00:54:05','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(312,2,'2014-09-04 00:56:08','2014-09-04 00:56:08','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the\r\n\r\nbase shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:08','2014-09-04 00:56:08','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(313,2,'2014-09-04 00:56:17','2014-09-04 00:56:17','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:17','2014-09-04 00:56:17','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(314,2,'2014-09-04 00:58:15','2014-09-04 00:58:15','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:58:15','2014-09-04 00:58:15','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(315,2,'2014-09-04 01:00:37','2014-09-04 01:00:37','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:00:37','2014-09-04 01:00:37','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(316,2,'2014-09-04 01:01:52','2014-09-04 01:01:52','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and just print out the filenames. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:01:52','2014-09-04 01:01:52','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(317,2,'2014-09-04 01:13:30','2014-09-04 01:13:30','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored seeing as how you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:13:30','2014-09-04 01:13:30','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(318,2,'2014-09-04 01:16:47','2014-09-04 01:16:47','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:16:47','2014-09-04 01:16:47','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(319,2,'2014-09-04 19:48:33','2014-09-04 19:48:33','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\n\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\n\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\n\n<hr class=\"short\" />\n\n<h2>Grep</h2>\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\n\n[shell]cat index.html | grep footer[/shell]\n\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\n\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\n\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\n\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\n\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\n<h2>Xargs</h2>\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\n\nSound too wordy? An example is worth a thousand words:\n\n[shell]ls | xargs -0 -n 1 echo[/shell]\n\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to only accepThe <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\n\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\n\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\n\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\n\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\n<h2>Sed</h2>\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\n\n[shell]sed \'s/start/end/g\' ./*[/shell]\n\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\n\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\n\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\n<h2>Combining Them</h2>\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\n\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\n\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\n\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-autosave-v1','','','2014-09-04 19:48:33','2014-09-04 19:48:33','',305,'http://thesocietea.org/2014/09/305-autosave-v1/',0,'revision','',0),(320,2,'2014-09-04 19:49:50','2014-09-04 19:49:50','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore accept arguments based on a full line (this is very important; you probably don\'t want xargs breaking up args based on spaces). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:49:50','2014-09-04 19:49:50','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(321,2,'2014-09-04 19:50:49','2014-09-04 19:50:49','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:50:49','2014-09-04 19:50:49','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(322,2,'2014-09-05 12:33:20','2014-09-05 12:33:20','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-09-05 12:33:20','2014-09-05 12:33:20','',282,'http://thesocietea.org/2014/09/282-revision-v1/',0,'revision','',0),(325,2,'2014-09-17 00:03:04','2014-09-17 00:03:04','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically variables) is managed, with significantly different strategies\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) fashion, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\"Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to know how large they will be prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and predefined in terms of size, and not global in nature. But what if you need data structures with a more dynamic nature, or global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-09-17 00:03:04','2014-09-17 00:03:04','',301,'http://thesocietea.org/2014/09/301-revision-v1/',0,'revision','',0),(329,2,'2014-10-03 02:11:12','2014-10-03 02:11:12','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a chunk of memory that is completely dynamic, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location to store a variable of some sort, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:11:12','2014-10-03 02:11:12','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(330,2,'2014-10-03 02:12:43','2014-10-03 02:12:43','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store that is allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:12:43','2014-10-03 02:12:43','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(331,2,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because those are the variables always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer (or the garbage collector if the language supports one) to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:51:01','2014-10-04 02:51:01','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(332,2,'2014-10-04 02:57:25','2014-10-04 02:57:25','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:57:25','2014-10-04 02:57:25','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(333,2,'2014-10-05 04:41:12','2014-10-05 04:41:12','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-autosave-v1','','','2014-10-05 04:41:12','2014-10-05 04:41:12','',30,'http://thesocietea.org/2014/10/30-autosave-v1/',0,'revision','',0),(334,2,'2014-10-05 04:41:15','2014-10-05 04:41:15','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2014-10-05 04:41:15','2014-10-05 04:41:15','',30,'http://thesocietea.org/2014/10/30-revision-v1/',0,'revision','',0),(335,2,'2014-10-05 04:42:29','2014-10-05 04:42:29','','Labs','','publish','open','open','','labs','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://thesocietea.org/?p=335',4,'nav_menu_item','',0),(336,2,'2014-10-05 21:08:53','2014-10-05 21:08:53','','Oklahoma Nutrition Information & Education Project','','publish','closed','closed','','oklahoma-nutrition-information-education-project','','','2014-10-05 21:08:53','2014-10-05 21:08:53','',0,'http://thesocietea.org/?post_type=project&#038;p=336',10,'project','',0),(337,2,'2014-10-05 21:06:43','2014-10-05 21:06:43','','big-onie-1','','inherit','open','open','','big-onie-1','','','2014-10-05 21:06:43','2014-10-05 21:06:43','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-1.jpg',0,'attachment','image/jpeg',0),(338,2,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-2','','inherit','open','open','','big-onie-2','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-2.jpg',0,'attachment','image/jpeg',0),(339,2,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-3','','inherit','open','open','','big-onie-3','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-3.jpg',0,'attachment','image/jpeg',0),(340,2,'2014-10-05 21:06:45','2014-10-05 21:06:45','','big-onie-responsive','','inherit','open','open','','big-onie-responsive','','','2014-10-05 21:06:45','2014-10-05 21:06:45','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-responsive.jpg',0,'attachment','image/jpeg',0),(341,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-1','','inherit','open','open','','th-onie-1','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-1.jpg',0,'attachment','image/jpeg',0),(342,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-2','','inherit','open','open','','th-onie-2','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-2.jpg',0,'attachment','image/jpeg',0),(343,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-3','','inherit','open','open','','th-onie-3','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-3.jpg',0,'attachment','image/jpeg',0),(344,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-responsive','','inherit','open','open','','th-onie-responsive','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-responsive.jpg',0,'attachment','image/jpeg',0),(346,2,'2014-11-14 14:00:44','2014-11-14 14:00:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','publish','open','open','','software-licensing-drm-vs-gpl','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=346',0,'post','',0),(347,2,'2014-10-06 18:04:44','2014-10-06 18:04:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by the copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:04:44','2014-10-06 18:04:44','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(348,2,'2014-10-06 18:06:22','2014-10-06 18:06:22','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:06:22','2014-10-06 18:06:22','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(349,2,'2014-10-06 18:07:42','2014-10-06 18:07:42','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:07:42','2014-10-06 18:07:42','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(350,2,'2014-10-07 22:53:55','2014-10-07 22:53:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing pirating copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop copying works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 22:53:55','2014-10-07 22:53:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(351,2,'2014-10-07 23:09:04','2014-10-07 23:09:04','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:09:04','2014-10-07 23:09:04','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(352,2,'2014-10-07 23:17:23','2014-10-07 23:17:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This legislation would give original publishers even more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and, innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:17:23','2014-10-07 23:17:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(353,2,'2014-10-07 23:20:23','2014-10-07 23:20:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:20:23','2014-10-07 23:20:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(354,2,'2014-10-07 23:21:53','2014-10-07 23:21:53','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:21:53','2014-10-07 23:21:53','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(356,2,'2014-10-09 22:28:55','2014-10-09 22:28:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-09 22:28:55','2014-10-09 22:28:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(357,2,'2014-10-24 15:00:20','2014-10-24 15:00:20','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','publish','open','open','','the-building-of-go-wiki-part-1','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=357',0,'post','',1),(358,2,'2014-10-09 22:35:09','2014-10-09 22:35:09','I recently completed my first true project in Go, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:35:09','2014-10-09 22:35:09','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(359,2,'2014-10-09 22:41:41','2014-10-09 22:41:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n<pre>[go title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  \"net/http\"\r\n  \"./modules/helpers\"\r\n  \"./modules/routes\"\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(\"/edit/\", helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(\"/save/\", helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(\"/delete/\", helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(\"/\", routes.IndexHandler)\r\n  http.ListenAndServe(\":8080\", nil)\r\n}\r\n[/go]\r\n</pre>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:41:41','2014-10-09 22:41:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(360,2,'2014-10-09 22:49:36','2014-10-09 22:49:36','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"java\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first 2 lines is I\'m reading a config file I have to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP servero on port 8080, and routing different urls to certain handlers. You may notice the use of the keyword \r\n[code]go[/code]\r\n here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:49:36','2014-10-09 22:49:36','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(361,2,'2014-10-09 23:25:21','2014-10-09 23:25:21','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:25:21','2014-10-09 23:25:21','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(362,2,'2014-10-09 23:36:13','2014-10-09 23:36:13','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:36:13','2014-10-09 23:36:13','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(363,2,'2014-10-09 23:40:48','2014-10-09 23:40:48','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:48','2014-10-09 23:40:48','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(364,2,'2014-10-09 23:40:56','2014-10-09 23:40:56','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:56','2014-10-09 23:40:56','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(365,2,'2014-10-09 23:42:41','2014-10-09 23:42:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:42:41','2014-10-09 23:42:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(366,2,'2014-10-09 23:45:07','2014-10-09 23:45:07','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:45:07','2014-10-09 23:45:07','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(367,2,'2014-10-10 12:27:52','2014-10-10 12:27:52','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and use a templating language to write some Go in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:27:52','2014-10-10 12:27:52','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(368,2,'2014-10-10 12:49:04','2014-10-10 12:49:04','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:49:04','2014-10-10 12:49:04','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(369,2,'2014-10-13 12:22:03','2014-10-13 12:22:03','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\n\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\nsuper cool girlfriend.','Home','','inherit','open','open','','4-autosave-v1','','','2014-10-13 12:22:03','2014-10-13 12:22:03','',4,'http://thesocietea.org/2014/10/4-autosave-v1/',0,'revision','',0),(370,2,'2014-10-13 12:25:01','2014-10-13 12:25:01','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\r\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\r\nsuper cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2014-10-13 12:25:01','2014-10-13 12:25:01','',4,'http://thesocietea.org/2014/10/4-revision-v1/',0,'revision','',0),(371,2,'2014-10-13 12:42:52','2014-10-13 12:42:52','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\n<h2>Background</h2>\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\n\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\n\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\n\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\n<h2>My Interests</h2>\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\n\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise.\nPlus, I get to listen to a lot of podcasts, which leads me to...\n\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out.\nMy favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before.\nHowStuffWorks is easily my favorite network of podcasts.\n\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks,\nbrown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types.\nI was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle.\nIt has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\n\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss.\nShe makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;).\nI couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her.\nShe’s an incredibly talented cake decorator too!\n\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-autosave-v1','','','2014-10-13 12:42:52','2014-10-13 12:42:52','',6,'http://thesocietea.org/2014/10/6-autosave-v1/',0,'revision','',0),(372,2,'2014-10-13 12:43:24','2014-10-13 12:43:24','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2014-10-13 12:43:24','2014-10-13 12:43:24','',6,'http://thesocietea.org/2014/10/6-revision-v1/',0,'revision','',0),(374,2,'2014-10-16 22:37:19','2014-10-16 22:37:19','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 22:37:19','2014-10-16 22:37:19','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(375,2,'2014-10-16 23:26:06','2014-10-16 23:26:06','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 23:26:06','2014-10-16 23:26:06','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(377,2,'2014-11-14 20:22:28','2014-11-14 20:22:28','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\n\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\n<h2>What is Software Licensing?</h2>\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\n\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\n<h2>DRM</h2>\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\n\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\n<h2>GPL</h2>\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\n\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\n<h2>Final Thoughts</h2>\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-autosave-v1','','','2014-11-14 20:22:28','2014-11-14 20:22:28','',346,'http://thesocietea.org/2014/11/346-autosave-v1/',0,'revision','',0),(378,2,'2014-11-14 20:23:55','2014-11-14 20:23:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-11-14 20:23:55','2014-11-14 20:23:55','',346,'http://thesocietea.org/2014/11/346-revision-v1/',0,'revision','',0),(381,2,'2015-02-20 21:18:13','2015-02-20 21:18:13','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so if you\'re ready, feel free to <a title=\"Building a JSON API with Rails – Part 2: Serialization\" href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\">move onto part 2</a>.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','publish','open','open','','building-a-json-api-with-rails-part-1-getting-started','','\nhttp://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=381',0,'post','',5),(382,2,'2015-01-21 19:22:04','2015-01-21 19:22:04','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Staring Out</h2>','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-01-21 19:22:04','2015-01-21 19:22:04','',381,'http://thesocietea.org/2015/01/381-revision-v1/',0,'revision','',0),(383,2,'2015-01-22 19:21:57','2015-01-22 19:21:57','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','publish','open','open','','brief-blogging-hiatus','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=383',0,'post','',0),(384,2,'2015-01-22 19:20:03','2015-01-22 19:20:03','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my time right now (as well as rekindling old ones):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:03','2015-01-22 19:20:03','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(385,2,'2015-01-22 19:20:50','2015-01-22 19:20:50','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:50','2015-01-22 19:20:50','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(386,2,'2015-01-22 19:21:09','2015-01-22 19:21:09','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:09','2015-01-22 19:21:09','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(387,2,'2015-01-22 19:21:44','2015-01-22 19:21:44','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:44','2015-01-22 19:21:44','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(388,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Galleries','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=388',0,'gal_display_source','',0),(389,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Albums','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=389',0,'gal_display_source','',0),(390,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Tags','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=390',0,'gal_display_source','',0),(391,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9','Random Images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9',0,'http://thesocietea.org/?p=391',0,'gal_display_source','',0),(392,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==','Recent images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==',0,'http://thesocietea.org/?p=392',0,'gal_display_source','',0),(393,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','none','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=393',0,'lightbox_library','',0),(394,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','lightbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=394',0,'lightbox_library','',0),(395,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','fancybox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=395',0,'lightbox_library','',0),(396,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','highslide','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=396',0,'lightbox_library','',0),(397,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','shutter','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=397',0,'lightbox_library','',0),(398,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','shutter2','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=398',0,'lightbox_library','',0),(399,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','thickbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=399',0,'lightbox_library','',0),(400,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=','NextGEN Basic Compact Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=',0,'http://thesocietea.org/?p=400',0,'display_type','',0),(401,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==','NextGEN Basic Extended Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==',0,'http://thesocietea.org/?p=401',0,'display_type','',0),(402,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic Thumbnails','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=402',0,'display_type','',0),(403,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=','NextGEN Basic Slideshow','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=',0,'http://thesocietea.org/?p=403',0,'display_type','',0),(404,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic ImageBrowser','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=404',0,'display_type','',0),(405,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==','NextGEN Basic SinglePic','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==',0,'http://thesocietea.org/?p=405',0,'display_type','',0),(406,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19','NextGEN Basic TagCloud','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19',0,'http://thesocietea.org/?p=406',0,'display_type','',0),(407,2,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=407',0,'ngg_gallery','',0),(408,2,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=408',0,'ngg_pictures','',0),(409,2,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=409',0,'ngg_pictures','',0),(410,2,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=410',0,'ngg_gallery','',0),(412,2,'2015-02-10 17:06:35','2015-02-10 17:06:35','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2015-02-10 17:06:35','2015-02-10 17:06:35','',4,'http://thesocietea.org/2015/02/4-revision-v1/',0,'revision','',0),(414,2,'2015-02-18 19:43:01','2015-02-18 19:43:01','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\n\r\nrails-api new my_blog\r\n\r\ncd my_blog\r\n\r\n[/shell]\r\n','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:43:01','2015-02-18 19:43:01','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(415,2,'2015-02-18 19:47:17','2015-02-18 19:47:17','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:47:17','2015-02-18 19:47:17','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(416,2,'2015-02-18 19:49:28','2015-02-18 19:49:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[ruby]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/ruby]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:28','2015-02-18 19:49:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(417,2,'2015-02-18 19:49:43','2015-02-18 19:49:43','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:43','2015-02-18 19:49:43','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(418,2,'2015-02-18 19:57:33','2015-02-18 19:57:33','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n has_many :posts\r\n has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\nhas_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n\r\n[shell]rake db:seed[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:57:33','2015-02-18 19:57:33','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(419,2,'2015-02-18 20:11:14','2015-02-18 20:11:14','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\n&nbsp;\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:14','2015-02-18 20:11:14','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(420,2,'2015-02-18 20:11:51','2015-02-18 20:11:51','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:51','2015-02-18 20:11:51','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(421,2,'2015-02-20 20:46:23','2015-02-20 20:46:23','','oea_big_1','','inherit','open','open','','oea_big_1','','','2015-02-20 20:46:23','2015-02-20 20:46:23','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_1.jpg',0,'attachment','image/jpeg',0),(422,2,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_2','','inherit','open','open','','oea_big_2','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_2.jpg',0,'attachment','image/jpeg',0),(423,2,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_3','','inherit','open','open','','oea_big_3','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_3.jpg',0,'attachment','image/jpeg',0),(424,2,'2015-02-20 20:46:25','2015-02-20 20:46:25','','oea_big_4','','inherit','open','open','','oea_big_4','','','2015-02-20 20:46:25','2015-02-20 20:46:25','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_4.jpg',0,'attachment','image/jpeg',0),(425,2,'2015-02-20 20:46:26','2015-02-20 20:46:26','','oea_th_1','','inherit','open','open','','oea_th_1','','','2015-02-20 20:46:26','2015-02-20 20:46:26','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_1.jpg',0,'attachment','image/jpeg',0),(426,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_2','','inherit','open','open','','oea_th_2','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_2.jpg',0,'attachment','image/jpeg',0),(427,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_3','','inherit','open','open','','oea_th_3','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_3.jpg',0,'attachment','image/jpeg',0),(428,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_4','','inherit','open','open','','oea_th_4','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_4.jpg',0,'attachment','image/jpeg',0),(429,2,'2015-02-20 20:51:13','2015-02-20 20:51:13','','No To High Stakes','','publish','closed','closed','','no-to-high-stakes','','','2015-02-20 20:54:35','2015-02-20 20:54:35','',0,'http://thesocietea.org/?post_type=project&#038;p=429',2,'project','',0),(430,2,'2015-02-20 20:58:26','2015-02-20 20:58:26','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 20:58:26','2015-02-20 20:58:26','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(431,2,'2015-02-20 21:11:48','2015-02-20 21:11:48','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (SOA), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:11:48','2015-02-20 21:11:48','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(432,2,'2015-02-20 21:12:28','2015-02-20 21:12:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:12:28','2015-02-20 21:12:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(433,2,'2015-02-20 21:13:11','2015-02-20 21:13:11','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:13:11','2015-02-20 21:13:11','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(434,2,'2015-02-20 21:17:28','2015-02-20 21:17:28','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"mini\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:28','2015-02-20 21:17:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(435,2,'2015-02-20 21:17:37','2015-02-20 21:17:37','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:37','2015-02-20 21:17:37','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(436,2,'2015-02-21 04:23:59','2015-02-21 04:23:59','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-21 04:23:59','2015-02-21 04:23:59','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(437,2,'2015-02-25 14:08:53','2015-02-25 14:08:53','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',30,'http://thesocietea.org/2015/02/30-revision-v1/',0,'revision','',0),(438,2,'2015-02-25 14:33:05','2015-02-25 14:33:05','','go_wiki_th','','inherit','open','open','','go_wiki_th','','','2015-02-25 14:33:05','2015-02-25 14:33:05','',4,'http://thesocietea.org/wp-content/uploads/2014/06/go_wiki_th.jpg',0,'attachment','image/jpeg',0),(439,2,'2015-02-25 14:36:46','2015-02-25 14:36:46','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2015-02-25 14:36:46','2015-02-25 14:36:46','',233,'http://thesocietea.org/2015/02/233-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (440,2,'2015-02-25 14:38:57','2015-02-25 14:38:57','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2015-02-25 14:38:57','2015-02-25 14:38:57','',154,'http://thesocietea.org/2015/02/154-revision-v1/',0,'revision','',0),(441,2,'2015-02-25 14:42:12','2015-02-25 14:42:12','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-25 14:42:12','2015-02-25 14:42:12','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(442,2,'2015-02-25 15:42:32','2015-02-25 15:42:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2015-02-25 15:42:32','2015-02-25 15:42:32','',261,'http://thesocietea.org/2015/02/261-revision-v1/',0,'revision','',0),(443,2,'2015-03-27 14:00:16','2015-03-27 14:00:16','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]gem \'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','publish','open','open','','building-a-json-api-with-rails-part-2-serialization','','http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\nhttps://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/','2015-04-28 17:00:59','2015-04-28 17:00:59','',0,'http://thesocietea.org/?p=443',0,'post','',7),(444,2,'2015-02-25 18:53:49','2015-02-25 18:53:49','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. In the last post, we focused on setting a basic JSON API up using Rails and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 18:53:49','2015-02-25 18:53:49','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(445,2,'2015-02-25 19:01:03','2015-02-25 19:01:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting a basic JSON API up using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:03','2015-02-25 19:01:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(446,2,'2015-02-25 19:01:38','2015-02-25 19:01:38','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:38','2015-02-25 19:01:38','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(447,2,'2015-02-25 19:03:03','2015-02-25 19:03:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:03','2015-02-25 19:03:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(448,2,'2015-02-25 19:03:41','2015-02-25 19:03:41','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:41','2015-02-25 19:03:41','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(449,2,'2015-02-25 19:04:30','2015-02-25 19:04:30','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:04:30','2015-02-25 19:04:30','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(450,2,'2015-02-26 19:02:57','2015-02-26 19:02:57','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n\r\n[shell]\r\n\r\ngem install active_model_serializers -v 0.8.3\r\n\r\n[/shell]\r\n\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\n\r\nAnd that will create the following file:\r\n\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\n\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\nattributes :id\r\nend\r\n\r\n[/ruby]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:02:57','2015-02-26 19:02:57','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(451,2,'2015-02-26 19:05:46','2015-02-26 19:05:46','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n&nbsp;\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:05:46','2015-02-26 19:05:46','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(452,2,'2015-02-26 19:09:11','2015-02-26 19:09:11','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? Now go ahead and run the serializers for the remaining Post and Comment models, and then we\'ll get into some configuration:\r\n\r\n\r\n[shell]\r\n\r\nrails g serializer post\r\n\r\nrails g serializer comment\r\n\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:09:11','2015-02-26 19:09:11','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(453,2,'2015-02-26 19:29:25','2015-02-26 19:29:25','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when your query you User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are not return each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because it\'s only meant for specific serialization cases, you don\'t want to dirty up the model files. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable. Nifty, huh? <strong>Pro Tip</strong>: You can also serialize model methods in this same way, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old JSON syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:29:25','2015-02-26 19:29:25','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(454,2,'2015-02-26 19:36:45','2015-02-26 19:36:45','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:36:45','2015-02-26 19:36:45','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(456,2,'2015-02-27 14:08:09','2015-02-27 14:08:09','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:09','2015-02-27 14:08:09','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(457,2,'2015-02-27 14:08:48','2015-02-27 14:08:48','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:48','2015-02-27 14:08:48','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(458,2,'2015-02-27 14:11:30','2015-02-27 14:11:30','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(459,2,'2015-02-27 15:28:15','2015-02-27 15:28:15','','Intervals Browser Extension','','publish','closed','closed','','intervals-browser-extension','','','2015-03-31 16:14:35','2015-03-31 16:14:35','',0,'http://thesocietea.org/?post_type=project&#038;p=459',5,'project','',0),(460,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_1','','inherit','open','open','','intervals_big_1','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_1.jpg',0,'attachment','image/jpeg',0),(461,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_2','','inherit','open','open','','intervals_big_2','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_2.jpg',0,'attachment','image/jpeg',0),(462,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_3','','inherit','open','open','','intervals_big_3','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_3.jpg',0,'attachment','image/jpeg',0),(463,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_th_2','','inherit','open','open','','intervals_th_2','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_th_2.jpg',0,'attachment','image/jpeg',0),(464,2,'2015-02-27 15:26:16','2015-02-27 15:26:16','','intervals_th_3','','inherit','open','open','','intervals_th_3','','','2015-02-27 15:26:16','2015-02-27 15:26:16','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_th_3.jpg',0,'attachment','image/jpeg',0),(465,2,'2015-02-27 19:22:28','2015-02-27 19:22:28','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nStay tuned!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-27 19:22:28','2015-02-27 19:22:28','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(466,2,'2015-07-03 18:00:56','2015-07-03 18:00:56','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We\'re an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become a part of me over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','future','open','open','','whats-with-the-name','','','2015-04-28 17:03:08','2015-04-28 17:03:08','',0,'http://thesocietea.org/?p=466',0,'post','',0),(467,2,'2015-02-27 19:52:47','2015-02-27 19:52:47','<strong>The Societea</strong>. What does that even mean, and why is it the domain for someone\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a>, and was pretty good friends with my fellow developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where they would drink the tea that I brewed everyday. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea. We also took occasional 15 minute breaks to walk around the complex sometimes, so that was also a foundation of our camaraderie.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who cared about the name being \"The Societea\" instead of \"ADF Tea,\" but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first public site that I would officially own. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to me. I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n\r\n&nbsp;\r\n\r\nwas I didn\'t really have any reason to build a site completely to showcase myself, since I didn\'t have much dev work to show, nor was I too interested in blogging at the time.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-02-27 19:52:47','2015-02-27 19:52:47','',466,'http://thesocietea.org/2015/02/466-revision-v1/',0,'revision','',0),(468,2,'2015-02-27 19:53:07','2015-02-27 19:53:07','<strong>The Societea</strong>. What does that even mean, and why is it the domain for someone\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a>, and was pretty good friends with my fellow developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where they would drink the tea that I brewed everyday. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea. We also took occasional 15 minute breaks to walk around the complex sometimes, so that was also a foundation of our camaraderie.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who cared about the name being \"The Societea\" instead of \"ADF Tea,\" but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first public site that I would officially own. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to me. I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-02-27 19:53:07','2015-02-27 19:53:07','',466,'http://thesocietea.org/2015/02/466-revision-v1/',0,'revision','',0),(469,2,'2015-03-06 14:00:47','2015-03-06 14:00:47','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2><a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a></h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','publish','open','open','','launched-labs-and-my-beer-adventure','','\nhttp://thesocietea.org/2014/06/what-this-site-runs-on-part-1/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=469',0,'post','',0),(470,2,'2015-03-01 21:13:50','2015-03-01 21:13:50','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made for them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are mostly HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that\'s I\'m running as a web server as a wiki tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I built my main The Societea site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase other projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only caveat is that you have to give attribution in the footer to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free.\r\n\r\nCheck out my labs here: http://labs.thesocietea.org\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\n&nbsp;\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-01 21:13:50','2015-03-01 21:13:50','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(471,2,'2015-03-02 00:37:22','2015-03-02 00:37:22','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are mostly HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that\'s I\'m running as a web server as a wiki tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I built my main The Societea site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase other projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only caveat is that you have to give attribution in the footer to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free.\r\n\r\nCheck out my labs here: http://labs.thesocietea.org\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st I have always been a fan of beer and the history of beer styles, especially craft beer, but it had been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc. This also led to me not drinking as many unique beers as I would have liked. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be content based, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and no fancy custom design. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie in my beer blog directly into my personal site, since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a a file-based DB, it\'s so easy to deploy to different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:37:22','2015-03-02 00:37:22','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(472,2,'2015-03-02 00:52:13','2015-03-02 00:52:13','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).<img class=\"alignright\" src=\"http://cdn.travelllll.com/ghost/ghost.png\" alt=\"Ghost Logo\" width=\"800\" height=\"400\" />\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:52:13','2015-03-02 00:52:13','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(473,2,'2015-03-02 00:52:41','2015-03-02 00:52:41','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:52:41','2015-03-02 00:52:41','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(474,2,'2015-03-02 01:00:08','2015-03-02 01:00:08','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 01:00:08','2015-03-02 01:00:08','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(475,2,'2015-03-02 01:05:46','2015-03-02 01:05:46','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 01:05:46','2015-03-02 01:05:46','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(476,2,'2015-03-03 03:22:35','2015-03-03 03:22:35','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 03:22:35','2015-03-03 03:22:35','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(477,2,'2015-03-03 14:10:43','2015-03-03 14:10:43','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:10:43','2015-03-03 14:10:43','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(478,2,'2015-03-03 14:11:24','2015-03-03 14:11:24','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:11:24','2015-03-03 14:11:24','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(479,2,'2015-03-03 14:15:51','2015-03-03 14:15:51','','The Societea','','inherit','open','open','','the-societea','','','2015-03-03 14:15:51','2015-03-03 14:15:51','',466,'http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png',0,'attachment','image/png',0),(480,2,'2015-03-03 14:16:04','2015-03-03 14:16:04','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\"><img class=\" size-full wp-image-479 aligncenter\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" /></a>\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:16:04','2015-03-03 14:16:04','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(481,2,'2015-03-03 14:16:35','2015-03-03 14:16:35','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-medium\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:16:35','2015-03-03 14:16:35','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(482,2,'2015-03-03 14:17:07','2015-03-03 14:17:07','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\" wp-image-479 size-medium alignright\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:17:07','2015-03-03 14:17:07','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(483,2,'2015-03-03 14:18:33','2015-03-03 14:18:33','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\n<img class=\" wp-image-479 size-medium alignright\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />This gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n&nbsp;\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:18:33','2015-03-03 14:18:33','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(484,2,'2015-03-03 14:20:15','2015-03-03 14:20:15','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:20:15','2015-03-03 14:20:15','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(485,2,'2015-03-03 14:29:08','2015-03-03 14:29:08','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We\'re an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become a part of me over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:29:08','2015-03-03 14:29:08','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(487,2,'2015-04-17 17:00:36','2015-04-17 17:00:36','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','publish','open','open','','building-a-json-api-with-rails-part-3-authentication-strategies','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=487',0,'post','',2),(488,2,'2015-03-04 14:43:14','2015-03-04 14:43:14','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type,','Building a JSON API with Rails – Part 2: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:43:14','2015-03-04 14:43:14','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(489,2,'2015-03-04 14:54:47','2015-03-04 14:54:47','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 2: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:54:47','2015-03-04 14:54:47','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(490,2,'2015-03-04 14:55:32','2015-03-04 14:55:32','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:55:32','2015-03-04 14:55:32','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(491,2,'2015-03-04 14:56:29','2015-03-04 14:56:29','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:56:29','2015-03-04 14:56:29','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(492,2,'2015-03-04 15:00:58','2015-03-04 15:00:58','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 15:00:58','2015-03-04 15:00:58','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(493,2,'2015-03-05 02:49:35','2015-03-05 02:49:35','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h4>Token-Based Authentication</h4>\r\nWe received a token back from our request using basic authentication, and now we\'re going to use','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-05 02:49:35','2015-03-05 02:49:35','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(494,2,'2015-03-05 03:54:12','2015-03-05 03:54:12','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h4>Token-Based Authentication</h4>\r\nWe received a token in our response from our request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 03:54:12','2015-03-05 03:54:12','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(495,2,'2015-03-05 04:18:12','2015-03-05 04:18:12','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token in our response from our request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we set on the User model); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nWe got our token! We can change our Authorization header to be like, and use it this way this for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user, and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your username and password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 04:18:12','2015-03-05 04:18:12','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(496,2,'2015-03-05 04:56:11','2015-03-05 04:56:11','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 04:56:11','2015-03-05 04:56:11','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(498,2,'2015-03-05 15:54:11','2015-03-05 15:54:11','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 15:54:11','2015-03-05 15:54:11','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(499,2,'2015-03-05 16:16:59','2015-03-05 16:16:59','','Beer','','publish','open','open','','beer','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://thesocietea.org/?p=499',6,'nav_menu_item','',0),(501,2,'2015-03-07 00:28:38','2015-03-07 00:28:38','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-autosave-v1','','','2015-03-07 00:28:38','2015-03-07 00:28:38','',469,'http://thesocietea.org/2015/03/469-autosave-v1/',0,'revision','',0),(502,2,'2015-03-07 00:28:59','2015-03-07 00:28:59','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2><a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a></h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-07 00:28:59','2015-03-07 00:28:59','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(504,2,'2015-04-24 18:00:01','2015-04-24 18:00:01','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','publish','open','open','','building-a-json-api-with-rails-part-4-implementing-authentication','','\nhttps://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/','2015-04-26 19:00:04','2015-04-26 19:00:04','',0,'http://thesocietea.org/?p=504',0,'post','',2),(505,2,'2015-03-14 21:51:19','2015-03-14 21:51:19','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]get :token, controller: \'application\'[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\n&lt;pre&gt;def token\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 21:51:19','2015-03-14 21:51:19','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(507,2,'2015-03-14 22:00:05','2015-03-14 22:00:05','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'&lt;/pre&gt;\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can make for an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the Authorization header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint now, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle this the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:00:05','2015-03-14 22:00:05','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(508,2,'2015-03-14 22:09:14','2015-03-14 22:09:14','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'&lt;/pre&gt;\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end \r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:09:14','2015-03-14 22:09:14','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(509,2,'2015-03-14 22:19:00','2015-03-14 22:19:00','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and make it with cURL:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using Basic Authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nSimple enough, right? Now when a user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 1: Handling Every Other Request</h2>','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:19:00','2015-03-14 22:19:00','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(510,2,'2015-03-14 23:14:09','2015-03-14 23:14:09','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and make it with cURL:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using Basic Authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nSimple enough, right? Now when a user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe\'ve now got our token back for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store that cookie in some format like a cookie, session storage, local storage, etc. We won\'t go into that here though. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created authenticate_user_from_token method on every single request, except when the user is requesting the initial token (since they don\'t have a token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. ','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 23:14:09','2015-03-14 23:14:09','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(511,2,'2015-03-15 00:14:35','2015-03-15 00:14:35','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will receive back our token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store that token in some storage structure like a cookie, session storage, local storage, etc. We won\'t go into that here though. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created authenticate_user_from_token method on every single request, except when the user is requesting the initial token (since they don\'t have a token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-15 00:14:35','2015-03-15 00:14:35','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(512,2,'2015-03-15 03:27:05','2015-03-15 03:27:05','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\n<h2>Phase 1: The Initial Request</h2>\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\n\n[ruby title=\"config/routes.rb\"]\nget :token, controller: \'application\'\n[/ruby]\n\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n\nend\n[/ruby]\n\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n  authenticate_with_http_basic do |email, password|\n  end\nend\n[/ruby]\n\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\n\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\n[/ruby]\n\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\n\nLet\'s finish out this token action:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n  authenticate_with_http_basic do |email, password|\n    user = User.find_by(email: email)\n    if user &amp;&amp; user.password == password\n      render json: { token: user.auth_token }\n    else\n      render json: { error: \'Incorrect credentials\' }, status: 401\n    end\n  end\nend\n[/ruby]\n\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\n\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\n\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\n\n[ruby]\nBase64.encode64(&quot;user@example.com:password&quot;)\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\n[/ruby]\n\nNow we can build our request and issue it with cURL:\n\n[shell]\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\n[/shell]\n\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\n\n[shell]\n{token: null}\n[/shell]\n\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\n\n[ruby title=\"app/models/user.rb\"]\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\n[/ruby]\n\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\n\n[shell]rake db:reset[/shell]\n\nAfter the database is reset, we can rerun our initial request to get a valid token:\n\n[shell]\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\n\n# Returns ...\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\n[/shell]\n\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\n<h2>Phase 2: Handling Every Other Request</h2>\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\n[/shell]\n\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\nbefore_filter :authenticate_user_from_token, except: [:token]\n\nprivate\n\ndef authenticate_user_from_token\n\nend\n[/ruby]\n\nWe\'re adding a before_filter hook that will call the <strong>authenticate_user_from_token</strong> method we\'re creating on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n\ndef authenticate_user_from_token\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\n    render json: { error: \'Bad Token\'}, status: 401\n  end\nend\n[/ruby]\n\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <strong>token</strong> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\n\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\n\nAs an example, if we submit this request again that we did earlier:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\n[/shell]\n\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\n[/shell]\n\nThen we will receive the following error:\n\n[shell]\n{error: \'Bad Token\'}\n[/shell]\n\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was architecting this API. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n# before_filter :authenticate_user_from_token, except: [:token]\n[/ruby]\n\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\n<h2>Finale</h2>\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a collective overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so we\'re not quite done yet.\n\nAs always, stay tuned!\n\n<hr class=\"short\" />\n\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-autosave-v1','','','2015-03-15 03:27:05','2015-03-15 03:27:05','',504,'http://thesocietea.org/2015/03/504-autosave-v1/',0,'revision','',0),(513,2,'2015-03-15 03:19:09','2015-03-15 03:19:09','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-15 03:19:09','2015-03-15 03:19:09','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(515,2,'2015-03-15 04:06:41','2015-03-15 04:06:41','','Resume Haus','','publish','closed','closed','','resume-builder','','','2015-03-31 16:11:40','2015-03-31 16:11:40','',0,'http://thesocietea.org/?post_type=project&#038;p=515',0,'project','',0),(516,2,'2015-03-15 04:04:50','2015-03-15 04:04:50','','resume-big-1','','inherit','open','open','','resume-big-1','','','2015-03-15 04:04:50','2015-03-15 04:04:50','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-1.jpg',0,'attachment','image/jpeg',0),(517,2,'2015-03-15 04:04:51','2015-03-15 04:04:51','','resume-big-2','','inherit','open','open','','resume-big-2','','','2015-03-15 04:04:51','2015-03-15 04:04:51','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-2.jpg',0,'attachment','image/jpeg',0),(518,2,'2015-03-15 04:04:52','2015-03-15 04:04:52','','resume-big-3','','inherit','open','open','','resume-big-3','','','2015-03-15 04:04:52','2015-03-15 04:04:52','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-3.jpg',0,'attachment','image/jpeg',0),(519,2,'2015-03-15 04:04:52','2015-03-15 04:04:52','','resume-big-4','','inherit','open','open','','resume-big-4','','','2015-03-15 04:04:52','2015-03-15 04:04:52','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-4.jpg',0,'attachment','image/jpeg',0),(520,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-1','','inherit','open','open','','resume-th-1','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-1.jpg',0,'attachment','image/jpeg',0),(521,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-2','','inherit','open','open','','resume-th-2','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-2.jpg',0,'attachment','image/jpeg',0),(522,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-3','','inherit','open','open','','resume-th-3','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-3.jpg',0,'attachment','image/jpeg',0),(523,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-4','','inherit','open','open','','resume-th-4','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-4.jpg',0,'attachment','image/jpeg',0),(524,2,'2015-05-22 18:00:39','2015-05-22 18:00:39','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','future','open','open','','building-a-simple-web-server-with-sinatra','','','2015-04-28 17:02:22','2015-04-28 17:02:22','',0,'http://thesocietea.org/?p=524',0,'post','',0),(525,2,'2015-03-19 17:41:53','2015-03-19 17:41:53','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell a few different instances out where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid CORS or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <strong>Sinatra</strong>.\r\n<h2>What is Sinatra?</h2>\r\n&nbsp;','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:41:53','2015-03-19 17:41:53','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(526,2,'2015-03-19 17:44:11','2015-03-19 17:44:11','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\"><strong>Sinatra</strong></a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:44:11','2015-03-19 17:44:11','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(527,2,'2015-03-19 17:45:09','2015-03-19 17:45:09','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:45:09','2015-03-19 17:45:09','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(528,2,'2015-03-19 17:46:47','2015-03-19 17:46:47','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen:\r\n\r\n[shell]bundle install[/shell]','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:46:47','2015-03-19 17:46:47','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(529,2,'2015-03-19 18:02:07','2015-03-19 18:02:07','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job.\r\n<h2>Getting Deeper</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 18:02:07','2015-03-19 18:02:07','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(530,2,'2015-03-19 18:03:03','2015-03-19 18:03:03','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 18:03:03','2015-03-19 18:03:03','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(531,2,'2015-03-20 17:54:57','2015-03-20 17:54:57','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a post endpoint. You might have noticed something though - we have a strange :id field in our route string. That indicates a parameter value that you can access via a global params variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons\r\n<h2>Deploying to Heroku</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 17:54:57','2015-03-20 17:54:57','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(532,2,'2015-03-20 17:55:25','2015-03-20 17:55:25','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons\r\n<h2>Deploying to Heroku</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 17:55:25','2015-03-20 17:55:25','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(533,2,'2015-03-20 18:08:51','2015-03-20 18:08:51','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:08:51','2015-03-20 18:08:51','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(534,2,'2015-03-20 18:15:14','2015-03-20 18:15:14','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAnd that\'s all you need to do! You just need to require the main app file that you just wrote, and then tell Sinatra to do it\'s thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra and that\'s hosted completely freely by Heroku.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:15:14','2015-03-20 18:15:14','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(535,2,'2015-03-20 18:21:35','2015-03-20 18:21:35','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other microframeworks. Sinatra\'s popularity has inspired similar frameworks in other languages too, like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others.</a>\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:21:35','2015-03-20 18:21:35','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(536,2,'2015-03-20 18:23:52','2015-03-20 18:23:52','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:23:52','2015-03-20 18:23:52','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(537,2,'2015-03-21 04:47:29','2015-03-21 04:47:29','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2015-03-21 04:47:29','2015-03-21 04:47:29','',220,'http://thesocietea.org/2015/03/220-revision-v1/',0,'revision','',0),(538,2,'2015-03-22 15:05:48','2015-03-22 15:05:48','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\n<ul>\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\n	<li>To provide a simple API to interact with a database</li>\n	<li>To easily render HTML pages with dynamic content</li>\n</ul>\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\n<h2>What is Sinatra?</h2>\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\n<h2>Getting Started</h2>\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\n\n[ruby title=\"Gemfile\"]\ngem \'sinatra\'\n[/ruby]\n\nThen to install sinatra, run:\n\n[shell]bundle install[/shell]\n\nNow let\'s create our actual main app.rb file:\n\n[ruby title=\"app.rb\"]\nrequire \'sinatra\'\n\nget \'/\' do\n  puts \'hello world\'\nend\n[/ruby]\n\nAnd that\'s literally all you need for the simplest web server. Run your app using:\n\n[ruby]ruby app.rb[/ruby]\n\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\n<h2>Getting Deeper</h2>\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\n\n[ruby title=\"app.rb\"]\npost \'/post\' do\n  # Create a post\nend\n\nput \'/post/:id\' do\n  # Update a post\nend\n\ndelete \'/post/:id\' do\n  # Delete a post\nend\n[/ruby]\n\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\n\nHere\'s an example:\n\n[ruby title=\"app.rb\"]\nput \'/post/:id\' do\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\nend\n[/ruby]\n\n<h2>Rendering Views</h2>\nWant to render a template when a route is navigated to? That\'s easy:\n\n[ruby title=\"app.rb\"]\nget \'/\' do\n  erb :index\nend\n[/ruby]\n\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\n\n[ruby title=\"app.rb\"]\nget \'/\' do\n  haml :index, :format =&gt; :html5\nend\n[/ruby]\n\nJust make sure you have the gem required!\n<h2>Handling JSON Responses</h2>\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\n\n[ruby title=\"app.rb\"]\nget \'/post/:id\' do\n  content_type :json\n\n  @post = Post.find(params[:id])\n  @post.attributes.to_json # JSON Response\nend\n[/ruby]\n\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\n<h2>Handling Errors</h2>\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\n\n[ruby title=\"app.rb\"]\n# Unprocessable Entity\nerror 422 do\n  { error: &quot;You haz an error&quot; }\nend\n[/ruby]\n\nNow if you want to manually throw that error from a controller, you would do that like this:\n\n[ruby title=\"app.rb\"]\n# Unprocessable Entity\nget \'/\' do\n  return 422\nend\n[/ruby]\n\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\n\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\n\n[ruby title=\"config.ru\"]\nrequire \'./app\'\n\nrun Sinatra::Application\n[/ruby]\n\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\n\n[shell]git push heroku master[/shell]\n\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\n\n<hr class=\"short\" />\n\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\n\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-autosave-v1','','','2015-03-22 15:05:48','2015-03-22 15:05:48','',524,'http://thesocietea.org/2015/03/524-autosave-v1/',0,'revision','',0),(539,2,'2015-03-22 14:58:37','2015-03-22 14:58:37','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 14:58:37','2015-03-22 14:58:37','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(540,2,'2015-03-22 15:05:17','2015-03-22 15:05:17','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 15:05:17','2015-03-22 15:05:17','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(541,2,'2015-03-22 15:06:10','2015-03-22 15:06:10','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 15:06:10','2015-03-22 15:06:10','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(543,2,'2015-03-27 18:11:43','2015-03-27 18:11:43','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so if you\'re ready, feel free to <a title=\"Building a JSON API with Rails – Part 2: Serialization\" href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\">move onto part 2</a>.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-03-27 18:11:43','2015-03-27 18:11:43','',381,'http://thesocietea.org/2015/03/381-revision-v1/',0,'revision','',0),(544,2,'2015-03-31 16:10:49','2015-03-31 16:10:49','','big-resumehaus1','','inherit','open','open','','big-resumehaus1','','','2015-03-31 16:10:49','2015-03-31 16:10:49','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-resumehaus1.jpg',0,'attachment','image/jpeg',0),(545,2,'2015-03-31 16:10:50','2015-03-31 16:10:50','','th-resumehaus1','','inherit','open','open','','th-resumehaus1','','','2015-03-31 16:10:50','2015-03-31 16:10:50','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-resumehaus1.jpg',0,'attachment','image/jpeg',0),(546,2,'2015-03-31 16:39:55','2015-03-31 16:39:55','','big-hydro1','','inherit','open','open','','big-hydro1','','','2015-03-31 16:39:55','2015-03-31 16:39:55','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro1.jpg',0,'attachment','image/jpeg',0),(547,2,'2015-03-31 16:39:56','2015-03-31 16:39:56','','big-hydro2','','inherit','open','open','','big-hydro2','','','2015-03-31 16:39:56','2015-03-31 16:39:56','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro2.jpg',0,'attachment','image/jpeg',0),(548,2,'2015-03-31 16:39:57','2015-03-31 16:39:57','','big-hydro3','','inherit','open','open','','big-hydro3','','','2015-03-31 16:39:57','2015-03-31 16:39:57','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro3.jpg',0,'attachment','image/jpeg',0),(549,2,'2015-03-31 16:39:57','2015-03-31 16:39:57','','big-hydro4','','inherit','open','open','','big-hydro4','','','2015-03-31 16:39:57','2015-03-31 16:39:57','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro4.jpg',0,'attachment','image/jpeg',0),(550,2,'2015-03-31 16:39:58','2015-03-31 16:39:58','','big-hydro5','','inherit','open','open','','big-hydro5','','','2015-03-31 16:39:58','2015-03-31 16:39:58','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro5.jpg',0,'attachment','image/jpeg',0),(551,2,'2015-03-31 16:40:00','2015-03-31 16:40:00','','big-hydro6','','inherit','open','open','','big-hydro6','','','2015-03-31 16:40:00','2015-03-31 16:40:00','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro6.jpg',0,'attachment','image/jpeg',0),(552,2,'2015-03-31 16:40:00','2015-03-31 16:40:00','','big-hydro7','','inherit','open','open','','big-hydro7','','','2015-03-31 16:40:00','2015-03-31 16:40:00','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro7.jpg',0,'attachment','image/jpeg',0),(553,2,'2015-03-31 16:40:01','2015-03-31 16:40:01','','big-hydro8','','inherit','open','open','','big-hydro8','','','2015-03-31 16:40:01','2015-03-31 16:40:01','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro8.jpg',0,'attachment','image/jpeg',0),(554,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro1','','inherit','open','open','','th-hydro1','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro1.jpg',0,'attachment','image/jpeg',0),(555,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro2','','inherit','open','open','','th-hydro2','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro2.jpg',0,'attachment','image/jpeg',0),(556,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro3','','inherit','open','open','','th-hydro3','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro3.jpg',0,'attachment','image/jpeg',0),(557,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro4','','inherit','open','open','','th-hydro4','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro4.jpg',0,'attachment','image/jpeg',0),(558,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro5','','inherit','open','open','','th-hydro5','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro5.jpg',0,'attachment','image/jpeg',0),(559,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro6','','inherit','open','open','','th-hydro6','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro6.jpg',0,'attachment','image/jpeg',0),(560,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro7','','inherit','open','open','','th-hydro7','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro7.jpg',0,'attachment','image/jpeg',0),(561,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro8','','inherit','open','open','','th-hydro8','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro8.jpg',0,'attachment','image/jpeg',0),(562,2,'2015-03-31 16:48:25','2015-03-31 16:48:25','','Hydro','','publish','closed','closed','','hydro','','','2015-04-01 15:33:02','2015-04-01 15:33:02','',0,'http://thesocietea.org/?post_type=project&#038;p=562',1,'project','',0),(564,2,'2015-06-12 17:00:42','2015-06-12 17:00:42','This is the second part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional ruby testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. CURL can help with that. To issue a GET request using cURL, run:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging tool isn\'t specific to Sinatra - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the scope of the currently executing line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to get deep in debugging. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in a <em>group: :development</em> block if you\'d like too, since you\'ll never use pry in production. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nInclude it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow restart your Sinatra server and let\'s check out pry in action. If you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Let\'s go ahead and make that GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you\'re now in the scope in which your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type <strong>exit</strong> to resume normal runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok gives you.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">the main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nTo expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nNgrok will then take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> in the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture above, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs, ngrok tracks and displays which requests were made to which resources:\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we made a request to localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these are some of my favorite tools that I\'ve used lately. Sinatra is a really powerful mini web framework if you\'re familiar with ruby, and if you don\'t know much about it then feel free to check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using Sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can therefore use them in a lot of different situations - which I recommend you do. Regardless of which tools you do use to test your web servers, I hope I provided you with at least a couple more ideas on how to manually debug your web projects.\r\n\r\nHappy building!','Debugging a Simple Web Server','','future','open','open','','debugging-a-simple-web-server','','','2015-04-28 17:02:32','2015-04-28 17:02:32','',0,'https://thesocietea.org/?p=564',0,'post','',0),(565,2,'2015-04-01 18:59:49','2015-04-01 18:59:49','','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 18:59:49','2015-04-01 18:59:49','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(566,2,'2015-04-01 19:12:07','2015-04-01 19:12:07','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n\r\nExpose the web server\r\n\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:12:07','2015-04-01 19:12:07','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(567,2,'2015-04-01 19:19:14','2015-04-01 19:19:14','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose the web server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:19:14','2015-04-01 19:19:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(568,2,'2015-04-01 19:20:58','2015-04-01 19:20:58','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose the web server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:20:58','2015-04-01 19:20:58','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(569,2,'2015-04-01 19:21:56','2015-04-01 19:21:56','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:21:56','2015-04-01 19:21:56','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(570,2,'2015-04-01 19:36:36','2015-04-01 19:36:36','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:36:36','2015-04-01 19:36:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(571,2,'2015-04-02 22:21:39','2015-04-02 22:21:39','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups. I have spoken at high schools, universities, and local user groups in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-04-02 22:21:39','2015-04-02 22:21:39','',13,'https://thesocietea.org/2015/04/13-revision-v1/',0,'revision','',0),(572,2,'2015-04-02 22:22:06','2015-04-02 22:22:06','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups. I have spoken at high schools, universities, and local user groups in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 40 - 45 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-04-02 22:22:06','2015-04-02 22:22:06','',13,'https://thesocietea.org/2015/04/13-revision-v1/',0,'revision','',0),(574,2,'2015-04-09 22:32:14','2015-04-09 22:32:14','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:32:14','2015-04-09 22:32:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(575,2,'2015-04-09 22:42:30','2015-04-09 22:42:30','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567 --data &quot;param1=value1&amp;param2=value2&quot;\r\n[/shell]\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:42:30','2015-04-09 22:42:30','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(576,2,'2015-04-09 22:43:28','2015-04-09 22:43:28','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:43:28','2015-04-09 22:43:28','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(577,2,'2015-04-09 22:54:21','2015-04-09 22:54:21','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"][/ruby]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:54:21','2015-04-09 22:54:21','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(578,2,'2015-04-09 22:55:36','2015-04-09 22:55:36','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\nbinding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging!\r\n\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:55:36','2015-04-09 22:55:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(579,2,'2015-04-10 14:32:33','2015-04-10 14:32:33','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging!\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 14:32:33','2015-04-10 14:32:33','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(580,2,'2015-04-10 14:52:54','2015-04-10 14:52:54','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action.\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 14:52:54','2015-04-10 14:52:54','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(581,2,'2015-04-10 15:08:42','2015-04-10 15:08:42','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:08:42','2015-04-10 15:08:42','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(582,2,'2015-04-10 15:09:21','2015-04-10 15:09:21','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:09:21','2015-04-10 15:09:21','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(583,2,'2015-04-10 15:09:36','2015-04-10 15:09:36','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:09:36','2015-04-10 15:09:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(584,2,'2015-04-10 15:11:01','2015-04-10 15:11:01','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:11:01','2015-04-10 15:11:01','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(585,2,'2015-04-10 15:11:22','2015-04-10 15:11:22','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:11:22','2015-04-10 15:11:22','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(586,2,'2015-04-10 15:12:28','2015-04-10 15:12:28','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<hr class=\"short\" />\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:12:28','2015-04-10 15:12:28','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(587,2,'2015-04-10 15:13:11','2015-04-10 15:13:11','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:13:11','2015-04-10 15:13:11','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(588,2,'2015-04-10 15:15:19','2015-04-10 15:15:19','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:15:19','2015-04-10 15:15:19','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(589,2,'2015-04-10 20:13:32','2015-04-10 20:13:32','','ngrok','','inherit','open','open','','screen-shot-2015-04-10-at-3-03-28-pm','','','2015-04-10 20:13:44','2015-04-10 20:13:44','',564,'https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png',0,'attachment','image/png',0),(590,2,'2015-04-10 20:13:47','2015-04-10 20:13:47','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<a href=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png\"><img class=\"alignnone size-medium wp-image-589\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-300x120.png\" alt=\"ngrok\" width=\"300\" height=\"120\" /></a>','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:13:47','2015-04-10 20:13:47','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(591,2,'2015-04-10 20:14:25','2015-04-10 20:14:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\"alignright wp-image-589 size-large\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:14:25','2015-04-10 20:14:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(592,2,'2015-04-10 20:14:48','2015-04-10 20:14:48','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:14:48','2015-04-10 20:14:48','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(593,2,'2015-04-10 20:20:03','2015-04-10 20:20:03','','ngrok logs','','inherit','open','open','','screen-shot-2015-04-10-at-3-19-45-pm','','','2015-04-10 20:20:10','2015-04-10 20:20:10','',564,'https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png',0,'attachment','image/png',0),(594,2,'2015-04-10 20:20:27','2015-04-10 20:20:27','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" class=\"aligncenter size-full wp-image-593\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:20:27','2015-04-10 20:20:27','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(595,2,'2015-04-10 20:20:45','2015-04-10 20:20:45','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-medium\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM-300x136.png\" alt=\"ngrok logs\" width=\"300\" height=\"136\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:20:45','2015-04-10 20:20:45','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(596,2,'2015-04-10 20:21:25','2015-04-10 20:21:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:21:25','2015-04-10 20:21:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(597,2,'2015-04-10 20:27:06','2015-04-10 20:27:06','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:27:06','2015-04-10 20:27:06','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(598,2,'2015-04-10 20:27:59','2015-04-10 20:27:59','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:27:59','2015-04-10 20:27:59','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(599,2,'2015-04-10 20:29:17','2015-04-10 20:29:17','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:29:17','2015-04-10 20:29:17','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(600,2,'2015-04-10 20:40:25','2015-04-10 20:40:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s a lot more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:40:25','2015-04-10 20:40:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(601,2,'2015-04-10 20:43:14','2015-04-10 20:43:14','This is the second part of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, so if you may want to start there if you haven\'t already done so. In this post we\'ll be reviewing how you can easily debug that web server we built using ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> framework.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:43:14','2015-04-10 20:43:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(602,2,'2015-04-10 20:52:40','2015-04-10 20:52:40','This is the next part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:52:40','2015-04-10 20:52:40','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(603,2,'2015-04-10 21:20:05','2015-04-10 21:20:05','This is the second part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional ruby testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. CURL can help with that. To issue a GET request using cURL, run:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging tool isn\'t specific to Sinatra - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the scope of the currently executing line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to get deep in debugging. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in a <em>group: :development</em> block if you\'d like too, since you\'ll never use pry in production. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nInclude it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow restart your Sinatra server and let\'s check out pry in action. If you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Let\'s go ahead and make that GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you\'re now in the scope in which your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type <strong>exit</strong> to resume normal runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok gives you.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">the main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nTo expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nNgrok will then take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> in the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture above, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs, ngrok tracks and displays which requests were made to which resources:\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we made a request to localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these are some of my favorite tools that I\'ve used lately. Sinatra is a really powerful mini web framework if you\'re familiar with ruby, and if you don\'t know much about it then feel free to check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using Sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can therefore use them in a lot of different situations - which I recommend you do. Regardless of which tools you do use to test your web servers, I hope I provided you with at least a couple more ideas on how to manually debug your web projects.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 21:20:05','2015-04-10 21:20:05','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(604,2,'2015-04-15 22:12:16','2015-04-15 22:12:16','Below you\'ll find my blog posts. You can check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-revision-v1','','','2015-04-15 22:12:16','2015-04-15 22:12:16','',16,'https://thesocietea.org/2015/04/16-revision-v1/',0,'revision','',0),(605,2,'2015-04-17 17:04:29','2015-04-17 17:04:29','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-17 17:04:29','2015-04-17 17:04:29','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(606,2,'2015-04-24 17:32:01','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2015-04-24 17:32:01','0000-00-00 00:00:00','',0,'https://thesocietea.org/?p=606',0,'post','',0),(607,2,'2015-07-24 18:00:42','2015-07-24 18:00:42','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is executing it.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language execution style isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','future','open','open','','programming-concepts-compiled-and-interpreted-languages','','','2015-04-28 17:03:13','2015-04-28 17:03:13','',0,'https://thesocietea.org/?p=607',0,'post','',0),(608,2,'2015-04-24 17:41:01','2015-04-24 17:41:01','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>Compilation</h2>\r\n<h2>Interpretation</h2>','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 17:41:01','2015-04-24 17:41:01','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(609,2,'2015-04-24 19:25:35','2015-04-24 19:25:35','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>tl;dr</h2>\r\nA compiled language is one where the program, once compiled, is expressed in the instructions of the target machine. An interpreted language is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change the possible functions\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 19:25:35','2015-04-24 19:25:35','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(610,2,'2015-04-24 20:59:42','2015-04-24 20:59:42','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>tl;dr</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages that we can code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and/or interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\n<strong>Compilation</strong> is where the program, once compiled, is expressed in the instructions of the target machine. <strong>Interpretation</strong> is where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change any possibilities with how you write the actual program; what this means is that languages that strictly employ compilation vs both will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 20:59:42','2015-04-24 20:59:42','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(611,2,'2015-04-24 21:10:05','2015-04-24 21:10:05','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and/or interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\n<strong>Compilation</strong> is where the program, once compiled, is expressed in the instructions of the target machine. <strong>Interpretation</strong> is where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change any possibilities with how you write the actual program; what this means is that languages that strictly employ compilation vs both will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:10:05','2015-04-24 21:10:05','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(612,2,'2015-04-24 21:12:35','2015-04-24 21:12:35','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\n&nbsp;\r\n<h2>Interpreted Languages</h2>\r\n&nbsp;','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:12:35','2015-04-24 21:12:35','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(613,2,'2015-04-24 21:28:24','2015-04-24 21:28:24','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantaged of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious.\r\n<h2>Interpreted Languages</h2>\r\n<h4> Bytecode Languages</h4>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:28:24','2015-04-24 21:28:24','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(614,2,'2015-04-24 21:28:43','2015-04-24 21:28:43','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantaged of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious.\r\n<h2>Interpreted Languages</h2>\r\n<h3> Bytecode Languages</h3>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:28:43','2015-04-24 21:28:43','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(615,2,'2015-04-26 19:00:04','2015-04-26 19:00:04','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-04-26 19:00:04','2015-04-26 19:00:04','',504,'https://thesocietea.org/2015/04/504-revision-v1/',0,'revision','',0),(616,2,'2015-04-27 15:07:51','2015-04-27 15:07:51','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\n<h2>Serialization</h2>\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\n\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\n<h2>Setting It Up</h2>\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\n<ul>\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\n</ul>\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\n\nLet\'s install AMS by adding it to our Gemfile:\n\n[ruby title=\"Gemfile\"]\'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\n\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\n\n[shell]rails g serializer user[/shell]\n\nAnd that will create the following file:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id\nend\n[/ruby]\n\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\n\n[code title=\"http://localhost:3000/users\"]\n{users: [{id: 1},{id: 2}]}\n[/code]\n\nThis is different from what we\'ve seen in two ways.\n<ol>\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\n</ol>\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\n\n[shell]\nrails g serializer post\nrails g serializer comment\n[/shell]\n\n<h2>Configuring the Serializers</h2>\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at\nend\n[/ruby]\n\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at\n\n  has_many :posts\nend\n[/ruby]\n\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\n\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at, :say_hello\n\n  has_many :posts\n\n  def say_hello\n    &quot;Hello #{object.email}!&quot;\n  end\nend\n[/ruby]\n\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\n\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n def default_serializer_options\n   { root: false }\n end\n[/ruby]\n\n<h2>Wrap Up</h2>\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\n\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\n\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-autosave-v1','','','2015-04-27 15:07:51','2015-04-27 15:07:51','',443,'https://thesocietea.org/2015/04/443-autosave-v1/',0,'revision','',0),(617,2,'2015-04-27 15:07:52','2015-04-27 15:07:52','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-27 15:07:52','2015-04-27 15:07:52','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(618,2,'2015-04-27 15:08:58','2015-04-27 15:08:58','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]gem \'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-27 15:08:58','2015-04-27 15:08:58','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(619,2,'2015-04-27 20:19:44','2015-04-27 20:19:44','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Some of the concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation is a new technique that helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n<h3> Bytecode Languages</h3>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:19:44','2015-04-27 20:19:44','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(620,2,'2015-04-27 20:44:16','2015-04-27 20:44:16','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n<h2> Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:44:16','2015-04-27 20:44:16','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(621,2,'2015-04-27 20:45:53','2015-04-27 20:45:53','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"mini\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:45:53','2015-04-27 20:45:53','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(622,2,'2015-04-27 20:46:07','2015-04-27 20:46:07','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:46:07','2015-04-27 20:46:07','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(623,2,'2015-04-27 20:55:33','2015-04-27 20:55:33','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:55:33','2015-04-27 20:55:33','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(624,2,'2015-04-27 20:58:42','2015-04-27 20:58:42','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:58:42','2015-04-27 20:58:42','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(625,2,'2015-04-27 21:05:07','2015-04-27 21:05:07','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:05:07','2015-04-27 21:05:07','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(626,2,'2015-04-27 21:45:13','2015-04-27 21:45:13','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:45:13','2015-04-27 21:45:13','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(627,2,'2015-04-27 21:58:27','2015-04-27 21:58:27','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted through its various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:58:27','2015-04-27 21:58:27','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(628,2,'2015-04-27 21:59:57','2015-04-27 21:59:57','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted through its various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:59:57','2015-04-27 21:59:57','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(629,2,'2015-04-27 22:06:55','2015-04-27 22:06:55','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Leave a comment if you want to see any specific P<strong>rogramming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 22:06:55','2015-04-27 22:06:55','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(630,2,'2015-04-27 22:08:29','2015-04-27 22:08:29','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 22:08:29','2015-04-27 22:08:29','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(631,2,'2015-04-28 16:07:10','2015-04-28 16:07:10','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:07:10','2015-04-28 16:07:10','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(632,2,'2015-04-28 16:19:48','2015-04-28 16:19:48','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:19:48','2015-04-28 16:19:48','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(633,2,'2015-04-28 16:42:51','2015-04-28 16:42:51','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:42:51','2015-04-28 16:42:51','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(634,2,'2015-04-28 16:53:40','2015-04-28 16:53:40','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is executing it.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language execution style isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:53:40','2015-04-28 16:53:40','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (25,2,0),(26,2,0),(27,2,0),(32,2,0),(142,1,0),(142,3,0),(151,2,0),(154,1,0),(158,1,0),(167,1,0),(172,1,0),(220,1,0),(233,1,0),(261,1,0),(282,1,0),(301,1,0),(305,1,0),(335,2,0),(346,1,0),(357,1,0),(381,1,0),(383,1,0),(443,1,0),(466,1,0),(469,1,0),(487,1,0),(499,2,0),(504,1,0),(524,1,0),(564,1,0),(607,1,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,19),(2,2,'nav_menu','',0,7),(3,3,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `name` (`name`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Main Menu','main-menu',0),(3,'tea','tea',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (25,2,'nickname','thecodeboss'),(26,2,'first_name',''),(27,2,'last_name',''),(28,2,'description',''),(29,2,'rich_editing','true'),(30,2,'comment_shortcuts','false'),(31,2,'admin_color','fresh'),(32,2,'use_ssl','0'),(33,2,'show_admin_bar_front','true'),(34,2,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(35,2,'wp_user_level','10'),(36,2,'dismissed_wp_pointers','wp360_locks,wp390_widgets,wp410_dfw'),(38,2,'wp_dashboard_quick_press_last_post_id','606'),(40,2,'wp_user-settings','editor=html&hidetb=1&libraryContent=browse&urlbutton=none&imgsize=full&align=center&wplink=1'),(41,2,'wp_user-settings-time','1430167548'),(42,2,'nav_menu_recently_edited','2'),(43,2,'managenav-menuscolumnshidden','a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}'),(44,2,'metaboxhidden_nav-menus','a:4:{i:0;s:8:\"add-post\";i:1;s:11:\"add-project\";i:2;s:12:\"add-post_tag\";i:3;s:15:\"add-post_format\";}'),(49,2,'session_tokens','a:1:{s:64:\"ef6fa1ef100a4a325a6d8d4654c814e049943ed06f9e7c9c85cc38a45f1e362f\";a:4:{s:10:\"expiration\";i:1430411030;s:2:\"ip\";s:15:\"216.201.130.138\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36\";s:5:\"login\";i:1430238230;}}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (2,'thecodeboss','$P$Bx6dI7ZBqWmqnFzI/Y8ka68Z1Xbql8/','thecodeboss','alkrauss48@gmail.com','','2015-04-01 15:29:07','',0,'thecodeboss');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-04-28 13:06:49
