-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: the_societea_2
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_cfs_sessions`
--

DROP TABLE IF EXISTS `wp_cfs_sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_sessions` (
  `id` varchar(32) NOT NULL DEFAULT '',
  `data` text,
  `expires` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_sessions`
--

LOCK TABLES `wp_cfs_sessions` WRITE;
/*!40000 ALTER TABLE `wp_cfs_sessions` DISABLE KEYS */;
INSERT INTO `wp_cfs_sessions` VALUES ('30e5b5229e3c892496d9edb69c593453','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168192'),('3b84147ce37dce9bcd6ded942c4d6a29','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168184'),('85157317e87ebab7142d40eae29b8ae0','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168407'),('a3d05010b1adbed7ab44e4e238c1defc','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168295'),('af153133b82f809ec7d3376235fead5b','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168126'),('c2ce0c3c1498dee02058f8403e9002e4','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168418'),('c86efd5f293b1aaa5b827738d935b914','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434167115'),('e865ee2ff8abf6dda396c84c9a8dbe89','a:7:{s:7:\"post_id\";i:13;s:9:\"post_type\";s:4:\"post\";s:11:\"post_status\";s:5:\"draft\";s:12:\"field_groups\";a:2:{i:0;i:8;i:1;i:150;}s:20:\"confirmation_message\";s:0:\"\";s:16:\"confirmation_url\";s:0:\"\";s:9:\"front_end\";b:0;}','1434168247');
/*!40000 ALTER TABLE `wp_cfs_sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_cfs_values`
--

DROP TABLE IF EXISTS `wp_cfs_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_cfs_values` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `field_id` int(10) unsigned DEFAULT NULL,
  `meta_id` int(10) unsigned DEFAULT NULL,
  `post_id` int(10) unsigned DEFAULT NULL,
  `base_field_id` int(10) unsigned DEFAULT '0',
  `hierarchy` text,
  `depth` int(10) unsigned DEFAULT '0',
  `weight` int(10) unsigned DEFAULT '0',
  `sub_weight` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `field_id_idx` (`field_id`),
  KEY `post_id_idx` (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4334 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_cfs_values`
--

LOCK TABLES `wp_cfs_values` WRITE;
/*!40000 ALTER TABLE `wp_cfs_values` DISABLE KEYS */;
INSERT INTO `wp_cfs_values` VALUES (3,1,148,6,0,'',0,0,0),(2538,7,3048,252,0,'',0,0,0),(2539,6,3049,252,0,'',0,0,0),(2540,8,3050,252,0,'',0,0,0),(2541,9,3051,252,0,'',0,0,0),(2542,10,3052,252,0,'',0,0,0),(2543,11,3053,252,0,'',0,0,0),(2544,3,3054,252,2,'2:0:3',1,0,0),(2545,4,3055,252,2,'2:0:4',1,0,0),(2546,5,3056,252,2,'2:0:5',1,0,0),(2547,3,3057,252,2,'2:1:3',1,1,0),(2548,4,3058,252,2,'2:1:4',1,1,0),(2549,5,3059,252,2,'2:1:5',1,1,0),(2550,3,3060,252,2,'2:2:3',1,2,0),(2551,4,3061,252,2,'2:2:4',1,2,0),(2552,5,3062,252,2,'2:2:5',1,2,0),(2553,3,3063,252,2,'2:3:3',1,3,0),(2554,4,3064,252,2,'2:3:4',1,3,0),(2555,5,3065,252,2,'2:3:5',1,3,0),(2556,7,3066,63,0,'',0,0,0),(2557,6,3067,63,0,'',0,0,0),(2558,8,3068,63,0,'',0,0,0),(2559,9,3069,63,0,'',0,0,0),(2560,10,3070,63,0,'',0,0,0),(2561,11,3071,63,0,'',0,0,0),(2562,3,3072,63,2,'2:0:3',1,0,0),(2563,4,3073,63,2,'2:0:4',1,0,0),(2564,5,3074,63,2,'2:0:5',1,0,0),(2565,3,3075,63,2,'2:1:3',1,1,0),(2566,4,3076,63,2,'2:1:4',1,1,0),(2567,5,3077,63,2,'2:1:5',1,1,0),(2568,3,3078,63,2,'2:2:3',1,2,0),(2569,4,3079,63,2,'2:2:4',1,2,0),(2570,5,3080,63,2,'2:2:5',1,2,0),(2571,3,3081,63,2,'2:3:3',1,3,0),(2572,4,3082,63,2,'2:3:4',1,3,0),(2573,5,3083,63,2,'2:3:5',1,3,0),(2574,7,3084,64,0,'',0,0,0),(2575,6,3085,64,0,'',0,0,0),(2576,8,3086,64,0,'',0,0,0),(2577,9,3087,64,0,'',0,0,0),(2578,10,3088,64,0,'',0,0,0),(2579,11,3089,64,0,'',0,0,0),(2580,3,3090,64,2,'2:0:3',1,0,0),(2581,4,3091,64,2,'2:0:4',1,0,0),(2582,5,3092,64,2,'2:0:5',1,0,0),(2583,3,3093,64,2,'2:1:3',1,1,0),(2584,4,3094,64,2,'2:1:4',1,1,0),(2585,5,3095,64,2,'2:1:5',1,1,0),(2586,3,3096,64,2,'2:2:3',1,2,0),(2587,4,3097,64,2,'2:2:4',1,2,0),(2588,5,3098,64,2,'2:2:5',1,2,0),(2589,3,3099,64,2,'2:3:3',1,3,0),(2590,4,3100,64,2,'2:3:4',1,3,0),(2591,5,3101,64,2,'2:3:5',1,3,0),(2610,7,3120,214,0,'',0,0,0),(2611,6,3121,214,0,'',0,0,0),(2612,8,3122,214,0,'',0,0,0),(2613,9,3123,214,0,'',0,0,0),(2614,10,3124,214,0,'',0,0,0),(2615,11,3125,214,0,'',0,0,0),(2616,3,3126,214,2,'2:0:3',1,0,0),(2617,4,3127,214,2,'2:0:4',1,0,0),(2618,5,3128,214,2,'2:0:5',1,0,0),(2619,3,3129,214,2,'2:1:3',1,1,0),(2620,4,3130,214,2,'2:1:4',1,1,0),(2621,5,3131,214,2,'2:1:5',1,1,0),(2622,3,3132,214,2,'2:2:3',1,2,0),(2623,4,3133,214,2,'2:2:4',1,2,0),(2624,5,3134,214,2,'2:2:5',1,2,0),(2625,3,3135,214,2,'2:3:3',1,3,0),(2626,4,3136,214,2,'2:3:4',1,3,0),(2627,5,3137,214,2,'2:3:5',1,3,0),(2628,7,3138,68,0,'',0,0,0),(2629,6,3139,68,0,'',0,0,0),(2630,8,3140,68,0,'',0,0,0),(2631,9,3141,68,0,'',0,0,0),(2632,10,3142,68,0,'',0,0,0),(2633,11,3143,68,0,'',0,0,0),(2634,3,3144,68,2,'2:0:3',1,0,0),(2635,4,3145,68,2,'2:0:4',1,0,0),(2636,5,3146,68,2,'2:0:5',1,0,0),(2637,3,3147,68,2,'2:1:3',1,1,0),(2638,4,3148,68,2,'2:1:4',1,1,0),(2639,5,3149,68,2,'2:1:5',1,1,0),(2640,7,3150,38,0,'',0,0,0),(2641,6,3151,38,0,'',0,0,0),(2642,8,3152,38,0,'',0,0,0),(2643,9,3153,38,0,'',0,0,0),(2644,10,3154,38,0,'',0,0,0),(2645,11,3155,38,0,'',0,0,0),(2646,3,3156,38,2,'2:0:3',1,0,0),(2647,4,3157,38,2,'2:0:4',1,0,0),(2648,5,3158,38,2,'2:0:5',1,0,0),(2649,3,3159,38,2,'2:1:3',1,1,0),(2650,4,3160,38,2,'2:1:4',1,1,0),(2651,5,3161,38,2,'2:1:5',1,1,0),(2652,3,3162,38,2,'2:2:3',1,2,0),(2653,4,3163,38,2,'2:2:4',1,2,0),(2654,5,3164,38,2,'2:2:5',1,2,0),(2655,3,3165,38,2,'2:3:3',1,3,0),(2656,4,3166,38,2,'2:3:4',1,3,0),(2657,5,3167,38,2,'2:3:5',1,3,0),(3041,7,5361,336,0,'',0,0,0),(3042,6,5362,336,0,'',0,0,0),(3043,8,5363,336,0,'',0,0,0),(3044,9,5364,336,0,'',0,0,0),(3045,10,5365,336,0,'',0,0,0),(3046,11,5366,336,0,'',0,0,0),(3047,3,5367,336,2,'2:0:3',1,0,0),(3048,4,5368,336,2,'2:0:4',1,0,0),(3049,5,5369,336,2,'2:0:5',1,0,0),(3050,3,5370,336,2,'2:1:3',1,1,0),(3051,4,5371,336,2,'2:1:4',1,1,0),(3052,5,5372,336,2,'2:1:5',1,1,0),(3053,3,5373,336,2,'2:2:3',1,2,0),(3054,4,5374,336,2,'2:2:4',1,2,0),(3055,5,5375,336,2,'2:2:5',1,2,0),(3056,3,5376,336,2,'2:3:3',1,3,0),(3057,4,5377,336,2,'2:3:4',1,3,0),(3058,5,5378,336,2,'2:3:5',1,3,0),(3059,7,5379,65,0,'',0,0,0),(3060,6,5380,65,0,'',0,0,0),(3061,8,5381,65,0,'',0,0,0),(3062,9,5382,65,0,'',0,0,0),(3063,10,5383,65,0,'',0,0,0),(3064,11,5384,65,0,'',0,0,0),(3065,3,5385,65,2,'2:0:3',1,0,0),(3066,4,5386,65,2,'2:0:4',1,0,0),(3067,5,5387,65,2,'2:0:5',1,0,0),(3068,3,5388,65,2,'2:1:3',1,1,0),(3069,4,5389,65,2,'2:1:4',1,1,0),(3070,5,5390,65,2,'2:1:5',1,1,0),(3071,3,5391,65,2,'2:2:3',1,2,0),(3072,4,5392,65,2,'2:2:4',1,2,0),(3073,5,5393,65,2,'2:2:5',1,2,0),(3074,3,5394,65,2,'2:3:3',1,3,0),(3075,4,5395,65,2,'2:3:4',1,3,0),(3076,5,5396,65,2,'2:3:5',1,3,0),(3387,7,8924,429,0,'',0,0,0),(3388,6,8925,429,0,'',0,0,0),(3389,8,8926,429,0,'',0,0,0),(3390,9,8927,429,0,'',0,0,0),(3391,10,8928,429,0,'',0,0,0),(3392,11,8929,429,0,'',0,0,0),(3393,3,8930,429,2,'2:0:3',1,0,0),(3394,4,8931,429,2,'2:0:4',1,0,0),(3395,5,8932,429,2,'2:0:5',1,0,0),(3396,3,8933,429,2,'2:1:3',1,1,0),(3397,4,8934,429,2,'2:1:4',1,1,0),(3398,5,8935,429,2,'2:1:5',1,1,0),(3399,3,8936,429,2,'2:2:3',1,2,0),(3400,4,8937,429,2,'2:2:4',1,2,0),(3401,5,8938,429,2,'2:2:5',1,2,0),(3402,3,8939,429,2,'2:3:3',1,3,0),(3403,4,8940,429,2,'2:3:4',1,3,0),(3404,5,8941,429,2,'2:3:5',1,3,0),(3405,1,9315,30,0,'',0,0,0),(3406,16,9316,30,0,'',0,0,0),(3407,7,9317,66,0,'',0,0,0),(3408,6,9318,66,0,'',0,0,0),(3409,8,9319,66,0,'',0,0,0),(3410,9,9320,66,0,'',0,0,0),(3411,10,9321,66,0,'',0,0,0),(3412,11,9322,66,0,'',0,0,0),(3413,3,9323,66,2,'2:0:3',1,0,0),(3414,4,9324,66,2,'2:0:4',1,0,0),(3415,5,9325,66,2,'2:0:5',1,0,0),(3416,3,9326,66,2,'2:1:3',1,1,0),(3417,4,9327,66,2,'2:1:4',1,1,0),(3418,5,9328,66,2,'2:1:5',1,1,0),(3419,3,9329,66,2,'2:2:3',1,2,0),(3420,4,9330,66,2,'2:2:4',1,2,0),(3421,5,9331,66,2,'2:2:5',1,2,0),(3422,3,9332,66,2,'2:3:3',1,3,0),(3423,4,9333,66,2,'2:3:4',1,3,0),(3424,5,9334,66,2,'2:3:5',1,3,0),(3425,7,9335,67,0,'',0,0,0),(3426,6,9336,67,0,'',0,0,0),(3427,8,9337,67,0,'',0,0,0),(3428,9,9338,67,0,'',0,0,0),(3429,10,9339,67,0,'',0,0,0),(3430,11,9340,67,0,'',0,0,0),(3431,3,9341,67,2,'2:0:3',1,0,0),(3432,4,9342,67,2,'2:0:4',1,0,0),(3433,5,9343,67,2,'2:0:5',1,0,0),(3434,3,9344,67,2,'2:1:3',1,1,0),(3435,4,9345,67,2,'2:1:4',1,1,0),(3436,5,9346,67,2,'2:1:5',1,1,0),(3437,3,9347,67,2,'2:2:3',1,2,0),(3438,4,9348,67,2,'2:2:4',1,2,0),(3439,5,9349,67,2,'2:2:5',1,2,0),(3557,7,10753,515,0,'',0,0,0),(3558,6,10754,515,0,'',0,0,0),(3559,8,10755,515,0,'',0,0,0),(3560,9,10756,515,0,'',0,0,0),(3561,10,10757,515,0,'',0,0,0),(3562,11,10758,515,0,'',0,0,0),(3563,3,10759,515,2,'2:0:3',1,0,0),(3564,4,10760,515,2,'2:0:4',1,0,0),(3565,5,10761,515,2,'2:0:5',1,0,0),(3566,3,10762,515,2,'2:1:3',1,1,0),(3567,4,10763,515,2,'2:1:4',1,1,0),(3568,5,10764,515,2,'2:1:5',1,1,0),(3569,3,10765,515,2,'2:2:3',1,2,0),(3570,4,10766,515,2,'2:2:4',1,2,0),(3571,5,10767,515,2,'2:2:5',1,2,0),(3572,3,10768,515,2,'2:3:3',1,3,0),(3573,4,10769,515,2,'2:3:4',1,3,0),(3574,5,10770,515,2,'2:3:5',1,3,0),(3575,7,10771,459,0,'',0,0,0),(3576,6,10772,459,0,'',0,0,0),(3577,8,10773,459,0,'',0,0,0),(3578,9,10774,459,0,'',0,0,0),(3579,10,10775,459,0,'',0,0,0),(3580,11,10776,459,0,'',0,0,0),(3581,3,10777,459,2,'2:0:3',1,0,0),(3582,4,10778,459,2,'2:0:4',1,0,0),(3583,5,10779,459,2,'2:0:5',1,0,0),(3584,3,10780,459,2,'2:1:3',1,1,0),(3585,4,10781,459,2,'2:1:4',1,1,0),(3586,5,10782,459,2,'2:1:5',1,1,0),(3587,3,10783,459,2,'2:2:3',1,2,0),(3588,4,10784,459,2,'2:2:4',1,2,0),(3589,5,10785,459,2,'2:2:5',1,2,0),(3590,13,10787,4,12,'12:0:13',1,0,0),(3591,14,10788,4,12,'12:0:14',1,0,0),(3592,15,10789,4,12,'12:0:15',1,0,0),(3593,13,10790,4,12,'12:1:13',1,1,0),(3594,14,10791,4,12,'12:1:14',1,1,0),(3595,15,10792,4,12,'12:1:15',1,1,0),(3596,13,10793,4,12,'12:2:13',1,2,0),(3597,14,10794,4,12,'12:2:14',1,2,0),(3598,15,10795,4,12,'12:2:15',1,2,0),(3599,13,10796,4,12,'12:3:13',1,3,0),(3600,14,10797,4,12,'12:3:14',1,3,0),(3601,15,10798,4,12,'12:3:15',1,3,0),(3602,13,10799,4,12,'12:4:13',1,4,0),(3603,14,10800,4,12,'12:4:14',1,4,0),(3604,15,10801,4,12,'12:4:15',1,4,0),(3605,13,10802,4,12,'12:5:13',1,5,0),(3606,14,10803,4,12,'12:5:14',1,5,0),(3607,15,10804,4,12,'12:5:15',1,5,0),(3608,13,10805,4,12,'12:6:13',1,6,0),(3609,14,10806,4,12,'12:6:14',1,6,0),(3610,15,10807,4,12,'12:6:15',1,6,0),(3611,13,10808,4,12,'12:7:13',1,7,0),(3612,14,10809,4,12,'12:7:14',1,7,0),(3613,15,10810,4,12,'12:7:15',1,7,0),(3680,7,10971,562,0,'',0,0,0),(3681,6,10972,562,0,'',0,0,0),(3682,8,10973,562,0,'',0,0,0),(3683,9,10974,562,0,'',0,0,0),(3684,10,10975,562,0,'',0,0,0),(3685,11,10976,562,0,'',0,0,0),(3686,3,10977,562,2,'2:0:3',1,0,0),(3687,4,10978,562,2,'2:0:4',1,0,0),(3688,5,10979,562,2,'2:0:5',1,0,0),(3689,3,10980,562,2,'2:1:3',1,1,0),(3690,4,10981,562,2,'2:1:4',1,1,0),(3691,5,10982,562,2,'2:1:5',1,1,0),(3692,3,10983,562,2,'2:2:3',1,2,0),(3693,4,10984,562,2,'2:2:4',1,2,0),(3694,5,10985,562,2,'2:2:5',1,2,0),(3695,3,10986,562,2,'2:3:3',1,3,0),(3696,4,10987,562,2,'2:3:4',1,3,0),(3697,5,10988,562,2,'2:3:5',1,3,0),(3698,3,10989,562,2,'2:4:3',1,4,0),(3699,4,10990,562,2,'2:4:4',1,4,0),(3700,5,10991,562,2,'2:4:5',1,4,0),(3701,3,10992,562,2,'2:5:3',1,5,0),(3702,4,10993,562,2,'2:5:4',1,5,0),(3703,5,10994,562,2,'2:5:5',1,5,0),(3704,3,10995,562,2,'2:6:3',1,6,0),(3705,4,10996,562,2,'2:6:4',1,6,0),(3706,5,10997,562,2,'2:6:5',1,6,0),(3707,3,10998,562,2,'2:7:3',1,7,0),(3708,4,10999,562,2,'2:7:4',1,7,0),(3709,5,11000,562,2,'2:7:5',1,7,0),(4020,1,11688,16,0,'',0,0,0),(4021,16,11689,16,0,'',0,0,0),(4256,1,15838,13,0,'',0,0,0),(4257,16,15839,13,0,'',0,0,0),(4258,18,15840,13,17,'17:0:18',1,0,0),(4259,22,15841,13,17,'17:0:22',1,0,0),(4260,20,15842,13,17,'17:0:19:0:20',2,0,0),(4261,21,15843,13,17,'17:0:19:0:21',2,0,0),(4262,20,15844,13,17,'17:0:19:1:20',2,1,0),(4263,21,15845,13,17,'17:0:19:1:21',2,1,0),(4264,20,15846,13,17,'17:0:19:2:20',2,2,0),(4265,21,15847,13,17,'17:0:19:2:21',2,2,0),(4266,20,15848,13,17,'17:0:19:3:20',2,3,0),(4267,21,15849,13,17,'17:0:19:3:21',2,3,0),(4268,20,15850,13,17,'17:0:19:4:20',2,4,0),(4269,21,15851,13,17,'17:0:19:4:21',2,4,0),(4270,20,15852,13,17,'17:0:19:5:20',2,5,0),(4271,21,15853,13,17,'17:0:19:5:21',2,5,0),(4272,20,15854,13,17,'17:0:19:6:20',2,6,0),(4273,21,15855,13,17,'17:0:19:6:21',2,6,0),(4274,20,15856,13,17,'17:0:19:7:20',2,7,0),(4275,21,15857,13,17,'17:0:19:7:21',2,7,0),(4276,20,15858,13,17,'17:0:19:8:20',2,8,0),(4277,21,15859,13,17,'17:0:19:8:21',2,8,0),(4278,20,15860,13,17,'17:0:19:9:20',2,9,0),(4279,21,15861,13,17,'17:0:19:9:21',2,9,0),(4280,20,15862,13,17,'17:0:19:10:20',2,10,0),(4281,21,15863,13,17,'17:0:19:10:21',2,10,0),(4282,20,15864,13,17,'17:0:19:11:20',2,11,0),(4283,21,15865,13,17,'17:0:19:11:21',2,11,0),(4284,18,15866,13,17,'17:1:18',1,1,0),(4285,22,15867,13,17,'17:1:22',1,1,0),(4286,20,15868,13,17,'17:1:19:0:20',2,0,0),(4287,21,15869,13,17,'17:1:19:0:21',2,0,0),(4288,20,15870,13,17,'17:1:19:1:20',2,1,0),(4289,21,15871,13,17,'17:1:19:1:21',2,1,0),(4290,20,15872,13,17,'17:1:19:2:20',2,2,0),(4291,21,15873,13,17,'17:1:19:2:21',2,2,0),(4292,20,15874,13,17,'17:1:19:3:20',2,3,0),(4293,21,15875,13,17,'17:1:19:3:21',2,3,0),(4294,20,15876,13,17,'17:1:19:4:20',2,4,0),(4295,21,15877,13,17,'17:1:19:4:21',2,4,0),(4296,20,15878,13,17,'17:1:19:5:20',2,5,0),(4297,21,15879,13,17,'17:1:19:5:21',2,5,0),(4298,20,15880,13,17,'17:1:19:6:20',2,6,0),(4299,21,15881,13,17,'17:1:19:6:21',2,6,0),(4300,20,15882,13,17,'17:1:19:7:20',2,7,0),(4301,21,15883,13,17,'17:1:19:7:21',2,7,0),(4302,20,15884,13,17,'17:1:19:8:20',2,8,0),(4303,21,15885,13,17,'17:1:19:8:21',2,8,0),(4304,20,15886,13,17,'17:1:19:9:20',2,9,0),(4305,21,15887,13,17,'17:1:19:9:21',2,9,0),(4306,20,15888,13,17,'17:1:19:11:20',2,11,0),(4307,21,15889,13,17,'17:1:19:11:21',2,11,0),(4308,18,15890,13,17,'17:2:18',1,2,0),(4309,22,15891,13,17,'17:2:22',1,2,0),(4310,20,15892,13,17,'17:2:19:0:20',2,0,0),(4311,21,15893,13,17,'17:2:19:0:21',2,0,0),(4312,20,15894,13,17,'17:2:19:1:20',2,1,0),(4313,21,15895,13,17,'17:2:19:1:21',2,1,0),(4314,20,15896,13,17,'17:2:19:2:20',2,2,0),(4315,21,15897,13,17,'17:2:19:2:21',2,2,0),(4316,20,15898,13,17,'17:2:19:3:20',2,3,0),(4317,21,15899,13,17,'17:2:19:3:21',2,3,0),(4318,20,15900,13,17,'17:2:19:4:20',2,4,0),(4319,21,15901,13,17,'17:2:19:4:21',2,4,0),(4320,20,15902,13,17,'17:2:19:5:20',2,5,0),(4321,21,15903,13,17,'17:2:19:5:21',2,5,0),(4322,20,15904,13,17,'17:2:19:6:20',2,6,0),(4323,21,15905,13,17,'17:2:19:6:21',2,6,0),(4324,20,15906,13,17,'17:2:19:7:20',2,7,0),(4325,21,15907,13,17,'17:2:19:7:21',2,7,0),(4326,20,15908,13,17,'17:2:19:8:20',2,8,0),(4327,21,15909,13,17,'17:2:19:8:21',2,8,0),(4328,20,15910,13,17,'17:2:19:9:20',2,9,0),(4329,21,15911,13,17,'17:2:19:9:21',2,9,0),(4330,20,15912,13,17,'17:2:19:10:20',2,10,0),(4331,21,15913,13,17,'17:2:19:10:21',2,10,0),(4332,20,15914,13,17,'17:2:19:11:20',2,11,0),(4333,21,15915,13,17,'17:2:19:11:21',2,11,0);
/*!40000 ALTER TABLE `wp_cfs_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `disqus_dupecheck` (`meta_key`(191),`meta_value`(11)),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=128 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
INSERT INTO `wp_commentmeta` VALUES (1,4,'akismet_result','false'),(2,4,'akismet_history','a:4:{s:4:\"time\";d:1406225895.7898979;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(4,4,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9390969;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(5,3,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9453449;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(6,2,'akismet_history','a:4:{s:4:\"time\";d:1406227547.9560931;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(9,6,'akismet_result','false'),(10,6,'akismet_history','a:4:{s:4:\"time\";d:1409235610.7454171;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(12,7,'akismet_result','false'),(13,7,'akismet_history','a:4:{s:4:\"time\";d:1409270553.9715359;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(15,8,'dsq_parent_post_id',''),(16,8,'dsq_post_id','1575120066'),(17,9,'dsq_parent_post_id',''),(18,9,'dsq_post_id','1592261029'),(19,10,'dsq_parent_post_id','1592261029'),(20,10,'dsq_post_id','1592265397'),(21,11,'akismet_result','false'),(22,11,'akismet_history','a:4:{s:4:\"time\";d:1411050709.575835;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(24,12,'dsq_parent_post_id',''),(25,12,'dsq_post_id','1619594919'),(26,13,'dsq_parent_post_id','1619594919'),(27,13,'dsq_post_id','1619602546'),(28,14,'dsq_parent_post_id',''),(29,14,'dsq_post_id','1654439967'),(30,15,'dsq_parent_post_id',''),(31,15,'dsq_post_id','1719891759'),(32,16,'dsq_parent_post_id','1719891759'),(33,16,'dsq_post_id','1726170541'),(34,17,'dsq_parent_post_id','1726170541'),(35,17,'dsq_post_id','1726923924'),(36,18,'dsq_parent_post_id','1726923924'),(37,18,'dsq_post_id','1727291516'),(38,19,'dsq_parent_post_id','1727291516'),(39,19,'dsq_post_id','1727701359'),(40,20,'dsq_parent_post_id','1726170541'),(41,20,'dsq_post_id','1799847916'),(42,21,'dsq_parent_post_id','1799847916'),(43,21,'dsq_post_id','1802415250'),(44,22,'dsq_parent_post_id','1802415250'),(45,22,'dsq_post_id','1802955843'),(46,23,'dsq_parent_post_id',''),(47,23,'dsq_post_id','1867210725'),(48,24,'dsq_parent_post_id','1867210725'),(49,24,'dsq_post_id','1867214616'),(50,25,'dsq_parent_post_id',''),(51,25,'dsq_post_id','1867491120'),(52,26,'dsq_parent_post_id','1867491120'),(53,26,'dsq_post_id','1868108751'),(54,27,'dsq_parent_post_id',''),(55,27,'dsq_post_id','1874850312'),(56,28,'dsq_parent_post_id','1874850312'),(57,28,'dsq_post_id','1874855902'),(58,29,'dsq_parent_post_id','1874855902'),(59,29,'dsq_post_id','1874908991'),(60,30,'dsq_parent_post_id','1874908991'),(61,30,'dsq_post_id','1875039091'),(66,11,'akismet_history','a:4:{s:4:\"time\";d:1425065219.853461;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(67,7,'akismet_history','a:4:{s:4:\"time\";d:1425065251.147279;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(68,6,'akismet_history','a:4:{s:4:\"time\";d:1425065252.6858671;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(69,31,'akismet_result','false'),(70,31,'akismet_history','a:4:{s:4:\"time\";d:1425650933.0096991;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(72,31,'akismet_history','a:4:{s:4:\"time\";d:1426369221.3039989;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(73,32,'akismet_result','false'),(74,32,'akismet_history','a:4:{s:4:\"time\";d:1427465861.173883;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(76,32,'akismet_history','a:4:{s:4:\"time\";d:1427467431.189749;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(77,33,'akismet_result','false'),(78,33,'akismet_history','a:4:{s:4:\"time\";d:1427479905.8194611;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(80,33,'akismet_history','a:4:{s:4:\"time\";d:1427479926.5461209;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(81,34,'dsq_parent_post_id',''),(82,34,'dsq_post_id','1932971056'),(83,35,'dsq_parent_post_id','1932971056'),(84,35,'dsq_post_id','1933226021'),(85,36,'akismet_result','false'),(86,36,'akismet_history','a:4:{s:4:\"time\";d:1427902209.2385459;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(88,36,'akismet_history','a:4:{s:4:\"time\";d:1427902239.151607;s:7:\"message\";s:44:\"admin changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"admin\";}'),(89,37,'akismet_result','false'),(90,37,'akismet_history','a:4:{s:4:\"time\";d:1429290272.167454;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(92,38,'dsq_parent_post_id',''),(93,38,'dsq_post_id','1974185262'),(94,39,'dsq_parent_post_id',''),(95,39,'dsq_post_id','1974862930'),(96,40,'dsq_parent_post_id','1974862930'),(97,40,'dsq_post_id','1975870685'),(98,41,'dsq_parent_post_id','1974185262'),(99,41,'dsq_post_id','1975875334'),(100,37,'akismet_history','a:4:{s:4:\"time\";d:1429896750.511698;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}'),(101,42,'dsq_parent_post_id',''),(102,42,'dsq_post_id','1988517298'),(103,43,'akismet_result','false'),(104,43,'akismet_history','a:4:{s:4:\"time\";d:1430074807.688412;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(106,44,'dsq_parent_post_id','1988517298'),(107,44,'dsq_post_id','1988720110'),(108,43,'akismet_history','a:4:{s:4:\"time\";d:1430147201.426172;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}'),(109,45,'akismet_result','false'),(110,45,'akismet_history','a:4:{s:4:\"time\";d:1430427253.8925049;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(112,45,'akismet_history','a:4:{s:4:\"time\";d:1430503230.2754321;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}'),(113,46,'dsq_parent_post_id',''),(114,46,'dsq_post_id','2030966900'),(115,47,'dsq_parent_post_id','2030966900'),(116,47,'dsq_post_id','2031920948'),(117,48,'dsq_parent_post_id','2030966900'),(118,48,'dsq_post_id','2032538410'),(119,49,'dsq_parent_post_id','2031920948'),(120,49,'dsq_post_id','2032799564'),(121,50,'dsq_parent_post_id','2031920948'),(122,50,'dsq_post_id','2032910146'),(123,50,'akismet_history','a:4:{s:4:\"time\";d:1433443076.6700439;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}'),(124,51,'akismet_result','false'),(125,51,'akismet_history','a:4:{s:4:\"time\";d:1434128817.6587861;s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(126,51,'akismet_as_submitted','a:11:{s:14:\"comment_author\";s:44:\"Debugging a Simple Web Server | Aaron Krauss\";s:18:\"comment_author_url\";s:62:\"https://thesocietea.org/2015/06/debugging-a-simple-web-server/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:222:\"[&#8230;] is the second part of a short series on how to build a web server using Sinatra. In the previous post we discussed the initial buildout of a simple Sinatra web server, so to make sure we&#8217;re all [&#8230;]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:9:\"127.0.0.1\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/4.2.1\";s:4:\"blog\";s:23:\"https://thesocietea.org\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra/\";}'),(127,51,'akismet_history','a:4:{s:4:\"time\";d:1434128861.4510691;s:7:\"message\";s:50:\"thecodeboss changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:11:\"thecodeboss\";}');
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (2,158,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:11:27','2014-06-30 18:11:27','[&#8230;] we&#8217;ve established that this site is running on WordPress (wondering why I made that choice? Read about it), I want to delve in further to talk about what else I&#8217;m using, and the tools I used to build [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(3,6,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','162.243.14.224','2014-06-30 18:15:26','2014-06-30 18:15:26','[&#8230;] About [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(4,154,'How to Learn Vim | Aaron Krauss','','http://thesocietea.org/2014/07/how-to-learn-vim/','162.243.14.224','2014-07-24 18:18:15','2014-07-24 18:18:15','[&#8230;] 7 months later, I&#8217;m following up with my first vim blog post about why you should use vim. If you&#8217;ve made it here, then you&#8217;re either seriously interested in learning vim (which [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.1','pingback',0,0),(6,233,'Building Javascript with Grunt, Bower, Browserify | Aaron Krauss','','http://thesocietea.org/2014/08/building-javascript-with-grunt-bower-browserify/','162.243.14.224','2014-08-28 14:20:10','2014-08-28 14:20:10','[&#8230;] bower and browserify; if you haven&#8217;t read it yet, I highly recommend you start off by reading Getting Familiar with Bower and Browserify before starting here. Let&#8217;s review our goals regarding javascript building that we landed [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(7,220,'Vim as Your Editor? | Aaron Krauss','','http://thesocietea.org/2014/06/vim-as-your-editor/','162.243.14.224','2014-08-29 00:02:33','2014-08-29 00:02:33','[&#8230;] and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there&#8217;s a bunch of [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.9.2','pingback',0,0),(8,305,'OleTange','disqus.com@tange.dk','','130.225.254.30','2014-09-05 11:28:00','2014-09-05 11:28:00','\'ls | xargs -0\' should not work. You need \'find -print0\' or you could use GNU Parallel and skip the -0 as GNU Parallel deals correctly with space, \' and \". GNU Parallel would also make some of the commands more readable:  ls | parallel echo {}\" is a file\"nnLearn more: nn* https://www.youtube.com/playlist?list=PL284C9FF2488BC6D1n* http://www.gnu.org/software/parallel/parallel_tutorial.htmln* http://www.gnu.org/software/parallel/man.html',0,'1','Disqus/1.1(2.77):1575120066','',0,0),(9,305,'somebodyelse','derrich@gmail.com','','209.6.202.77','2014-09-16 23:01:00','2014-09-16 23:01:00','I don\'t know why you felt the need to make this more complicated, since doing this as a one-liner in sed is about as simple as a sed invocation can get:\n\n$ sed -i \'s/vim/v/g\' ',0,'1','Disqus/1.1(2.77):1592261029','',0,0),(10,305,'alkrauss48','alkrauss48@gmail.com','','198.102.159.200','2014-09-16 23:05:00','2014-09-16 23:05:00','You\'re right, and I mention that in my closing paragraph. I use all of these tools but had the least familiarity with sed, and after learning more about it, I wanted to write about it. That turned into wanting to include some tools that you can often times use along with it, and I figured that there are probably other devs out there that may be unfamiliar with some of these tools.\n\n\nErgo, blog post was born!',0,'1','Disqus/1.1(2.77):1592265397','',9,0),(11,142,'Using GeoJSON files with Google Maps API | Aaron Krauss','','http://thesocietea.org/2014/09/using-geojson-files-with-google-maps-api/','162.243.14.224','2014-09-18 14:31:49','2014-09-18 14:31:49','[&#8230;] visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, I am guilty here). By just using the naked Google Maps API libraries, this is impossible. But we don&#8217;t like to [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.0','pingback',0,0),(12,158,'Xavier Combelle','xavier.combelle@gmail.com','','109.223.180.251','2014-10-04 16:57:00','2014-10-04 16:57:00','One could say Wordpress means PHP means very bad code',0,'1','Disqus/1.1(2.77):1619594919','',0,0),(13,158,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2014-10-04 17:04:00','2014-10-04 17:04:00','One could say that, but I don\'t think it\'s a very valid argument. PHP can be written poorly, as can any language, but Wordpress has done a very impressive job of modularizing their logic and allowing for themes to be cleanly built. I\'ve been very happy with it so far - and it still holds true that I\'m using it strictly to manage content. No actual design has been wordpress-theme influenced.',0,'1','Disqus/1.1(2.77):1619602546','',12,0),(14,357,'Egon Elbre','egonelbre@gmail.com','','194.126.102.221','2014-10-26 14:26:00','2014-10-26 14:26:00','go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\n\nRunning that in goroutine isn\'t necessary, that call only registers the handlers... but it doesn\'t do any handling itself.\n\n&gt; Go Wiki uses MongoDB, and there’s a very well-built ORM for Go that I chose to use called mgo.\n\nmgo is not an ORM, at least not by standard usages of ORM.\n\n    import \"../globals\"\n\nDon\'t use relative imports.\n\nglobals - I\'m not sure that package is a good design decision.\n\nhelpers - that code can be organized much better, try to get rid of utils/helpers packages. Also read [Your coding conventions are hurting you](http://www.carlopescio.com/2011/04/your-coding-conventions-are-hurting-you.html).',0,'1','Disqus/1.1(2.77):1654439967','',0,0),(15,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.108.247','2014-12-01 06:34:00','2014-12-01 06:34:00','Is there any way to automatically fetch all dependencies from bower? For example one of my projects uses a lot of external libraries, including jquery, react, noty, etc. It is going to be a little bit hard to import all those dependencies via browserify-shim.',0,'1','Disqus/1.1(2.77):1719891759','',0,0),(16,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-04 22:16:00','2014-12-04 22:16:00','Not yet I don\'t think, but this shouldn\'t be difficult to implement. One option if you are using a common lib like jquery or react is to use the node module version and include it in your package.json as normal, which would skip browserify-shim altogether. Browserify will see it in there and know how to compile it.\n\nBut more realistically for smaller libs, you should only have to add a line like this to the browser key in your package.json file like:\n\n    \"jquery\": \"./vendor/bower_components/jquery/jquery.js\",\n\nsubbing the parts out to be specific to your plugin. That should be all you need to add.',0,'1','Disqus/1.1(2.77):1726170541','',15,0),(17,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','69.80.107.189','2014-12-05 10:50:00','2014-12-05 10:50:00','A lot of packages on bower comes in compliance with CommonJS standard, but you still have to import them trough package.json, which is not cool.',0,'1','Disqus/1.1(2.77):1726923924','',16,0),(18,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2014-12-05 15:56:00','2014-12-05 15:56:00','Really? Maybe I\'ve just gotten lucky, but if I download a CommonJS dependency through bower, then I just have to \"require\" the actual file path in my pre-browserified javascript and it all seems to work. Additionally, if you want to load a non-CommonJS plugin into the general scope like you would a normal javascript file (and not assign it to a variable), you could also just require the file path as well and not assign it to anything in your pre-browserified javascript.\n\n\nHave you run into any problems using it like that? I\'m not sure what the best practices are about that, seeing as how browserify is ideally used for CommonJS modules.',0,'1','Disqus/1.1(2.77):1727291516','',17,0),(19,261,'Vlad Miller','sneg0k32@gmail.com','https://metalabs.io','119.42.89.129','2014-12-05 19:58:00','2014-12-05 19:58:00','I actually don\'t know what are the best standards here, because I just started to use browserify with Flux/React. But actually after reading trough bunch of source code I think I\'m finally got the idea behind browserify. There is no difference between frontend and server side, your code can be executed anywhere and produce same result. That\'s why they use npm instead of browserify.',0,'1','Disqus/1.1(2.77):1727701359','',18,0),(20,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-18 17:40:00','2015-01-18 17:40:00','Considering browserify is all about requires in front-end code, wouldn\'t it be useful for it to traverse bower packages similar to node_modules for installed dependencies? This way one could easily use a lib from bower or npm with just the package name.',0,'1','Disqus/1.1(2.77):1799847916','',16,0),(21,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-01-19 15:12:00','2015-01-19 15:12:00','That would be very nice, but I haven\'t seen any tools that do that. Browserify-shim, while still very awesome, requires you to list out the file locations in your `packcage.json` of your non-CommonJS files. One thing to keep in mind too though is that a lot of front-end packages these days are being written in CommonJS style anyway, so you don\'t even need browserify-shim for those. So for your larger JS libs, you really shouldn\'t have much problem requiring them with plain browserify - but for the smaller libs, I just stick them in the browserify-shim section of the package.json',0,'1','Disqus/1.1(2.77):1802415250','',20,0),(22,261,'CameronJRoe','cameronjroe@gmail.com','','72.229.158.76','2015-01-19 20:44:00','2015-01-19 20:44:00','debowerify seems to do the trick for now https://github.com/eugeneware/debowerify, but ideally this would be built into browserify',0,'1','Disqus/1.1(2.77):1802955843','',21,0),(23,381,'Nate McGuire','natemcguire+disqus@gmail.com','','172.2.16.46','2015-02-21 04:19:00','2015-02-21 04:19:00','Very clean, nicely done. Have been thinking more about using rails like this and backbone/react on the front end. ',0,'1','Disqus/1.1(2.84):1867210725','',0,0),(24,381,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-02-21 04:23:00','2015-02-21 04:23:00','Thank you! We barely just got our feet wet here, so check back in a couple weeks as we continue on. I\'ve built 2 large projects using rails-api (one angular, one ember), and it is so, so nice and super developer friendly (just like the full Rails framework).',0,'1','Disqus/1.1(2.84):1867214616','',23,0),(25,381,'cappie013','besnard.nicolas@gmail.com','','37.228.234.210','2015-02-21 10:58:00','2015-02-21 10:58:00','And as always, no testing ...',0,'1','Disqus/1.1(2.84):1867491120','',0,0),(26,381,'alkrauss48','alkrauss48@gmail.com','','98.162.206.130','2015-02-21 19:35:00','2015-02-21 19:35:00','I wasn\'t originally planning to cover testing, but that\'s a great idea for another post. Testing is SUPER simple with an API; I mean think about it, you don\'t have any html views so you don\'t have to do any integration testing which means less complex tests that run quicker (especially if you normally use a JavaScript driver for your integration tests). My latest rails API project has over 430 tests, and the whole suite runs regularly in 12 seconds!\n\nIf you scaffold API resources like we did here, then you actually have some tests already written for you using TestUnit (though I prefer using RSpec). I\'ll add testing as part 4 - thanks for the motivation!',0,'1','Disqus/1.1(2.84):1868108751','',25,0),(27,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 15:34:00','2015-02-25 15:34:00','Your second to last screenshot \"And then add this to your package.json:\" isn\'t that actually your Gruntfile.js?',0,'1','Disqus/1.1(2.84):1874850312','',0,0),(28,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 15:37:00','2015-02-25 15:37:00','No, that\'s the package.json. Those keys (browser, browserify, and browserify-shim) are all valid keys that browserify and browserify-shim will look for. Grunt just handles the automation - both of those packages still require config in the package.json because they are both node modules.',0,'1','Disqus/1.1(2.84):1874855902','',27,0),(29,261,'bob','flyfishmt69@yahoo.com','http://batman-news.com','66.109.128.10','2015-02-25 16:08:00','2015-02-25 16:08:00','Thanks, just learning this. How do I browserify both bower_components (jquery, bootstrap, etc.) AND application javascript files (main.js, etc.)? My goal is for all js to end up in one minified file than will work with browserify requires....',0,'1','Disqus/1.1(2.84):1874908991','',28,0),(30,261,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-02-25 17:23:00','2015-02-25 17:23:00','If you look at that last code block in this post, you\'ll see I both require jquery and modernizr (both of which are bower_components with paths set in the package.json). Just as you require those modules, you can also require custom modules that you write as well, and use the path of the file inside the require quotes. Now you might think \"I\'m not writing modules, I just have regular client-side code;\" if that\'s the case, I suggest you look at how to write a CommonJS style module to house your javascript. It\'s just a great way to structure your javascript, even if it\'s all client-side logic. If you do any Node.js too, that\'s the same style that node modules use too.\n\nAlternatively, if you don\'t want to write CommonJS-style javascript, then you can \'require\' the physical path of those files too, but you\'ll probably need to use browserify-shim and update your package.json to do that like we discuss in this post. Some javascript code is still \'requireable\' even if it\'s not CommonJS-style, but it\'s best to keep it CommonJS such when you use browserify with custom JS code.\n\nTo show you an example project, Staplegun (my company) has a starter-template that browserifies both vendor javascript and custom javascript in the same file:\n\nhttps://github.com/Staplegun-US/site-start/blob/master/src/js/app.js\n\n\n\nCheck out the full github repo to see how everything fits, but that repo is a full example that uses everything discussed in this blog post.',0,'1','Disqus/1.1(2.84):1875039091','',29,0),(31,158,'Launched: Labs and My Beer Adventure | Aaron Krauss','','http://thesocietea.org/2015/03/launched-labs-and-my-beer-adventure/','162.243.14.224','2015-03-06 14:08:52','2015-03-06 14:08:52','[&#8230;] project too, since all I needed was a blog and nothing fancy. My main site runs on WordPress (see why I made that choice), which has been an excellent CMS for all my various content, but I didn&#8217;t need anything that [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(32,381,'Building a JSON API with Rails – Part 2: Serialization | Aaron Krauss','','http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','127.0.0.1','2015-03-27 14:17:41','2015-03-27 14:17:41','[&#8230;] to part 2 of our API building adventure. If you haven&#8217;t read Part 1: Getting Started yet, then I highly recommend you go through that post real quick to make sure we&#8217;re all on [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(33,443,'Building a JSON API with Rails &#8211; Part 1: Getting Started | Aaron Krauss','','http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/','127.0.0.1','2015-03-27 18:11:45','2015-03-27 18:11:45','[&#8230;] No, of course that&#8217;s not it, but look at what we&#8217;ve done so far &#8211; we&#8217;ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you&#8217;re building an API, so if you&#8217;re ready, feel free to move onto part 2. [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(34,443,'Esteban','estebu@gmail.com','','203.144.92.220','2015-03-28 13:35:00','2015-03-28 13:35:00','Looking forward to the Authentication post. When are you planning to release it?',0,'1','Disqus/1.1(2.84):1932971056','',0,0),(35,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-03-28 16:59:00','2015-03-28 16:59:00','Thank you! Authentication will actually cover 2 posts, which will be released on April 17th and May 8th respectively. I\'m on a 3 week schedule with blog posts, which works out really well for me.',0,'1','Disqus/1.1(2.84):1933226021','',34,0),(36,30,'What This Site Runs On &#8211; Part 2 | Aaron Krauss','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-2/','127.0.0.1','2015-04-01 15:30:09','2015-04-01 15:30:09','[&#8230;] Projects [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(37,487,'Building a JSON API with Rails – Part 2: Serialization | Aaron Krauss','','https://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','127.0.0.1','2015-04-17 17:04:32','2015-04-17 17:04:32','[&#8230;] Check out the next part in this series: Authentication Strategies [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(38,443,'Leigh Halliday','leighhalliday@gmail.com','','108.168.35.248','2015-04-18 13:00:00','2015-04-18 13:00:00','What do you think of the json:api standard? Have you ever tried JSONAPI::Resources?',0,'1','Disqus/1.1(2.84):1974185262','',0,0),(39,443,'TheAshwaniK','aryan.ashwani@gmail.com','','78.145.240.159','2015-04-18 21:45:00','2015-04-18 21:45:00','Thank you for the series of blogs. I am trying to follow your blogs and looking forward for the rest of them to come.\nBy the way, one step seems to be missing, although it may be obvious for some.\nupdating Gemfile with \ngem \'active_model_serializers\', \'~&gt; 0.8.0\'\n\nI was getting an error without it.. \n\nCould not find generator serializers:install.',0,'1','Disqus/1.1(2.84):1974862930','',0,0),(40,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-19 16:18:00','2015-04-19 16:18:00','That\'s a good call - I should have added it to the Gemfile instead of just installing it manually. That way the app would be aware of the new serializer generators. I\'ll update that',0,'1','Disqus/1.1(2.84):1975870685','',39,0),(41,443,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-19 16:21:00','2015-04-19 16:21:00','I think that standard is a good one when you\'re dealing with a pretty large app, but most importantly one that has a public API for any developer to interact with. I haven\'t ever tried JSONAPI::Resources, but its API looks similar to AMS. I mostly use AMS by default because it\'s well supported and by default plays very well with Ember.js right out of the box.',0,'1','Disqus/1.1(2.84):1975875334','',38,0),(42,504,'TheAshwaniK','aryan.ashwani@gmail.com','','78.145.249.61','2015-04-26 16:59:00','2015-04-26 16:59:00','Thanks.. I have been waiting for this.  Great job.\n\nThe link is broken.',0,'1','Disqus/1.1(2.84):1988517298','',0,0),(43,487,'Building a JSON API with Rails – Part 4: Implementing Authentication | Aaron Krauss','','https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/','127.0.0.1','2015-04-26 19:00:07','2015-04-26 19:00:07','[&#8230;] all the benefits of token-based authentication (don&#8217;t remember those benefits? Review them in the last post). For debugging purposes it&#8217;s often a pain to have to worry about authentication, and I kept [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.1.1','pingback',0,0),(44,504,'alkrauss48','alkrauss48@gmail.com','','72.198.54.181','2015-04-26 19:02:00','2015-04-26 19:02:00','Thanks! That link is fixed now',0,'1','Disqus/1.1(2.84):1988720110','',42,0),(45,504,'Building a JSON API with Rails – Part 3: Authentication Strategies | Aaron Krauss','','https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/','127.0.0.1','2015-04-30 20:54:13','2015-04-30 20:54:13','[&#8230;] get ready for the next post where we&#8217;ll be doing nothing but code. We got through the learning part here, now we can [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.2.1','pingback',0,0),(46,504,'brandonpittman','brandonpittman+disqus@gmail.com','http://www.pixelsnatch.com','1.115.195.119','2015-05-18 01:24:00','2015-05-18 01:24:00','Do you know of any tutorials for making an authentication system like this work with Ember?',0,'1','Disqus/1.1(2.84):2030966900','',0,0),(47,504,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-05-18 15:08:00','2015-05-18 15:08:00','No, but I can give you the step-by-steps as to how you would do it. The client-side is much easier to build than the server-side.\n\n1) Built a controller and template for a Login screen (just with a username/password form)\n\n2) Create a \"submit\" action which makes a request to \"/token\" on your server with base64 encoded username and password - just like is discussed in this post. JS has a nice \"btoa\" function, so you don\'t need Ember to do the encoding.\n\n3) On the success callback of that request, save the token in the response as a cookie in your browser. From now on, in order to check if you\'re logged in on the client-side, just check for the existence of that token.\n\n4) Last thing in that same callback, hard refresh the page using JS. Then you can check for the existence of the token in your routes and redirect your main index route to another template.\n\n5) Now on every other request, tell Ember you want to set the Authorization header to use the token authentication string that we discuss in this post. I know you can set default headers in Angular, so I\'m sure you can do it in Ember too.\n\n6) Now every request you make is authenticated. To add log out functionality, just create an action that deletes the cookie and then hard refreshes the page. Your routes will refresh, and since the cookie no longer exists, they should point back at the login template\n\nBONUS:\n\nObviously you want to be able to access some type of currentUser properties in Ember after you log in. To do that, add a route on your server that responds to GET \"/me\" and have it just return the record of the logged-in user. Then, right when Ember loads and you\'re logged in, have it make a GET request to \"/me\" and set the response to some sort of globally-accessible variable (In angular, for example, I do this with $rootScope). Now you can access a currentUser in Ember and do things like display current name, avatar, get the user\'s ID, etc.\n\nHope this helps!',0,'1','Disqus/1.1(2.84):2031920948','',46,0),(48,504,'alkrauss48','alkrauss48@gmail.com','','216.201.130.138','2015-05-18 21:13:00','2015-05-18 21:13:00','Actually, this post covers Ember Auth + Rails API really well http://johnmosesman.com/ember-simple-auth-tutorial-and-common-problems/',0,'1','Disqus/1.1(2.84):2032538410','',46,0),(49,504,'brandonpittman','brandonpittman+disqus@gmail.com','http://www.pixelsnatch.com','1.115.198.74','2015-05-19 00:19:00','2015-05-19 00:19:00','Thank you very much! This should be very helpful.',0,'1','Disqus/1.1(2.84):2032799564','',47,0),(50,504,'brandonpittman','brandonpittman+disqus@gmail.com','http://www.pixelsnatch.com','1.115.198.189','2015-05-19 01:50:00','2015-05-19 01:50:00','Started off with something like this...\n\nimport Ember from \'ember\';\nexport default Ember.Controller.extend({\n  actions: {\n    authenticate: function() {\n      $.ajax({\n        url: \'http://localhost:3000/token\',\n        type: \'GET\',\n        accepts: \'application/json\',\n        success: function(data) {\n          result.set(\'content\', data);\n          console.log(\'DEBUG: GET Enquiries OK\');\n        },\n        error: function() {\n          console.log(\'DEBUG: GET Enquiries Failed\');\n        }\n      });\n    }\n  }\n});\n\nBut I\'m getting Access-Control-Allow-Origin errors. I added the \'rack-cors\' gem but I\'m not sure what I\'d have to do to the front end.',0,'1','Disqus/1.1(2.84):2032910146','',47,0),(51,524,'Debugging a Simple Web Server | Aaron Krauss','','https://thesocietea.org/2015/06/debugging-a-simple-web-server/','127.0.0.1','2015-06-12 17:06:57','2015-06-12 17:06:57','[&#8230;] is the second part of a short series on how to build a web server using Sinatra. In the previous post we discussed the initial buildout of a simple Sinatra web server, so to make sure we&#8217;re all [&#8230;]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/4.2.1','pingback',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_album`
--

DROP TABLE IF EXISTS `wp_ngg_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_album` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `albumdesc` mediumtext,
  `sortorder` longtext NOT NULL,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_album`
--

LOCK TABLES `wp_ngg_album` WRITE;
/*!40000 ALTER TABLE `wp_ngg_album` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_ngg_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_gallery`
--

DROP TABLE IF EXISTS `wp_ngg_gallery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_gallery` (
  `gid` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `path` mediumtext,
  `title` mediumtext,
  `galdesc` mediumtext,
  `pageid` bigint(20) NOT NULL DEFAULT '0',
  `previewpic` bigint(20) NOT NULL DEFAULT '0',
  `author` bigint(20) NOT NULL DEFAULT '0',
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`gid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_gallery`
--

LOCK TABLES `wp_ngg_gallery` WRITE;
/*!40000 ALTER TABLE `wp_ngg_gallery` DISABLE KEYS */;
INSERT INTO `wp_ngg_gallery` VALUES (1,'test','test','/wp-content/gallery/test','Test','',0,1,1,410),(2,'test2','test2','wp-content/gallery/test2','Test2','',0,0,1,0);
/*!40000 ALTER TABLE `wp_ngg_gallery` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_ngg_pictures`
--

DROP TABLE IF EXISTS `wp_ngg_pictures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_ngg_pictures` (
  `pid` bigint(20) NOT NULL AUTO_INCREMENT,
  `image_slug` varchar(255) NOT NULL,
  `post_id` bigint(20) NOT NULL DEFAULT '0',
  `galleryid` bigint(20) NOT NULL DEFAULT '0',
  `filename` varchar(255) NOT NULL,
  `description` mediumtext,
  `alttext` mediumtext,
  `imagedate` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `exclude` tinyint(4) DEFAULT '0',
  `sortorder` bigint(20) NOT NULL DEFAULT '0',
  `meta_data` longtext,
  `extras_post_id` bigint(20) NOT NULL DEFAULT '0',
  `updated_at` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`pid`),
  KEY `extras_post_id_key` (`extras_post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_ngg_pictures`
--

LOCK TABLES `wp_ngg_pictures` WRITE;
/*!40000 ALTER TABLE `wp_ngg_pictures` DISABLE KEYS */;
INSERT INTO `wp_ngg_pictures` VALUES (1,'screen-shot-2015-01-15-at-10-02-57-am',0,1,'Screen-Shot-2015-01-15-at-10.02.57-AM.png',' ','Screen Shot 2015-01-15 at 10.02.57 AM','2015-01-23 23:12:53',0,0,'eyJ3aWR0aCI6MTk2NiwiaGVpZ2h0IjoxODYwLCJmdWxsIjp7IndpZHRoIjoxOTY2LCJoZWlnaHQiOjE4NjB9LCJ0aHVtYm5haWwiOnsid2lkdGgiOjEyMCwiaGVpZ2h0Ijo5MCwiZmlsZW5hbWUiOiJ0aHVtYnNfU2NyZWVuLVNob3QtMjAxNS0wMS0xNS1hdC0xMC4wMi41Ny1BTS5wbmciLCJnZW5lcmF0ZWQiOiIwLjQ3Mzc1MDAwIDE0MjIwNTQ3NzQifSwiYXBlcnR1cmUiOmZhbHNlLCJjcmVkaXQiOmZhbHNlLCJjYW1lcmEiOmZhbHNlLCJjYXB0aW9uIjpmYWxzZSwiY3JlYXRlZF90aW1lc3RhbXAiOmZhbHNlLCJjb3B5cmlnaHQiOmZhbHNlLCJmb2NhbF9sZW5ndGgiOmZhbHNlLCJpc28iOmZhbHNlLCJzaHV0dGVyX3NwZWVkIjpmYWxzZSwiZmxhc2giOmZhbHNlLCJ0aXRsZSI6ZmFsc2UsImtleXdvcmRzIjpmYWxzZSwic2F2ZWQiOnRydWV9',409,1422054774);
/*!40000 ALTER TABLE `wp_ngg_pictures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=28587 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://thesocietea.org','yes'),(2,'blogname','Aaron Krauss','yes'),(3,'blogdescription','Developer','yes'),(4,'users_can_register','0','yes'),(5,'admin_email','alkrauss48@gmail.com','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','1','yes'),(10,'comments_notify','1','yes'),(11,'posts_per_rss','10','yes'),(12,'rss_use_excerpt','0','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','open','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','1','yes'),(21,'posts_per_page','10','yes'),(22,'date_format','F j, Y','yes'),(23,'time_format','g:i a','yes'),(24,'links_updated_date_format','F j, Y g:i a','yes'),(25,'comment_moderation','0','yes'),(26,'moderation_notify','1','yes'),(27,'permalink_structure','/%year%/%monthnum%/%postname%/','yes'),(28,'gzipcompression','0','yes'),(29,'hack_file','0','yes'),(30,'blog_charset','UTF-8','yes'),(31,'moderation_keys','','no'),(32,'active_plugins','a:8:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:37:\"post-types-order/post-types-order.php\";i:5;s:39:\"search-everything/search-everything.php\";i:6;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:7;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','yes'),(33,'home','https://thesocietea.org','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'advanced_edit','0','yes'),(37,'comment_max_links','2','yes'),(38,'gmt_offset','0','yes'),(39,'default_email_category','1','yes'),(40,'recently_edited','','no'),(41,'template','the_societea','yes'),(42,'stylesheet','the_societea','yes'),(43,'comment_whitelist','1','yes'),(44,'blacklist_keys','','no'),(45,'comment_registration','0','yes'),(46,'html_type','text/html','yes'),(47,'use_trackback','0','yes'),(48,'default_role','subscriber','yes'),(49,'db_version','31533','yes'),(50,'uploads_use_yearmonth_folders','1','yes'),(51,'upload_path','','yes'),(52,'blog_public','1','yes'),(53,'default_link_category','0','yes'),(54,'show_on_front','page','yes'),(55,'tag_base','','yes'),(56,'show_avatars','1','yes'),(57,'avatar_rating','G','yes'),(58,'upload_url_path','','yes'),(59,'thumbnail_size_w','150','yes'),(60,'thumbnail_size_h','150','yes'),(61,'thumbnail_crop','1','yes'),(62,'medium_size_w','300','yes'),(63,'medium_size_h','300','yes'),(64,'avatar_default','mystery','yes'),(65,'large_size_w','1024','yes'),(66,'large_size_h','1024','yes'),(67,'image_default_link_type','file','yes'),(68,'image_default_size','','yes'),(69,'image_default_align','','yes'),(70,'close_comments_for_old_posts','0','yes'),(71,'close_comments_days_old','14','yes'),(72,'thread_comments','1','yes'),(73,'thread_comments_depth','5','yes'),(74,'page_comments','0','yes'),(75,'comments_per_page','50','yes'),(76,'default_comments_page','newest','yes'),(77,'comment_order','asc','yes'),(78,'sticky_posts','a:0:{}','yes'),(79,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(82,'uninstall_plugins','a:1:{s:27:\"wp-markdown/wp-markdown.php\";a:2:{i:0;s:18:\"WordPress_Markdown\";i:1;s:9:\"uninstall\";}}','no'),(83,'timezone_string','','yes'),(84,'page_for_posts','0','yes'),(85,'page_on_front','4','yes'),(86,'default_post_format','0','yes'),(87,'link_manager_enabled','0','yes'),(88,'initial_db_version','27916','yes'),(89,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:72:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:24:\"NextGEN Gallery overview\";b:1;s:19:\"NextGEN Use TinyMCE\";b:1;s:21:\"NextGEN Upload images\";b:1;s:22:\"NextGEN Manage gallery\";b:1;s:19:\"NextGEN Manage tags\";b:1;s:29:\"NextGEN Manage others gallery\";b:1;s:18:\"NextGEN Edit album\";b:1;s:20:\"NextGEN Change style\";b:1;s:22:\"NextGEN Change options\";b:1;s:24:\"NextGEN Attach Interface\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(90,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(91,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(92,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(93,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(95,'sidebars_widgets','a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(96,'_transient_random_seed','5d267351c59f6b757195ffd29d39b6f7','yes'),(97,'logged_in_key','as>*,uS,x),u3]<T[U2:Q)n}xljY4e;)x]nWvO3P)QOn/LHEA7p/3d}=4t+@^)7}','yes'),(98,'logged_in_salt','Ypq39}RyWXsy1B3~~v)-2dDC7^;tv>.mk3!FeTW*>ERc$IG McCio3Acw-^ P0a5','yes'),(99,'cron','a:10:{i:1434179820;a:1:{s:20:\"wp_maybe_auto_update\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1434191717;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1434219495;a:1:{s:24:\"akismet_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1434234921;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1434235305;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1435924810;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"70100d56e616a882696581d6df4c3220\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:642;}}}}i:1437760842;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"8e0d9af8d2ac09c18b3ffc2f78ecde5f\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:607;}}}}i:1439553648;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"d57df699e0cb0e0a83d719c34d29cf4b\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:655;}}}}i:1443182456;a:1:{s:19:\"publish_future_post\";a:1:{s:32:\"1aeb0232eba4a50c140068bba47eabed\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:1:{i:0;i:466;}}}}s:7:\"version\";i:2;}','yes'),(101,'auth_key','.YPV8;p%Dgf[M</ZvwZAk9*Wgyt~NO^05,,r=FGJ/7?*!!^X^L >,y6{rq2Lmm6Z','yes'),(102,'auth_salt','mJFh)O;WpeY}AS>Tf0bWE{kRX7)G1Z-Dy,-`QxoKw}<#Ed^ZD]~(ra*6y%DobD]/','yes'),(109,'nonce_key','Q,^Q}ytXd29u^.kLt=@iW*_Q!4OYpNYyfWme[W0A.2s1-m:P@d}:mybjU.O3v~+1','yes'),(110,'nonce_salt','+celW{qLF`rD)*]f?X3k$l&8`o$Uqfo4.7&ylB&u$Mt^U%*n4]}EC|PhlM~Ep}kA','yes'),(132,'current_theme','','yes'),(133,'theme_mods_the_societea','a:7:{i:0;b:0;s:16:\"background_color\";s:6:\"ffffff\";s:16:\"background_image\";s:0:\"\";s:17:\"background_repeat\";s:6:\"repeat\";s:21:\"background_position_x\";s:4:\"left\";s:21:\"background_attachment\";s:5:\"fixed\";s:18:\"nav_menu_locations\";a:0:{}}','yes'),(134,'theme_switched','','yes'),(138,'widget_pages','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(139,'widget_calendar','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(140,'widget_tag_cloud','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(141,'widget_nav_menu','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(145,'recently_activated','a:0:{}','yes'),(146,'theme_mods_twentyfourteen','a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1401768087;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(151,'cfs_next_field_id','23','yes'),(152,'cfs_version','2.4.2','yes'),(154,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(266,'cpto_options','a:3:{s:8:\"autosort\";s:1:\"1\";s:9:\"adminsort\";s:1:\"1\";s:10:\"capability\";s:13:\"switch_themes\";}','yes'),(267,'CPT_configured','TRUE','yes'),(319,'category_children','a:0:{}','yes'),(898,'akismet_available_servers','a:4:{s:12:\"66.135.58.62\";b:1;s:12:\"66.135.58.61\";b:1;s:12:\"192.0.80.244\";b:1;s:12:\"192.0.80.246\";b:1;}','yes'),(899,'akismet_connectivity_time','1404312065','yes'),(900,'akismet_strictness','0','yes'),(901,'akismet_show_user_comments_approved','0','yes'),(902,'wordpress_api_key','ae40d7cbc870','yes'),(1126,'syntaxhighlighter_settings','a:15:{s:9:\"shversion\";i:3;s:5:\"theme\";s:5:\"rdark\";s:6:\"gutter\";i:1;s:9:\"autolinks\";i:1;s:9:\"smarttabs\";i:1;s:9:\"wraplines\";i:1;s:9:\"classname\";s:0:\"\";s:9:\"firstline\";s:1:\"1\";s:14:\"padlinenumbers\";s:5:\"false\";s:7:\"tabsize\";s:1:\"4\";s:5:\"title\";s:0:\"\";s:14:\"loadallbrushes\";i:0;s:8:\"collapse\";i:0;s:5:\"light\";i:0;s:7:\"toolbar\";i:0;}','yes'),(2086,'disqus_active','1','yes'),(2087,'disqus_version','2.77','yes'),(2088,'disqus_forum_url','thesocietea','yes'),(2089,'disqus_cc_fix','1','yes'),(2090,'disqus_api_key','0C4Uv5QN6RrHuDFrLFF6A0r59ittV0QaxfWmssw1c9qsNI30YSnCEvJAdBsA31xf','yes'),(2091,'disqus_user_api_key','aJgw8hjUIqv5lCT6fsRBqfZrHKwpWYehUZMebLxvCWAND1FSpKQJxVvcTYD7cNnE','yes'),(2092,'disqus_replace','all','yes'),(2163,'disqus_last_comment_id','2032910146','yes'),(4107,'se_meta','a:10:{s:7:\"blog_id\";b:0;s:7:\"api_key\";b:0;s:8:\"auth_key\";b:0;s:7:\"version\";s:5:\"8.1.3\";s:13:\"first_version\";s:5:\"8.1.2\";s:8:\"new_user\";b:1;s:4:\"name\";s:0:\"\";s:5:\"email\";s:0:\"\";s:24:\"show_options_page_notice\";b:0;s:16:\"se_global_notice\";N;}','yes'),(4108,'se_options','a:21:{s:21:\"se_exclude_categories\";s:0:\"\";s:26:\"se_exclude_categories_list\";s:0:\"\";s:16:\"se_exclude_posts\";s:0:\"\";s:21:\"se_exclude_posts_list\";s:0:\"\";s:18:\"se_use_page_search\";b:0;s:21:\"se_use_comment_search\";b:1;s:17:\"se_use_tag_search\";b:1;s:17:\"se_use_tax_search\";b:1;s:22:\"se_use_category_search\";b:1;s:25:\"se_approved_comments_only\";b:1;s:22:\"se_approved_pages_only\";b:0;s:21:\"se_use_excerpt_search\";b:0;s:19:\"se_use_draft_search\";b:0;s:24:\"se_use_attachment_search\";b:0;s:14:\"se_use_authors\";b:0;s:18:\"se_use_cmt_authors\";b:0;s:22:\"se_use_metadata_search\";b:1;s:16:\"se_use_highlight\";b:1;s:18:\"se_highlight_color\";s:6:\"orange\";s:18:\"se_highlight_style\";s:0:\"\";s:19:\"se_research_metabox\";a:2:{s:18:\"visible_on_compose\";b:1;s:23:\"external_search_enabled\";b:0;}}','yes'),(4885,'WPLANG','','yes'),(4886,'db_upgraded','','yes'),(11076,'auto_core_update_notified','a:4:{s:4:\"type\";s:6:\"manual\";s:5:\"email\";s:20:\"alkrauss48@gmail.com\";s:7:\"version\";s:5:\"4.2.2\";s:9:\"timestamp\";i:1431501752;}','yes'),(14544,'ngg_doing_upgrade','','yes'),(14545,'photocrati_auto_update_admin_update_list','','yes'),(14546,'photocrati_auto_update_admin_check_date','','yes'),(14547,'ngg_db_version','1.8.1','yes'),(14548,'pope_module_list','a:36:{i:0;s:28:\"photocrati-nextgen|2.0.66.37\";i:1;s:17:\"photocrati-fs|0.4\";i:2;s:21:\"photocrati-router|0.6\";i:3;s:19:\"photocrati-i18n|0.1\";i:4;s:25:\"photocrati-validation|0.1\";i:5;s:32:\"photocrati-wordpress_routing|0.5\";i:6;s:23:\"photocrati-security|0.2\";i:7;s:18:\"photocrati-lzw|0.1\";i:8;s:31:\"photocrati-nextgen_settings|0.8\";i:9;s:18:\"photocrati-mvc|0.5\";i:10;s:19:\"photocrati-ajax|0.7\";i:11;s:33:\"photocrati-dynamic_stylesheet|0.3\";i:12;s:34:\"photocrati-frame_communication|0.4\";i:13;s:25:\"photocrati-datamapper|0.6\";i:14;s:30:\"photocrati-nextgen-legacy|0.13\";i:15;s:27:\"photocrati-nextgen-data|0.8\";i:16;s:33:\"photocrati-dynamic_thumbnails|0.5\";i:17;s:28:\"photocrati-nextgen_admin|0.7\";i:18;s:38:\"photocrati-nextgen_addgallery_page|0.6\";i:19;s:33:\"photocrati-nextgen_pagination|0.3\";i:20;s:38:\"photocrati-nextgen_gallery_display|0.9\";i:21;s:30:\"photocrati-attach_to_post|0.10\";i:22;s:36:\"photocrati-nextgen_other_options|0.7\";i:23;s:34:\"photocrati-nextgen_pro_upgrade|0.3\";i:24;s:23:\"photocrati-mediarss|0.4\";i:25;s:20:\"photocrati-cache|0.2\";i:26;s:24:\"photocrati-lightbox|0.14\";i:27;s:34:\"photocrati-nextgen_basic_album|0.9\";i:28;s:38:\"photocrati-nextgen_basic_templates|0.4\";i:29;s:37:\"photocrati-nextgen_basic_gallery|0.11\";i:30;s:41:\"photocrati-nextgen_basic_imagebrowser|0.9\";i:31;s:38:\"photocrati-nextgen_basic_singlepic|0.9\";i:32;s:37:\"photocrati-nextgen_basic_tagcloud|0.9\";i:33;s:21:\"photocrati-widget|0.5\";i:34;s:33:\"photocrati-third_party_compat|0.3\";i:35;s:29:\"photocrati-nextgen_xmlrpc|0.4\";}','yes'),(14549,'ngg_options','a:86:{s:22:\"router_param_separator\";s:2:\"--\";s:19:\"router_param_prefix\";s:0:\"\";s:17:\"router_param_slug\";s:9:\"nggallery\";s:11:\"gallerypath\";s:19:\"wp-content/gallery/\";s:11:\"wpmuCSSfile\";s:13:\"nggallery.css\";s:9:\"wpmuStyle\";b:0;s:9:\"wpmuRoles\";b:0;s:16:\"wpmuImportFolder\";b:0;s:13:\"wpmuZipUpload\";b:0;s:14:\"wpmuQuotaCheck\";b:0;s:17:\"datamapper_driver\";s:22:\"custom_post_datamapper\";s:21:\"gallerystorage_driver\";s:25:\"ngglegacy_gallery_storage\";s:20:\"maximum_entity_count\";i:500;s:9:\"deleteImg\";b:1;s:9:\"swfUpload\";b:1;s:13:\"usePermalinks\";b:0;s:13:\"permalinkSlug\";s:9:\"nggallery\";s:14:\"graphicLibrary\";s:2:\"gd\";s:14:\"imageMagickDir\";s:15:\"/usr/local/bin/\";s:11:\"useMediaRSS\";b:0;s:18:\"galleries_in_feeds\";b:0;s:10:\"usePicLens\";b:0;s:12:\"activateTags\";i:0;s:10:\"appendType\";s:4:\"tags\";s:9:\"maxImages\";i:7;s:14:\"relatedHeading\";s:24:\"<h3>Related Images:</h3>\";s:10:\"thumbwidth\";i:120;s:11:\"thumbheight\";i:90;s:8:\"thumbfix\";b:1;s:12:\"thumbquality\";i:100;s:8:\"imgWidth\";i:800;s:9:\"imgHeight\";i:600;s:10:\"imgQuality\";i:100;s:9:\"imgBackup\";b:1;s:13:\"imgAutoResize\";b:0;s:9:\"galImages\";s:2:\"20\";s:17:\"galPagedGalleries\";i:0;s:10:\"galColumns\";i:0;s:12:\"galShowSlide\";b:1;s:12:\"galTextSlide\";s:16:\"[Show slideshow]\";s:14:\"galTextGallery\";s:17:\"[Show thumbnails]\";s:12:\"galShowOrder\";s:7:\"gallery\";s:7:\"galSort\";s:9:\"sortorder\";s:10:\"galSortDir\";s:3:\"ASC\";s:10:\"galNoPages\";b:1;s:13:\"galImgBrowser\";i:0;s:12:\"galHiddenImg\";i:0;s:10:\"galAjaxNav\";i:0;s:11:\"thumbEffect\";s:8:\"fancybox\";s:9:\"thumbCode\";s:41:\"class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"\";s:18:\"thumbEffectContext\";s:14:\"nextgen_images\";s:5:\"wmPos\";s:8:\"botRight\";s:6:\"wmXpos\";i:5;s:6:\"wmYpos\";i:5;s:6:\"wmType\";i:0;s:6:\"wmPath\";s:0:\"\";s:6:\"wmFont\";s:9:\"arial.ttf\";s:6:\"wmSize\";i:10;s:6:\"wmText\";s:12:\"Aaron Krauss\";s:7:\"wmColor\";s:6:\"000000\";s:8:\"wmOpaque\";s:3:\"100\";s:8:\"enableIR\";i:0;s:7:\"slideFx\";s:4:\"fade\";s:5:\"irURL\";s:0:\"\";s:12:\"irXHTMLvalid\";i:0;s:7:\"irAudio\";s:0:\"\";s:7:\"irWidth\";i:600;s:8:\"irHeight\";i:400;s:9:\"irShuffle\";b:1;s:17:\"irLinkfromdisplay\";b:1;s:16:\"irShownavigation\";i:0;s:11:\"irShowicons\";i:0;s:11:\"irWatermark\";i:0;s:13:\"irOverstretch\";s:4:\"True\";s:12:\"irRotatetime\";i:10;s:12:\"irTransition\";s:6:\"random\";s:10:\"irKenburns\";i:0;s:11:\"irBackcolor\";s:6:\"000000\";s:12:\"irFrontcolor\";s:6:\"FFFFFF\";s:12:\"irLightcolor\";s:6:\"CC0000\";s:13:\"irScreencolor\";s:6:\"000000\";s:11:\"activateCSS\";i:1;s:7:\"CSSfile\";s:13:\"nggallery.css\";s:23:\"dynamic_stylesheet_slug\";s:12:\"nextgen-dcss\";s:22:\"dynamic_thumbnail_slug\";s:13:\"nextgen-image\";s:11:\"installDate\";i:1422054697;}','yes'),(20211,'secure_auth_key','Nh@k%f531HMZYtRHV^vt*<xigNBSZZp>$C6z9e%c_1QlIal7I#-rZEpgbDR,q552','yes'),(20212,'secure_auth_salt','pw+nr_xG[l>,}La(u)?l?Vt97%,+:B]Y#H9K=&<:11I_z]pn+k]50XI:7UsP+/T|','yes'),(22867,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1434161494;s:7:\"checked\";a:1:{s:12:\"the_societea\";s:0:\"\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}','yes'),(22871,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:2:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.2-new-bundled.zip\";s:7:\"partial\";s:69:\"https://downloads.wordpress.org/release/wordpress-4.2.2-partial-1.zip\";s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.2.2\";s:7:\"version\";s:5:\"4.2.2\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:5:\"4.2.1\";}i:1;O:8:\"stdClass\":13:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.2-new-bundled.zip\";s:7:\"partial\";s:69:\"https://downloads.wordpress.org/release/wordpress-4.2.2-partial-1.zip\";s:8:\"rollback\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.2-rollback-1.zip\";}s:7:\"current\";s:5:\"4.2.2\";s:7:\"version\";s:5:\"4.2.2\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:5:\"4.2.1\";s:12:\"notify_email\";s:1:\"1\";s:13:\"support_email\";s:26:\"updatehelp42@wordpress.org\";s:9:\"new_files\";s:0:\"\";}}s:12:\"last_checked\";i:1434161495;s:15:\"version_checked\";s:5:\"4.2.1\";s:12:\"translations\";a:0:{}}','yes'),(22872,'rewrite_rules','a:105:{s:10:\"project/?$\";s:27:\"index.php?post_type=project\";s:40:\"project/feed/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:35:\"project/(feed|rdf|rss|rss2|atom)/?$\";s:44:\"index.php?post_type=project&feed=$matches[1]\";s:27:\"project/page/([0-9]{1,})/?$\";s:45:\"index.php?post_type=project&paged=$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:31:\"cfs/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:41:\"cfs/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:61:\"cfs/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"cfs/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)/trackback/?$\";s:45:\"index.php?post_type=cfs&name=$matches[1]&tb=1\";s:32:\"cfs/([^/]+)/page/?([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&paged=$matches[2]\";s:39:\"cfs/([^/]+)/comment-page-([0-9]{1,})/?$\";s:58:\"index.php?post_type=cfs&name=$matches[1]&cpage=$matches[2]\";s:24:\"cfs/([^/]+)(/[0-9]+)?/?$\";s:57:\"index.php?post_type=cfs&name=$matches[1]&page=$matches[2]\";s:20:\"cfs/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:30:\"cfs/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:50:\"cfs/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\"cfs/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:35:\"project/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:45:\"project/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:65:\"project/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:60:\"project/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)/trackback/?$\";s:34:\"index.php?project=$matches[1]&tb=1\";s:48:\"project/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:43:\"project/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:46:\"index.php?project=$matches[1]&feed=$matches[2]\";s:36:\"project/([^/]+)/page/?([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&paged=$matches[2]\";s:43:\"project/([^/]+)/comment-page-([0-9]{1,})/?$\";s:47:\"index.php?project=$matches[1]&cpage=$matches[2]\";s:28:\"project/([^/]+)(/[0-9]+)?/?$\";s:46:\"index.php?project=$matches[1]&page=$matches[2]\";s:24:\"project/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:34:\"project/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:54:\"project/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:49:\"project/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:38:\"index.php?&page_id=4&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:47:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:57:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:77:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:69:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&tb=1\";s:64:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&feed=$matches[4]\";s:52:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&paged=$matches[4]\";s:59:\"([0-9]{4})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&cpage=$matches[4]\";s:44:\"([0-9]{4})/([0-9]{1,2})/([^/]+)(/[0-9]+)?/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&name=$matches[3]&page=$matches[4]\";s:36:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:46:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:66:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:61:\"[0-9]{4}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:51:\"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:38:\"([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)(/[0-9]+)?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(22873,'can_compress_scripts','0','yes'),(25005,'_site_transient_timeout_browser_7a6cce0b740e13f09d82507ff53d91cc','1431985676','yes'),(25006,'_site_transient_browser_7a6cce0b740e13f09d82507ff53d91cc','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"42.0.2311.90\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(27630,'_site_transient_timeout_browser_9979bee7064c5035270425d30c0be8f5','1434047840','yes'),(27631,'_site_transient_browser_9979bee7064c5035270425d30c0be8f5','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"43.0.2357.81\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(28225,'_site_transient_timeout_browser_3a9721c33f29438e21880b312d32e7bb','1434589615','yes'),(28226,'_site_transient_browser_3a9721c33f29438e21880b312d32e7bb','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"43.0.2357.124\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(28427,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1434172055','no'),(28428,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 28 May 2015 13:55:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://wordpress.org/?v=4.3-alpha-32727\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.2.2 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/05/wordpress-4-2-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2015/05/wordpress-4-2-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 07 May 2015 02:24:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3718\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:355:\"WordPress 4.2.2 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. Version 4.2.2 addresses two security issues: The Genericons icon font package, which is used in a number of popular themes and plugins, contained an HTML file vulnerable to a cross-site [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Samuel Sidler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3194:\"<p>WordPress 4.2.2 is now available. This is a <strong>critical security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>Version 4.2.2 addresses two security issues:</p>\n<ul>\n<li>The Genericons icon font package, which is used in a number of popular themes and plugins, contained an HTML file vulnerable to a cross-site scripting attack. All affected themes and plugins hosted on <a href=\"https://wordpress.org/\">WordPress.org</a> (including the Twenty Fifteen default theme) have been updated today by the WordPress security team to address this issue by removing this nonessential file. To help protect other Genericons usage, WordPress 4.2.2 proactively scans the wp-content directory for this HTML file and removes it. Reported by Robert Abela of <a href=\"http://netsparker.com\">Netsparker</a>.</li>\n<li>WordPress versions 4.2 and earlier are affected by a <a href=\"https://wordpress.org/news/2015/04/wordpress-4-2-1/\">critical cross-site scripting vulnerability</a>, which could enable anonymous users to compromise a site. WordPress 4.2.2 includes a comprehensive fix for this issue. Reported separately by Rice Adu and Tong Shi.</li>\n</ul>\n<p>The release also includes hardening for a potential cross-site scripting vulnerability when using the visual editor. This issue was reported by Mahadev Subedi.</p>\n<p>Our thanks to those who have practiced <a href=\"https://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/\">responsible disclosure</a> of security issues.</p>\n<p>WordPress 4.2.2 also contains fixes for 13 bugs from 4.2. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.2.2\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.2?rev=32418&amp;stop_rev=32324\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.2.2</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.2.2.</p>\n<p>Thanks to everyone who contributed to 4.2.2:</p>\n<p><a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/hnle\">Hinaloe</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Mike Adams</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/taka2\">taka2</a>, and <a href=\"https://profiles.wordpress.org/willstedt\">willstedt</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/05/wordpress-4-2-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.2.1 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Apr 2015 18:34:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3706\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:366:\"WordPress 4.2.1 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. A few hours ago, the WordPress team was made aware of a cross-site scripting vulnerability, which could enable commenters to compromise a site. The vulnerability was discovered by Jouko Pynnönen. [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gary Pendergast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1010:\"<p>WordPress 4.2.1 is now available. This is a <strong>critical security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>A few hours ago, the WordPress team was made aware of a cross-site scripting vulnerability, which could enable commenters to compromise a site. The vulnerability was discovered by <a href=\"http://klikki.fi/\">Jouko Pynnönen</a>.</p>\n<p>WordPress 4.2.1 has begun to roll out as an automatic background update, for sites that <a href=\"https://wordpress.org/plugins/background-update-tester/\">support</a> those.</p>\n<p>For more information, see the <a href=\"https://codex.wordpress.org/Version_4.2.1\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.2?rev=32311&amp;stop_rev=32300\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.2.1</a> or venture over to <strong>Dashboard → Updates</strong> and simply click &#8220;Update Now&#8221;.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/04/wordpress-4-2-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"WordPress 4.2 “Powell”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/news/2015/04/powell/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/04/powell/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Apr 2015 18:35:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3642\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:343:\"Version 4.2 of WordPress, named &#8220;Powell&#8221; in honor of jazz pianist Bud Powell, is available for download or update in your WordPress dashboard. New features in 4.2 help you communicate and share, globally. An easier way to share content Clip it, edit it, publish it. Get familiar with the new and improved Press This. From [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:29434:\"<p>Version 4.2 of WordPress, named &#8220;Powell&#8221; in honor of jazz pianist <a href=\"https://en.wikipedia.org/wiki/Bud_Powell\">Bud Powell</a>, is available for <a href=\"https://wordpress.org/download/\">download</a> or update in your WordPress dashboard. New features in 4.2 help you communicate and share, globally.</p>\n<div id=\"v-e9kH4FzP-1\" class=\"video-player\"><embed id=\"v-e9kH4FzP-1-video\" src=\"https://v0.wordpress.com/player.swf?v=1.04&amp;guid=e9kH4FzP&amp;isDynamicSeeking=true\" type=\"application/x-shockwave-flash\" width=\"692\" height=\"388\" title=\"Introducing WordPress 4.2 &quot;Powell&quot;\" wmode=\"direct\" seamlesstabbing=\"true\" allowfullscreen=\"true\" allowscriptaccess=\"always\" overstretch=\"true\"></embed></div>\n<hr />\n<h2 style=\"text-align: center\">An easier way to share content</h2>\n<p><img class=\"alignnone size-full wp-image-3677\" src=\"https://wordpress.org/news/files/2015/04/4.2-press-this-2.jpg\" alt=\"Press This\" width=\"1000\" height=\"832\" />Clip it, edit it, publish it. Get familiar with the new and improved Press This. From the Tools menu, add Press This to your browser bookmark bar or your mobile device home screen. Once installed you can share your content with lightning speed. Sharing your favorite videos, images, and content has never been this fast or this easy.</p>\n<hr />\n<h2 style=\"text-align: center\">Extended character support</h2>\n<p><img class=\"alignnone size-full wp-image-3676\" src=\"https://wordpress.org/news/files/2015/04/4.2-characters.png\" alt=\"Character support for emoji, special characters\" width=\"1000\" height=\"832\" />Writing in WordPress, whatever your language, just got better. WordPress 4.2 supports a host of new characters out-of-the-box, including native Chinese, Japanese, and Korean characters, musical and mathematical symbols, and hieroglyphs.</p>\n<p>Don’t use any of those characters? You can still have fun — emoji are now available in WordPress! Get creative and decorate your content with <img src=\"https://s.w.org/images/core/emoji/72x72/1f499.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />, <img src=\"https://s.w.org/images/core/emoji/72x72/1f438.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />, <img src=\"https://s.w.org/images/core/emoji/72x72/1f412.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />, <img src=\"https://s.w.org/images/core/emoji/72x72/1f355.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />, and all the many other <a href=\"https://codex.wordpress.org/Emoji\">emoji</a>.</p>\n<hr />\n<div><img class=\"alignright size-medium wp-image-3656\" src=\"https://wordpress.org/news/files/2015/04/4.2-theme-switcher-300x230.png\" alt=\"Customizer theme switcher\" width=\"288\" height=\"221\" /></p>\n<h3>Switch themes in the Customizer</h3>\n<p>Browse and preview your installed themes from the Customizer. Make sure the theme looks great with your content, before it debuts on your site.</p>\n</div>\n<div style=\"clear: both\"></div>\n<div><img class=\"alignright size-medium wp-image-3653\" src=\"https://wordpress.org/news/files/2015/04/4.2-embeds-300x230.png\" alt=\"Tumbr.com oEmbed example\" width=\"288\" height=\"221\" /></p>\n<h3>Even more embeds</h3>\n<p>Paste links from Tumblr.com and Kickstarter and watch them magically appear right in the editor. With every release, your publishing and editing experience get closer together.</p>\n</div>\n<div style=\"clear: both\"></div>\n<div>\n<p><img class=\"alignright size-medium wp-image-3654\" src=\"https://wordpress.org/news/files/2015/04/4.2-plugins-300x230.png\" alt=\"Inline plugin updates\" width=\"288\" height=\"221\" /></p>\n<h3>Streamlined plugin updates</h3>\n<p>Goodbye boring loading screen, hello smooth and simple plugin updates. Click <em>Update Now</em> and watch the magic happen.</p>\n</div>\n<div style=\"clear: both\"></div>\n<hr />\n<h2 style=\"text-align: center\">Under the Hood</h2>\n<h5>utf8mb4 support</h5>\n<p>Database character encoding has changed from utf8 to utf8mb4, which adds support for a whole range of new 4-byte characters.</p>\n<h5>JavaScript accessibility</h5>\n<p>You can now send audible notifications to screen readers in JavaScript with <code>wp.a11y.speak()</code>. Pass it a string, and an update will be sent to a dedicated ARIA live notifications area.</p>\n<h5>Shared term splitting</h5>\n<p>Terms shared across multiple taxonomies will be split when one of them is updated. Find out more in the <a href=\"https://developer.wordpress.org/plugins/taxonomy/working-with-split-terms-in-wp-4-2/\">Plugin Developer Handbook</a>.</p>\n<h5>Complex query ordering</h5>\n<p><code>WP_Query</code>, <code>WP_Comment_Query</code>, and <code>WP_User_Query</code> now support complex ordering with named meta query clauses.</p>\n<hr />\n<h2 style=\"text-align: center\">The Team</h2>\n<p><a class=\"alignleft\" href=\"https://profiles.wordpress.org/drewapicture\"><img src=\"https://www.gravatar.com/avatar/95c934fa2c3362794bf62ff8c59ada08?d=mm&amp;s=150&amp;r=G\" alt=\"Drew Jaynes\" width=\"90\" height=\"90\" /></a>This release was led by <a href=\"http://werdswords.com\">Drew Jaynes</a>, with the help of these fine individuals. There are 283 contributors with props in this release, a new high. Pull up some Bud Powell on your music service of choice, and check out some of their profiles:</p>\n<a href=\"https://profiles.wordpress.org/mercime\">@mercime</a>, <a href=\"https://profiles.wordpress.org/a5hleyrich\">A5hleyRich</a>, <a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/abhishekfdd\">abhishekfdd</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/mrahmadawais\">Ahmad Awais</a>, <a href=\"https://profiles.wordpress.org/alexkingorg\">Alex King</a>, <a href=\"https://profiles.wordpress.org/viper007bond\">Alex Mills (Viper007Bond)</a>, <a href=\"https://profiles.wordpress.org/deconf\">Alin Marcu</a>, <a href=\"https://profiles.wordpress.org/collinsinternet\">Allan Collins</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/awbauer\">Andrew Bauer</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/norcross\">Andrew Norcross</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/ankitgadertcampcom\">Ankit Gade</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/atimmer\">Anton Timmermans</a>, <a href=\"https://profiles.wordpress.org/aramzs\">Aram Zucker-Scharff</a>, <a href=\"https://profiles.wordpress.org/arminbraun\">ArminBraun</a>, <a href=\"https://profiles.wordpress.org/ashfame\">Ashfame</a>, <a href=\"https://profiles.wordpress.org/filosofo\">Austin Matzko</a>, <a href=\"https://profiles.wordpress.org/avryl\">avryl</a>, <a href=\"https://profiles.wordpress.org/barrykooij\">Barry Kooij</a>, <a href=\"https://profiles.wordpress.org/beaulebens\">Beau Lebens</a>, <a href=\"https://profiles.wordpress.org/bendoh\">Ben Doherty (Oomph, Inc)</a>, <a href=\"https://profiles.wordpress.org/bananastalktome\">Billy Schneider</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone B. Gorges</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/krogsgard\">Brian Krogsgard</a>, <a href=\"https://profiles.wordpress.org/bswatson\">Brian Watson</a>, <a href=\"https://profiles.wordpress.org/calevans\">CalEvans</a>, <a href=\"https://profiles.wordpress.org/carolinegeven\">carolinegeven</a>, <a href=\"https://profiles.wordpress.org/caseypatrickdriscoll\">Casey Driscoll</a>, <a href=\"https://profiles.wordpress.org/caspie\">Caspie</a>, <a href=\"https://profiles.wordpress.org/cdog\">Catalin Dogaru</a>, <a href=\"https://profiles.wordpress.org/chipbennett\">Chip Bennett</a>, <a href=\"https://profiles.wordpress.org/chipx86\">chipx86</a>, <a href=\"https://profiles.wordpress.org/chrico\">ChriCo</a>, <a href=\"https://profiles.wordpress.org/cbaldelomar\">Chris Baldelomar</a>, <a href=\"https://profiles.wordpress.org/c3mdigital\">Chris Olbekson</a>, <a href=\"https://profiles.wordpress.org/cfoellmann\">Christian Foellmann</a>, <a href=\"https://profiles.wordpress.org/cfinke\">Christopher Finke</a>, <a href=\"https://profiles.wordpress.org/clifgriffin\">Clifton Griffin</a>, <a href=\"https://profiles.wordpress.org/codix\">Code Master</a>, <a href=\"https://profiles.wordpress.org/corphi\">Corphi</a>, <a href=\"https://profiles.wordpress.org/couturefreak\">Courtney Ivey</a>, <a href=\"https://profiles.wordpress.org/craig-ralston\">Craig Ralston</a>, <a href=\"https://profiles.wordpress.org/cweiske\">cweiske</a>, <a href=\"https://profiles.wordpress.org/extendwings\">Daisuke Takahashi</a>, <a href=\"https://profiles.wordpress.org/timersys\">Damian</a>, <a href=\"https://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber</a>, <a href=\"https://profiles.wordpress.org/redsweater\">Daniel Jalkut (Red Sweater)</a>, <a href=\"https://profiles.wordpress.org/dkotter\">Darin Kotter</a>, <a href=\"https://profiles.wordpress.org/nerrad\">Darren Ethier (nerrad)</a>, <a href=\"https://profiles.wordpress.org/dllh\">Daryl L. L. Houston (dllh)</a>, <a href=\"https://profiles.wordpress.org/dmchale\">Dave McHale</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/davidanderson\">David Anderson</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/folletto\">Davide \'Folletto\' Casali</a>, <a href=\"https://profiles.wordpress.org/davideugenepratt\">davideugenepratt</a>, <a href=\"https://profiles.wordpress.org/davidhamiltron\">davidhamiltron</a>, <a href=\"https://profiles.wordpress.org/denis-de-bernardy\">Denis de Bernardy</a>, <a href=\"https://profiles.wordpress.org/valendesigns\">Derek Herman</a>, <a href=\"https://profiles.wordpress.org/dsmart\">Derek Smart</a>, <a href=\"https://profiles.wordpress.org/designsimply\">designsimply</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/dipeshkakadiya\">dipesh.kakadiya</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/doublesharp\">doublesharp</a>, <a href=\"https://profiles.wordpress.org/dzerycz\">DzeryCZ</a>, <a href=\"https://profiles.wordpress.org/kucrut\">Dzikri Aziz</a>, <a href=\"https://profiles.wordpress.org/emazovetskiy\">e.mazovetskiy</a>, <a href=\"https://profiles.wordpress.org/oso96_2000\">Eduardo Reveles</a>, <a href=\"https://profiles.wordpress.org/cais\">Edward Caissie</a>, <a href=\"https://profiles.wordpress.org/eliorivero\">Elio Rivero</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/elliottcarlson\">elliottcarlson</a>, <a href=\"https://profiles.wordpress.org/enej\">enej</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"https://profiles.wordpress.org/ebinnion\">Eric Binnion</a>, <a href=\"https://profiles.wordpress.org/ethitter\">Erick Hitter</a>, <a href=\"https://profiles.wordpress.org/evansolomon\">Evan Solomon</a>, <a href=\"https://profiles.wordpress.org/fab1en\">Fabien Quatravaux</a>, <a href=\"https://profiles.wordpress.org/fhwebcs\">fhwebcs</a>, <a href=\"https://profiles.wordpress.org/floriansimeth\">Florian Simeth</a>, <a href=\"https://profiles.wordpress.org/bueltge\">Frank Bueltge</a>, <a href=\"https://profiles.wordpress.org/frankpw\">Frank P. Walentynowicz</a>, <a href=\"https://profiles.wordpress.org/f-j-kaiser\">Franz Josef Kaiser</a>, <a href=\"https://profiles.wordpress.org/garyc40\">Gary Cao</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/geertdd\">Geert De Deckere</a>, <a href=\"https://profiles.wordpress.org/genkisan\">genkisan</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/grahamarmfield\">Graham Armfield</a>, <a href=\"https://profiles.wordpress.org/webord\">Gustavo Bordoni</a>, <a href=\"https://profiles.wordpress.org/hakre\">hakre</a>, <a href=\"https://profiles.wordpress.org/harishchaudhari\">Harish Chaudhari</a>, <a href=\"https://profiles.wordpress.org/hauvong\">hauvong</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/herbmillerjr\">herbmillerjr</a>, <a href=\"https://profiles.wordpress.org/hew\">Hew</a>, <a href=\"https://profiles.wordpress.org/hnle\">Hinaloe</a>, <a href=\"https://profiles.wordpress.org/horike\">horike</a>, <a href=\"https://profiles.wordpress.org/hlashbrooke\">Hugh Lashbrooke</a>, <a href=\"https://profiles.wordpress.org/hugobaeta\">Hugo Baeta</a>, <a href=\"https://profiles.wordpress.org/iandunn\">Ian Dunn</a>, <a href=\"https://profiles.wordpress.org/ianmjones\">ianmjones</a>, <a href=\"https://profiles.wordpress.org/idealien\">idealien</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jacklenox\">Jack Lenox</a>, <a href=\"https://profiles.wordpress.org/jamescollins\">James Collins</a>, <a href=\"https://profiles.wordpress.org/janhenckens\">janhenckens</a>, <a href=\"https://profiles.wordpress.org/jfarthing84\">Jeff Farthing</a>, <a href=\"https://profiles.wordpress.org/cheffheid\">Jeffrey de Wit</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jesin\">Jesin A</a>, <a href=\"https://profiles.wordpress.org/jipmoors\">jipmoors</a>, <a href=\"https://profiles.wordpress.org/jartes\">Joan Artes</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joemcgill\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/yo-l1982\">Joel Bernerman</a>, <a href=\"https://profiles.wordpress.org/joen\">Joen Asmussen</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johneckman\">John Eckman</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/jlevandowski\">John Levandowski</a>, <a href=\"https://profiles.wordpress.org/desrosj\">Jonathan Desrosiers</a>, <a href=\"https://profiles.wordpress.org/joostdekeijzer\">joost de keijzer</a>, <a href=\"https://profiles.wordpress.org/joostdevalk\">Joost de Valk</a>, <a href=\"https://profiles.wordpress.org/jcastaneda\">Jose Castaneda</a>, <a href=\"https://profiles.wordpress.org/joshlevinson\">Josh Levinson</a>, <a href=\"https://profiles.wordpress.org/jphase\">jphase</a>, <a href=\"https://profiles.wordpress.org/juliobox\">Julio Potier</a>, <a href=\"https://profiles.wordpress.org/kopepasah\">Justin Kopepasah</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/justincwatt\">Justin Watt</a>, <a href=\"https://profiles.wordpress.org/kadamwhite\">K.Adam White</a>, <a href=\"https://profiles.wordpress.org/trepmal\">Kailey (trepmal)</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/kevdotbadger\">Kevin Ruscoe</a>, <a href=\"https://profiles.wordpress.org/kpdesign\">Kim Parsell</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/lancewillett\">Lance Willett</a>, <a href=\"https://profiles.wordpress.org/mindrun\">Leonard</a>, <a href=\"https://profiles.wordpress.org/leopeo\">Leonardo Giacone</a>, <a href=\"https://profiles.wordpress.org/lgladdy\">Liam Gladdy</a>, <a href=\"https://profiles.wordpress.org/maimairel\">maimairel</a>, <a href=\"https://profiles.wordpress.org/mako09\">Mako</a>, <a href=\"https://profiles.wordpress.org/funkatronic\">Manny Fleurmond</a>, <a href=\"https://profiles.wordpress.org/marcelomazza\">marcelomazza</a>, <a href=\"https://profiles.wordpress.org/marcochiesi\">Marco Chiesi</a>, <a href=\"https://profiles.wordpress.org/mkaz\">Marcus Kazmierczak</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/nofearinc\">Mario Peshev</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius (Clorith)</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/senff\">Mark Senff</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/mgibbs189\">Matt Gibbs</a>, <a href=\"https://profiles.wordpress.org/sivel\">Matt Martz</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mzak\">Matt Zak</a>, <a href=\"https://profiles.wordpress.org/mboynes\">Matthew Boynes</a>, <a href=\"https://profiles.wordpress.org/mattheweppelsheimer\">Matthew Eppelsheimer</a>, <a href=\"https://profiles.wordpress.org/mattheu\">Matthew Haines-Young</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/maxcutler\">Max Cutler</a>, <a href=\"https://profiles.wordpress.org/mehulkaklotar\">mehulkaklotar</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/meloniq\">meloniq</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Michael Adams (mdawaffe)</a>, <a href=\"https://profiles.wordpress.org/michael-arestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/tw2113\">Michael Beckwith</a>, <a href=\"https://profiles.wordpress.org/michalzuber\">michalzuber</a>, <a href=\"https://profiles.wordpress.org/mdgl\">Mike Glendinning</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/thaicloud\">Mike Jordan</a>, <a href=\"https://profiles.wordpress.org/mikeschinkel\">Mike Schinkel</a>, <a href=\"https://profiles.wordpress.org/mikengarrett\">MikeNGarrett</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinic</a>, <a href=\"https://profiles.wordpress.org/mmn-o\">mmn-o</a>, <a href=\"https://profiles.wordpress.org/batmoo\">Mohammad Jangda</a>, <a href=\"https://profiles.wordpress.org/momdad\">MomDad</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/morpheu5\">Morpheu5</a>, <a href=\"https://profiles.wordpress.org/Nao\">Naoko Takano</a>, <a href=\"https://profiles.wordpress.org/nathan_dawson\">nathan_dawson</a>, <a href=\"https://profiles.wordpress.org/neil_pie\">Neil Pie</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nicnicnicdevos\">nicnicnicdevos</a>, <a href=\"https://profiles.wordpress.org/nikv\">Nikhil Vimal</a>, <a href=\"https://profiles.wordpress.org/ninnypants\">ninnypants</a>, <a href=\"https://profiles.wordpress.org/nitkr\">nitkr</a>, <a href=\"https://profiles.wordpress.org/nunomorgadinho\">Nuno Morgadinho</a>, <a href=\"https://profiles.wordpress.org/originalexe\">OriginalEXE</a>, <a href=\"https://profiles.wordpress.org/pareshradadiya-1\">Paresh Radadiya</a>, <a href=\"https://profiles.wordpress.org/pathawks\">Pat Hawks</a>, <a href=\"https://profiles.wordpress.org/pbearne\">Paul Bearne</a>, <a href=\"https://profiles.wordpress.org/paulschreiber\">Paul Schreiber</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/sirbrillig\">Payton Swick</a>, <a href=\"https://profiles.wordpress.org/petemall\">Pete Mall</a>, <a href=\"https://profiles.wordpress.org/gungeekatx\">Pete Nelson</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/mordauk\">Pippin Williamson</a>, <a href=\"https://profiles.wordpress.org/podpirate\">podpirate</a>, <a href=\"https://profiles.wordpress.org/postpostmodern\">postpostmodern</a>, <a href=\"https://profiles.wordpress.org/nprasath002\">Prasath Nadarajah</a>, <a href=\"https://profiles.wordpress.org/prasoon2211\">prasoon2211</a>, <a href=\"https://profiles.wordpress.org/cyman\">Primoz Cigler</a>, <a href=\"https://profiles.wordpress.org/r-a-y\">r-a-y</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/rahulbhangale\">rahulbhangale</a>, <a href=\"https://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"https://profiles.wordpress.org/lamosty\">Rastislav Lamos</a>, <a href=\"https://profiles.wordpress.org/ravindra-pal-singh\">Ravindra Pal Singh</a>, <a href=\"https://profiles.wordpress.org/rianrietveld\">Rian Rietveld</a>, <a href=\"https://profiles.wordpress.org/ritteshpatel\">Ritesh Patel</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/rodrigosprimo\">Rodrigo Primo</a>, <a href=\"https://profiles.wordpress.org/magicroundabout\">Ross Wintle</a>, <a href=\"https://profiles.wordpress.org/ryan\">Ryan Boren</a>, <a href=\"https://profiles.wordpress.org/rmarks\">Ryan Marks</a>, <a href=\"https://profiles.wordpress.org/sagarjadhav\">sagarjadhav</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">Samir Shah</a>, <a href=\"https://profiles.wordpress.org/samo9789\">samo9789</a>, <a href=\"https://profiles.wordpress.org/samuelsidler\">Samuel Sidler</a>, <a href=\"https://profiles.wordpress.org/sgrant\">Scott Grant</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/scottgonzalez\">scott.gonzalez</a>, <a href=\"https://profiles.wordpress.org/greglone\">ScreenfeedFr</a>, <a href=\"https://profiles.wordpress.org/scribu\">scribu</a>, <a href=\"https://profiles.wordpress.org/seanchayes\">Sean Hayes</a>, <a href=\"https://profiles.wordpress.org/sergejmueller\">Sergej Muller</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/sevenspark\">sevenspark</a>, <a href=\"https://profiles.wordpress.org/simonwheatley\">Simon Wheatley</a>, <a href=\"https://profiles.wordpress.org/siobhan\">Siobhan</a>, <a href=\"https://profiles.wordpress.org/sippis\">sippis</a>, <a href=\"https://profiles.wordpress.org/slobodanmanic\">Slobodan Manic</a>, <a href=\"https://profiles.wordpress.org/stephdau\">Stephane Daury</a>, <a href=\"https://profiles.wordpress.org/sillybean\">Stephanie Leary</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stevegrunwell\">Steve Grunwell</a>, <a href=\"https://profiles.wordpress.org/stevehickeydesign\">stevehickeydesign</a>, <a href=\"https://profiles.wordpress.org/stevenkword\">Steven Word</a>, <a href=\"https://profiles.wordpress.org/taka2\">taka2</a>, <a href=\"https://profiles.wordpress.org/iamtakashi\">Takashi Irie</a>, <a href=\"https://profiles.wordpress.org/hissy\">Takuro Hishikawa</a>, <a href=\"https://profiles.wordpress.org/themiked\">theMikeD</a>, <a href=\"https://profiles.wordpress.org/thomaswm\">thomaswm</a>, <a href=\"https://profiles.wordpress.org/ipm-frommen\">Thorsten Frommen</a>, <a href=\"https://profiles.wordpress.org/tillkruess\">Till</a>, <a href=\"https://profiles.wordpress.org/timothyblynjacobs\">Timothy Jacobs</a>, <a href=\"https://profiles.wordpress.org/tiqbiz\">tiqbiz</a>, <a href=\"https://profiles.wordpress.org/tmatsuur\">tmatsuur</a>, <a href=\"https://profiles.wordpress.org/tmeister\">tmeister</a>, <a href=\"https://profiles.wordpress.org/tschutter\">Tobias Schutter</a>, <a href=\"https://profiles.wordpress.org/tobiasbg\">TobiasBg</a>, <a href=\"https://profiles.wordpress.org/tomdxw\">tomdxw</a>, <a href=\"https://profiles.wordpress.org/travisnorthcutt\">Travis Northcutt</a>, <a href=\"https://profiles.wordpress.org/trishasalas\">trishasalas</a>, <a href=\"https://profiles.wordpress.org/tywayne\">Ty Carlson</a>, <a href=\"https://profiles.wordpress.org/uamv\">UaMV</a>, <a href=\"https://profiles.wordpress.org/desaiuditd\">Udit Desai</a>, <a href=\"https://profiles.wordpress.org/sorich87\">Ulrich Sossou</a>, <a href=\"https://profiles.wordpress.org/veritaserum\">Veritaserum</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">voldemortensen</a>, <a href=\"https://profiles.wordpress.org/volodymyrc\">VolodymyrC</a>, <a href=\"https://profiles.wordpress.org/vortfu\">vortfu</a>, <a href=\"https://profiles.wordpress.org/welcher\">welcher</a>, <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a>, <a href=\"https://profiles.wordpress.org/earnjam\">William Earnhardt</a>, <a href=\"https://profiles.wordpress.org/willstedt\">willstedt</a>, and <a href=\"https://profiles.wordpress.org/wordpressorru\">WordPressor</a>.\n<p style=\"margin-top: 22px\">Special thanks go to <a href=\"http://siobhanmckeown.com/\">Siobhan McKeown</a> for producing the release video and <a href=\"http://camikaos.com/\">Cami Kaos</a> for the voice-over.</p>\n<p>Finally, thanks to all of the contributors who provided subtitles for the release video, which at last count had been translated into 30 languages!</p>\n<p><a href=\"https://profiles.wordpress.org/adrianpop\">Adrian Pop</a>, <a href=\"https://profiles.wordpress.org/deconf\">Alin Marcu</a>, <a href=\"https://profiles.wordpress.org/bagerathan\">Bagerathan Sivarajah</a>, <a href=\"https://profiles.wordpress.org/besnik\">Besnik</a>, <a href=\"https://profiles.wordpress.org/bjornjohansen\">Bjørn Johansen</a>, Chantal Coolsma, <a href=\"https://profiles.wordpress.org/cubells\">cubells</a>, Daisuke Takahashi, <a href=\"https://profiles.wordpress.org/dianakc\">Diana K. Cury</a>, <a href=\"https://profiles.wordpress.org/djzone\">DjZoNe</a>, <a href=\"https://profiles.wordpress.org/dyrer\">dyrer</a>, <a href=\"https://profiles.wordpress.org/semblance\">Elzette Roelofse</a>, <a href=\"https://profiles.wordpress.org/wordpress-tr\">Emre Erkan</a>, <a href=\"https://profiles.wordpress.org/fxbenard\">fxbenard</a>, <a href=\"https://profiles.wordpress.org/tacoverdo\">TacoVerdo</a>, <a href=\"https://profiles.wordpress.org/gabriel-reguly\">Gabriel Reguly</a>, <a href=\"https://profiles.wordpress.org/miss_jwo\">Jenny Wong</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/hgmb\">Håvard Grimelid</a>, <a href=\"https://profiles.wordpress.org/intoxstudio\">Joachim Jensen</a>, <a href=\"https://profiles.wordpress.org/jimmyxu\">Jimmy Xu</a>, <a href=\"https://profiles.wordpress.org/nukaga\">Junko Nukaga</a>, <a href=\"https://profiles.wordpress.org/pokeraitis\">Justina</a>, <a href=\"https://profiles.wordpress.org/kenan3008/\">Kenan Dervisevic</a>, <a href=\"https://profiles.wordpress.org/kosvrouvas\">Kostas Vrouvas</a>, <a href=\"https://profiles.wordpress.org/eclare\">Krzysztof Trynkiewicz</a>, <a href=\"https://profiles.wordpress.org/goblindegook\">Luís Rodrigues</a>, <a href=\"https://profiles.wordpress.org/luisrull\">Luis Rull</a>, <a href=\"https://profiles.wordpress.org/culturemark\">Mark Thomas Gazel </a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius Jensen</a>, <a href=\"https://profiles.wordpress.org/matthee\">matthee</a>, <a href=\"https://profiles.wordpress.org/damst\">Mattias Tengblad</a>, Matúš Záhradník, Mayuko Moriyama, <a href=\"https://profiles.wordpress.org/michalvittek\">Michal Vittek</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinić</a>, <a href=\"https://profiles.wordpress.org/mrshemek\">MrShemek</a>, <a href=\"https://profiles.wordpress.org/Nao\">Naoko Takano</a>, <a href=\"https://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/peterhoob\">Peter Holme Obrestad</a>, <a href=\"https://profiles.wordpress.org/petya\">Petya Raykovska</a>, Przemysław Mirota, <a href=\"https://profiles.wordpress.org/qraczek\">qraczek</a>, <a href=\"https://profiles.wordpress.org/bi0xid\">Rafa Poveda</a>, <a href=\"https://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"https://profiles.wordpress.org/rasheed\">Rasheed Bydousi</a>, <a href=\"https://profiles.wordpress.org/gwgan\">Rhoslyn Prys</a>, <a href=\"https://profiles.wordpress.org/robee\">Robert Axelsen</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/siobhyb\">Siobhan Bamber</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/tohave\">ک To Have داشتن</a>, <a href=\"https://profiles.wordpress.org/zodiac1978\">Torsten Landsiedel</a>, <a href=\"https://profiles.wordpress.org/egalego\">Victor J. Quesada</a>, <a href=\"https://profiles.wordpress.org/wolly\">Wolly</a>, <a href=\"https://profiles.wordpress.org/xavivars\">Xavi Ivars</a>, <a href=\"https://profiles.wordpress.org/xibe\">Xavier Borderie</a></p>\n<p>If you want to follow along or help out, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>. Thanks for choosing WordPress. See you soon for version 4.3!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"https://wordpress.org/news/2015/04/powell/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.1.2 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/04/wordpress-4-1-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/news/2015/04/wordpress-4-1-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 21 Apr 2015 13:44:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3628\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:383:\"WordPress 4.1.2 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.1.1 and earlier are affected by a critical cross-site scripting vulnerability, which could enable anonymous users to compromise a site. This was reported by Cedric Van Bockhaven and fixed by [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gary Pendergast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3913:\"<p>WordPress 4.1.2 is now available. This is a <strong>critical security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.1.1 and earlier are affected by a critical cross-site scripting vulnerability, which could enable anonymous users to compromise a site. This was reported by <a href=\"https://cedricvb.be\">Cedric Van Bockhaven</a> and fixed by <a href=\"http://pento.net/\">Gary Pendergast</a>, <a href=\"http://blogwaffe.com/\">Mike Adams</a>, and <a href=\"http://nacin.com/\">Andrew Nacin</a> of the WordPress security team.</p>\n<p>We also fixed three other security issues:</p>\n<ul>\n<li>In WordPress 4.1 and higher, files with invalid or unsafe names could be uploaded. Discovered by <a href=\"http://HSASec.de\">Michael Kapfer and Sebastian Kraemer of HSASec</a>.</li>\n<li>In WordPress 3.9 and higher, a very limited cross-site scripting vulnerability could be used as part of a social engineering attack. Discovered by <a href=\"http://zoczus.blogspot.com/\">Jakub Zoczek</a>.</li>\n<li>Some plugins were vulnerable to an SQL injection vulnerability. Discovered by Ben Bidner of the WordPress security team.</li>\n</ul>\n<p>We also made four hardening changes, discovered by <a href=\"http://codesymphony.co/\">J.D. Grimes</a>, Divyesh Prajapati, <a href=\"http://www.allancollins.net/\">Allan Collins</a>, <a href=\"https://sucuri.net/\">Marc-Alexandre Montpas</a> and <a href=\"https://profiles.wordpress.org/jblz\">Jeff Bowen</a>.</p>\n<p>We appreciated the <a href=\"https://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/\">responsible disclosure</a> of these issues directly to our security team. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.1.2\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.1?rev=32234&amp;stop_rev=32144\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.1.2</a> or venture over to <strong>Dashboard → Updates</strong> and simply click &#8220;Update Now.&#8221; Sites that support automatic background updates are already beginning to update to WordPress 4.1.2.</p>\n<p>Thanks to everyone who contributed to 4.1.2: <a href=\"https://profiles.wordpress.org/collinsinternet\">Allan Collins</a>, <a href=\"https://profiles.wordpress.org/xknown\">Alex Concha</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/vortfu\">Ben Bidner</a>, <a href=\"https://profiles.wordpress.org/boonbgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/DrewAPicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, and <a href=\"https://profiles.wordpress.org/mdawaffe\">Mike Adams</a>.</p>\n<p>A number of plugins also released security fixes yesterday. Keep everything updated to stay secure. If you’re a plugin author, please read <a href=\"https://make.wordpress.org/plugins/2015/04/20/fixing-add_query_arg-and-remove_query_arg-usage/\">this post</a> to confirm that your plugin is not affected by the same issue. Thank you to all of the plugin authors who worked closely with our security team to ensure a coordinated response.</p>\n<p><em>Already testing WordPress 4.2? The third release candidate is now available (<a href=\"https://wordpress.org/wordpress-4.2-RC3.zip\">zip</a>) and it contains these fixes. For more on 4.2, see <a href=\"https://wordpress.org/news/2015/04/wordpress-4-2-release-candidate/\">the RC 1 announcement post</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/04/wordpress-4-1-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 4.2 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/news/2015/04/wordpress-4-2-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wordpress.org/news/2015/04/wordpress-4-2-release-candidate/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Apr 2015 19:07:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3609\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:334:\"The release candidate for WordPress 4.2 is now available. We&#8217;ve made more than 140 changes since releasing Beta 4 a week and a half ago. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.2 on Wednesday, [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Drew Jaynes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2328:\"<p>The release candidate for WordPress 4.2 is now available.</p>\n<p>We&#8217;ve made more than <a href=\"https://core.trac.wordpress.org/log?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=32136&amp;stop_rev=31996&amp;limit=100\">140 changes</a> since releasing Beta 4 a week and a half ago. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.2 on <strong>Wednesday, April 22</strong>, but we need your help to get there.</p>\n<p>If you haven’t tested 4.2 yet, now is the time! (Please though, not on your live site unless you’re adventurous.)</p>\n<p><strong>Think you&#8217;ve found a bug?</strong> Please post to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta support forum</a>. If any known issues come up, you&#8217;ll be able to <a href=\"https://core.trac.wordpress.org/report/5\">find them here</a>.</p>\n<p>To test WordPress 4.2 RC1, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.2-RC1.zip\">download the release candidate here</a> (zip). </p>\n<p>For more information about what’s new in version 4.2, check out the <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-3/\">Beta 3</a>, and <a href=\"https://wordpress.org/news/2015/04/wordpress-4-2-beta-4/\">Beta 4</a> blog posts.</p>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.2 and update your plugin&#8217;s <em>Tested up to</em> version in the readme to 4.2 before next week. If you find compatibility problems, we never want to break things, so please be sure to post to the support forums so we can figure those out before the final release.</p>\n<p>Be sure to <a href=\"https://make.wordpress.org/core/\">follow along the core development blog</a>, where we&#8217;ll continue to post <a href=\"https://make.wordpress.org/core/tag/4-2-dev-notes/\">notes for developers</a> for 4.2.</p>\n<p><em>Im-Press-ive saving</em><br />\n<em>Achievement unlocked: RC</em><br />\n<em>Release here we come</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/news/2015/04/wordpress-4-2-release-candidate/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Improvements to WordPress.org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2015/04/improvements-to-wordpress-org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://wordpress.org/news/2015/04/improvements-to-wordpress-org/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 04 Apr 2015 20:19:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3494\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:335:\"If you visit WordPress.org regularly you might have noticed some changes around the place. If you don’t, now’s the time to check them out! We’ve been working hard to improve the site to make it more useful to everyone, both developers and users, and we hope you like what we’ve done. New Theme and Plugin Directories [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Samuel Sidler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5551:\"<p>If you visit WordPress.org regularly you might have noticed some changes around the place. If you don’t, now’s the time to check them out! We’ve been working hard to improve the site to make it more useful to everyone, both developers and users, and we hope you like what we’ve done.</p>\n<h2>New Theme and Plugin Directories</h2>\n<p>Since WordPress 3.8, you’ve been enjoying improved theme management in your WordPress admin, and in WordPress 4.0 plugin management was refined. We’ve brought these experiences from your admin and re-created them right here on WordPress.org.</p>\n<h3>Theme Directory</h3>\n<p>The <a href=\"https://wordpress.org/themes/\">Theme Directory</a> has a better browsing experience, with handy tabs where you can view featured, popular, and the latest themes. As with the theme experience in your admin, you can use the feature filter to browse for just the right theme for your WordPress website.</p>\n<p><img class=\"alignnone size-large wp-image-3572\" src=\"https://wordpress.org/news/files/2015/04/theme-directory-1024x768.png\" alt=\"theme-directory\" width=\"692\" height=\"519\" /></p>\n<p>Click on a theme to get more information about it, including shiny screenshots, ratings, and statistics.</p>\n<p><img class=\"alignnone size-large wp-image-3573\" src=\"https://wordpress.org/news/files/2015/04/theme-directory-individual-1024x768.png\" alt=\"theme-directory-individual\" width=\"692\" height=\"519\" /></p>\n<p>Konstantin Obenland <a href=\"https://make.wordpress.org/meta/2015/03/10/new-theme-directory/\">posted a good overview</a> of everything involved with the theme directory overhaul and followed up with <a href=\"https://make.wordpress.org/meta/2015/03/31/theme-directory-stats/\">a post on improved statistics</a>.</p>\n<h3>Plugin Directory</h3>\n<p>The <a href=\"https://wordpress.org/plugins/\">Plugin Directory</a> has a brand new theme that mirrors the experience in your WordPress admin, with a more visual experience, and better search and statistics.</p>\n<p><img class=\"alignnone size-large wp-image-3594\" src=\"https://wordpress.org/news/files/2015/04/plugin-directory-1024x768.png\" alt=\"plugin-directory\" width=\"692\" height=\"519\" /></p>\n<p>As well as a facelift, there are some great new features for you to play around with:</p>\n<ul>\n<li>Favorites – when you’re logged in to you WordPress.org account, this page gives you direct access to the plugins that you have favorited.</li>\n<li>Beta Testing – try out plugins where developers are experimenting with new features for WordPress.</li>\n<li>Search by plugin author – you can search for a plugin author using their username.</li>\n<li>Better statistics – listings now display the number of active installs so you can see how many people are actually using a plugin.</li>\n</ul>\n<p>An <a href=\"https://make.wordpress.org/meta/2015/03/04/new-plugin-directory-theme/\">overview of the new theme</a> was posted by Scott Reilly.</p>\n<h2>Better Statistics</h2>\n<p>We’ve made huge improvements to <a href=\"https://wordpress.org/about/stats/\">our statistics</a>. This gives us more useful information about the WordPress versions people are using, their PHP version, and their MySQL version.</p>\n<p>Already these new statistics have provided us with useful insights into WordPress usage.</p>\n<ul>\n<li>More than 43% of all sites are running the latest version of WordPress. Previously, we thought only 10% of sites were up-to-date. By excluding sites that are no longer online we were able to improve these statistics.</li>\n<li>We were able to clear up the data around WordPress 3.0, bringing it more in line with expectations. This anomaly was a by-product of spammers.</li>\n<li>Only 15.9% of sites are using PHP 5.2, which is better than we thought.</li>\n</ul>\n<p>Over the coming months we’ll be able to use these statistics to bring you new tools and improvements, and to make more informed decisions across the board. Read <a href=\"https://make.wordpress.org/meta/2015/03/01/major-update-to-our-version-stats-for-php-mysql-and-wordpress/\">Andrew Nacin&#8217;s post about these changes</a> for more background.</p>\n<h2>Thanks!</h2>\n<p>Thanks to everyone who contributed to the theme directory redesign, the plugin directory refresh, and improved statistics: <a href=\"https://profiles.wordpress.org/deconf\">Alin Marcu</a>, <a href=\"https://profiles.wordpress.org/colorful-tones/\">Damon Cook</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/mj12982\">Jan Cavan Boulas</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/BrashRebel\">Kyle Maurer</a>, <a href=\"https://profiles.wordpress.org/matveb\">Matías Ventura</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/nataliemac\">Natalie MacLees</a>, <a href=\"https://profiles.wordpress.org/pauldewouters\">Paul de Wouters</a>, <a href=\"https://profiles.wordpress.org/samuelsidler\">Samuel Sidler</a>, <a href=\"https://profiles.wordpress.org/Otto42\">Samuel Wood (Otto)</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/siobhan\">Siobhan McKeown</a>.</p>\n<p>If you want to help out or follow along with future WordPress.org projects, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/meta/\">meta development blog</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://wordpress.org/news/2015/04/improvements-to-wordpress-org/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.2 Beta 4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/04/wordpress-4-2-beta-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2015/04/wordpress-4-2-beta-4/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 03 Apr 2015 13:05:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3566\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:337:\"WordPress 4.2 Beta 4 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the WordPress Beta Tester plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Drew Jaynes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2694:\"<p>WordPress 4.2 Beta 4 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.2-beta4.zip\">download the beta here</a> (zip).</p>\n<p>For more information about what’s new in version 4.2, check out the <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/\">Beta 2</a>, and <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-3/\">Beta 3</a> blog posts. Some of the changes in Beta 4 include:</p>\n<ul>\n<li>Incrementally improved the experience when <strong>accessing the Customizer on mobile</strong>. Please test on your mobile devices and let us know if anything seems wonky.</li>\n<li>Added the ability to make <strong>admin notices dismissible</strong>. Plugin and theme authors: adding <code>.notice</code> and <code>.is-dismissible</code> as adjacent classes to your notice containers should automatically make them dismissible. Please test.</li>\n<li>Fixed some reported issues with <strong>backward-compatibility issues</strong> caused by the modularization of core JS files.</li>\n<li>Removed the <strong>ability to swipe the admin menu open and closed</strong> on touch devices due to reports of some issues with built-in history navigation on certain platforms.</li>\n<li>Improved <strong>accessibility of the WordPress admin</strong> by adding landmark roles. Screen reader users: please test in any core admin screens.</li>\n<li><strong>Various bug fixes</strong>. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=31996&amp;stop_rev=31902&amp;limit=100\">more than 90 changes</a> in the last week.</li>\n</ul>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.2\">everything we’ve fixed</a>.</p>\n<p><em>Dismiss notices</em><br />\n<em>Customizer on mobile</em><br />\n<em>RC nearly here</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2015/04/wordpress-4-2-beta-4/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.2 Beta 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-3/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Mar 2015 18:32:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3522\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:337:\"WordPress 4.2 Beta 3 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the WordPress Beta Tester plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Drew Jaynes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2986:\"<p>WordPress 4.2 Beta 3 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.2-beta3.zip\">download the beta here</a> (zip).</p>\n<p>For more information about what’s new in version 4.2, check out the <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/\">Beta 1</a> and <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/\">Beta 2</a> blog posts. Some of the changes in Beta 3 include:</p>\n<ul>\n<li>Removed <strong>Shiny Installs</strong> functionality due to concerns about the activation workflow. Please test the remaining &#8220;Shiny Updates&#8221; functionality from both the Plugins &gt; Add New and Plugins screens to ensure in-line updating still works as well as before.</li>\n<li>Fixed an issue with the <strong>Comments Quick Edit</strong> layout breaking on smaller screens. Please test on your mobile devices.</li>\n<li>Improved <strong>accessibility of login screen errors</strong>. Screen reader users: please let us know if you encounter any issues.</li>\n<li>Refined the <strong>emoji compatibility</strong> script to only load on the front- and back-end if the browser requires it. If you&#8217;re using a legacy web browser, please test.</li>\n<li>Fixed several issues in <strong>Press This</strong> with inserted images being improperly linked to locations other than the source site. Go ahead, &#8220;press&#8221; a site with images on the page and tell us if the image links aren&#8217;t working as you&#8217;d expect.</li>\n<li>Standardized the <strong>time display format</strong> in a variety of admin screens, switching to 24-hour notation where a.m. or p.m. are not specified. Please let us know if you notice you notice anything amiss!</li>\n<li><strong>Various other bug fixes</strong>. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=31901&amp;stop_rev=31835&amp;limit=100\">more than 65 changes</a> in the last week.</li>\n</ul>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.2\">everything we’ve fixed</a>.</p>\n<p><em>Emoji loader</em><br />\n<em>&#8220;Shiny Updates&#8221; still stand firm</em><br />\n<em>Beta 3, please test!</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-3/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.2 Beta 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 19 Mar 2015 19:30:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3498\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:337:\"WordPress 4.2 Beta 2 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the WordPress Beta Tester plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Drew Jaynes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2326:\"<p>WordPress 4.2 Beta 2 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.2-beta2.zip\">download the beta here</a> (zip).</p>\n<p>For more information about what’s new in version 4.2, <a href=\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/\">check out the Beta 1 blog post</a>. Some of the changes in Beta 2 include:</p>\n<ul>\n<li>Added support for entering FTP and SSH credentials when <strong>updating plugins in-place</strong>. FTP and SSH users, please test!</li>\n<li><strong>Improved cross-browser support for emoji</strong> throughout WordPress. If you&#8217;re using an older web browser, please tell us if you have problems using emoji.</li>\n<li>Further <strong>refined Press This authoring</strong> with auto-embedded media and better content scanning. We&#8217;d love to know how auto-embeds work for you.</li>\n<li>Added a constructor and improved method consistency in <code>WP_Comment_Query</code>. Developers: if you&#8217;re extending <code>WP_Comment_Query</code>, please let us know if you run into any issues.</li>\n<li><strong>Various bug fixes</strong>. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=31834&amp;stop_rev=31763&amp;limit=100\">more than 70 changes</a> in the last week.</li>\n</ul>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.2\">everything we’ve fixed</a>.</p>\n<p><em>Test some emoji</em><br />\n<em>FTP and SSH</em><br />\n<em>Let&#8217;s &#8220;Press&#8221; some embeds!</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.2 Beta 1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 12 Mar 2015 23:22:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3446\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:329:\"WordPress 4.2 Beta 1 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Drew Jaynes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4275:\"<p>WordPress 4.2 Beta 1 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.2, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.2-beta1.zip\">download the beta here</a> (zip).</p>\n<p>4.2 is due out next month, but to get there, we need your help testing what we&#8217;ve been working on:</p>\n<ul>\n<li><strong>Press This</strong> has been completely revamped to make sharing content from around the web easier than ever. The new workflow is mobile friendly, and we&#8217;d love for you to try it out on all of your devices. Navigate to the Tools screen in your WordPress backend to get started (<a href=\"https://core.trac.wordpress.org/ticket/31373\">#31373</a>). </li>\n<li><strong>Browsing and switching installed themes</strong> has been added to the Customizer to make switching faster and more convenient. We&#8217;re especially interested to know if this helps streamline the process of setting up your site (<a href=\"https://core.trac.wordpress.org/ticket/31303\">#31303</a>).</li>\n<li>The workflow for <strong>updating and installing plugins</strong> just got more intuitive with the ability to install or update in-place from the Plugins screens. Try it out and let us know what you think! (<a href=\"https://core.trac.wordpress.org/ticket/29820\">#29820</a>)</li>\n<li>If you felt like <strong>emoji</strong> were starkly missing from your content toolbox, worry no more. We&#8217;ve added emoji support nearly everywhere, even post slugs <img src=\"https://s.w.org/images/core/emoji/72x72/1f44d.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> (<a href=\"https://core.trac.wordpress.org/ticket/31242\">#31242</a>).</li>\n</ul>\n<p><strong>Developers</strong>: There have been a lot of changes for you to test as well, including:</p>\n<ul>\n<li><strong>Taxonomy Roadmap:</strong> Terms shared across multiple taxonomies will <a href=\"https://make.wordpress.org/core/2015/02/16/taxonomy-term-splitting-in-4-2-a-developer-guide/\">now be split</a> into separate terms when one of them is updated. Please let us know if you hit any snags (<a href=\"https://core.trac.wordpress.org/ticket/5809/\">#5809</a>).</li>\n<li>New <code>wp.a11y.speak()</code> functionality helps your JavaScript talk to screen readers to better inform impaired users what&#8217;s happening on-screen. Try it out in your plugin or theme and let us know if you notice any adverse affects (<a href=\"https://core.trac.wordpress.org/ticket/31368/\">#31368</a>).</li>\n<li>Named clause support has been added to <code>WP_Query</code>, <code>WP_Comment_Query</code>, and <code>WP_User_Query</code>, allowing specific <code>meta_query</code> clauses to be used with <code>orderby</code>. If you have any complex queries, please test them (<a href=\"https://core.trac.wordpress.org/ticket/31045/\">#31045</a>, <a href=\"https://core.trac.wordpress.org/ticket/31265/\">#31265</a>).</li>\n</ul>\n<p>If you want a more in-depth view of what changes have made it into 4.2, <a href=\"https://make.wordpress.org/core/tag/week-in-core/\">check out the weekly review posts</a> on the main development blog.</p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.2\">everything we’ve fixed</a> so far.</p>\n<p>Happy testing!</p>\n<p><em>Press This: switch a theme</em><br />\n<em>Save time installing plugins</em><br />\n<em>Testing makes us</em> <img src=\"https://s.w.org/images/core/emoji/72x72/1f603.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/news/2015/03/wordpress-4-2-beta-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 12 Jun 2015 17:07:34 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:10:\"x-pingback\";s:37:\"https://wordpress.org/news/xmlrpc.php\";s:13:\"last-modified\";s:29:\"Thu, 28 May 2015 13:55:13 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(28429,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1434172055','no'),(28430,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1434128855','no'),(28431,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1434172056','no'),(28432,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"Matt: Paul Ford: What is Code? | Bloomberg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45145\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"http://ma.tt/2015/06/paul-ford-what-is-code-bloomberg/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:376:\"<blockquote><p>We are here because the editor of this magazine asked me, “Can you tell me what code is?”</p></blockquote>\n<p><a href=\"http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/\">Paul Ford&#8217;s amazing What is Code? for Bloomberg</a>. I only spotted one mistake, of course from the Taupe Blazer guy: you&#8217;re never at the limits of WordPress.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Jun 2015 00:29:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: StackExchange is Testing a Proposed Q&amp;A Site for WooCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44683\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/stackexchange-is-testing-a-proposed-qa-site-for-woocommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4099:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/woocommerce-qa-staging-site.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/woocommerce-qa-staging-site.jpg\" alt=\"woocommerce-qa-staging-site\" width=\"1026\" height=\"428\" class=\"aligncenter size-full wp-image-45118\" /></a></p>\n<p>StackExchange community members have <a href=\"http://area51.stackexchange.com/proposals/80132/woocommerce\" target=\"_blank\">proposed</a> a new Q&amp;A site for users and developers of <a href=\"http://www.woothemes.com/woocommerce/\" target=\"_blank\">WooCommerce</a>. The proposal is currently in the <a href=\"http://area51.stackexchange.com/faq\" target=\"_blank\">&#8220;Definition&#8221; phase</a>, which means that participants are working to design the community by proposing hypothetical questions that embody the topic&#8217;s scope.</p>\n<p>So far for WooCommerce, popular hypothetical questions include:</p>\n<ul>\n<li>How do I handle the EU VATMOSS regulations in Woocommerce?</li>\n<li>How do I create an Order using WC REST API in my application?</li>\n<li>How to hide “add to cart” on free products?</li>\n<li>How to implement multiple versions of one digital product with different buyers&#8217; customizations?</li>\n</ul>\n<p>In order to move on to the next milestone, the site must have at least 40 questions that have a score of at least ten net votes (up minus down). The WooCommerce staging site needs the following:</p>\n<ul>\n<li>5 more followers</li>\n<li>33 more questions with a score of 10 or more</li>\n<li>People to max out upvoting quality questions already in the proposal (users can only vote 5 times)</li>\n</ul>\n<p>The <a href=\"http://wordpress.stackexchange.com/\" target=\"_blank\">StackExchange for general WordPress Development</a> is thriving with <a href=\"http://wptavern.com/wordpress-stackexchange-thrives-in-2014-with-17-million-page-views-and-14k-new-questions\" target=\"_blank\">17 million page views and 14K new questions</a> in 2014. However, questions regarding third party plugins are considered off-topic and will be closed by moderators, hence the need for a separate WooCommerce Q&amp;A site.</p>\n<p>Alex Miller, one of the supporters of the WooCommerce StackExchange proposal, believes that the WooCommerce community needs a place where developers can quickly get answers to questions.</p>\n<p>&#8220;The WooCommerce Community Forums seemed like a decent place but was shut down months ago for unknown reasons,&#8221; he said. &#8220;My experience with the Woo Community Forums is that it was too broad and the upvote downvote system was poorly handled &#8211; good questions got buried too quickly with the large influx of new questions.&#8221;</p>\n<p>In contrast, the StackExchange model pushes questions that have activity (edits, comments, answers) to the top of the frontpage and lower quality questions (downvoted, flagged) receive less attention.</p>\n<p>&#8220;Having a WooCommerce StackExchange site is also a great place for people with a great understanding of WooCommerce to document their knowledge for search engines to easily find,&#8221; Miller said. You can see an example of this by <a href=\"http://wordpress.stackexchange.com/questions?sort=votes\" target=\"_blank\">sorting the WPSE questions by votes</a> and reading the first few questions and answers.</p>\n<p>&#8220;I can only hope that with <a href=\"http://wptavern.com/automattic-acquires-woocommerce\" target=\"_blank\">Automattic&#8217;s acquisition of WooCommerce</a>, the forums will be reopened (WooCommunity forums have been shutdown for a few months now),&#8221; Miller said. &#8220;But either way I don&#8217;t think there is a much better platform than what the StackExchange offers.&#8221;</p>\n<p>As StackExchange Q&amp;A sites are entirely community driven, WooCommerce community members who are interested in seeing it succeed are encouraged to <a href=\"http://area51.stackexchange.com/users/login?returnurl=%2fproposals%2f80132%2fwoocommerce%3ftab%3dvotes\" target=\"_blank\">log into StackExchange</a> and create/upvote quality questions that represent the community&#8217;s interests.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Jun 2015 21:23:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"WPTavern: Customizer Typography: A Proof-of-Concept Plugin for WordPress Theme Authors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=45017\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"http://wptavern.com/customizer-typography-a-proof-of-concept-plugin-for-wordpress-theme-authors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3632:\"<p>One option that users often appreciate in themes is the ability to control typography without having to modify any code. Justin Tadlock has been experimenting with <a href=\"http://justintadlock.com/archives/2015/06/08/customizer-typography-project\" target=\"_blank\">adding a typography control class for the WordPress customizer</a>.</p>\n<p>Instead of writing a lengthy tutorial, he opted to create a a proof-of-concept plugin that demonstrates how theme authors might accomplish this. <a href=\"https://github.com/justintadlock/customizer-typography\" target=\"_blank\">Customizer Typography</a> is currently being developed on GitHub and Tadlock said it is &#8220;only meant for development purposes and to show one method of executing the idea.&#8221;</p>\n<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/customize-typography-screen.png\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/customize-typography-screen.png\" alt=\"customize-typography-screen\" width=\"1154\" height=\"640\" class=\"aligncenter size-full wp-image-45019\" /></a></p>\n<p>The plugin was created to provide testing for two things:</p>\n<ul>\n<li>Testing a customizer control class to handle typography</li>\n<li>Tying multiple customize settings to a single control</li>\n</ul>\n<p>&#8220;The most important was not having to add tons of code while still providing the developer complete control over each setting,&#8221; Tadlock said. &#8220;Fortunately, the Customization API in WordPress is pretty powerful and allows you to tie multiple settings to a single control.&#8221;</p>\n<p>The plugin currently provides controls for live previewing both paragraph and headings with various font family, font weight, font style, font size, and line height options. <a href=\"https://github.com/justintadlock/customizer-typography/blob/master/customize/control-typography.php#L207\" target=\"_blank\">Integrating Google Fonts</a> is on Tadlock&#8217;s to-do list, but at the moment he&#8217;s not working to build out the plugin as the ultimate solution.</p>\n<p>&#8220;Just to be clear, this is a proof of concept that I put together in an afternoon, not a polished solution,&#8221; he said. &#8220;The idea, for me at least, would be to eventually extract it and put it into themes.&#8221;</p>\n<p>I installed the plugin to play around with Twenty Fifteen and found that the experience of live previewing typography changes is very satisfying from a user standpoint. Although many custom theme options panels include basic typography controls, you often have to refresh the page to see how your changes applied. This kind of control is a prime candidate for integrating into the customizer.</p>\n<p>Tadlock&#8217;s example typography control class gives you a glimpse of what&#8217;s possible for theme authors who elect to build their options using the customizer. It&#8217;s these kinds of controls that truly solve a frustration and make it easier to personalize themes. The Customizer Typography plugin exemplifies the purpose of the customizer.</p>\n<p>You can <a href=\"https://github.com/justintadlock/customizer-typography\" target=\"_blank\">check out the plugin on GitHub</a> and install it to see the live previews in action. If you&#8217;re interested to learn more about building with the <a href=\"https://developer.wordpress.org/themes/advanced-topics/customizer-api/\" target=\"_blank\">Customizer API</a>, Tadlock published a post on the Make.WordPress.org/Themes blog that contains a long list of <a href=\"https://make.wordpress.org/themes/2015/05/07/customizer-tutorials-and-documentation/\" target=\"_blank\">customizer tutorials and documentation</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Jun 2015 18:00:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: WooCommerce 2.3.11 Patches Object Injection Vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=45099\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/woocommerce-2-3-11-patches-object-injection-vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:884:\"<p><a href=\"http://develop.woothemes.com/woocommerce/2015/06/woocommerce-2-3-11-security-and-maintenance-release/\">WooCommerce 2.3.11</a> patches an object injection vulnerability <a href=\"https://blog.sucuri.net/2015/06/security-advisory-object-injection-vulnerability-in-woocommerce.html\">discovered by Sucuri</a>. According to the security research company, the vulnerability is only present when the <strong>PayPal Identity Token </strong>option is set in WooCommerce.</p>\n<p>Researchers used a combination of WordPress and WooCommerce components with a known PHP bug and were able to download critical files, including wp-config.php which has sensitive information. Versions <strong>2.0.20 &#8211; 2.3.10</strong> are considered vulnerable.</p>\n<p>In addition to the patch, the release also has a number of bug fixes. If you haven&#8217;t already, update as soon as possible.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Jun 2015 17:14:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: WPWeekly Episode 195 – Recap of WordCamp Orange County 2015\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=45094&preview_id=45094\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/wpweekly-episode-195-recap-of-wordcamp-orange-county-2015\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2775:\"<p>In this episode, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I recap <a href=\"https://oc.wordcamp.org/2015/\">WordCamp Orange County 2015</a> held in Costa Mesa, CA. We share our favorite sessions, highlights of the weekend, and I explain why I spent day two of the conference in my hotel room. During the second half of the show, we cover the news of the week, including the controversy surrounding the menu customizer plugin.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"http://wptavern.com/wordcamp-us-2015-now-accepting-applications-for-host-city\">WordCamp US 2015 Now Accepting Applications for Host City</a><br />\n<a href=\"https://make.wordpress.org/community/2015/06/10/ive-been-approached-by-a-couple-of-people/\">Clarification on WordCamp US Applications</a><br />\n<a href=\"http://wptavern.com/wordpress-core-contributors-call-for-user-testing-on-the-menu-customizer-plugin\">WordPress Core Contributors Call for User Testing on the Menu Customizer Plugin</a><br />\n<a href=\"https://apps.wordpress.org/2015/06/09/wordpress-for-ios-version-5-2/\">WordPress Mobile 5.2 Update Drops with added media capabilities</a><br />\n<a href=\"http://wptavern.com/woothemes-fixes-xss-vulnerability-in-products-using-the-prettyphoto-library\">WooThemes Fixes XSS Vulnerability in Products Using the prettyPhoto Library</a><br />\n<a href=\"http://develop.woothemes.com/woocommerce/2015/06/woocommerce-2-3-11-security-and-maintenance-release/\">WooCommerce 2.3.11 Security and Maintenance Release</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/daily-logo/\">Daily Logo</a> is a simple and flexible plugin which allow users to display a different header or logo on their site every day.</p>\n<p><a href=\"https://wordpress.org/plugins/scheduled-stickiness/\">Scheduled Stickiness</a> sets and unsets the sticky flag on specified dates for a certain post based on meta fields.</p>\n<p><a href=\"https://wordpress.org/plugins/learnpress/\">LearnPress</a> is a comprehensive learning management system plugin for WordPress. It can be used to easily create and sell courses online.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, June 24th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #195:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Jun 2015 15:56:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"WPTavern: WooThemes Fixes XSS Vulnerability in Products Using the prettyPhoto Library\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=45080\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"http://wptavern.com/woothemes-fixes-xss-vulnerability-in-products-using-the-prettyphoto-library\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2519:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/WooThemesFeaturedImage2.png\"><img class=\"aligncenter size-full wp-image-45083\" src=\"http://wptavern.com/wp-content/uploads/2015/06/WooThemesFeaturedImage2.png\" alt=\"WooThemesFeaturedImage2\" width=\"648\" height=\"196\" /></a>Jeff Ikus of WooThemes, <a href=\"http://develop.woothemes.com/themes/2015/06/09/prettyphoto-xss-theme-updates/\">announced</a> on the company&#8217;s themes development blog, that it has pushed out updates to all of its products that use the <a href=\"http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/\">prettyPhoto library</a>. The update fixes a <a href=\"https://github.com/scaron/prettyphoto/issues/149\">DOM based cross-site scripting vulnerability </a>discovered in 2014.</p>\n<p><a href=\"http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/\">prettyPhoto</a> is a jQuery lightbox clone used in a potentially large number of WordPress products. If you use a WordPress plugin or theme that relies on prettyPhoto, please get in touch with the author to make sure they&#8217;re aware of this security vulnerability. If you use the <a href=\"https://wordpress.org/plugins/prettyphoto/\">prettyPhoto WordPress plugin</a>, make sure it&#8217;s running version 1.2 as it contains the patched library.</p>\n<h2>Risky Business</h2>\n<p>In 2011, <a title=\"http://www.binarymoon.co.uk/2011/08/timthumb-2/\" href=\"http://www.binarymoon.co.uk/2011/08/timthumb-2/\">TimThumb made headlines</a> when a major security vulnerability was discovered and used to hack into several websites. At the time, Ben Gillbanks, the library&#8217;s maintainer, estimated 95% of all commercial WordPress themes supported TimThumb.</p>\n<p>At the end of 2014, a <a href=\"http://wptavern.com/100000-wordpress-sites-compromised-using-the-slider-revolution-security-vulnerability\">security vulnerability was discovered</a> in the Slider Revolution plugin that allowed more than 100k websites to be compromised.</p>\n<p>Using third-party scripts and libraries is not a bad thing. The practice however, comes with a set of risks. It&#8217;s up to developers to be vigilant and accept the responsibilities that come with relying on a third-party. It&#8217;s also imperative that developers do everything they can to update their products and users when a security vulnerability is discovered.</p>\n<p>If you&#8217;re a developer, let us know the criteria in determining which third-party scripts, libraries, and tools you use.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Jun 2015 20:31:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"Post Status: Quick tip: Disconnect Jetpack from the WordPress.com side\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=12963\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"https://poststatus.com/quick-tip-disconnect-jetpack-from-the-wordpress-com-side/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2528:\"<p>About sixteen months ago, I wrote a post noting that it is <a href=\"https://poststatus.com/managing-jetpack-enabled-blogs-wordpress-com/\">really annoying to disconnect a WordPress.com account from a Jetpack install</a>. More annoying yet, is that you could not get rid of nonexistent Jetpack enabled websites from the WordPress.com &#8220;My Sites&#8221; section at all without contacting support.</p>\n<p>Over the years I collected quite a few Jetpack enabled websites connected to my WordPress.com username. Whether I was connecting a staging site or was too lazy to get a friend to setup their own account on WordPress.com, I ended up with a couple of dozen websites connected to my account that were not in my control.</p>\n<p>The traditional way to disconnect Jetpack from WordPress.com was via the site admin in the Jetpack settings. But over time, many of the sites I managed have went stagnant or completely offline, and there was no way to disconnect them anymore. But finally, you can disconnect Jetpack from the WordPress.com side.</p>\n<p>You can disconnect sites from the main &#8220;My Site&#8221; link (shown above) or the individual site (pictured below). Errored sites show up with a red warning side, and when you click the icon, the ability to permanently disconnect the site appears.</p>\n<p><img class=\"alignnone size-large wp-image-12965\" src=\"https://poststatus.com/wp-content/uploads/2015/06/wp-com-disconnect-solo-752x385.png\" alt=\"wp-com-disconnect-solo\" width=\"752\" height=\"385\" /></p>\n<p>This has been a near daily annoyance of mine for years. I&#8217;m happy to see it finally get resolution. Special thanks to Automattician <a href=\"https://twitter.com/jeherve/status/606369302216728576\">Jeremy Herve</a> for never forgetting about me.</p>\n<p>One more tip: if you go to your WordPress.com homepage often, and it doesn&#8217;t open up the page you want to be default for stats, you can set your default site under your <a href=\"https://wordpress.com/me/account\">account settings</a>. This is another annoyance of mine that I didn&#8217;t know had a solution until just now.</p>\n<p><img class=\"alignnone size-large wp-image-12966\" src=\"https://poststatus.com/wp-content/uploads/2015/06/wp-com-account-752x377.jpg\" alt=\"wp-com-account\" width=\"752\" height=\"377\" /></p>\n<p>I know creating really effective user interfaces and account management tools is really hard. But attention to small details is awesome. I&#8217;m glad the WordPress.com team took care of this one, even if it took a while.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Jun 2015 18:18:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: Peter Thiel on MBAs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45140\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://ma.tt/2015/06/peter-thiel-on-mbas/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:877:\"<blockquote><p>I think one challenge a lot of the business schools have is they end up attracting students who are very extroverted and have very low conviction, and they put them in this hot house environment for a few years — at the end of which, a large number of people go into whatever was the last trendy thing to do. They’ve done studies at Harvard Business School where they’ve found that the largest cohort always went into the wrong field. So in 1989, they all went to work for Michael Milken, a year or two before he went to jail. They were never interested in Silicon Valley except for 1999, 2000. The last decade their interest was housing and private equity.</p></blockquote>\n<p><a href=\"http://www.washingtonpost.com/blogs/on-leadership/wp/2014/10/10/peter-thiel-on-what-works-at-work/\">This entire interview with Peter Thiel is pretty interesting</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Jun 2015 17:18:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"WPTavern: WordPress Core Contributors Call for User Testing on the Menu Customizer Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=45034\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"http://wptavern.com/wordpress-core-contributors-call-for-user-testing-on-the-menu-customizer-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7216:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/menu-customizer-feature1.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/menu-customizer-feature1.jpg\" alt=\"menu-customizer-feature\" width=\"670\" height=\"318\" class=\"aligncenter size-full wp-image-45053\" /></a></p>\n<p>Ryan Boren published a post to the Make/WordPress Core blog this afternoon, titled <a href=\"https://make.wordpress.org/core/2015/06/09/trust-live-preview-and-menus-in-the-customizer/\" target=\"_blank\">Trust, Live Preview, and Menus in the Customizer</a>. In it he clarified the reasons why he and several other core contributors are committed to iterating the customizer and identified the feature as a means of building user trust through live previews.</p>\n<blockquote><p>Being able to make non-destructive changes and preview them is an important component of building that trust. This is perhaps most noticeable in the “save and surprise” approach of the widgets admin screen – every time you add a new widget, modify its settings, or move one around, the changes are saved and appear live on your site, even if you’re not ready yet. The customizer is our framework for live previewing changes. We are committed to providing live preview for all aspects of site customization and making it usable on all devices from phones to large screens.</p></blockquote>\n<p>Boren briefly summarized the history of the customizer and alluded to a few possibilities the framework may offer in the future:</p>\n<blockquote><p>The customizer has come a long way, but it still lacks some features and needs time to mature. We have many improvements planned and in progress, including transactions, partial refresh, theme installation, speedier loading, scaling to large screens, and possibly even integration with front end editing. Our live preview framework offers many possibilities.</p></blockquote>\n<p>The Menu Customizer plugin was <a href=\"http://wptavern.com/menu-customizer-tentatively-approved-for-wordpress-4-3\" target=\"_blank\">tentatively approved for merge</a> during last week&#8217;s core development meeting. In order for the it to be officially approved for merge on June 17th, the plugin will need to meet the <a href=\"https://make.wordpress.org/core/handbook/how-the-release-cycle-works/features-as-plugins/\" target=\"_blank\">feature plugin criteria</a> outlined in the core handbook.</p>\n<p>&#8220;We have eight days to get the Menu Customizer plugin ready for merge,&#8221; Boren said. During this time the <a href=\"https://make.wordpress.org/flow/\" target=\"_blank\">flow team</a> will be testing and documenting the flow and visuals for the menu customizer.</p>\n<p>Boren invited anyone who wants to contribute to this effort to create flow comparisons of the existing flow through Appearance > Menus versus flow through the customizer. This essentially involves walking through the experience of setting up menus, taking screenshots of the flow, and publishing them as a captioned gallery.</p>\n<p>&#8220;Please help us capture the flows through Appearance > Menus used by you and your clients,&#8221; he said. &#8220;We need this information to ensure our new interfaces are mindful and aware of how WordPress is actually used.&#8221;</p>\n<p>Anyone can contribute to WordPress in this way, as it doesn&#8217;t require any coding. The core team is looking for people to capture real user scenarios to help in making the final decision.</p>\n<h3>There is No Timeline for Removing the Appearance > Menus Screen</h3>\n<p>In the original <a href=\"https://make.wordpress.org/core/2015/06/03/feature-plugin-merge-proposal-menu-customizer/\" target=\"_blank\">merge proposal</a> for the Menu Customizer the plugin&#8217;s author, Nick Halsey, outlined what he called a &#8220;fairly aggressive&#8221; plan for the removal of the old menus admin screen. As contributor resources are scarce when it comes to the Menus component, Halsey favored focusing all new development on the UI in the customizer.</p>\n<p>The timeline he outlined was for WordPress 4.3 to point the Menus link in the admin bar to Menus in the customizer and later releases (WordPress 4.5 or 4.6) would remove all core links to the Menus admin screen.</p>\n<p>WordPress users reacted strongly to this aggressive timeline for removing the old menus screen, but the timeline was merely a suggestion as part of the proposal. Halsey was not keen on merging the plugin without a definitive timeline for removing the old menus, a factor which he considered a &#8220;<a href=\"https://wordpress.slack.com/archives/core/p1433384682001602\" target=\"_blank\">dealbreaker</a>&#8221; for merge.</p>\n<p>However, WordPress 4.3 release lead Konstantin Obenland confirmed that no official timeline has been set.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/pollyplummer\">@pollyplummer</a> There is no timeline either way.</p>\n<p>&mdash; Konstantin Obenland (@obenland) <a href=\"https://twitter.com/obenland/status/608377778933743616\">June 9, 2015</a></p></blockquote>\n<p></p>\n<p>Ryan Boren also confirmed that WordPress will continue to maintain the Appearance > Menus screen should the plugin be officially approved for merge in the coming days:</p>\n<blockquote><p>Meanwhile, the Appearance screens will remain and will be maintained. Appearance > Menus recently received some attention in the form of a few fixes. More attention is needed and will be given. There are still differences in the flows each approach best enables, whether it’s new site/theme setup, small maintenance tasks, or dedicated content managers for heavy usage of widgets, menus, or other pieces of content that benefit from having a preview mechanism. We should gather quantifiable metrics when it comes to performance and time to completion for a given flow, as well as evaluating the less-objectively-quantifiable perceived performance. <strong>There may come a time where the worlds converge; however, that time is not now.</strong></p></blockquote>\n<p>This confirmation should assuage those whose opposition to the Menu Customizer was solely based on the aggressive timeline proposed for removing the old menus screen.</p>\n<p>The great divide on the Menu Customizer revolves around one aspect of improvement that Boren mentioned in his paragraph about the future of the customizer: <strong>scaling to large screens</strong>. The vast majority of WordPress users and developers who are following this debate are those who would be more likely to configure a menu in a desktop environment and not via mobile (where the customizer is currently designed to shine).</p>\n<p>Many who oppose the merge of the plugin have identified the cramped UI as the primary reason that it does not provide a better experience for users. You would be hard pressed to find anyone who is opposed to live previews or better usability on mobile devices.</p>\n<p>Those who manage WordPress sites via desktop are not willing to sacrifice the old menus screen for a new UI that currently caters primarily to smaller devices. Until the Menu Customizer can adequately provide a UI that fully adapts to all screen sizes, resistance to the feature is likely to continue.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Jun 2015 22:34:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Matt: Trust but Preview\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45138\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://ma.tt/2015/06/trust-but-preview/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:273:\"<p>If you&#8217;re following along with the customizer and menu work for the next version of WordPress, check out <a href=\"https://make.wordpress.org/core/2015/06/09/trust-live-preview-and-menus-in-the-customizer/\">Trust, Live Preview, and Menus in the Customizer</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Jun 2015 20:00:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"WPTavern: Introducing the WP Tavern Wapuu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44960\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"http://wptavern.com/introducing-the-wp-tavern-wapuu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6733:\"<p>The <a href=\"http://wapuu.jp/\">Wapuu craze</a> has spread far and wide. From its <a href=\"http://wptavern.com/community-translation-and-wapuu-how-japan-is-shaping-wordpress-history\">origin in Japan</a>, to <a href=\"http://wptavern.com/scott-evans-on-designing-the-punk-wapuu-for-wordcamp-london-2015\">WordCamp London</a>, and across the US, Wapuu has become quite the traveler. While the mascot has mostly represented WordCamps, site owners are creating a custom version of the mascot to represent their sites.</p>\n<p><a href=\"http://www.mynameismichelle.com/\">Michelle Schulp</a>, a graphic designer who runs <a href=\"http://marktimemedia.com/\">Marktimemedia, </a>has created a number of Wapuu&#8217;s for WordCamps and websites. She was gracious enough to create one specifically for the Tavern.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/wapuu-wptavern.png\"><img class=\"size-large wp-image-45028\" src=\"http://wptavern.com/wp-content/uploads/2015/06/wapuu-wptavern-418x500.png\" alt=\"WP Tavern Wapuu\" width=\"418\" height=\"500\" /></a>WP Tavern Wapuu\n<p>Schulp created the mascot with Adobe Illustrator using the original .svg files provided on the original <a href=\"https://github.com/jawordpressorg/wapuu\">Wapuu Github repository</a>. She doesn&#8217;t plan on writing tutorials to modify the base Wapuu. Instead, she is creating <a href=\"https://github.com/marktimemedia/my-wapuu\">a base Wapuu</a> that will have separated pieces so its easier to modify.</p>\n<p>She often sketches and re-draws Wapuus that are not in their normal position.</p>\n<p>&#8220;Actually, most of the Wapuus are slightly modified to make it easier for them to hold or interact with their elements. I thought of him like a cartoon character (fluid) more so than a logo or icon (rigid),&#8221; Schulp told the Tavern.</p>\n<p>Schulp has always had an interest in sketching cartoons. For WordCamp Miami 2015, she created a variety of custom-made My Little Pony stickers.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/MyLittlePonyStickers.jpg\"><img class=\"wp-image-44978 size-large\" src=\"http://wptavern.com/wp-content/uploads/2015/06/MyLittlePonyStickers-309x500.jpg\" alt=\"My Little Pony Stickers\" width=\"309\" height=\"500\" /></a>My Little Pony Stickers\n<p>She also uses her skills to create <a href=\"https://speakerdeck.com/marktimemedia/developer-collaboration\">unique slide decks</a> filled with colorful illustrations.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/CustomSlideDeck.png\"><img class=\"wp-image-44983 size-large\" src=\"http://wptavern.com/wp-content/uploads/2015/06/CustomSlideDeck-500x415.png\" alt=\"Custom Slide Deck\" width=\"500\" height=\"415\" /></a>Custom Slide Deck\n<h2>From WordCamps to Websites and Eventually Companies</h2>\n<p>Wapuu is considered the official mascot character of WordPress and was designed by Kazuko Kaneuchi in 2011. It’s <a href=\"https://github.com/jawordpressorg/wapuu\" target=\"_blank\">distributed under the GPLv2 or later</a> and can be modified by anyone. The character is used to represent different cultures and regions of the world.</p>\n<p>Now that Wapuu is showing up as a mascot for sites that focus on WordPress, the question is, when will it be used to represent companies in the WordPress ecosystem?</p>\n<p>Shortly after <a href=\"http://wptavern.com/automattic-acquires-woocommerce\">Automattic acquired WooThemes</a>, Nick Hamze was criticized on the Advanced WordPress Facebook group for creating a <a href=\"http://blog.nickhamze.com/2015/05/19/hiro-wapuu-bffs/\">Wapuu dressed up like a ninja</a>.</p>\n<blockquote><p>If the graphic was created by WooThemes and independently of the acquisition I&#8217;d think oh cute, WooTheme&#8217;s mascot is teaching WordPress&#8217; mascot how to be a ninja, best friends forever for sure.</p>\n<p>Instead, it came from an Automattician and in the context of Automattic acquiring WooThemes, to me it reads that Automattic is using Wapuu, which just bugs me.</p></blockquote>\n<p>At WordCamp Miami 2015, Rocketgenius came under fire for creating swag that features Wapuu wearing a space suit with a rocket patch on its arm.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/carlhancock\">@carlhancock</a> Wapuu is for promoting WordPress. It promotes a open source project and not a company.</p>\n<p>&mdash; Marko Heijnen (@markoheijnen) <a href=\"https://twitter.com/markoheijnen/status/605072873586356224\">May 31, 2015</a></p></blockquote>\n<p></p>\n<p>This is what the swag looks like. The logo is subtle in nature and if you didn&#8217;t already know it represents Rocketgenius, it would fit naturally into the design.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/SpaceWapuu.jpg\"><img class=\"wp-image-44989 size-large\" src=\"http://wptavern.com/wp-content/uploads/2015/06/SpaceWapuu-375x500.jpg\" alt=\"Space Wapuu With Rocket Patch\" width=\"375\" height=\"500\" /></a>Space Wapuu With Rocket Patch\n<p>It&#8217;s important to note that there are no rules in how Wapuu can be used. The only guideline is maintaining Kaneuchi&#8217;s copyright. The mascot has appeared on physical products such as nails, cakes, and stuffed animals.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/05/wapuu-everywhere.jpg\"><img class=\"size-full wp-image-43945\" src=\"http://wptavern.com/wp-content/uploads/2015/05/wapuu-everywhere.jpg\" alt=\"photo credit:  Naoko Takano - Learnings from Growing Local WordPress Communities\" width=\"1401\" height=\"961\" /></a>photo credit:<br />Naoko Takano &#8211; <a href=\"http://www.slideshare.net/naokomc/wordcamp-europe2013/47\">Learnings from Growing Local WordPress Communities</a>\n<p>Schulp says she plans to create more Wapuus when the inspiration strikes. &#8220;I like to imagine Wapuu in a ton of different circumstances and my plan is to create more <em>slice of life</em> Wapuus as the inspiration strikes, maybe similar to how you can express things with Facebook stickers.&#8221;</p>\n<p>&#8220;Though Wapuu is open source and we can all use him and I&#8217;ve got good intentions, he isn&#8217;t mine so I&#8217;ll always defer to and respect the community that created it.&#8221;</p>\n<h2>Community Protection</h2>\n<p>The use of Wapuu is open for interpretation but I don&#8217;t see a problem with companies participating in the craze and creating one of their own. Unlike the WordPress logo, which is trademarked, Wapuu is free of such restrictions meaning anyone can use it for anything, including commercial endeavors.</p>\n<p>The community needs to protect Wapuu from enterprises that want to claim it as their own. We must respect its origins and give credit where credit is due. Other than that, the more Wapuus the better!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Jun 2015 18:31:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"WPTavern: Prescription for a Stalled WordPress Agency: Mario Peshev’s Advice for Growing Development Services\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44596\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:117:\"http://wptavern.com/prescription-for-a-stalled-wordpress-agency-mario-peshevs-advice-for-growing-development-services\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2617:\"<a href=\"http://wptavern.com/wp-content/uploads/2015/06/clients.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/clients.jpg\" alt=\"photo credit: Alejandro Escamilla\" width=\"1500\" height=\"738\" class=\"size-full wp-image-45014\" /></a>photo credit: <a href=\"https://stocksnap.io/photo/96E1A8F1CB\">Alejandro Escamilla</a>\n<p>WordPress agencies provide a critical connection point between users and the software by building custom solutions and guiding some of the more complex implementations. Yet client work is challenging, and many developers who work in it are concurrently planning their escape into product businesses.</p>\n<p>Growing an agency reliably is one of the more difficult business endeavors one can embark upon in the WordPress ecosystem. That&#8217;s why many attempts linger at one or two person shops, and very few grow to become the powerhouse agencies that can accommodate enterprise level clients.</p>\n<p><a href=\"http://devwp.eu/\" target=\"_blank\">Mario Peshev</a>, an agency owner specializing in SaaS solutions, wrote an excellent piece on <a href=\"http://devwp.eu/outsourcing-and-hiring-remote-talent/\" target=\"_blank\">Outsourcing and Hiring Remote Talent</a>. As strategic hiring is the lifeblood of any agency, it&#8217;s a skill that owners are eager to refine.</p>\n<p>&#8220;Small businesses are not easy to run,&#8221; he said. &#8220;Growing from a one man show to two people is really hard.&#8221; Peshev&#8217;s article includes a wealth of advice from the trenches on topics that every WordPress agency owner has struggled with, especially in the beginning. He covers the following topics in depth:</p>\n<ul>\n<li>Tips on hiring technical people remotely</li>\n<li>Strategies for hiring experts, junior developers, and trainees</li>\n<li>Scaling a business and growing a team via outsourcing</li>\n<li>When and why you might hire a consultant</li>\n<li>The benefits of leasing employees</li>\n<li>Outsourcing to another agency</li>\n<li>When it makes sense to hire a freelancer</li>\n<li>How to find WordPress talent</li>\n</ul>\n<p>Peshev blogs regularly on WordPress development and business topics, and this <a href=\"http://devwp.eu/outsourcing-and-hiring-remote-talent/\" target=\"_blank\">post</a> is a must read for any business owner who is struggling to grow a stalled agency. There&#8217;s no simple recipe for success when you&#8217;re in the business of helping clients harness the power of WordPress. Peshev&#8217;s post doesn&#8217;t offer a single magic formula for growing your agency but instead outlines various strategies and scenarios where they might be beneficial.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Jun 2015 15:06:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Online Privacy Lie\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45136\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/06/online-privacy-lie/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:469:\"<p>Techcrunch has a really great essay by Natasha Lomas that I think got missed, <a href=\"http://techcrunch.com/2015/06/06/the-online-privacy-lie-is-unraveling/\">The Online Privacy Lie Is Unraveling</a>.</p>\n<blockquote><p>Americans believe it is futile to manage what companies can learn about them. Our study reveals that more than half do not want to lose control over their information but also believe this loss of control has already happened.</p></blockquote>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Jun 2015 04:57:56 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: Brighton, UK to Host Europe’s First BuddyCamp\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44932\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"http://wptavern.com/brighton-uk-to-host-europes-first-buddycamp\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3373:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/buddycamp-brighton.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/buddycamp-brighton.jpg\" alt=\"buddycamp-brighton\" width=\"670\" height=\"318\" class=\"aligncenter size-full wp-image-44976\" /></a></p>\n<p>BuddyPress fans, mark your calendars! <a href=\"http://brighton.buddycamp.org/2015/\" target=\"_blank\">BuddyCamp Brighton</a>, Europe’s very first BuddyPress conference, is just two months away. The event will be held at Clearleft’s 68 Middle Street venue on August 8, 2015. This venue has a maximum capacity of 60 people, so tickets are likely to sell out fast.</p>\n<p>BuddyPress lead developer <a href=\"https://twitter.com/pgibbs\" target=\"_blank\">Paul Gibbs</a> and contributor <a href=\"https://twitter.com/karmatosed\" target=\"_blank\">Tammie Lister</a> are teaming up to organize the event and put out the <a href=\"http://brighton.buddycamp.org/2015/call-for-speakers/\" target=\"_blank\">call for speakers</a> and <a href=\"http://brighton.buddycamp.org/2015/call-for-sponsors/\" target=\"_blank\">sponsors</a> today.</p>\n<p>&#8220;The really exciting thing is that this is going to be the first BuddyCamp outside North America/Canada &#8211; the first in Europe,&#8221; Gibbs said. &#8220;From my role in the BuddyPress project, I know we have many fans across the continent, and it&#8217;s those people we want to come to BuddyCamp, so we&#8217;re going to focus on making the event as accessible as possible for all those visitors.&#8221;</p>\n<p>Brighton has a thriving <a href=\"http://www.meetup.com/WordUp-Brighton/\" target=\"_blank\">local WordPress community</a> and BuddyPress interest runs deep throughout the UK, making it a strategic location for hosting Europe&#8217;s first BuddyCamp.</p>\n<p>&#8220;Brighton itself has a great tech community, as does London obviously (which is just over an hour away on train), so there&#8217;s a lot of potential,&#8221; Gibbs said.</p>\n<p>Organizers are hoping to receive a wide range of presentation subjects from potential speakers, including both beginner and technical topics.</p>\n<p>&#8220;We&#8217;re pretty keen on beginners content, mixed with a range of showcases and great examples of the potential of BuddyPress,&#8221; he said.</p>\n<p>Gibbs confirmed that peripheral bbPress topics are also welcome among speaker submissions, even though the event will focus primarily on BuddyPress.</p>\n<p>&#8220;I think there&#8217;s a lot of overlap, especially around community management and development,&#8221; he said. &#8220;We&#8217;d be happy to receive talk proposals in these areas.&#8221;</p>\n<p>BuddyCamp Brighton is a historic event for the European BuddyPress community and will be formatted as an intimate gathering where attendees of all skill levels are welcome. BuddyPress enthusiasts will learn more about the varied uses of the plugin and will also have the opportunity to get connected to core contributors in the region.</p>\n<p>&#8220;If people go home happy and inspired to use BuddyPress to help them grow a community, then I&#8217;ll be very happy,&#8221; Gibbs said.</p>\n<p>Those interested to attend can <a href=\"http://brighton.buddycamp.org/\" target=\"_blank\">subscribe to email updates</a> or follow <a href=\"https://twitter.com/BuddyCampUK\" target=\"_blank\">@BuddyCampUK</a> on Twitter to be notified when tickets go on sale.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 08 Jun 2015 22:06:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"WPTavern: WordPress Theme Review Team Seeks Feedback on the Review Process, Themes, and the Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44912\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:109:\"http://wptavern.com/wordpress-theme-review-team-seeks-feedback-on-the-review-process-themes-and-the-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5378:\"<a href=\"http://wptavern.com/wp-content/uploads/2015/06/survey.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/survey.jpg\" alt=\"photo credit: Lukasz Kowalewski\" width=\"1500\" height=\"742\" class=\"size-full wp-image-44957\" /></a>photo credit: <a href=\"https://stocksnap.io/photo/FI3UYVGNFD\">Lukasz Kowalewski</a>\n<p>The WordPress Theme Review Team (TRT) is currently seeking feedback via three separate surveys on the <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-review-process-survey/\" target=\"_blank\">review process</a>, <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-usability-survey/\" target=\"_blank\">themes</a>, and the <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-directory-survey/\" target=\"_blank\">directory</a>. After weathering several months of increasingly negative community feedback, the team is now looking to users and theme authors to help shape its <a href=\"https://make.wordpress.org/themes/2015/06/05/suggested-roadmap/\" target=\"_blank\">roadmap</a> for the future.</p>\n<p>The team&#8217;s controversial decision to <a href=\"http://wptavern.com/wordpress-org-now-requires-theme-authors-to-use-the-customizer-to-build-theme-options\" target=\"_blank\">require theme authors to use the customizer for building theme options</a> ignited a heated debate, which continued as more guidelines came up for consideration. Community members expressed concern that more rules and regulations might limit the future of WordPress themes. The conversation surrounding violations of the &#8220;<a href=\"http://wptavern.com/wordpress-theme-review-team-is-cracking-down-on-violations-of-the-presentation-vs-functionality-guideline\" target=\"_blank\">Presentation vs. Functionality</a>&#8221; guideline contributed to the team&#8217;s decision to reevaluate the general direction of the official directory and the process of getting a theme approved.</p>\n<p>Following a brainstorming session with Matt Mullenweg on May 28th, the TRT decided to step back and look at the process and the directory in a new way. This opened up many new avenues for the team to explore, and the three user surveys are a response to the new direction.</p>\n<p>TRT member Tammie Lister opened up the feedback channels with an <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-directory-survey/\" target=\"_blank\">overview</a> of the purpose behind the surveys:</p>\n<blockquote><p>As a part of our <a href=\"https://make.wordpress.org/themes/2015/06/05/suggested-roadmap/\" target=\"_blank\">Theme Directory Roadmap</a>, we are going to be taking a good look at every aspect of the theme submission, review, and browsing experience on WordPress.org.</p>\n<p>To kick off the research phase of our roadmap, we’re issuing a series of surveys targeting theme authors, theme reviewers, and WordPress users. In addition to surveying users, we’ll also be analyzing other theme directories on the web, and reviewing other theme submission processes to see what we can bring back to WordPress.</p></blockquote>\n<p>The <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-usability-survey/\" target=\"_blank\">Usability survey</a> is an opportunity for anyone who has ever used a WordPress.org-hosted theme to voice an opinion on that experience. The survey briefly touches on whether the user views a demo before downloading the theme. The quality of theme demos is currently a hot topic of discussion, as many believe that the current demos are woefully inadequate at showing a theme&#8217;s potential.</p>\n<p>The <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-review-process-survey/\" target=\"_blank\">Theme Review Process survey</a> is specifically for theme authors and includes open-ended questions regarding the process and obstacles to getting a theme launched.</p>\n<p>The <a href=\"http://13233232.polldaddy.com/s/what-is-it-like-to-have-your-theme-reviewed\" target=\"_blank\">Finding a WordPress Theme</a> survey concerns the directory, but it is the most limited in scope. The survey includes just one question about where users look for a theme when starting a new site.</p>\n<p>One WordPress theme developer <a href=\"https://make.wordpress.org/themes/2015/06/05/theme-directory-survey/#comment-41962\" target=\"_blank\">commented on the survey</a>, suggesting a few more detailed questions that could be helpful, but Lister indicated that the TRT is examining the first round of responses before moving on to further research.</p>\n<blockquote><p>At this stage we should not get into too much detail as we want to get an over-view. We also have some stats we can use in conjunction. This is not something we’re going to change format wise this time around.</p></blockquote>\n<p>The three surveys are a unique opportunity for users to voice their opinions on the experience of using WordPress.org themes, and take just minutes to complete. Hopefully, when the next stage of research is launched they will survey users on more specific concerns.</p>\n<p>The TRT&#8217;s request for feedback marks the beginning of a radical shift in the direction of the team. Instead of instituting more guidelines, TRT is looking at better ways to encourage creativity among theme authors and improve the process of submitting themes. The directory should also be receiving some useful improvements in the near future as the result of user feedback.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 08 Jun 2015 19:02:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Akismet: Akismet WordPress Plugin 3.1.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"http://blog.akismet.com/?p=1849\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://blog.akismet.com/2015/06/08/akismet-3-1-2-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1209:\"<p>Version 3.1.2 of <a href=\"http://wordpress.org/plugins/akismet/\">the Akismet plugin for WordPress</a> is now available.</p>\n<p>This update includes seventeen fixes and enhancements; they&#8217;re summarized in the <a href=\"https://wordpress.org/plugins/akismet/changelog/\">changelog</a> (or for all of the details, the <a href=\"https://plugins.trac.wordpress.org/log/akismet/trunk\">revision log</a>), but notably, Akismet will be easier to set up, use less space in your database, and be better protected against security holes &#8212; specifically ones in other plugins.</p>\n<p>To upgrade, visit the Updates page of your WordPress dashboard and follow the instructions. If you need to download the plugin zip file directly, links to all versions are available in <a href=\"http://wordpress.org/plugins/akismet/\">the WordPress plugins directory</a>.</p><br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/akismet.wordpress.com/1849/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/akismet.wordpress.com/1849/\" /></a> <img alt=\"\" border=\"0\" src=\"http://pixel.wp.com/b.gif?host=blog.akismet.com&blog=116920&post=1849&subd=akismet&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 08 Jun 2015 02:50:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Christopher Finke\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Matt: The Agency – NYTimes.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/06/the-agency-nytimes-com/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:372:\"<blockquote><p>From a nondescript office building in St. Petersburg, Russia, an army of well-paid “trolls” has tried to wreak havoc all around the Internet — and in real-life American communities.</p></blockquote>\n<p>This story of Adrian Chen in Russian <a href=\"http://www.nytimes.com/2015/06/07/magazine/the-agency.html\">definitely turns weird at the end</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 07 Jun 2015 14:52:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Matt: Aca-Awesome : Kay Cannon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45130\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://ma.tt/2015/06/aca-awesome-kay-cannon/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:380:\"<p>Pitch Perfect and its sequel, which I saw a few weekends ago, are the best geeky kind of fun (though I thought there were some jokes that fell flat in the latest). Longreads has an interview with Kay Cannon, the Pitch Perfect screenwriter, <a href=\"http://blog.longreads.com/2015/05/27/how-to-be-aca-awesome/\">How to Be Aca-Awesome and the changing definition of cool</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 07 Jun 2015 05:21:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Favorite Rappers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45120\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/06/favorite-rappers/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:239:\"<p>Someone asked me the other day who my favorite rappers were, here they are in no particular order:</p>\n<p>Pre-2000: Big Pun, Jay Z, Nas, Ludacris, Method Man.</p>\n<p>Post-2000: Kendrick Lamar, Kanye, Childish Gambino, J Cole, Drake.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Jun 2015 04:02:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WPTavern: A Primer on Writing Good Documentation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44807\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://wptavern.com/a-primer-on-writing-good-documentation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8612:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/JeffMatsonThumbnail.jpg\"><img class=\"alignright size-thumbnail wp-image-44911\" src=\"http://wptavern.com/wp-content/uploads/2015/06/JeffMatsonThumbnail-150x150.jpg\" alt=\"JeffMatsonThumbnail\" width=\"150\" height=\"150\" /></a>This post was contributed by guest author <a href=\"http://jeffmatson.net/\">Jeff Matson</a>. Jeff is the head of documentation for <a href=\"http://www.gravityforms.com/\">GravityForms</a>. He is the creator of the <a href=\"https://wordpress.org/plugins/heartbeat-control/\">Heartbeat Control</a> WordPress plugin and is a fan of the 90s.</p>\n<hr />\n<p>Often times, documentation is the most underrated piece of the development process. When we look at rockstars in the WordPress community, we typically look at developers, designers, and marketers. Little is known about the documentation writers out there who shed their blood, sweat, and tears to ensure everything runs smoothly.</p>\n<p>This post is about those who day in, and day out stare at endless lines of code to decipher what the developer was thinking, and the true meaning behind the code that exists.</p>\n<h2>Good Documentation is More Than Words</h2>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/DocumentationWords.png\"><img class=\"size-full wp-image-44914\" src=\"http://wptavern.com/wp-content/uploads/2015/06/DocumentationWords.png\" alt=\"Documentation Words\" width=\"730\" height=\"295\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/80719942@N00/4733367729\">Variatie &#8211; Tekst</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>Good documentation writers provide more than an instruction manual, they provide an experience. I have known excellent documenters, coached beginners, and the largest difference between them is understanding the brain of those reading it. Just like a novel, documentation has a flow that keeps the reader interested and ingesting more information than they realize.</p>\n<p>Quality documentation targets the users that are most likely to read it. It also provides a point of reference for those who are more unlikely to read it. For example, if documenting a particular hook, it’s typically assumed that a developer will be reading it, but what about those who have little development experience?</p>\n<p>A good documentation writer will provide a point of reference for those who need more of a push in the right direction, without the need to contact support to spell it out for them.</p>\n<h2>Documentation Has a Larger Impact Than You Think</h2>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/ImpactImage.png\"><img class=\"size-full wp-image-44916\" src=\"http://wptavern.com/wp-content/uploads/2015/06/ImpactImage.png\" alt=\"Impact Image\" width=\"585\" height=\"298\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/24113168@N03/3891599149\">Eruption</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>Most simply ignore documentation, pushing it off into the endless abyss until they can’t take it anymore. I’m guilty of the same thing in some cases. What those people don’t realize, is that every moment their plugin or theme is left undocumented, user experience suffers.</p>\n<p>Let’s take a look at your most common support ticket. If you better documented that issue, would those tickets go away entirely? Probably not. Would you get fewer tickets regarding the issue as well as increase you or your support agent&#8217;s productivity? I guarantee it. I think we could all use fewer support tickets.</p>\n<p>As I mentioned previously, documentation makes a dramatic impact on user experience. If the user is able to locate the information easily and efficiently, they have saved their own time as well as yours. The average world life expectancy is 66.57 years and your users would rather be doing something else with their lives than fiddling around with poorly written documentation.</p>\n<p>If a customer sees that you have put quite a bit of time and effort into your documentation, they will, whether consciously or not, better appreciate you. Good documentation shows you care about them after the initial sale.</p>\n<p>Have you ever been left high and dry after spending hard-earned money and soon regretted the purchase? I think we all have. With proper documentation, you can avoid passing that feeling off to your customers.</p>\n<h2>How Can You Write Better Documentation?</h2>\n<p>The first step is to stop avoiding it. Once you&#8217;re good at it, writing documentation is more of a pleasurable experience than you think. In fact, it will become second nature. Just like everything else in the world, practice makes perfect.</p>\n<p>One of the first steps you want to take when deciding to take your documentation to the next level is to determine your pain points. What are you being contacted about? If you start blindly writing about things, you may find that what you’re writing about isn’t making as much of an impact you would like it to.</p>\n<p>One of the best techniques I have discovered is to track the number of tickets that are documented vs. those that are not, and break those that are not into categories. This way, you can better target your pain points, and revise the parts that may not be as helpful as they should be.</p>\n<p>After you have determined what documentation you should write, you should determine your target audience, and break it down into developers, users, and power users. This helps you cater to that particular audience. We’ll go over how to target those users a bit later.</p>\n<p>Next, you want to break down the document. For developers, you’ll want to break it down into raw information (accepted arguments, return values, etc.), specific examples and use-cases. For users, the best course of action is a walkthrough. Every step they will need to take, regardless of how trivial it may seem, is critical.</p>\n<p>Spell it out to them every step of the way. Documenting for power users is very similar to a user scenario, but more structured and scannable. Be clear, but allow them to easily jump to where they need to go without reading the previous step first.</p>\n<h2>The Art of Writing Better Documentation</h2>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/DocumentationArt.png\"><img class=\"size-full wp-image-44917\" src=\"http://wptavern.com/wp-content/uploads/2015/06/DocumentationArt.png\" alt=\"Documentation Art\" width=\"497\" height=\"249\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/41455403@N00/458033123\">Space invader. Paris. Gare de lyon</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">(license)</a>\n<p>When it comes to the art of writing your documentation, write in a way that best targets your audience, but also use simple language that you know they will understand. One of the best reasons for this is due to translations. While Google translate does an excellent job, it’s much easier to translate the simple vocabulary of a 5th grader than that contained within a post-grad thesis.</p>\n<p>Within your content, don’t be afraid to link to relevant content. This will allow you to avoid repeating yourself through multiple documents, as well as allow the reader to back-track if they need more information about a particular subject. After all, your main goals are to make the user happy, and save yourself time.</p>\n<p>The documentation process doesn’t stop after you press the <strong>publish</strong> button. Go back and revise every document as needed. Almost immediately after the document is published, go back and see if the support tickets you tracked have declined, and traffic to that particular article has increased. Usually, if you’re getting more traffic to an article, it’s helping. If you’re getting more traffic but the same number of support tickets, you may want to look into that article to see why.</p>\n<h2>What We Have Learned</h2>\n<p>First, I hope that after making it this far, you have a better appreciation for those in the trenches writing the documentation that most of us take for granted. It truly is an art form that many of us who write documentation for a living truly enjoy and put many, many hours into.</p>\n<p>I also hope that you come away from this article thinking more about your existing documentation and how it can be improved. Proper documentation can be extremely rewarding and once in practice, can actually be quite fun to write.</p>\n<p>Document early, document often. A great product is more than great code, it’s also beautifully documented.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Jun 2015 21:26:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"WPTavern: Menu Customizer Tentatively Approved for WordPress 4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44894\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"http://wptavern.com/menu-customizer-tentatively-approved-for-wordpress-4-3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2520:\"<p>WordPress 4.3 release lead Konstantin Obenland posted <a href=\"https://make.wordpress.org/core/2015/06/05/dev-chat-summary-june-3/\" target=\"_blank\">notes</a> from this week&#8217;s core development chat, confirming that the <a href=\"http://wptavern.com/menu-customizer-officially-proposed-for-merge-into-wordpress-4-3\" target=\"_blank\">Menu Customizer</a> plugin has been conditionally approved to merge. The approval is pending a few conditions that will be required before officially merging it:</p>\n<ul>\n<li>Complete a11y audit.</li>\n<li>Address possible blockers.</li>\n<li>Merge php tests.</li>\n<li>Add JS tests.</li>\n</ul>\n<p>One of the most controversial aspects of the <a href=\"https://make.wordpress.org/core/2015/06/03/feature-plugin-merge-proposal-menu-customizer/\" target=\"_blank\">proposal</a> submitted by project leader Nick Halsey was the timeline he outlined for removing all core links to the old Menus admin screen in future releases. Commenters on the proposal reacted strongly to this approach as well as this particular use of the customizer.</p>\n<p>Discussion continued following the meeting, as Halsey wanted to address the critical issue of the timeline for removing removing the menus screen from the admin. He <a href=\"https://wordpress.slack.com/archives/core/p1433388261001615\" target=\"_blank\">attributes</a> the resistance to the customizer to a lack of education on the feature and strongly <a href=\"https://wordpress.slack.com/archives/core/p1433384388001601\" target=\"_blank\">advocates</a> &#8220;focusing on the new UI as the primary (and in terms of development, only) menus admin interface.&#8221;</p>\n<blockquote><p>For Menu Customizer, this idea has been part of the project from the very beginning. My GSoC proposal (3/20/14) states &#8216;If the Menu Customizer provides all of the features of the existing menu management screen, while clearly demonstrating that it is a better solution than the existing screen in user tests, it could potentially replace the existing screen entirely for users that can access the Customizer,&#8217; and there has never been indication that this isn&#8217;t the direction we should move in, other than the general and ongoing resistance to the Customizer as a whole that we&#8217;ve seen from many community members (which I think is more of an educational issue).</p></blockquote>\n<p>Discussion continues on the matter and work will move forward on the plugin to ensure that it meets the conditions outlined for its merge into WordPress 4.3.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Jun 2015 13:35:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: BuddyDrive 1.3 Utilizes the New BP Attachments API\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44417\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wptavern.com/buddydrive-1-3-utilizes-the-new-bp-attachments-api\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3160:\"<a href=\"http://wptavern.com/wp-content/uploads/2015/06/paperclips.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/paperclips.jpg\" alt=\"photo credit: Paperclips - (license)\" width=\"1024\" height=\"515\" class=\"size-full wp-image-44887\" /></a>photo credit: <a href=\"http://www.flickr.com/photos/45953381@N05/5539562805\">Paperclips</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>One of the most exciting features added in <a href=\"http://wptavern.com/buddypress-2-3-livio-released-features-the-new-bp-attachments-api\" target=\"_blank\">BuddyPress 2.3</a> is the new <a href=\"https://codex.buddypress.org/plugindev/bp_attachment/\" target=\"_blank\">BP Attachments API</a>. It provides a BP core-supported method of managing user-submitted files and opens up a world of possibilities for plugin developers.</p>\n<p>The API powers the new avatar uploads UI, but it can also be used to extend BuddyPress to add media sharing capabilities. If you want to see a good example of this in the wild, check out BuddyDrive version <a href=\"https://github.com/imath/buddydrive/tree/1.3\" target=\"_blank\">1.3.0</a>. The plugin was created by BP core developer <a href=\"http://imathi.eu/\" target=\"_blank\">Mathieu Viet</a>, who led the effort to get the BP Attachments API into the latest release.</p>\n<p><a href=\"https://wordpress.org/plugins/buddydrive/\" target=\"_blank\">BuddyDrive</a> allows members to share a file or a list of files with the community and includes various settings for restricting access. It&#8217;s essentially like a Dropbox clone for BuddyPress, designed to enhance collaboration between members. The plugin was a prime candidate for adapting the BP Attachments API to power community file sharing in a simpler, more elegant way.</p>\n<p>You can see it active in the new &#8220;BuddyDrive Editor&#8221; included in version 1.3, demonstrated in the video below:</p>\n<p></p>\n<p>Viet posted an <a href=\"https://github.com/imath/buddydrive/wiki/The-BuddyDrive-Editor\" target=\"_blank\">example function</a> in the plugin&#8217;s wiki to show how the BuddyDrive Editor can be placed anywhere. The feature is a good example of how easy it is for developers to leverage the API to manage user-generated media from the frontend.</p>\n<p>BuddyDrive 1.3 is currently in beta and on track to be released soon. If you&#8217;d like to help test the beta or inspect the code to see how it works, you can download a zip file from Viet&#8217;s <a href=\"http://imathi.eu/2015/06/02/buddydrive-1-3-0/\" target=\"_blank\">preview post</a>. The unreleased <a href=\"https://github.com/imath/buddydrive/tree/1.3\" target=\"_blank\">version 1.3</a> is also available on GitHub.</p>\n<p>If you want to learn more about using the new BP Attachments API, check out Viet&#8217;s comprehensive <a href=\"https://codex.buddypress.org/plugindev/bp_attachment/\" target=\"_blank\">BP codex article</a>. It walks you through extending the <code>BP_Attachment</code> class to validate and store files in a subdirectory of wp-content/uploads. The documentation also includes a sample plugin to demonstrate how you might add attachments to private messages.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Jun 2015 04:20:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: How to Add a Default Image to Jetpack’s Related Posts Module\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44865\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/how-to-add-a-default-image-to-jetpacks-related-posts-module\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2712:\"<p>Jetpack&#8217;s related posts module is a great way to show related content without using the same server resources used to host a site. When activated, the module displays three related posts. One of two options available is to use a large and visually striking layout.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/JetpackRelatedPostsConfiguration.png\"><img class=\"size-full wp-image-44867\" src=\"http://wptavern.com/wp-content/uploads/2015/06/JetpackRelatedPostsConfiguration.png\" alt=\"Jetpack Related Posts Configuration\" width=\"1105\" height=\"402\" /></a>Jetpack Related Posts Configuration\n<p>When enabled, the module looks for a large image that&#8217;s at least 350x200px in posts and uses it when displaying related posts.</p>\n<p>The downside to using this option is that related posts that don&#8217;t use images will display as a post excerpt instead. This can cause an undesirable look, especially if one or two related posts have images.</p>\n<a href=\"http://wptavern.com/wp-content/uploads/2015/06/RelatedPostsUsingText.png\"><img class=\"size-full wp-image-44869\" src=\"http://wptavern.com/wp-content/uploads/2015/06/RelatedPostsUsingText.png\" alt=\"Related Posts Displaying a Post Excerpt\" width=\"990\" height=\"333\" /></a>Related Posts Displaying a Post Excerpt\n<p>Jeremy Herve who works on the Jetpack team <a href=\"http://jeremy.hu/jetpack-missing-images-related-posts/\">published a tutorial</a> that explains how to show a default image if one is not detected. Both of his solutions require the user to add code which is a barrier for many users.</p>\n<p>Brian Krogsgard of <a href=\"https://poststatus.com/\">PostStatus.com</a> recommends that a conditional option be added that allows users who use a large and visually striking layout to easily configure a default image.</p>\n<blockquote><p>Currently, the user can click a checkbox to enable images for related posts output. I propose that an image upload option conditionally appear upon the image option being selected.</p>\n<p>That keeps the option out of sight for folks that don&#8217;t use images for related posts but makes it easier for normal folks to upload a default image for what I imagine would be an incredibly well adopted feature.</p></blockquote>\n<p>It&#8217;s a great suggestion and removes the need to edit or modify code. Although one of WordPress&#8217; philosophies is <a href=\"https://wordpress.org/about/philosophy/\">decisions not options</a>, this is a scenario where I think it makes sense. If this is an option you&#8217;d like to see added or have a different suggestion, you&#8217;re encouraged to <a href=\"https://github.com/Automattic/jetpack/issues/2220\">participate in the discussion</a> on GitHub.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Jun 2015 23:03:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: All Official Easy Digital Downloads Themes are Now 100% Free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44831\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wptavern.com/all-official-easy-digital-downloads-themes-are-now-100-free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4235:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/03/EasyDigitalDownloadsFeaturedImage-e1429138648237.png\"><img src=\"http://wptavern.com/wp-content/uploads/2015/03/EasyDigitalDownloadsFeaturedImage-e1429138648237.png\" alt=\"EasyDigitalDownloadsFeaturedImage\" width=\"620\" height=\"220\" class=\"aligncenter size-full wp-image-40496\" /></a></p>\n<p>Easy Digital Downloads <a href=\"https://easydigitaldownloads.com/blog/easy-digital-downloads-themes/\" target=\"_blank\">announced</a> a major change to its <a href=\"https://easydigitaldownloads.com/themes/\" target=\"_blank\">themes marketplace</a> today. All official EDD themes (those that are built by the EDD core team) are now 100% free. This includes half a dozen themes that are guaranteed to be fully compatible with EDD, including the new <a href=\"https://easydigitaldownloads.com/downloads/vendd/\" target=\"_blank\">Vendd</a> theme launching today.</p>\n<p>EDD support manager Sean Davis clarified how the free themes will be supported:</p>\n<blockquote><p>Official EDD themes are available to you at absolutely no cost. They will still be licensed so that you can receive theme updates directly from your WordPress dashboard and we will also provide support. The only thing changing is the price.</p></blockquote>\n<p>Responding to <a href=\"https://twitter.com/nphaskins/status/606478597851746304\" target=\"_blank\">criticism</a> on Twitter saying that the change contributes to the <a href=\"https://philiparthurmoore.com/ruining-wordpress/\" target=\"_blank\">undervaluation of WordPress themes</a>, EDD founder <a href=\"https://pippinsplugins.com/\" target=\"_blank\">Pippin Williamson</a> said, &#8220;For us it&#8217;s not about the themes. It&#8217;s about the entire package. By making it easy for users to have a good shop up and running in minutes, we significantly increase the potential value to that customer and of that customer. We also dramatically reduce the cost of support by having more users on more reliable themes that are built for EDD.&#8221;</p>\n<p>Making half a dozen themes free might seem like it would significantly increase EDD&#8217;s support burden, but Williamson expects that the move will pay off in other ways. Like many other WordPress business owners who have made some of their best work free, Williamson has a strategy for how it will work.</p>\n<p>&#8220;The change lowers the barrier to entry,&#8221; Williamson said. &#8220;When the barrier is lowered, the user base grows. When the user base grows, the customer base grows. From a business side, we will have far more success converting free users to paid customers after they&#8217;ve already been given a great experience with a theme.&#8221;</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/nphaskins\">@nphaskins</a> Not sugar coating it at all. We\'ll make 5x more by giving them away than we did selling them <a href=\"https://twitter.com/SDavisMedia\">@sdavismedia</a> <a href=\"https://twitter.com/NateWr\">@natewr</a></p>\n<p>&mdash; Pippinsplugins (@pippinsplugins) <a href=\"https://twitter.com/pippinsplugins/status/606480064448995329\">June 4, 2015</a></p></blockquote>\n<p></p>\n<p>This major change is in line with EDD&#8217;s basic freemium business model, which has been in place from the start. The core product(s) are free and satisfied users go on to make purchases from the <a href=\"https://easydigitaldownloads.com/downloads/\" target=\"_blank\">add-ons marketplace</a>.</p>\n<p>&#8220;By setting them up with a good theme from the get go, the likelihood that they become a paying customer is substantially higher,&#8221; Williamson said.</p>\n<p>So far, the freemium model has worked well for the company and making six theme products free makes sense when the business primarily revolves around plugins. After just <a href=\"http://wptavern.com/easy-digital-downloads-turns-3-years-old\" target=\"_blank\">three years in business</a>, EDD pulled in roughly half a million dollars in <a href=\"https://pippinsplugins.com/2014-review/\" target=\"_blank\">revenue in 2014</a>. As themes were not a significant portion of the revenue, Williamson is re-assigning them to be free products in order to continue to build a customer base for his plugins.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Jun 2015 19:13:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: WordCamp US Survey\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45127\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/06/wordcamp-us-survey/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:506:\"<p>We&#8217;re trying something new this year: instead of WordCamp San Francisco being the main WordCamp event of the year doing a WordCamp US in a rotating city. I&#8217;ve heard some great in-person pitches for places like Phoenix already. Do you think your city would be the coolest place in the 50 states for the first ever WordCamp US? <a href=\"http://wordcampcentral.polldaddy.com/s/apply-to-host-wordcamp-us\">Submit your city in this new survey</a>. It&#8217;s open until the end of the month.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Jun 2015 07:01:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"WPTavern: WordCamp US 2015 Now Accepting Applications for Host City\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44810\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wptavern.com/wordcamp-us-2015-now-accepting-applications-for-host-city\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3841:\"<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/usa-flag.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/usa-flag.jpg\" alt=\"usa-flag\" width=\"1022\" height=\"507\" class=\"aligncenter size-full wp-image-44819\" /></a></p>\n<p>WordCamp San Francisco has traditionally been one of the most important WordPress events of the year where Matt Mullenweg delivers his annual State of the Word address. Last year, he <a href=\"http://wptavern.com/matt-mullenwegs-state-of-the-word-highlights-internationalization-mobile-and-new-tools-for-wordpress-contributors\" target=\"_blank\">announced</a> that the the event had outgrown the Mission Bay venue and that it would be expanding to become WordCamp US in 2015.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\">Touch the walls as you walk out, as this is the last time we\'ll have <a href=\"https://twitter.com/hashtag/WordCampSF?src=hash\">#WordCampSF</a> here! ~ <a href=\"https://twitter.com/photomatt\">@photomatt</a> <a href=\"https://twitter.com/hashtag/wcsf14?src=hash\">#wcsf14</a> <a href=\"https://twitter.com/hashtag/endofanera?src=hash\">#endofanera</a></p>\n<p>&mdash; WordCamp SF (@WordCampSF) <a href=\"https://twitter.com/WordCampSF/status/526454529584549889\">October 26, 2014</a></p></blockquote>\n<p></p>\n<p>The decision to seek a new venue in a new city was partly based on the need to make room for more attendees and presentations. Another benefit of moving the event out of San Francisco, one of the most expensive cities in the world, is that it will likely become more accessible to a greater number of people.</p>\n<p>WordCamp US will follow a format similar to WordCamp Europe in that it will be held in a rotating city. The city has not yet been selected, which is surprising given that the year is nearly halfway finished.</p>\n<p>Mullenweg put out <a href=\"http://ma.tt/2015/06/wordcamp-us-survey/\" target=\"_blank\">a call for host city applications</a> on his blog and linked to a <a href=\"http://wordcampcentral.polldaddy.com/s/apply-to-host-wordcamp-us\" target=\"_blank\">survey</a> where candidates can apply.</p>\n<p>There are a lot of cities out there that might be an excellent fit for WordCamp US, but many are lacking a vibrant local WordPress community to help support the event. While this is not stated as an explicit requirement, it would be difficult to pull off such a large event without an army of local volunteers.</p>\n<p>WordPress is aiming big for its first ever WordCamp US. The survey states that host city applicants must secure a venue with hotels within three miles that can support 1,500 &#8211; 2,000 attendees. Potential organizers must supply average hotel costs for a range of budgets and average flight costs from the West Coast, East Coast, Midwest, Mexico, and Canada.</p>\n<p>Hosting the event will be a massive undertaking that will require an organization team capable of putting everything together in a very short amount of time. Events of this size normally have the benefit of longer planning periods. For example, <a href=\"http://wptavern.com/applications-to-host-wordcamp-europe-2016-closing-soon\" target=\"_blank\">applications to host WordCamp Europe 2016 closed two months ago</a> and the team is already training volunteers for next year&#8217;s event.</p>\n<p>If your team is up to the challenge of hosting WordCamp US, you&#8217;ll need to be prepared to submit venue information with room capacities, a detailed event budget, potential dates, and contributor day options. So far, Mullenweg has received in-person pitches for Phoenix but the application process is open to teams from any city. When <a href=\"http://wptavern.com/where-will-wordcamp-usa-be-held\" target=\"_blank\">WP Tavern readers were surveyed seven months ago</a>, commenters favored Chicago, Las Vegas, Kansas City, Houston, and Dallas.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Jun 2015 04:58:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Matt: Unsubscribing from Newsletters\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45117\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://ma.tt/2015/06/unsubscribing-from-newsletters/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2593:\"<p>When <a href=\"http://ma.tt/2004/04/trying-gmail/\">Gmail first came out I got on pretty early and procured what I thought was a cool email address</a>, mmmmmm@gmail.com. That&#8217;s because matt@ was too short, and matthew@ was taken. Ask anyone with a &#8220;cool&#8221; email address on a major service or Twitter handle and you&#8217;ll mostly hear about what a pain it is constantly getting spam, other people&#8217;s email, and people trying to log in to your account. These days it seems that address is used mostly by people forced to put something into an email form at places they don&#8217;t want to, so constant mail from mortgage places, car dealerships, porn sites, and countless email newsletters. I never ended up using the account for anything myself besides normal Google stuff.</p>\n<p>There&#8217;s a service to help you unsubscribe from things <a href=\"https://unroll.me/\">called Unroll.me</a> which is pretty neat, and it&#8217;ll scan your account to find all of the newsletters and things you can unsubscribe from, and gives you a one-click interface to do so. Unfortunately if you had over 5,000 &#8220;subscriptions&#8221; as I had, that becomes a 5,000 click operation and they provide no bulk tools, and apparently no plans to add them:</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/photomatt\">@photomatt</a> unfortunately there\'s no mass unsubscribe option at this time, though  we are seriously considering it for the future!</p>\n<p>&mdash; Unroll.Me (@Unrollme) <a href=\"https://twitter.com/Unrollme/status/595680719495634949\">May 5, 2015</a></p></blockquote>\n<p></p>\n<p>I assume this is because they want people to add newsletters to their digest service instead of just unsubscribing. Code to the rescue! Written by the <a href=\"https://profiles.wordpress.org/coffee2code\">inimitable Scott Reilly</a>. After you sign up and sign in, go <a href=\"https://unroll.me/rollup/edit/new\">to this page</a>, go to the javascript console (in Chrome: View → Developer → Javascript Console), then copy and paste the below code and press enter.</p>\n.gist table { margin-bottom: 0; }\n<p></p>\n<p>Then sit back and wait, it&#8217;s set so every 1.5 seconds it clicks an unsubscribe link. I do this about once a week now since I can accumulate 20-100 new subscriptions in that time. This code will break if they change anything, but should be pretty easy to update when they do. It currently shows me as unsubscribed from 7,868 things! If there was a way to pay for my account on Unroll.me I would do so happily.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Jun 2015 02:23:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"WPTavern: BuddyPress 2.3 “Livio” Released, Features the New BP Attachments API\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44666\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/buddypress-2-3-livio-released-features-the-new-bp-attachments-api\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4503:\"<a href=\"http://wptavern.com/wp-content/uploads/2015/06/chez-livio.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/chez-livio.jpg\" alt=\"photo credit: Chez Livio on TripAdvisor.com\" width=\"700\" height=\"348\" class=\"size-full wp-image-44799\" /></a>photo credit: <a href=\"http://www.tripadvisor.com/Restaurant_Review-g196581-d714980-Reviews-Chez_Livio-Neuilly_sur_Seine_Hauts_de_Seine_Ile_de_France.html#photos\">Chez Livio on TripAdvisor.com</a>\n<p>BuddyPress 2.3 &#8220;Livio&#8221; was released today, named in honor of <a href=\"http://www.chezlivio.com/\" target=\"_blank\">Chez Livio</a>, a famous Italian restaurant and pizza joint in Paris. Development on the 2.3 release cycle began in March with contributors <a href=\"http://wptavern.com/buddypress-2-3-development-kicks-off-contributors-prioritize-work-on-new-apis\" target=\"_blank\">prioritizing work on new APIs</a> alongside improvements to BuddyPress&#8217; existing APIs. Here&#8217;s a quick overview of what&#8217;s new:</p>\n<h4>BP Attachments API</h4>\n<p>The highlight of this release is the <a href=\"https://codex.buddypress.org/plugindev/bp_attachment/\" target=\"_blank\">BP Attachments API</a>, a new library that enables developers to create components that have the ability to manage uploads. You can see it in action in the greatly <a href=\"http://wptavern.com/buddypress-2-3-will-improve-avatar-uploads-with-the-new-bp-attachments-api\" target=\"_blank\">improved avatar uploads UI</a>, which now supports drag-and-drop uploads and includes mobile integration with phone/tablet/laptop cameras.</p>\n<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/avatar-ui.gif\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/avatar-ui.gif\" alt=\"avatar-ui\" width=\"657\" height=\"355\" class=\"aligncenter size-full wp-image-44742\" /></a></p>\n<h4>Companion Stylesheets for WordPress Default Themes</h4>\n<p>If you want to test BuddyPress and you&#8217;re not sure which theme to use, check out one of WordPress&#8217; most recent default themes. Version 2.3 of the plugin ships with <a href=\"http://wptavern.com/buddypress-2-3-will-introduce-companion-stylesheets-for-wordpress-default-themes\" target=\"_blank\">companion stylesheets</a> for Twenty Fourteen and Twenty Fifteen, which tidy up the appearance of BuddyPress components and UI elements when the default themes are active. The stylesheets also introduce vertical menus that eliminate the crowding often seen in the horizontal user/group navigation.</p>\n<p><a href=\"http://wptavern.com/wp-content/uploads/2015/05/bp-user-account-nav.png\"><img src=\"http://wptavern.com/wp-content/uploads/2015/05/bp-user-account-nav.png\" alt=\"bp-user-account-nav\" width=\"1300\" height=\"1004\" class=\"aligncenter size-full wp-image-43323\" /></a></p>\n<h4>Better Excerpts for Blog Post Activity</h4>\n<p>Version 2.3 has better support for blog post activity items. If the Site Tracking component is activated, BuddyPress will now display better excerpts in the activity stream for posts containing images or other embedded media. This improvement pairs nicely with the custom post type support that was added to the activity stream in the <a href=\"http://wptavern.com/buddypress-2-2-spumoni-released-featuring-new-member-type-api\" target=\"_blank\">2.2. release</a>.</p>\n<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/activity-stream-blog-post.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/activity-stream-blog-post.jpg\" alt=\"activity-stream-blog-post\" width=\"616\" height=\"443\" class=\"aligncenter size-full wp-image-44744\" /></a></p>\n<p>Other highlights in BuddyPress 2.3 include:</p>\n<ul>\n<li><strong>Member Type Directories</strong> – Create directories of member types on your site using the <a href=\"https://codex.buddypress.org/developer/member-types/\" target=\"_blank\">Member Type API</a>.</li>\n<li><strong>Star Private Messages</strong> – Mark important messages in your inbox with a star.</li>\n<li><strong>Notification Meta</strong> – Notifications are now more extensible with an additional metadata table.</li>\n</ul>\n<p>Overall this release offers an excellent balance between new features and improvements upon existing features, which combine to make BuddyPress more extensible and more enjoyable to use. It includes hundreds of bug fixes and enhancements from 40 volunteer contributors. For a full list of changes, check out the <a href=\"https://codex.buddypress.org/releases/version-2-3-0/\" target=\"_blank\">BuddyPress codex page for version 2.3</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 03 Jun 2015 21:19:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: Menu Customizer Officially Proposed for Merge Into WordPress 4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44729\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"http://wptavern.com/menu-customizer-officially-proposed-for-merge-into-wordpress-4-3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5536:\"<p>Contributors on the <a href=\"https://wordpress.org/plugins/menu-customizer/\" target=\"_blank\">Menu Customizer</a> feature plugin are proposing its inclusion in WordPress 4.3. Nick Halsey posted the Customizer Team&#8217;s <a href=\"https://make.wordpress.org/core/2015/06/03/feature-plugin-merge-proposal-menu-customizer/\" target=\"_blank\">proposal</a> last night, beginning with a summary of the purpose of moving menu management into the customizer:</p>\n<blockquote><p>In the process, we hope to offer an updated design with improved user flow, a mobile-first interface, improved accessibility, rebuild the administration UI from the ground up to be JavaScript-driven, solve long-standing problems with the current implementation, and clarify the purposes and capabilities of the menus feature. Additionally, Menu Customizer contributes significantly to the long-term goal to move all appearance functionality and, really, everything that could benefit from live previewing, from the admin to the Customizer.</p></blockquote>\n<p>Menu management in the customizer is essentially a full replacement of all the capabilities previously housed in the admin. It allows for editing, reordering, deleting, and adding individual menu items within any menu. The plugin adds a convenient global search that includes all post types, terms, and taxonomies.</p>\n<p>The video below was prepared by Halsey&#8217;s team to demonstrate the capabilities of the Menu Customizer:</p>\n<p></p>\n<p>The dizzying speed with which she flips between panels in the demo is not representative of the capabilities of your average WordPress user. Given that the plugin currently requires WordPress 4.3 alpha, it&#8217;s not likely that it has not been widely tested by users of varying experience levels.</p>\n<p>My initial impression after testing is that managing menus in the customizer makes me feel claustrophobic. The live previews and the mobile friendliness are the big wins here, but they come at the expense of a squished menu management experience. For sites that use WordPress as a CMS, with dozens and sometimes hundreds of pages and subpages, menu management in the customizer could become rather cumbersome.</p>\n<p><a href=\"http://wptavern.com/wp-content/uploads/2015/06/menu-customizer-test-add-page.jpg\"><img src=\"http://wptavern.com/wp-content/uploads/2015/06/menu-customizer-test-add-page.jpg\" alt=\"menu-customizer-test-add-page\" width=\"848\" height=\"644\" class=\"aligncenter size-full wp-image-44768\" /></a></p>\n<p>I have no doubt that the Menu Customizer has been architected to perform better as a JavaScript-driven solution for managing menus. Halsey and the team employed no small amount of wizardry in creating the custom panel for implementing screen options and the sections that lazy load menu items.</p>\n<p>But if you put a relatively new WordPress user in front of the customizer menu panel, will it be intuitive to use?  Will stuffing menus into the customizer cause the usability of the feature to decline?</p>\n<p><a href=\"https://www.facebook.com/groups/advancedwp/permalink/962590793803135/\" target=\"_blank\">Reactions to the proposal</a> in the Advanced WordPress Facebook group were less than enthusiastic, as not many favor expanding the customizer&#8217;s reach into menu management.</p>\n<p>&#8220;I really don&#8217;t feel the Customizer is the correct place to <em>manage</em> menus or any content for that matter,&#8221; member Tom Hemsley commented. &#8220;If a theme offers <em>styling</em> options for a menu then fair enough &#8211; put those styling options in the customizer. But the customizer is not the place for managing content. Why not force people to create new posts using the Customizer, too?&#8221;</p>\n<p>Lisa League&#8217;s comment accurately summarizes many others&#8217; initial reactions to the demo video: &#8220;My first impression of Make was not &#8216;Cool, look how they did this with the customizer&#8217; but &#8216;Whoa, there&#8217;s too much stuff in this tiny space.\'&#8221;</p>\n<p>If the Menu Customizer plugin is approved to merge into core, Halsey outlined a plan for the removal of the old menu admin screen in favor of focusing all new development on the UI in the customizer. WordPress 4.3 would point the Menus link in the admin bar to Menus in the customizer and later releases would remove all core links to the Menus admin screen, or point them to the customizer.</p>\n<p>&#8220;The above plan is fairly aggressive, to eliminate any ambiguity about future plans and intentions and to avoid the potential for mass trac ticket rot,&#8221; Halsey said.</p>\n<p>WordPress cannot move forward without making changes and taking risks. The question of whether or not to merge the Menu Customizer plugin should inspire some fairly active discussion in the days ahead. If you want to test the plugin for yourself, the easiest way is to install the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\" target=\"_blank\">WordPress Beta Tester</a> plugin to get 4.3-alpha running and then install <a href=\"https://wordpress.org/plugins/menu-customizer\" target=\"_blank\">Menu Customizer</a> from WordPress.org.</p>\n<p>Core contributors will discuss the Menu Customizer proposal today during the regularly scheduled development meeting on Slack. According to the <a href=\"https://make.wordpress.org/core/version-4-3-project-schedule/\" target=\"_blank\">WordPress 4.3 project schedule</a>, the feature plugin merge window will close June 17th and the official release is expected in mid-August.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 03 Jun 2015 18:15:20 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Steven Gliebe Launches WordPress Commercial Plugin Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44649\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/steven-gliebe-launches-wordpress-commercial-plugin-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6532:\"<p>More than 38k plugins are available for free on the <a href=\"https://wordpress.org/plugins/\">WordPress plugin directory</a>. While the theme directory has a <a href=\"https://wordpress.org/themes/commercial/\">category for commercial themes</a>, the plugin directory does not.</p>\n<p>When <a href=\"https://mattreport.com/interview-matt-mullenweg/\">Matt Medeiros interviewed Matt Mullenweg</a> earlier this year and asked if the plugin directory could turn into something similar to an app store, Mullenweg replied that the plugin directory will not turn into a market place or an app store and will never host commercial plugins. Outside of <a href=\"http://codecanyon.net/\">CodeCanyon</a>, I&#8217;m not aware of any WordPress plugin directory that focuses on commercial plugins.</p>\n<h2>Introducing Pro Plugin Directory</h2>\n<p>Steven Gliebe who <a href=\"http://wptavern.com/hostingreviews-io-webhosting-reviews-without-the-affliate-links\">runs HostingReviews.io</a> and is the founder of <a title=\"http://churchthemes.com/\" href=\"http://churchthemes.com/\">Churchthemes.com</a> has launched the<a href=\"https://proplugindirectory.com/2015/05/30/launching/\"> Pro Plugin Directory</a>. The site lists commercial plugins from a variety of categories including, forms, performance, and security. Its design is based on a modified child theme of <a href=\"https://array.is/themes/checkout-wordpress-theme/\">Checkout by ArrayHQ</a>.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/ProPluginDirectory.png\"><img class=\"size-full wp-image-44750\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/ProPluginDirectory.png?resize=960%2C609\" alt=\"Pro Plugin Directory Home Page\" /></a>Pro Plugin Directory Home Page\n<p>Gliebe created the site because he was frustrated that there was no resource for easily locating commercial WordPress plugins.</p>\n<p>&#8220;Most of the time I do find what I need in the free directory. Sometimes though, I want to see what the commercial options are,&#8221; he said.</p>\n<p>After asking several members of the community if such a site already exists, he came up empty. &#8220;I asked around and found that apparently there is no definitive <em>Pro</em> plugin directory as I suspected, so I thought I&#8217;d give it a go. WordPress is 12 years old and it&#8217;s beyond time to establish this.&#8221;</p>\n<h2>Monetization Strategy</h2>\n<p>Maintaining a directory can be hard work and without a way to be paid for the effort involved, interest can disappear quickly. Affiliate links are a natural strategy for the site while another is to sell upgraded listings.</p>\n<p>His focus is getting the site established with as many listings as possible. &#8220;Right now, my focus is on building up the site and making it useful. If it proves to be successful in that respect then I&#8217;m sure there will be a reasonable way to turn a profit and take it to the next level,&#8221; Gliebe said.</p>\n<h2>Scalability</h2>\n<p>One of the largest obstacles of running a directory is scalability. In the case of Pro Plugin Directory, the submissions come directly from the plugin sellers. The <a href=\"https://proplugindirectory.com/submissions/\">Submission Guidelines</a> have certain requirements to help ensure quality content.</p>\n<p>&#8220;The original content they submit is in a sense their <em>payment</em> for being listed and gaining exposure. There surely is work to be done but it will not be as heavy as <a href=\"http://themesorter.com/\">ThemeSorter</a> or similar failed plugin and theme directory endeavors. I basically click <strong>approve</strong> or <strong>reject</strong> with the way it&#8217;s setup,&#8221; Gliebe said.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/SearchWPPluginListing.png\"><img class=\"size-full wp-image-44752\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/SearchWPPluginListing.png?resize=1025%2C601\" alt=\"Search WP Plugin Directory Listing\" /></a>SearchWP Plugin Directory Listing\n<h2>How Success will be Measured</h2>\n<p>Without monetizing the site up front and being a new resource within the community, Gliebe tells the Tavern what metrics he&#8217;ll use to measure success.</p>\n<p>&#8220;Repeat visitors. If I see that people return to the site to find commercial plugin options then I&#8217;ll know that it is a <em>go-to</em> resource. I would also like to see search engine results for specific types of plugins return the free plugin directory at position number one and a Pro Plugin Directory category at number two, so that the user has a complete picture of his options readily available.&#8221;</p>\n<h2>The Directory is Useless Without Plugin Submissions</h2>\n<p>The directory won&#8217;t become what Gliebe envisions unless commercial plugin authors <a href=\"https://proplugindirectory.com/submissions/\">submit their plugins</a>. &#8220;In order for these things to happen, the directory needs plugins. It needs a very wide selection of commercial WordPress plugins. I need the support of plugin authors above all.&#8221;</p>\n<p>Although Gliebe is encouraged with the number of plugins already submitted to the site, he needs the directory to be the first thing people think of when searching for a commercial option.</p>\n<p>&#8220;If it becomes a <em>go-to</em> place for plugin sellers to market their new plugins then it just might work. I figure, if they know about it, why wouldn&#8217;t they list their plugins? It&#8217;s free, it&#8217;s easy, and I&#8217;d do it myself before other, harder, marketing tactics.&#8221;</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/PluginSubmissionForm.png\"><img class=\"size-full wp-image-44753\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/PluginSubmissionForm.png?resize=676%2C734\" alt=\"Pro Plugin Directory Submission Form\" /></a>Pro Plugin Directory Submission Form\n<h2>Does it Stand a Chance?</h2>\n<p>Creating a commercial plugin directory is not a new idea. Brad Touesnard founded the WordPress App Store which tried to be a commercial plugin directory while making it easier to browse and buy plugins. It didn&#8217;t attract the number of eyeballs needed to make the business sustainable and <a href=\"http://wptavern.com/brad-touesnard-explains-why-the-wp-app-store-failed\">ultimately shut down</a>.</p>\n<p>If Gliebe can&#8217;t get the support of commercial plugin authors and find a way to get a large number of plugins into the directory within a year, it will likely suffer the same fate.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 03 Jun 2015 04:38:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Matt: Jefferson on Idleness\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45122\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://ma.tt/2015/06/jefferson-on-idleness/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:153:\"<blockquote><p>\nDetermine never to be idle. It is wonderful how much may be done if we are always doing.</p>\n<p>&#8212; Thomas Jefferson</p></blockquote>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 03 Jun 2015 04:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"WPTavern: The Quest for the Perfect WordPress Admin Search Tool\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44660\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wptavern.com/the-quest-for-the-perfect-wordpress-admin-search-tool\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8586:\"<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/journey.jpg\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/journey.jpg?resize=1025%2C547\" alt=\"photo credit: Jesse Bowser\" class=\"size-full wp-image-44709\" /></a>photo credit: <a href=\"https://stocksnap.io/photo/2DEL42UQ7M\">Jesse Bowser</a>\n<p>The quest for the perfect WordPress admin search tool continues with yet another plugin designed to help you zip around the backend. Those who are familiar with <a href=\"http://www.alfredapp.com/\" target=\"_blank\">Alfred</a> for Mac will find many similarities in <a href=\"https://wordpress.org/plugins/aladdin/\" target=\"_blank\">Aladdin</a>, which was released today by <a href=\"https://twitter.com/tsiger\" target=\"_blank\">Gerasimos Tsiamalos</a> and the folks at <a href=\"http://www.cssigniter.com/\" target=\"_blank\">CSSIgniter</a>.</p>\n<p>Aladdin joins the ranks of <a href=\"http://wptavern.com/jarvis-a-free-quicksearch-tool-for-the-wordpress-dashboard\" target=\"_blank\">Jarvis</a>, <a href=\"http://wpbutler.com/\" target=\"_blank\">WP Butler</a>, <a href=\"https://wordpress.org/plugins/wp-jump-menu/\" target=\"_blank\">WP Jump Menu</a>, and Jetpack&#8217;s <a href=\"http://jetpack.me/support/omnisearch/\" target=\"_blank\">Omnisearch</a> in the recent proliferation of WordPress admin search tools. The plugin provides a simple keyboard quick launcher for accessing WordPress admin menu items.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/aladdin-example.png\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/aladdin-example.png?resize=800%2C600\" alt=\"aladdin-example\" class=\"aligncenter size-full wp-image-44678\" /></a></p>\n<p>After installing the plugin, users can launch Aladdin by pressing the <strong>Shift key</strong> twice. Start typing in the search modal until you see the menu option then press enter. Here&#8217;s a quick demo of how it works:</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/aladdin.gif\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/aladdin.gif?resize=797%2C767\" alt=\"aladdin\" class=\"aligncenter size-full wp-image-44673\" /></a></p>\n<h3>How Does Aladdin Compare to Other WordPress Admin Search Tools?</h3>\n<p>Aladdin cannot yet measure up to other admin search tools without adding the capability of searching through content. Tsiamalos posted his plugin in the <a href=\"https://www.facebook.com/groups/advancedwp/permalink/962183043843910/\" target=\"_blank\">Advanced WordPress users Facebook</a> group this morning, requesting feedback.</p>\n<p>&#8220;I&#8217;m thinking of adding auto-complete for user-generated content as well &#8211; Posts, Pages, Post Types etc.,&#8221; he said.</p>\n<p>Initial testers of the plugin were enthusiastic about the interface but could not see a use for it outside of a large website with lots of menus for custom post types and/or a long list of plugins installed. Small, simple blogging sites would not benefit from this tool unless Tsiamalos adds the ability to search for user-generated content. In its current state, it&#8217;s best suited to those who are using WordPress as a CMS.</p>\n<p>&#8220;I initially built it for my local multisite (60+ plus themes to maintain) and I thought others would find it useful, too,&#8221; Tsiamalos told the Tavern. This kind of scenario makes sense for the plugin&#8217;s current capabilities.</p>\n<p>Aladdin&#8217;s interface, with its convenient launch and lightning fast filtering, is the golden feature of this plugin. After testing Aladdin, I believe the tool has a lot of promise, especially once the author expands its capabilities to include content searching. The search modal is currently positioned too low on the page, but that&#8217;s an easy fix. The fact that the modal is always hidden unless summoned is also a bonus.</p>\n<p>The interface for Jetpack&#8217;s <a href=\"http://jetpack.me/support/omnisearch/\" target=\"_blank\">Omnisearch</a> module cannot compare. While it functions well to search through the admin and content, it requires the user to scroll to the top to type into the admin search bar or visit the dedicated Omnisearch page. Searching redirects you to a cluttered results page that is not convenient to browse.</p>\n<p>Overall, the experience of searching with <a href=\"https://wordpress.org/plugins/jarvis/\" target=\"_blank\">Jarvis</a> is simpler and more visually appealing than Aladdin or the Omnisearch module. It searches both admin menu items and user-generated content. It can be launched using the quick key &#8220;/&#8221; or by typing in the admin search bar. The demo below demonstrates how it works:</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/jarvis-demo.gif\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/jarvis-demo.gif?resize=992%2C578\" alt=\"jarvis-demo\" class=\"aligncenter size-full wp-image-44695\" /></a></p>\n<p>Unfortunately, Jarvis hasn&#8217;t been updated in more than year. Similarly, <a href=\"https://wordpress.org/plugins/wp-butler/\" target=\"_blank\">WP Butler</a>, which provides a slightly less polished experience, hasn&#8217;t been updated in more than two years.</p>\n<p><a href=\"https://wordpress.org/plugins/wp-jump-menu/\" target=\"_blank\">WP Jump Menu</a> is faster than all of the solutions above, but it doesn&#8217;t include WordPress admin menu items. Its somewhat clunky interface, anchored to the admin search bar, is almost forgivable given its speedy searching capabilities. However, WP Jump Menu is limited to searching user-generated content and isn&#8217;t designed for quickly jumping to admin menu items.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/wp-jump-menu.gif\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/wp-jump-menu.gif?resize=1025%2C521\" alt=\"wp-jump-menu\" class=\"aligncenter size-full wp-image-44697\" /></a></p>\n<h3>WordPress Core Needs a Convenient Admin Search Experience</h3>\n<p><a href=\"https://wordpress.org/plugins/omnisearch/\" target=\"_blank\">The Search Initiative</a>, which is currently an inactive feature plugin for WordPress core, essentially <a href=\"https://make.wordpress.org/core/2014/01/15/search-initiative-on-hold/\" target=\"_blank\">fell off the map in January 2014</a> after the feature <a href=\"http://wptavern.com/wordpress-global-admin-search-evolves-to-tackle-bigger-problems\" target=\"_blank\">failed to merge into WordPress 3.8 at the end of 2013</a>. The project&#8217;s contributors no longer had time to devote to the plugin and its development has never regained the momentum it had in 2013.</p>\n<p>Nevertheless, there&#8217;s no doubt that WordPress users are eager to add some sort of global search capability to the admin. It&#8217;s a feature that helps mitigate the complexity of the admin when many custom post types are active and plugins add in their own menu items. The ability to search both content and menu items is beneficial to new and experienced users alike.</p>\n<p>Responses to <a href=\"https://www.facebook.com/groups/advancedwp/permalink/962183043843910/\" target=\"_blank\">Tsiamalos&#8217; post on Aladdin</a> indicate that users are willing to test and help refine any extension that demonstrates a convenient way of solving the admin search problem. Many disparate solutions have cropped up over the past few years and often the plugins&#8217; creators were not aware of the other options before building their own.</p>\n<p>WordPress core improvement projects like the <a href=\"https://make.wordpress.org/core/tag/omnisearch/\" target=\"_blank\">Search Initiative</a> are led by volunteers and are at the mercy of contributors&#8217; available time. That means there is no guarantee that the project will move forward to become a more elegant solution for tackling current issues with searching the admin. As with any open source project, it will take motivated folks to step forward to propose a new path forward.</p>\n<p>Admin search is a complex problem but one many plugin developers have found worthy of pursuit. If reception to the Aladdin plugin is any indication, WordPress users are ready to embrace an easier way of navigating the admin. A collaborative effort combining the best features all admin search attempts would make for an excellent feature plugin, as core contributors have already <a href=\"https://make.wordpress.org/core/2013/10/23/omnisearch-global-admin-search-final-pitch/\" target=\"_blank\">demonstrated interest in merging a solution</a> with the right implementation to adequately serve WordPress users.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 02 Jun 2015 22:09:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"Post Status: Automattic to acquire WP Job Manager from Mike Jolley\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=12810\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"https://poststatus.com/automattic-to-acquire-wp-job-manager-from-mike-jolley/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:11800:\"<p><a href=\"http://mikejolley.com/\">Mike Jolley</a> is the lead developer of WooCommerce by day, and has managed the very successful WP Job Manager plugin by night.</p>\n<p>Mike created <a href=\"https://wpjobmanager.com/\">WP Job Manager</a> (<a href=\"https://wordpress.org/plugins/wp-job-manager/\">also on WordPress.org</a>) as a side project for fun <a href=\"https://poststatus.com/notes/mike-jolley-releases-alpha-of-a-new-job-manager-plugin/\">in June 2013</a>. He released paid extensions through Gumroad (a hosted tool for selling digital downloads) in September 2013 and in May of 2014 &#8212; after the plugin had really taken off &#8212; <a href=\"http://mikejolley.com/2014/05/launching-wpjobmanager-com/\">he moved to WooCommerce</a>.</p>\n<p>WP Job Manager filled a void in the WordPress plugin space. It now has more than 30,000 active installs, according to WordPress.org, and the suite of add-on plugins and themes has been very successful.</p>\n<h3>WP Job Manager to be acquired by Automattic</h3>\n<p>As most readers know, <a href=\"https://poststatus.com/automattic-acquired-woocommerce-woothemes/\">WooThemes and WooCommerce were acquired by Automattic</a> in May. Mike joined the other WooThemes employees at <a href=\"http://automattic.com\">Automattic</a>. Automattic has a strict policy that employees cannot have paid side projects, whether client or product work. For Mike to stay at Automattic, he had to figure out what the future of WP Job Manager would be.</p>\n<p>Mike decided to sell WP Job Manager to Automattic after they expressed interest, and they have reached an agreement for a deal. While the terms of the deal are not public and Matt Mullenweg and Mike would not comment on the deal, I&#8217;m able to offer some additional insight based on conversations with others that have knowledge of the situation.</p>\n<h3>Revenue and WP Job Manager ecosystem</h3>\n<p>According to sources, WP Job Manager was bringing in $35,000-$40,000 revenue per month at its peak. I believe that Automattic paid greater than one year of expected income to retain rights to the plugin and paid add-ons.</p>\n<p>In March, Mark Forrester <a href=\"http://wordpress.tv/2015/03/09/mark-forrester-going-small-to-grow-big/\">spoke at WordCamp Cape Town</a> on plugin sales models, where he noted that Mike&#8217;s <a href=\"https://wpjobmanager.com/add-ons/\">add-ons</a> were making around $20,000 per month, a number which has grown considerably since then.</p>\n<p>The move from Gumroad to WooCommerce &#8212; and the addition of a bundle option, were quite successful, it appears. Furthermore, add-on products from third parties helped drive growth to WP Job Manager.</p>\n<p>For example, <a href=\"https://astoundify.com\">Astoundify</a> has two themes that utilize WP Job Manager &#8212; Listify and Jobify &#8212; which gross between $45,000 and $50,000 per month alone. In addition to their themes, they make another $5,000-$7,000 from WP Job Manager related plugins. So Astoundify makes around $55,000 per month on top of the WP Job Manager plugin, and in result drive considerable sales back to WP Job Manager&#8217;s other paid add-ons.</p>\n<p>There are other developers with add-ons and themes for WP Job Manager as well. It&#8217;s a successful ecosystem with a mix of themes and plugins.</p>\n<p>Mike was able to create the product with relatively low support costs as well. He hired two part-time support providers, but otherwise managed development and other tasks himself.</p>\n<p>By all means, WP Job Manager is a ridiculously successful product, especially as a side project. It&#8217;s important to remember that this is not the status-quo, but Mike did an incredible job finding the right market combined with a truly terrific product.</p>\n<h3>Q&amp;A with Mike Jolley and Matt Mullenweg</h3>\n<p>I sent some questions to Mike and both Mike and Matt Mullenweg responded. Here are those questions and answers in full:</p>\n<p><strong>When did the acquisition take place? After WooThemes was acquired, same time?</strong></p>\n<p><strong>MJ</strong>: The acquisition of WPJM came after the Woo deal was finalised.</p>\n<p>I had known that an acquisition may be happening, but when this was official and it was revealed that Automattic were the acquirers I wasn’t actually aware of their policies surrounding paid projects. I should have read “Year Without Pants” <img src=\"https://poststatus.com/wp-includes/images/smilies/simple-smile.png\" alt=\":)\" class=\"wp-smiley\" /></p>\n<p><strong>MM</strong>: We want for everyone at Automattic to be fully focused on our shared business and projects, it’s part of what brings everyone together. We had been aware of WPJM from pretty early in the process and thought it could be a nice complement to the WooCommerce business since its approach was so similar.</p>\n<p><strong>What options did you have for the acquisition? I know A8C [Automattic] doesn’t allow paid side projects, so did a change have to happen for you to stay on with Automattic to work on WooCommerce?</strong></p>\n<p><strong>MM</strong>: Anything was an option, including making WPJM free or selling it to a third party, but I’m glad we came to the solution we did. Since WPJM is part of Automattic now there’s no real or perceived conflict to the continuing work on it or revenue from it.</p>\n<p><strong>MJ</strong>: I didn’t want to stop working on WooCommerce. It’s still the project I’m most passionate about and I’m not ready to walk away just yet. Although it was a really tough and emotional decision to make, I feel I made the right decision to part ways with WPJM to continue working on WooCommerce.</p>\n<p><strong>Did you explore other options? Selling to someone else, etc?</strong></p>\n<p><strong>MJ</strong>: I looked into a few options before I knew the details of the deal from Automattic, naturally. I thought about offloading it to a developer-friend, making it all free, or doing it full time. Ultimately though, the appeal of working for Automattic, the benefits surrounding that, being able to continue working on WooCommerce and with the people I respect, and the acquisition itself won the day.</p>\n<p><strong>Did you have any support, dev, or other paid help for managing WPJM?</strong></p>\n<p><strong>MJ</strong>: Yes; I’ve had help on the support front from both Bryce Adams and Scott Basgaard whom have done work for me on a freelance basis. They have both been a tremendous help, and crucial given the time I have available. Really thankful to those guys.</p>\n<p>On the development side it’s been largely me, although Bryce and Remi Corson have both built an add-on, again freelance based.</p>\n<p><strong>Will you still be the lead on WPJM development at A8C?</strong></p>\n<p><strong>MJ</strong>: This is not yet certain. WooCommerce demands most of my time as team lead so it may be difficult to work on both, however if possible I’d still like to contribute to the project and help where I can. The core project at least is GPL and public on Github so I can definitely see myself contributing there to keep my Github commit streak going.</p>\n<p><strong>What does the third party ecosystem look like on WPJM? Jobify, etc. How many folks have products based on it? How could life change for these products?</strong></p>\n<p><strong>MJ</strong>: The 3rd party system for WPJM differs to that of WooCommerce in that I do not sell 3rd party items myself via a marketplace. All 3rd party stuff is external.</p>\n<p>Plugin wise, Smyl.es has a cool field editor, Remi Corson, Tiny Giant Studios and Astoundify have several, and there are a few integrations with other plugins ranging from search to geolocation.</p>\n<p>On the theme front, Jobify (and Listify) by Astoundify are the most prominent. Tiny Giant Studios have a few, I’m aware of some for sale on TemplateMonster (unsure of quality), and then there is one-that-shall-not-be-named on Themeforest which bundles paid add-ons (shame).</p>\n<p>The theme side is diverse. Even though I’m targeting the jobs niche, Listify is a generic listings theme which can list everything, powered by WPJM. There are even also even more-niche themes such as Petsitter and Babysitter themes which customise the plugin further.</p>\n<p>Overall, a lot of things going on in this space. If the plugin grows from a8c involvement (which I hope to see) these developers should benefit from an increased user base. Really glad they chose to back my little project.</p>\n<p><strong>Will the format for sales of WPJM change in the future, under the umbrella of A8C? Will it become free?</strong></p>\n<p><strong>MJ</strong>: Short term, things should remain as-is, with Automattic taking over the site, sales, and support. Medium- to long-term I cannot say for certain what will happen, but with more time and resources devoted to it (more than my weekends and evenings) I hope to see the ecosystem grow and support for the plugin to continue.</p>\n<p><strong>What kind of revenue was WP Job Manager seeing in the months prior to the acquisition?</strong></p>\n<p><strong>MM</strong>: No comment on the economics of the plugin.</p>\n<p><strong>How many paid users do you have?</strong></p>\n<p><strong>MM</strong>: Still no comment on the economics of the plugin.</p>\n<p><strong>What kind of acquisition occurred? Cash and stock? Cash or stock only?</strong></p>\n<p><strong>MM</strong>: Sorry we don’t comment on this.</p>\n<p><strong>Can you tell me the ballpark of the acquisition value?</strong></p>\n<p><strong>MM</strong>: Definitely Astrodome.</p>\n<h3>What we&#8217;ve learned here</h3>\n<p>There&#8217;s a lot we can take away from the WP Job Manager acquisition.</p>\n<p>For one, it proves that a single individual can have a massive impact on the WordPress ecosystem. It&#8217;s impossible to deny how influential Mike has been. He&#8217;s the lead developer of the world&#8217;s most popular eCommerce plugin, while he runs an incredible successful job manager plugin on the side.</p>\n<p>His success is astonishingly impressive to me. I&#8217;m quite happy for him and everything he&#8217;s achieved.</p>\n<p>It also appears to me based on discussions that it was not well known that Automattic restricts side projects for their employees. It&#8217;s a long standing policy and I think it works for them; however it does make for certain challenges when they hire self-employed product makers or acquire companies with different policies.</p>\n<p>The acquisition of WooThemes brought a number of challenges. Mike being on board would have been a huge priority for me, if I were acquiring WooThemes. The half a million dollars or more (I am just guessing) to acquire WP Job Manager would be well worth it, even if I didn&#8217;t have big plans for the product.</p>\n<p>That said, I think in this case Automattic could make great use of WP Job Manager. It would be another terrific fit for their WordPress.com VIP clients, and if they actively develop it, it could receive even more adoption long term.</p>\n<p>However, just as I thought with WooCommerce, I wouldn&#8217;t be surprised if they make Mike&#8217;s traditionally paid add-ons free, as paid plugins don&#8217;t particularly jive with Matt Mullenweg&#8217;s historical viewpoints. And WP Job Manager &#8212; while it has quite a bit of potential for a normal person &#8212; doesn&#8217;t likely have the same growth potential as WooCommerce to be an attractive monetization avenue as an Automattic product.</p>\n<p>So I would expect that the plugin model will change over the coming months.</p>\n<p>Congratulations to both Mike and Automattic; this is a win for both parties. Mike is a huge asset to any organization, and I&#8217;m really glad he is able to be financially rewarded for all of his contributions making great WordPress products.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 02 Jun 2015 17:45:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: WPShout Releases New WordPress Plugin that Displays all Image Sizes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44654\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/wpshout-releases-new-wordpress-plugin-that-displays-all-image-sizes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2581:\"<p>When images are uploaded to the WordPress media library, several different sized images are generated. Image sizes are based on the settings on the Media Settings screen and from themes that often contain custom image sizes that are specific, such as featured images.</p>\n<p>Locating images with custom sizes in the WordPress media library is difficult since they&#8217;re not listed and the file URL points to the original image.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/DefaultMediaLibrarySettings.png\"><img class=\"size-full wp-image-44655\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/06/DefaultMediaLibrarySettings.png?resize=758%2C415\" alt=\"Media Library Image Settings\" /></a>Media Library Image Settings\n<p>The team at <a href=\"http://wpshout.com/\">WPShout</a> released a new plugin called <a href=\"https://wordpress.org/plugins/display-all-image-sizes/\">Display All Image Sizes</a> that displays all available image sizes, their permalinks, and dimensions. Once activated, you&#8217;ll see a list of all sizes of each image in the Add Media modal and in each image&#8217;s individual page in the Media Library.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/DisplayAllImageSizesInAction.png\"><img class=\"size-full wp-image-44656\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/DisplayAllImageSizesInAction.png?resize=1025%2C519\" alt=\"All Image Sizes and Their URLs\" /></a>All Image Sizes and Their URLs\n<p>With the plugin activated, a vertical scroll wheel is added to the attachment details screen. Depending on the size of your monitor,  you may encounter the same thing.</p>\n<p>The scroll bar is annoying, because I commonly use the image sizes in the attachment display settings drop down menu. This requires me to scroll every time I need to access that menu.</p>\n<h2>Ideas for Improvement</h2>\n<p>Instead of showing all image sizes in a blocky manner and vertically stretching the screen, they should be moved to the existing drop down menu where you can select an image&#8217;s size. When a user selects an image size from the menu, the file URL could automatically change to point to that image. This way, the plugin would use native interface elements and make the default attachment details screen more useful.</p>\n<p>Display all image sizes works as advertised with WordPress 4.2.2. If the team improves the user interface and can minimize the screen real-estate it uses, the plugin could turn out to be a very useful addition to sites that use a lot of custom image sizes.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 02 Jun 2015 15:39:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: Matt Mullenweg’s Keynote at WordCamp Dallas 2008\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44639\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wptavern.com/matt-mullenwegs-keynote-at-wordcamp-dallas-2008\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3206:\"<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/WordCampDallas2008FeaturedImage.png\"><img class=\"size-full wp-image-44643\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/WordCampDallas2008FeaturedImage.png?resize=650%2C200\" alt=\"WordCamp Dallas Featured Image\" /></a>Photo courtesy of <a href=\"http://ma.tt/2008/03/first-day-of-wordcamp/\">Matt Mullenweg</a>\n<p>The following is a recording of Matt Mullenweg&#8217;s keynote presentation at WordCamp Dallas 2008. <a href=\"http://onemansblog.com/2008/04/03/wordcamp-dallas-2008-matt-mullenweg-wordpress-25-and-beyond/\">Recorded by John Pozadzides</a> who helped organize the event, it&#8217;s the only video of Mullenweg&#8217;s keynote that exists. In the video, Mullenweg walks the audience through WordPress 2.5, the redesign of WordPress.org, and the future of WordPress. There&#8217;s also a question and answer segment in the second half of the presentation.</p>\n<p><!--[if IE]><object width=\"545\" height=\"405\" id=\"viddlerOuter-33a80f5b\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"><param name=\"movie\" value=\"//www.viddler.com/player/33a80f5b/0/\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"allowNetworking\" value=\"all\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"flashVars\" value=\"f=1&#038;autoplay=f&#038;disablebranding=f\"><object id=\"viddlerInner-33a80f5b\"><video id=\"viddlerVideo-33a80f5b\" src=\"//www.viddler.com/file/33a80f5b/html5mobile/\" type=\"video/mp4\" width=\"545\" height=\"363\" poster=\"//www.viddler.com/thumbnail/33a80f5b/\" controls=\"controls\" x-webkit-airplay=\"allow\"></video></object></object><![endif]--> <!--[if !IE]> <!-->  <!--<![endif]--></p>\n<p>WordCamp Dallas 2008 was the first WordCamp I&#8217;ve ever attended and is the first time I met Mullenweg in person. Minutes before he took the stage, <a href=\"https://wordpress.org/news/2008/03/wordpress-25-brecker/\">WordPress 2.5 &#8220;Michael Brecker&#8221;</a> was released to the world.</p>\n<p>WordPress 2.5 was the culmination of six months of work. In fact, Mullenweg <a href=\"http://lists.automattic.com/pipermail/wp-hackers/2008-January/016993.html\">announced</a> on the WP-Hackers mailing list that WordPress 2.4 would be skipped so that extra focus could be applied to 2.5.</p>\n<blockquote><p>In light of the big changes happening in the codebase and admin section, we&#8217;re going to push back the next release to be aimed for early March.</p>\n<p>This is the timeframe when 2.5 was originally scheduled for, so we&#8217;re treating the originally planned 2.4 in December as a skipped release, as a result of both the holidays and the large changes which we weren&#8217;t able to start on until late October.</p>\n<p>There&#8217;s some good stuff in the oven, and we don&#8217;t want to rush it. The new release shall be called 2.5. Various official docs and roadmaps will be updated in due course.</p></blockquote>\n<p>The video is an important piece of WordPress history that needs to be preserved and if possible, uploaded to <a href=\"http://wordpress.tv/\">WordPress.tv</a>. I&#8217;ve asked Pozadzides for permission to upload it to WordPress.tv and will update the post once I receive a response.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 02 Jun 2015 04:40:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Matt: Webmonkey Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45115\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://ma.tt/2015/06/webmonkey-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:239:\"<p>I was on the <a href=\"http://www.wired.com/2015/05/webmonkey-podcast-e-commerce-coming-wordpress-com/\">Webmonkey Podcast talking about WooCommerce and tech in general</a>, my part starts around 26 minutes in.</p>\n<p></p>\n<p>&nbsp;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 01 Jun 2015 23:34:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"WPTavern: WordPress.com Launches Insights: Better Stats for Visualizing Publishing Trends\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44598\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://wptavern.com/wordpress-com-launches-insights-better-stats-for-visualizing-publishing-trends\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3505:\"<p>WordPress.com <a href=\"https://en.blog.wordpress.com/2015/06/01/insights-a-new-view-of-your-stats/\" target=\"_blank\">announced</a> major improvements to its Stats feature today. The new Insights tab gives users a bird&#8217;s eye view of posting activity and visitor trends. The Stats panel now displays all-time numbers for posts, views, visitors, and the day the site received the most number of views.</p>\n<p>Insights also calculates the most popular day of the week and the most popular hour based on when the site gets the most views on average.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/insights-all-time-stats.jpg\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/insights-all-time-stats.jpg?resize=667%2C362\" alt=\"insights-all-time-stats\" class=\"aligncenter size-full wp-image-44604\" /></a></p>\n<p>Posting Activity is another new addition that provides a way to visualize how often you are publishing. The feature is reminiscent of GitHub&#8217;s <a href=\"https://help.github.com/articles/viewing-contributions-on-your-profile-page/#viewing-contributions-from-specific-times\" target=\"_blank\">Contributions calendar</a>, which makes it easy to view contributions from specific times. Insights allows you to mouse over a specific date with a color marker to see how many posts were published that day.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/insights-posting-activity.jpg\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/06/insights-posting-activity.jpg?resize=658%2C256\" alt=\"insights-posting-activity\" class=\"aligncenter size-full wp-image-44615\" /></a></p>\n<p>If, for some reason, you&#8217;re missing the old version of WordPress.com&#8217;s stats, it is available for a limited time under <a href=\"https://wordpress.com/my-stats/\" target=\"_blank\">wordpress.com/my-stats/</a>.</p>\n<p>Insights is not yet available on WordPress mobile apps but will likely be added soon. When asked when Insights will be available to self-hosted users, WordPress.com representative Jonathan Sadowski replied, &#8220;If you install Jetpack and enable the Stats module, you’ll be able to view these stats on WordPress.com for your .org blog.&#8221;</p>\n<p>Stats is arguably one of the most popular features in Jetpack and a major factor for many in the decision to connect with WordPress.com. However, the view from inside the self-hosted Jetpack stats panel is starting to look a little dated when compared to the mobile apps or WordPress.com. Adding Insights to Jetpack&#8217;s stats panel would save users a trip over to WordPress.com to discover this information.</p>\n<p>Most people don&#8217;t have the time or motivation to log into Google Analytics and create a meaningful interpretation of that data to improve their publishing habits. The new and improved stats with Insights offers a better understanding of when you&#8217;re posting and even interprets your traffic to provide actionable data, such as what hour might be the best for scheduling a post, what months lend you the most time to commit to blogging, etc.</p>\n<p>The all-time stats also make it easier to track your blogging progress and set milestones for increasing posts, views, and visitors, and ultimately beating your best traffic day on record. The new feature is <a href=\"https://wordpress.com/stats/insights\" target=\"_blank\">live on WordPress.com</a> today and we&#8217;ll be watching for it in future updates to the mobile apps.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 01 Jun 2015 22:07:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WPTavern: Sergej Müller, Creator of Antispam Bee, Says Goodbye to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44567\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/sergej-muller-creator-of-antispam-bee-says-goodbye-to-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4847:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/Sergej-Müller.jpg\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/06/Sergej-Müller.jpg?resize=250%2C382\" alt=\"Sergej-Müller\" class=\"alignright size-full wp-image-44590\" /></a>Sergej Müller is <a href=\"https://gist.github.com/sergejmueller/bccd658a5cdeb5b57deb\" target=\"_blank\">saying goodbye to WordPress</a> after nine years and nearly three million downloads of his <a href=\"https://profiles.wordpress.org/sergejmueller/#content-plugins\" target=\"_blank\">free plugins</a>. <a href=\"https://wordpress.org/plugins/antispam-bee/\" target=\"_blank\">Antispam Bee</a>, his most popular contribution, is currently in use on more than 200,000 WordPress sites.</p>\n<p>Müller penned a <a href=\"https://gist.github.com/sergejmueller/bccd658a5cdeb5b57deb\" target=\"_blank\">farewell</a> Gist on GitHub in his native German, which <a href=\"http://glueckpress.com/\" target=\"_blank\">Caspar Hübinger</a> was kind enough to <a href=\"https://gist.github.com/glueckpress/ed370acc556c475c3be5\" target=\"_blank\">translate</a> into English.</p>\n<blockquote><p>For me, a chapter of my life is coming to an end. A chapter that has brought an abundance of experience, learning, and fun. A chapter that, on the other hand, demanded a lot of time, nerves, and motivation. But where there’s a will, there’s a way, and I deeply hope my software and my commitment may have made the WordPress community a bit better in terms of quality.</p></blockquote>\n<p>Müller is discontinuing his WordPress contributions due to health reasons, but he plans to find a suitable successor who will be able to deliver the level of quality and support that his users have come to expect. His plugins, most notably <a href=\"https://wordpress.org/plugins/antispam-bee/\" target=\"_blank\">Antispam Bee</a>, <a href=\"https://wordpress.org/plugins/cachify/\" target=\"_blank\">Cachify</a>, <a href=\"https://wordpress.org/plugins/statify/\" target=\"_blank\">Statify</a>, <a href=\"https://wpseo.de/\" target=\"_blank\">wpSEO</a> and <a href=\"https://optimus.io/\" target=\"_blank\">Optimus</a>, are used widely around the world, particularly throughout Germany, Austria, and the germanophone parts of Switzerland.</p>\n<p>Hübinger, who is active in the German and European WordPress communities, has been using Müller&#8217;s plugins for the past six years.</p>\n<p>&#8220;Just as valuable for me personally were his blog posts and tutorials,&#8221; he said. &#8220;I pretty much learned WordPress development from his blog, and <a href=\"http://bueltge.de/\" target=\"_blank\">Frank Bueltge</a>&#8216;s.</p>\n<p>&#8220;There are a lot of comments expressing great surprise. No one saw him quitting, obviously. Sergej has been a key figure of the German-speaking WordPress community for the last nine years. While not quite so popular beyond the Germanophone context, I think his note that almost every WordPress user over here has heard of or uses at least one of his plugins is no exaggeration.&#8221;</p>\n<p>While Müller does have a couple commercial plugins available, he has never made a living from them. For the past nine years he has been working as a software engineer outside of WordPress. Anyone aspiring to adopt his plugins will need to meet the high standards that he has set in terms of quality and support, especially in regards to supporting the German community.</p>\n<p>&#8220;Monika Thon-Soun, a WordPress veteran from Austria, <a href=\"http://www.texto.de/sergej-einfach-danke-fuer-alles-2192/\" target=\"_blank\">mentions</a> she doesn’t remember a single instance where one of Sergej’s plugins would have been hacked,&#8221; Hübinger said. &#8220;Given the popularity of his plugins, that’s truly worth mentioning, as it underlines a character feature that everyone loves him for: reliability.&#8221;</p>\n<p>Müller&#8217;s plugin contributions have always been a hobby for him but he is no longer able to sustain their development and support. He is currently in conversations with parties who are interested in his projects and will announce the new maintainers once it has been finalized.</p>\n<p>Sergej Müller&#8217;s contributions signify the importance of having WordPress extensions and tutorials available for users to learn WordPress in their own language. His role in cultivating the German development community and supporting its many users will not be easily filled.</p>\n<p>&#8220;As a friend, I understand and support his decision completely,&#8221; Hübinger said. &#8220;As a WordPress user, it’s&#8230;a catastrophe.</p>\n<p>&#8220;Whoever follows him on G+ will have seen occasional moments of disappointment. In those moments, you could see all his passion. Because it really wasn’t about money for him. Acknowledgement and paying it forward is his favorite currency.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 01 Jun 2015 17:11:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Matt: Beethoven, Mozart, Bach\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45099\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://ma.tt/2015/05/beethoven-mozart-bach/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:238:\"<blockquote><p>Beethoven tells you what it&#8217;s like to be Beethoven and Mozart tells you what it&#8217;s like to be human. Bach tells you what it&#8217;s like to be the universe.</p></blockquote>\n<p>― Douglas Adams</p>\n<p>&nbsp;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 01 Jun 2015 05:42:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Matt: Martian Review\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45110\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"http://ma.tt/2015/05/martian-review/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1727:\"<p>On the recommendation of my friend <a href=\"https://twitter.com/timyoung\">Timothy Young</a> I checked out the book <a href=\"http://www.amazon.com/dp/B00EMXBDMA\"><em>The Martian: A Novel</em> by Andy Weir</a>. Think of it like <a href=\"http://www.amazon.com/dp/B00IC8VF10/\">Shackleton&#8217;s Voyage</a> (a great recommendation from <a href=\"http://toni.org/\">Toni</a>) but on Mars. I really enjoyed the book, and if you like geeky, science-filled novels you will too.  One thing about the publishing I thought was really cool, as <a href=\"http://en.wikipedia.org/wiki/The_Martian_(Weir_novel)\">the Wikipedia puts it</a>:</p>\n<blockquote><p>Having been rebuffed by literary agents when trying to get prior books published, Weir decided to put the book online in serial format one chapter at a time for free at his website. At the request of fans he made an Amazon Kindle version available through Amazon.com at 99 cents (the minimum he could set the price). The Kindle edition rose to the top of Amazon&#8217;s list of best-selling science-fiction titles, where it sold 35,000 copies in three months, more than had previously downloaded it for free. This garnered the attention of publishers: Podium Publishing, an audiobook publisher, signed for the audiobook rights in January 2013. Weir sold the print rights to Crown in March 2013 for six figures.</p></blockquote>\n<p>I was hoping it was on a WordPress blog, but <a href=\"http://www.galactanet.com/writing.html\">it appears to be more of a static HTML site</a> (his <a href=\"http://www.andyweirauthor.com/\">official site is WP-powered</a>) and includes some awesome short vignettes like <a href=\"http://www.galactanet.com/oneoff/meetingsarah.html\">Meeting Sarah</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 30 May 2015 10:54:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"WPTavern: Why Cloudup is Not Replacing the WordPress Media Library\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44516\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"http://wptavern.com/why-cloudup-is-not-replacing-the-wordpress-media-library\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4027:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/CloudUpFeaturedImage2.png\"><img class=\"aligncenter size-full wp-image-42250\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/CloudUpFeaturedImage2.png?resize=650%2C200\" alt=\"CloudUpFeaturedImage2\" /></a>When <a href=\"http://en.blog.wordpress.com/2013/09/25/cloudup-joins-the-automattic-family/\">Automattic acquired Cloudup</a> in 2013, two of the most exciting parts <a href=\"http://techcrunch.com/2013/09/25/automattic-acquires-file-sharing-service-cloudup-to-build-faster-media-library-and-enable-co-editing/\">of the announcement</a> was replacing the WordPress media library with <a href=\"https://cloudup.com/\">Cloudup</a> and the ability to co-edit posts similar to Google Docs. We <a href=\"http://wptavern.com/cloudup-makes-file-sharing-incredibly-easy\">discussed the concept</a> in early 2014 and readers were concerned about owning their data.</p>\n<p>Two years later, the <a href=\"https://wordpress.org/news/2014/04/smith/\">WordPress media library and the visual post editor</a> have received major improvements while integration with Cloudup is non-existent. When Matt Mullenweg was asked about the integration in a <a href=\"http://wptavern.com/wpweekly-episode-194-celebrating-wordpress-12th-birthday-with-matt-mullenweg\">recent interview</a>, he responded,</p>\n<blockquote><p>We did a lot of really awesome UI improvements to the editor and did some things we were very excited about, but because we weren&#8217;t working on a TinyMCE base, some of the basic editing stuff was really difficult.</p></blockquote>\n<p>The team spent about six months to complete the first 80% of the project then spent a year and a half to reach 85%. Setbacks included a lot of rabbit holes and hidden complexity. The team now works on different things within Automattic that revolve around data.</p>\n<h2>Zeditor is an Educational Resource</h2>\n<p>The work completed by the team is <a href=\"https://github.com/Automattic/zeditor\">open source and available on GitHub</a>. It&#8217;s called Zeditor and serves as an educational resource. &#8220;We learned a ton through the way we architected the JavaScript and we think it serves as a good model for doing lots of JavaScript projects going forward,&#8221; Mullenweg said.</p>\n<p>Listen to Mullenweg explain why Cloudup is not replacing the WordPress media library in the following audio clip. Be sure to <a href=\"http://wptavern.com/wpweekly-episode-194-celebrating-wordpress-12th-birthday-with-matt-mullenweg\">check out the entire interview</a> where we discuss a variety of other WordPress topics.</p>\n<div class=\"audio-shortcode-wrap\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/04/CloudUpFeaturedImage2.png?resize=175%2C131\" alt=\"Why Cloudup is Not Replacing the WordPress Media Library\" class=\"landscape thumbnail post-thumbnail audio-image\" /><!--[if lt IE 9]><script>document.createElement(\'audio\');</script><![endif]-->\n<a href=\"http://wptavern.com/wp-content/uploads/2015/05/CloudupWordPressMediaLibraryZeditor.mp3\">http://wptavern.com/wp-content/uploads/2015/05/CloudupWordPressMediaLibraryZeditor.mp3</a></div><div class=\"media-shortcode-extend\"><div class=\"media-info audio-info\"><ul class=\"media-meta\"><li><span class=\"prep\">Run Time</span> <span class=\"data\">3:14</span></li><li><span class=\"prep\">Artist</span> <span class=\"data\">Jeff Chandler and Marcus Couch</span></li><li><span class=\"prep\">Album</span> <span class=\"data\">WordPress Weekly</span></li><li><span class=\"prep\">File Name</span> <span class=\"data\"><a href=\"http://wptavern.com/wp-content/uploads/2015/05/CloudupWordPressMediaLibraryZeditor.mp3\">CloudupWordPressMediaLibraryZeditor.mp3</a></span></li><li><span class=\"prep\">File Size</span> <span class=\"data\">1.36 MB</span></li><li><span class=\"prep\">File Type</span> <span class=\"data\">MP3</span></li><li><span class=\"prep\">Mime Type</span> <span class=\"data\">audio/mpeg</span></li></ul></div><button class=\"media-info-toggle\">Audio Info</button></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 21:11:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WPTavern: Fight for the Future Leads Congress Blackout Campaign to Protest the Patriot Act\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44507\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"http://wptavern.com/fight-for-the-future-leads-congress-blackout-campaign-to-protest-the-patriot-act\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3501:\"<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/congress-blackout.jpg\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/congress-blackout.jpg?resize=1025%2C481\" alt=\"congress-blackout\" class=\"aligncenter size-full wp-image-44522\" /></a></p>\n<p>Three key provisions within the Patriot Act will expire at the stroke of midnight on Sunday. The Senate needs 60 votes in order to provide an extension or renew the provisions past June 1st. <a href=\"http://en.wikipedia.org/wiki/Section_summary_of_the_Patriot_Act,_Title_II#Section_215:_Access_to_records_and_other_items_under_FISA\" target=\"_blank\">Section 215</a> of the measure is particularly controversial in that it allows the National Security Agency (NSA) to collect data from Americans&#8217; phone records.</p>\n<p><a href=\"https://www.fightforthefuture.org/\" target=\"_blank\">Fight for the Future</a> is leading an internet campaign wherein 14,000+ websites will be blocking access to Congress&#8217; IP addresses, redirecting that traffic to the <a href=\"https://www.blackoutcongress.org/\" target=\"_blank\">blackout protest page</a> where they will see the following message:</p>\n<blockquote><p>You have conducted mass surveillance of everyone illegally and are now on record for trying to enact those programs into law. You have presented Americans with the false dichotomy of reauthorizing the PATRIOT Act or passing the USA Freedom Act. The real answer is to end all authorities used to conduct mass surveillance. Until you do, thousands of web sites have blocked your access, and more are joining every day.</p></blockquote>\n<p>The campaign is coordinated by the <a href=\"https://www.internetdefenseleague.org/\" target=\"_blank\">Internet Defense League</a>, an organization that has been instrumental in <a href=\"http://wptavern.com/join-the-september-10th-internet-slowdown-protest-with-these-wordpress-plugins\" target=\"_blank\">defending net neutrality</a> and protesting the SOPA/PIPA censorship bills.</p>\n<p>Self-hosted WordPress site owners who want to participate in protesting the renewal of the Patriot Act can install the <a href=\"https://wordpress.org/plugins/cat-signal/\" target=\"_blank\">Internet Defense League Cat Signal</a> plugin from WordPress.org. It includes the blackout script as well as a dismissable notice to site visitors, asking them to <a href=\"https://www.sunsetthepatriotact.com/\" target=\"_blank\">urge Congress to sunset the Patriot Act</a>.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/05/cat-signal-modal.jpg\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/05/cat-signal-modal.jpg?resize=749%2C426\" alt=\"cat-signal-modal\" class=\"aligncenter size-full wp-image-44519\" /></a></p>\n<p>The Cat Signal plugin will link your site up to the Internet Defense League&#8217;s online activist group. When an important bill is up for action, it will automatically enqueue the JavaScript required to post a notice on your site. It also includes an options page for selecting the pages where it should be active and for setting the notice as a banner or a modal.</p>\n<p>If sunsetting the Patriot Act is important to you, the Cat Signal plugin is the easiest way to get your WordPress site into the protest. Alternatively, you can <a href=\"https://github.com/fightforthefuture/breakcongressinternet/blob/gh-pages/README.md\" target=\"_blank\">manually add the JavaScript to join the Congress Blackout</a> that will block Congress&#8217; IP addresses.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 20:32:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: o2 Development Team Shifts Focus to WordPress.com’s Core Products\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44505\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"http://wptavern.com/o2-development-team-shifts-focus-to-wordpress-coms-core-products\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3737:\"<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/04/O2SiteHeader.png\"><img class=\"size-full wp-image-20307\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/04/O2SiteHeader.png?resize=682%2C151\" alt=\"O2 Is The Successor To The P2 Theme\" /></a>O2 Is The Successor To The P2 Theme\n<p>Since <a href=\"http://wptavern.com/o2-wordpress-plugin-expected-to-be-available-in-early-2014\">writing about o2</a>, Automattic&#8217;s successor to the P2 theme in 2013, a <a href=\"https://twitter.com/dimensionmedia/status/534522740037148672\">number of readers</a> have requested updates on the project&#8217;s status. When asked about the project in a recent interview, Matt Mullenweg explained that despite loving the project and truly believing in it, work on o2 has shifted to other parts of WordPress.com to focus on the service&#8217;s core products.</p>\n<blockquote><p>Saying no is one of the hardest things but I think that&#8217;s where great design comes from is when you say no to a thousand things, including the things you love, or you really wanted to do. Saying no to the lame stuff is easy, but saying no to something you really believe in like o2 is much harder but that focus is crucial for creating great products.</p></blockquote>\n<p>Although Mullenweg says anyone on WordPress.com can enable o2, this is not the case. Searching for o2 on WordPress.com generates no results while P2 brings up the original P2 theme.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/o2ThemeNotFound.png\"><img class=\"size-full wp-image-44513\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/o2ThemeNotFound.png?resize=921%2C312\" alt=\"o2 Theme Not Found\" /></a>o2 Theme Not Found\n<p>o2 is used internally at Automattic and the code is available via <a href=\"https://wpcom-themes.svn.automattic.com/p2-breathe/\">WordPress.com&#8217;s subversion repository</a>. o2 is not listed since it was supposed to be a plugin but the work inside of o2 is listed under P2 Breathe. While you can download the code, it&#8217;s developed in such a way that it doesn&#8217;t make sense to run it outside of WordPress.com&#8217;s infrastructure.</p>\n<p>Listen to Mullenweg explain why development resources have shifted away from o2 to WordPress.com&#8217;s core products and be sure to check <a href=\"http://wptavern.com/wpweekly-episode-194-celebrating-wordpress-12th-birthday-with-matt-mullenweg\">out the full interview</a>.</p>\n<div class=\"audio-shortcode-wrap\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2014/04/O2SiteHeader.png?resize=175%2C131\" alt=\"O2 Is The Successor To The P2 Theme\" class=\"landscape thumbnail post-thumbnail audio-image\" /><a href=\"http://wptavern.com/wp-content/uploads/2015/05/StatusOfo2Theme.mp3\">http://wptavern.com/wp-content/uploads/2015/05/StatusOfo2Theme.mp3</a></div><div class=\"media-shortcode-extend\"><div class=\"media-info audio-info\"><ul class=\"media-meta\"><li><span class=\"prep\">Run Time</span> <span class=\"data\">2:53</span></li><li><span class=\"prep\">Artist</span> <span class=\"data\">Jeff Chandler and Marcus Couch</span></li><li><span class=\"prep\">Album</span> <span class=\"data\">WordPress Weekly</span></li><li><span class=\"prep\">Track</span> <span class=\"data\">194</span></li><li><span class=\"prep\">File Name</span> <span class=\"data\"><a href=\"http://wptavern.com/wp-content/uploads/2015/05/StatusOfo2Theme.mp3\">StatusOfo2Theme.mp3</a></span></li><li><span class=\"prep\">File Size</span> <span class=\"data\">1.24 MB</span></li><li><span class=\"prep\">File Type</span> <span class=\"data\">MP3</span></li><li><span class=\"prep\">Mime Type</span> <span class=\"data\">audio/mpeg</span></li></ul></div><button class=\"media-info-toggle\">Audio Info</button></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 19:00:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"WPTavern: WordCamp Miami to Livestream Tracks Throughout the Weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44488\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"http://wptavern.com/wordcamp-miami-to-livestream-tracks-throughout-the-weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2189:\"<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wcmia-2015.jpg\"><img src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/02/wcmia-2015.jpg?resize=750%2C349\" alt=\"wcmia-2015\" class=\"aligncenter size-full wp-image-39447\" /></a></p>\n<p><a href=\"http://wptavern.com/wordcamp-miami-2015-to-experiment-with-new-tracks-tickets-selling-out-fast\" target=\"_blank\">WordCamp Miami 2015</a> is taking place this weekend with a BuddyCamp kicking off today. The event sold out again this year and will have roughly 800 attendees, including a kids&#8217; camp, convening at the Florida International University School of Business campus on Saturday and Sunday.</p>\n<p>If you weren&#8217;t able to make it to BuddyCamp, the event is <a href=\"https://miami.wordcamp.org/2015/wcmia-livestream/\" target=\"_blank\">live streaming now</a> and will be throughout the afternoon. A Livestream account is required in order to watch but signup is free and allows you to watch from anywhere in the world.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\">I\'m attending <a href=\"https://twitter.com/hashtag/BuddyCamp?src=hash\">#BuddyCamp</a> Miami although there\'s an ocean between us! Many thanks <a href=\"https://twitter.com/buddycampmia\">@buddycampmia</a> :) &lt;3 <a href=\"http://t.co/gtVmkmf91C\">pic.twitter.com/gtVmkmf91C</a></p>\n<p>&mdash; imath (@imath) <a href=\"https://twitter.com/imath/status/604290006274822145\">May 29, 2015</a></p></blockquote>\n<p></p>\n<p>WordCamp Miami is experimenting with new tracks and mini-workshops this year. The &#8220;How-To&#8221; track, for example, is a new concept for the camp and will include hand-selected speakers presenting with slides that are formatted to be a lasting educational resource for attendees and Livestream viewers.</p>\n<p>The How-To, Content and Design, and Developer tracks will be available via Livestream on Saturday. Sunday&#8217;s live viewing schedule will include Business, Users, and more Developer tracks. The links are likely to change during the event but will be updated on the <a href=\"https://miami.wordcamp.org/2015/wcmia-livestream/\" target=\"_blank\">Livestream</a> page for each track.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 16:49:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Ireland Censorship\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45107\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/05/ireland-censorship/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:992:\"<p>When I spoke in Ireland yesterday someone asked if I would blog about them today. I am, but not the best story: <a href=\"http://www.theguardian.com/media/greenslade/2015/may/29/irelands-media-silenced-over-mps-speech-about-denis-obrien\">Ireland&#8217;s media silenced over MP&#8217;s speech about Denis O&#8217;Brien</a>. Because of an injunction, no media in Ireland can report on alleged corruption, laws I think set up with good intentions (preventing libel?) but being twisted now to prevent the vital functioning of <a href=\"http://en.wikipedia.org/wiki/Fourth_Estate\">the fourth estate</a>. The country showed <a href=\"http://www.nytimes.com/2015/05/24/world/europe/ireland-gay-marriage-referendum.html\">amazing mettle in their Yes vote for gay marriage</a> last week, perhaps censorship could be the next thing the populace tackles. (Also I really enjoyed my visit to Dublin, if you want an amazing meal check out <a href=\"http://forestavenuerestaurant.ie/\">Forest Avenue</a>.)</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 16:00:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: Nametiles Plugin Brings Blockchain-Powered Profiles to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44447\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"http://wptavern.com/nametiles-plugin-brings-blockchain-powered-profiles-to-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4750:\"<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/nametiles.jpg\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/nametiles.jpg?resize=1025%2C495\" alt=\"nametiles\" class=\"aligncenter size-full wp-image-44466\" /></a></p>\n<p><a href=\"https://openname.org/\" target=\"_blank\">Openname</a>, the decentralized identity and naming system built on the blockchain, was recently renamed to Blockchain Name System (BNS). Founders <a href=\"http://muneebali.com\" target=\"_blank\">Muneeb Ali</a> and <a href=\"http://shea.io/\" target=\"_blank\">Ryan Shea</a> are pioneering decentralized identity with the long-term goal of creating decentralized authentication.</p>\n<p>Earlier this month, BNS debuted <a href=\"https://passcard.info/\" target=\"_blank\">Passcard</a>, a digital form of identity and access control combined. It&#8217;s essentially a digital passport, secured by the blockchain, that allows you to control and display your identity.</p>\n<p>A few months ago,  <a href=\"https://www.larrysalibra.com/\" target=\"_blank\">Larry Salibra</a>, founder and CEO of <a href=\"https://www.pay4bugs.com/\" target=\"_blank\">Pay4Bugs</a>, released a <a href=\"http://wptavern.com/new-plugin-adds-openname-avatars-to-wordpress\" target=\"_blank\">plugin that adds Openname avatars to WordPress</a>. An ardent fan of blockchain technology, Salibra has just released another plugin called <a href=\"https://wordpress.org/plugins/nametiles/\" target=\"_blank\">Nametiles</a> that adds Passcard profiles and tagging to WordPress.</p>\n<p>Nametiles works like this: Type the plus character and a person&#8217;s +passname on a post or page and it will automatically display that person&#8217;s Passcard profile information when you hover over the link.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/nametiles-example.jpg\"><img src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/nametiles-example.jpg?resize=920%2C739\" alt=\"nametiles-example\" class=\"aligncenter size-full wp-image-44449\" /></a></p>\n<p>The plugin also includes the ability for registered users on your site to optionally use their Passcard avatar via a setting in wp-admin/profile.php.</p>\n<p>The <a href=\"https://nametiles.co/\" target=\"_blank\">Nametiles</a> site has a live demo of how the tiles appear on your website. You can also see Nametiles in action on the <a href=\"https://www.bitcoinhk.org/\" target=\"_blank\">Bitcoin Association of Hong Kong’s website</a>, where it&#8217;s in use on the <a href=\"https://www.bitcoinhk.org/members/\" target=\"_blank\">members</a> page and <a href=\"https://www.bitcoinhk.org/2015-inside-bitcoins-discount/\" target=\"_blank\">posts</a>.</p>\n<p>Salibra created Nametiles to help publishers keep people&#8217;s information and links continually up-to-date. Its two primary benefits for publishers include:</p>\n<ul>\n<li>Profile information is never stale and always up-to-date (including website, bio, social links, avatar, etc)</li>\n<li>Users control their information and personal brand via Passcard</li>\n</ul>\n<p>&#8220;Publishers have no idea when the people mentioned or linked on their blog update their profile pic, bio, or website and no practical way to find out,&#8221; Salibra said. &#8220;The result is a site littered with broken links and out of date information that conveys sloppiness and apathy to visitors.&#8221;</p>\n<p>This plugin is especially useful for sites that often have guest post authors, as well as news and organization sites that frequently reference names in content.</p>\n<p>&#8220;With Nametiles, profile information about those you mention on your site is always up to date because the information is maintained by those who care most, the owners of the information,&#8221; Salibra said.</p>\n<p>&#8220;I&#8217;m excited for a future where digital identity is something we own instead of something big social companies use to pull visitors from our blogs and websites and track people,&#8221; he said.</p>\n<p>The only catch is that users who are linked have to be registered for a <a href=\"https://passcard.info/\" target=\"_blank\">Passcard</a> profile. The blockchain-powered identity service is free but it is also so new that it hasn&#8217;t yet caught on.</p>\n<p>The idea of Passcard is similar to <a href=\"https://en.gravatar.com/\" target=\"_blank\">Gravatar</a> but has the potential to be more powerful, as it is secured by the blockchain and may eventually support decentralized authentication. If Passcard founders are successful in building the future of identification, it may be a long before the identity system is mainstream enough for the <a href=\"https://wordpress.org/plugins/nametiles/\" target=\"_blank\">Nametiles</a> plugin to be useful beyond certain niche websites.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 00:35:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Matt: Money and Motivation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45104\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://ma.tt/2015/05/money-and-motivation/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:210:\"<p><a href=\"http://intenseminimalism.com/2012/the-misconception-about-money-and-motivation/\">The Misconception about Money and Motivation</a>, a good summary of the work by Dan Pink, Dan Ariely, and others.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 May 2015 00:23:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Sucuri is Building a Comprehensive Alternative to CloudFlare\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44415\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/sucuri-is-building-a-comprehensive-alternative-to-cloudflare\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4812:\"<p><a href=\"https://sucuri.net/\" target=\"_blank\">Sucuri</a> launched a new free performance tool today. The <a href=\"https://performance.sucuri.net/\" target=\"_blank\">Global Website Performance Tester</a> allows anyone to enter a URL and get a quick assessment of how fast the website is loading from 13 globally distributed testing stations. Results include three key metrics: connection time, time to first byte (TTFB) and total load time.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/performance-test.jpg\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/performance-test.jpg?resize=958%2C476\" alt=\"performance-test\" class=\"aligncenter size-full wp-image-44422\" /></a></p>\n<p>At the moment, there are no plans for an API, but Sucuri CEO <a href=\"https://twitter.com/perezbox\" target=\"_blank\">Tony Perez</a> said that it&#8217;s possible to build one if there&#8217;s enough demand.</p>\n<p>The new performance checker is a simple free tool that the Sucuri team built for its own use but also signifies the company&#8217;s foray into performance-related products and services.</p>\n<p>&#8220;Performance can easily fall into the realm of Availability, and as such we see it as an important piece of security,&#8221; Perez told the Tavern. &#8220;There is no denying that performance is top of mind to most website owners, as is security.&#8221;</p>\n<p>Sucuri has been quietly beefing up its architecture to support an expansion into performance-related services that would go hand-in-hand with its <a href=\"https://sucuri.net/website-firewall/\" target=\"_blank\">WAF</a> (Website Firewall) product.</p>\n<p>&#8220;We&#8217;ve been building out our network and performance is a tenant of our Website Firewall,&#8221; Perez said. &#8220;It was imperative that we understood how good or bad our network was compared to the other performance (CDN) providers. Like most things we do, the performance tool was a tool to satisfy our own needs.&#8221;</p>\n<h3>Sucuri Is Expanding to Accommodate Plans for a Full-Featured CloudFlare Alternative</h3>\n<p>Sucuri is currently managing over 40 billion page views per month via its WAF network. The team is working on expanding to a full WAF/CDN solution to serve performance-related features.</p>\n<p>&#8220;The fundamental difference is that it&#8217;s security first, performance second,&#8221; Perez said. &#8220;So yes, in the coming months you&#8217;ll see more as our solution blossoms into a full WAF/CDN solution.&#8221;</p>\n<p>Up until now the company has been limited by using a leased architecture but is making changes to support the WAF/CDN expansion.</p>\n<p>&#8220;We&#8217;re actively migrating from a leased architecture to our own infrastructure, giving us full control of the website,&#8221; Perez said. &#8220;This gives us optimal control to mitigate all attacks, including large scale DDOS attacks; a by-product of that will be performance in the form of a global CDN.&#8221;</p>\n<p>Sucuri is is building its own DNS architecture with full DNS management within its application.</p>\n<p>&#8220;Users will have an alternative to solutions like <a href=\"https://www.cloudflare.com/\" target=\"_blank\">CloudFlare</a>,&#8221; Perez said. &#8220;The fundamental difference being we&#8217;re a security company first.</p>\n<p>Sucuri is building its expansion on top of the an <a href=\"http://en.wikipedia.org/wiki/Anycast\" target=\"_blank\">Anycast</a> network, which means that users&#8217; requests will be routed to the nearest node on request.</p>\n<p>&#8220;With most of the content cached at the edge it&#8217;ll be designed for optimal speeds regardless of where you are in the world,&#8221; Perez said. &#8220;That&#8217;s perhaps the biggest feature &#8211; most everything comes down to our design and configuration and how we handle the traffic.&#8221;</p>\n<p>When asked if he sees the final WAF/CDN solution to be a comprehensive Cloudflare alternative, Perez responded, &#8220;Oh hell yeah &#8211; with one key differentiator: we&#8217;ll clean the mess too.&#8221;</p>\n<p>&#8220;The idea is when you think of Sucuri it&#8217;s a complete package &#8211; Protection &#8211; Detection &#8211; Response. It&#8217;s all built in-house, no third-party integrations,&#8221; he said.</p>\n<p>&#8220;The cleaning is the one thing that no one else can match us on, it&#8217;s either too much liability or they haven&#8217;t figured out how to scale.&#8221;</p>\n<p>Sucuri&#8217;s WAF service is currently used by iThemes, Gravity Forms, List25, and many others in the WordPress space. If the company is able to deliver on their CloudFlare alternative, which is planned for this summer, customers will have the opportunity to get their security services bundled in with the new performance-enhancing features of the CDN.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 28 May 2015 19:23:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"WPTavern: Fast Page Switch Adds a Quick Way to Switch Between Pages in the WordPress Backend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=44405\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://wptavern.com/fast-page-switch-adds-a-quick-way-to-switch-between-pages-in-the-wordpress-backend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1232:\"<p>If you find yourself editing pages often and want a quick way to switch between them without visiting the All Pages screen first, try the <a href=\"https://wordpress.org/plugins/fast-page-switch/\">Fast Page Switch</a> plugin by <a href=\"https://profiles.wordpress.org/marclarr/\">Marc Wiest</a>.</p>\n<p>Fast Page Switch adds a metabox with a drop down menu to the Page editing screen that allows you to quickly switch to a different page. This eliminates the need to visit the All Pages screen and search for the next page you want to edit.</p>\n<p>Fast Page Switch saves time if you have less than 20 pages. If you have more than 20, it could be cumbersome to use and outweigh the time saving benefits.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/FastPageSwitchInAction.png\"><img class=\"size-full wp-image-44406\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/05/FastPageSwitchInAction.png?resize=919%2C403\" alt=\"Fast Page Switch in Action\" /></a>Fast Page Switch in Action\n<p>I tested Fast Page Switch on WordPress 4.2.2 and didn&#8217;t experience any issues. You can <a href=\"https://wordpress.org/plugins/fast-page-switch/\">download it for free</a> from the WordPress plugin directory.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 28 May 2015 05:48:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"WPTavern: WPWeekly Episode 194 – Celebrating WordPress’ 12th Birthday with Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://wptavern.com?p=44397&preview_id=44397\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://wptavern.com/wpweekly-episode-194-celebrating-wordpress-12th-birthday-with-matt-mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1644:\"<p>In this birthday celebration episode of WordPress Weekly, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by Automattic CEO, <a href=\"http://ma.tt/\">Matt Mullenweg</a>. We covered a lot of ground with Mullenweg discussing the following topics:</p>\n<ul>\n<li>Update on <a href=\"http://wptavern.com/o2-wordpress-plugin-expected-to-be-available-in-early-2014\">O2</a> the successor to the <a href=\"http://p2theme.com/\">P2 theme</a></li>\n<li>Memorable moments of the last 12 years</li>\n<li>Update on the <a href=\"https://github.com/WordPress/book\">WordPress history book</a></li>\n<li>Status of WordCamp USA</li>\n<li>The WooThemes/WooCommerce acquisition</li>\n<li>Hype surrounding the WP REST API</li>\n<li>The WordPress Mobile App</li>\n</ul>\n<p>We talked about a number of other topics as well. I apologize for the audio glitches in this episode as Mullenweg experienced bandwidth issues. We also experienced some technical difficulties with Google Hangouts.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, June 3rd 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #194:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 28 May 2015 03:52:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 12 Jun 2015 17:07:35 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:6:\"195017\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Fri, 12 Jun 2015 16:45:33 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(28433,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1434172056','no'),(28434,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1434128856','no'),(28435,'_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109','1434172056','no'),(28436,'_transient_feed_b9388c83948825c1edaef0d856b7b109','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:117:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"WordPress Plugins » View: Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins/browse/popular/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"WordPress Plugins » View: Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Jun 2015 16:45:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:30:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/plugins/akismet/#post-15\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:11:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"15@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"Akismet checks your comments against the Akismet Web service to see if they look like spam or not.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/contact-form-7/#post-2141\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:45:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2141@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Wordfence Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wordfence/#post-29832\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 03:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29832@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:137:\"Wordfence Security is a free enterprise class security and performance plugin that makes your site up to 50 times faster and more secure.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Wordfence\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"WordPress SEO by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://wordpress.org/plugins/wordpress-seo/#post-8321\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 Jan 2009 20:34:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"8321@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:131:\"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using Yoast&#039;s WordPress SEO plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WooCommerce - excelling eCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/woocommerce/#post-29860\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Sep 2011 08:13:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29860@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WooThemes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/all-in-one-seo-pack/#post-753\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 20:08:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"753@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"All in One SEO Pack is a WordPress SEO plugin to automatically optimize your WordPress blog for Search Engines such as Google.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Google Analytics Dashboard for WP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://wordpress.org/plugins/google-analytics-dashboard-for-wp/#post-50539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 10 Mar 2013 17:07:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"50539@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Displays Google Analytics reports and real-time statistics in your WordPress Dashboard. Inserts the latest tracking code in every page of your site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Alin Marcu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/jetpack/#post-23862\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"23862@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Your WordPress, Streamlined.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Tim Moore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wordpress-importer/#post-18101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 17:42:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"18101@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"WPtouch Mobile Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://wordpress.org/plugins/wptouch/#post-5468\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 May 2008 04:58:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"5468@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"Make your WordPress website mobile-friendly with just a few clicks.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"BraveNewCode Inc.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"UpdraftPlus Backup and Restoration\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/updraftplus/#post-38058\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 21 May 2012 15:14:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"38058@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Backup and restoration made easy. Complete backups; manual or scheduled (backup to S3, Dropbox, Google Drive, Rackspace, FTP, SFTP, email + others).\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"David Anderson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Responsive Lightbox by dFactory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/plugins/responsive-lightbox/#post-55352\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 03 Jul 2013 10:58:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"55352@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:141:\"Responsive Lightbox allows users to view larger versions of images and galleries in a lightbox (overlay) effect optimized for mobile devices.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"dFactory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"EWWW Image Optimizer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://wordpress.org/plugins/ewww-image-optimizer/#post-38780\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Jun 2012 19:30:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"38780@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:144:\"Reduce file sizes for images in WordPress including NextGEN, GRAND FlAGallery and more using lossless/lossy methods and image format conversion.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"nosilver4u\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Breadcrumb NavXT\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/breadcrumb-navxt/#post-2634\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 01 Dec 2007 00:15:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2634@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"Adds breadcrumb navigation showing the visitor&#039;s path to their current location.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"John Havlik\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"NextGEN Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/nextgen-gallery/#post-1169\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Apr 2007 20:08:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"1169@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:121:\"The most popular WordPress gallery plugin and one of the most popular plugins of all time with over 12 million downloads.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Alex Rabe\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Advanced Custom Fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/advanced-custom-fields/#post-25254\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 17 Mar 2011 04:07:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"25254@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"Customise WordPress with powerful, professional and intuitive fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"elliotcondon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"MailChimp for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/mailchimp-for-wp/#post-54377\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Jun 2013 17:32:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"54377@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:138:\"The best MailChimp plugin to get more email subscribers. Easily add MailChimp sign-up forms and sign-up checkboxes to your WordPress site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Danny van Kooten\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Photo Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/photo-gallery/#post-63299\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Jan 2014 15:58:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"63299@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:143:\"Photo Gallery is an advanced plugin with a list of tools and options for adding and editing images for different views. It is fully responsive.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"webdorado\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Google Analytics by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/plugins/google-analytics-for-wordpress/#post-2316\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Sep 2007 12:15:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2316@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:124:\"Track your WordPress site easily with the latest tracking codes and lots added data for search result pages and error pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"TinyMCE Advanced\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/tinymce-advanced/#post-2082\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Jun 2007 15:00:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2082@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Enables the advanced features of TinyMCE, the WordPress WYSIWYG editor.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Andrew Ozz\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"BuddyPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/buddypress/#post-10314\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Apr 2009 17:48:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"10314@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:144:\"BuddyPress helps you run any kind of social network on your WordPress, with member profiles, activity streams, user groups, messaging, and more.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Andy Peatling\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Google XML Sitemaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/google-sitemap-generator/#post-132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:31:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"132@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"This plugin will generate a special XML sitemap which will help search engines to better index your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Arne Brachhold\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Super Cache\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/wp-super-cache/#post-2572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Nov 2007 11:40:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2572@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"A very fast caching engine for WordPress that produces static html files.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Donncha O Caoimh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Contact Form DB\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://wordpress.org/plugins/contact-form-7-to-database-extension/#post-19767\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 02 Aug 2010 02:24:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"19767@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"Saves submitted form data to the database. Export the data to a file or use short codes to display it.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Michael Simpson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Captcha by BestWebSoft\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/captcha/#post-26129\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Apr 2011 05:53:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"26129@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"This plugin allows you to implement super security captcha form into web forms.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"bestwebsoft\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Google Maps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/wp-google-maps/#post-34206\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Jan 2012 06:23:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"34206@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:146:\"The easiest to use Google maps plugin! Create a custom Google map with high quality markers containing categories, descriptions, images and links.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"WPGMaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Ninja Forms\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/ninja-forms/#post-33147\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 20 Dec 2011 18:11:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"33147@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:142:\"Forms created with a simple drag and drop interface. Contact forms, Email collection forms, or any other form you want on your WordPress site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"kstover\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Black Studio TinyMCE Widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/plugins/black-studio-tinymce-widget/#post-31973\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 10 Nov 2011 15:06:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"31973@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"The visual editor widget for Wordpress.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Marco Chiesi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Duplicator\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/duplicator/#post-26607\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 May 2011 12:15:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"26607@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Duplicate, clone, backup, move and transfer an entire site from one location to another.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Cory Lamle\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Simple Share Buttons Adder\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/plugins/simple-share-buttons-adder/#post-50271\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Mar 2013 18:55:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"50271@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"A simple plugin that enables you to add share buttons to all of your posts and/or pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"David Neal\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://wordpress.org/plugins/rss/view/popular\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:12:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Fri, 12 Jun 2015 17:07:36 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:7:\"expires\";s:29:\"Fri, 12 Jun 2015 17:20:28 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Fri, 12 Jun 2015 16:45:28 +0000\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";}s:5:\"build\";s:14:\"20140611021551\";}','no'),(28437,'_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109','1434172056','no'),(28438,'_transient_feed_mod_b9388c83948825c1edaef0d856b7b109','1434128856','no'),(28439,'_transient_timeout_plugin_slugs','1434247883','no'),(28440,'_transient_plugin_slugs','a:9:{i:0;s:19:\"akismet/akismet.php\";i:1;s:26:\"custom-field-suite/cfs.php\";i:2;s:32:\"disqus-comment-system/disqus.php\";i:3;s:45:\"enable-media-replace/enable-media-replace.php\";i:4;s:9:\"hello.php\";i:5;s:37:\"post-types-order/post-types-order.php\";i:6;s:39:\"search-everything/search-everything.php\";i:7;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:8;s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";}','no'),(28441,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1434172056','no'),(28442,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2015/05/wordpress-4-2-2/\'>WordPress 4.2.2 Security and Maintenance Release</a> <span class=\"rss-date\">May 7, 2015</span><div class=\"rssSummary\">WordPress 4.2.2 is now available. This is a critical security release for all previous versions and we strongly encourage you to update your sites immediately. Version 4.2.2 addresses two security issues: The Genericons icon font package, which is used in a number of popular themes and plugins, contained an HTML file vulnerable to a cross-site [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/06/paul-ford-what-is-code-bloomberg/\'>Matt: Paul Ford: What is Code? | Bloomberg</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/stackexchange-is-testing-a-proposed-qa-site-for-woocommerce\'>WPTavern: StackExchange is Testing a Proposed Q&amp;A Site for WooCommerce</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/customizer-typography-a-proof-of-concept-plugin-for-wordpress-theme-authors\'>WPTavern: Customizer Typography: A Proof-of-Concept Plugin for WordPress Theme Authors</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\'dashboard-news-plugin\'><span>Popular Plugin:</span> <a href=\'https://wordpress.org/plugins/simple-share-buttons-adder/\' class=\'dashboard-news-plugin-link\'>Simple Share Buttons Adder</a>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=simple-share-buttons-adder&amp;_wpnonce=56dbece6d0&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Simple Share Buttons Adder\'>Install</a>)</span></li></ul></div>','no'),(28518,'_site_transient_update_plugins','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1434161493;s:7:\"checked\";a:9:{s:19:\"akismet/akismet.php\";s:5:\"3.1.1\";s:26:\"custom-field-suite/cfs.php\";s:5:\"2.4.2\";s:32:\"disqus-comment-system/disqus.php\";s:4:\"2.84\";s:45:\"enable-media-replace/enable-media-replace.php\";s:5:\"3.0.3\";s:9:\"hello.php\";s:3:\"1.6\";s:37:\"post-types-order/post-types-order.php\";s:5:\"1.7.7\";s:39:\"search-everything/search-everything.php\";s:5:\"8.1.3\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:6:\"3.1.11\";s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";s:5:\"3.2.3\";}s:8:\"response\";a:3:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:2:\"15\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"3.1.2\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.3.1.2.zip\";}s:26:\"custom-field-suite/cfs.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"26058\";s:4:\"slug\";s:18:\"custom-field-suite\";s:6:\"plugin\";s:26:\"custom-field-suite/cfs.php\";s:11:\"new_version\";s:5:\"2.4.3\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/custom-field-suite/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/custom-field-suite.zip\";}s:37:\"post-types-order/post-types-order.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"17292\";s:4:\"slug\";s:16:\"post-types-order\";s:6:\"plugin\";s:37:\"post-types-order/post-types-order.php\";s:11:\"new_version\";s:5:\"1.7.9\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/post-types-order/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/post-types-order.zip\";}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:6:{s:32:\"disqus-comment-system/disqus.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4500\";s:4:\"slug\";s:21:\"disqus-comment-system\";s:6:\"plugin\";s:32:\"disqus-comment-system/disqus.php\";s:11:\"new_version\";s:4:\"2.84\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/disqus-comment-system/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/disqus-comment-system.zip\";}s:45:\"enable-media-replace/enable-media-replace.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"8351\";s:4:\"slug\";s:20:\"enable-media-replace\";s:6:\"plugin\";s:45:\"enable-media-replace/enable-media-replace.php\";s:11:\"new_version\";s:5:\"3.0.3\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/enable-media-replace/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/enable-media-replace.zip\";}s:9:\"hello.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"3564\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";}s:39:\"search-everything/search-everything.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"269\";s:4:\"slug\";s:17:\"search-everything\";s:6:\"plugin\";s:39:\"search-everything/search-everything.php\";s:11:\"new_version\";s:5:\"8.1.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/search-everything/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/search-everything.8.1.3.zip\";}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:3:\"933\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:6:\"3.1.11\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.zip\";}s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"4884\";s:4:\"slug\";s:24:\"velvet-blues-update-urls\";s:6:\"plugin\";s:53:\"velvet-blues-update-urls/velvet-blues-update-urls.php\";s:11:\"new_version\";s:5:\"3.2.3\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/velvet-blues-update-urls/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/velvet-blues-update-urls.3.2.3.zip\";}}}','yes'),(28558,'_transient_is_multi_author','0','yes'),(28585,'_site_transient_timeout_theme_roots','1434163294','yes'),(28586,'_site_transient_theme_roots','a:1:{s:12:\"the_societea\";s:7:\"/themes\";}','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=15935 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,4,'_edit_last','1'),(3,4,'_wp_page_template','home.php'),(4,4,'_edit_lock','1427820920:1'),(5,6,'_edit_last','1'),(6,6,'_edit_lock','1425046387:1'),(7,6,'_wp_page_template','about.php'),(8,8,'_edit_last','1'),(9,8,'_edit_lock','1402442057:1'),(10,8,'cfs_fields','a:2:{i:0;a:8:{s:2:\"id\";s:1:\"1\";s:4:\"name\";s:12:\"header_image\";s:5:\"label\";s:12:\"Header Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:2:\"16\";s:4:\"name\";s:9:\"post_type\";s:5:\"label\";s:9:\"Post Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(11,8,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:2:{i:0;s:9:\"posts.php\";i:1;s:10:\"skills.php\";}}}'),(12,8,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(13,9,'_wp_attached_file','2014/06/beer-header.jpg'),(14,9,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:400;s:4:\"file\";s:23:\"2014/06/beer-header.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"beer-header-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"beer-header-300x80.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:80;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"beer-header-1024x273.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:273;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(19,13,'_edit_last','2'),(20,13,'_wp_page_template','skills.php'),(21,13,'_edit_lock','1434153875:2'),(24,16,'_edit_last','2'),(25,16,'_wp_page_template','posts.php'),(26,16,'_edit_lock','1429135793:2'),(90,25,'_menu_item_type','post_type'),(91,25,'_menu_item_menu_item_parent','0'),(92,25,'_menu_item_object_id','6'),(93,25,'_menu_item_object','page'),(94,25,'_menu_item_target',''),(95,25,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(96,25,'_menu_item_xfn',''),(97,25,'_menu_item_url',''),(99,26,'_menu_item_type','post_type'),(100,26,'_menu_item_menu_item_parent','0'),(101,26,'_menu_item_object_id','16'),(102,26,'_menu_item_object','page'),(103,26,'_menu_item_target',''),(104,26,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(105,26,'_menu_item_xfn',''),(106,26,'_menu_item_url',''),(108,27,'_menu_item_type','post_type'),(109,27,'_menu_item_menu_item_parent','0'),(110,27,'_menu_item_object_id','13'),(111,27,'_menu_item_object','page'),(112,27,'_menu_item_target',''),(113,27,'_menu_item_classes','a:1:{i:0;s:15:\"nav-call-action\";}'),(114,27,'_menu_item_xfn',''),(115,27,'_menu_item_url',''),(135,30,'_edit_last','1'),(136,30,'_edit_lock','1427902321:2'),(137,30,'_wp_page_template','posts.php'),(138,32,'_menu_item_type','post_type'),(139,32,'_menu_item_menu_item_parent','0'),(140,32,'_menu_item_object_id','30'),(141,32,'_menu_item_object','page'),(142,32,'_menu_item_target',''),(143,32,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(144,32,'_menu_item_xfn',''),(145,32,'_menu_item_url',''),(148,6,'header_image','9'),(149,35,'_wp_attached_file','2014/06/stockvault-atlantic-sunset135250.jpg'),(150,35,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:44:\"2014/06/stockvault-atlantic-sunset135250.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-atlantic-sunset135250-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-atlantic-sunset135250-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:22;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:12:\"Canon EOS 7D\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:2:\"12\";s:3:\"iso\";s:3:\"100\";s:13:\"shutter_speed\";s:3:\"0.5\";s:5:\"title\";s:0:\"\";}}'),(153,37,'_edit_last','1'),(154,37,'_edit_lock','1402367051:1'),(155,37,'cfs_fields','a:10:{i:0;a:8:{s:2:\"id\";s:1:\"7\";s:4:\"name\";s:12:\"project_type\";s:5:\"label\";s:12:\"Project Type\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:1;a:8:{s:2:\"id\";s:1:\"6\";s:4:\"name\";s:9:\"languages\";s:5:\"label\";s:9:\"Languages\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:1:\"8\";s:4:\"name\";s:4:\"role\";s:5:\"label\";s:4:\"Role\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:1:\"9\";s:4:\"name\";s:4:\"link\";s:5:\"label\";s:4:\"Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:4;a:8:{s:2:\"id\";i:10;s:4:\"name\";s:7:\"company\";s:5:\"label\";s:7:\"Company\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";i:11;s:4:\"name\";s:12:\"company_link\";s:5:\"label\";s:12:\"Company Link\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:6;a:8:{s:2:\"id\";s:1:\"2\";s:4:\"name\";s:11:\"screenshots\";s:5:\"label\";s:11:\"Screenshots\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:6;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:22:\"Screenshot - {caption}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:7;a:8:{s:2:\"id\";s:1:\"3\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:7;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:8;a:8:{s:2:\"id\";s:1:\"4\";s:4:\"name\";s:5:\"image\";s:5:\"label\";s:5:\"Image\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:10:\"Real Image\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:8;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:9;a:8:{s:2:\"id\";s:1:\"5\";s:4:\"name\";s:7:\"caption\";s:5:\"label\";s:7:\"Caption\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:2;s:6:\"weight\";i:9;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(156,37,'cfs_rules','a:1:{s:10:\"post_types\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:7:\"project\";}}}'),(157,37,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(158,38,'_edit_last','1'),(159,38,'_edit_lock','1408399762:1'),(160,39,'_wp_attached_file','2014/06/th-77nrg.png'),(161,39,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:20:\"2014/06/th-77nrg.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-77nrg-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-77nrg-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(162,40,'_wp_attached_file','2014/06/th-baton.png'),(163,40,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:20:\"2014/06/th-baton.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-baton-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-baton-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(164,41,'_wp_attached_file','2014/06/th-carnegie-chart.png'),(165,41,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:451;s:4:\"file\";s:29:\"2014/06/th-carnegie-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-carnegie-chart-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(166,42,'_wp_attached_file','2014/06/th-enviro.png'),(167,42,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:21:\"2014/06/th-enviro.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-enviro-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-enviro-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(168,43,'_wp_attached_file','2014/06/th-soundingboard.png'),(169,43,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:447;s:4:\"file\";s:28:\"2014/06/th-soundingboard.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-soundingboard-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(170,44,'_wp_attached_file','2014/06/th-tea-chart.png'),(171,44,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:448;s:4:\"file\";s:24:\"2014/06/th-tea-chart.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"th-tea-chart-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(172,45,'_wp_attached_file','2014/06/th-tea-timers.png'),(173,45,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:451;s:6:\"height\";i:449;s:4:\"file\";s:25:\"2014/06/th-tea-timers.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"th-tea-timers-300x298.png\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(174,46,'_wp_attached_file','2014/06/th-tle.png'),(175,46,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:452;s:4:\"file\";s:18:\"2014/06/th-tle.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"th-tle-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-tle-298x300.png\";s:5:\"width\";i:298;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(200,47,'_wp_attached_file','2014/06/big-77-1.jpg'),(201,47,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:663;s:4:\"file\";s:20:\"2014/06/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x565.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:565;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(202,48,'_wp_attached_file','2014/06/big-77-2.jpg'),(203,48,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-2-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(204,49,'_wp_attached_file','2014/06/big-77-3.jpg'),(205,49,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:662;s:4:\"file\";s:20:\"2014/06/big-77-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-3-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(206,50,'_wp_attached_file','2014/06/big-77-4.jpg'),(207,50,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:664;s:4:\"file\";s:20:\"2014/06/big-77-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-4-300x166.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:166;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-4-1024x566.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:566;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(208,51,'_wp_attached_file','2014/06/big-tle-1.jpg'),(209,51,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:21:\"2014/06/big-tle-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(210,52,'_wp_attached_file','2014/06/big-tle-2.jpg'),(211,52,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:21:\"2014/06/big-tle-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(212,53,'_wp_attached_file','2014/06/big-tle-3.jpg'),(213,53,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-3-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(214,54,'_wp_attached_file','2014/06/big-tle-4.jpg'),(215,54,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:756;s:4:\"file\";s:21:\"2014/06/big-tle-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"big-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"big-tle-4-1024x645.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:645;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(216,55,'_wp_attached_file','2014/06/th-77-1.jpg'),(217,55,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(218,56,'_wp_attached_file','2014/06/th-77-2.jpg'),(219,56,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-2-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(220,57,'_wp_attached_file','2014/06/th-77-3.jpg'),(221,57,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-3-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(222,58,'_wp_attached_file','2014/06/th-77-4.jpg'),(223,58,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:221;s:4:\"file\";s:19:\"2014/06/th-77-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(226,60,'_wp_attached_file','2014/06/th-tle-2.jpg'),(227,60,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(228,61,'_wp_attached_file','2014/06/th-tle-3.jpg'),(229,61,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(230,62,'_wp_attached_file','2014/06/th-tle-4.jpg'),(231,62,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:20:\"2014/06/th-tle-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-4-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(244,63,'_edit_last','1'),(245,63,'_edit_lock','1408399696:1'),(403,64,'_edit_last','1'),(404,64,'_edit_lock','1408399706:1'),(429,65,'_edit_last','1'),(430,65,'_edit_lock','1412544297:1'),(437,66,'_edit_last','1'),(438,66,'_edit_lock','1424874413:1'),(445,67,'_edit_last','1'),(446,67,'_edit_lock','1424874453:1'),(465,68,'_edit_last','1'),(466,68,'_edit_lock','1408399747:1'),(497,72,'_wp_attached_file','2014/06/big-77-responsive.jpg'),(498,72,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:1372;s:4:\"file\";s:29:\"2014/06/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-168x300.jpg\";s:5:\"width\";i:168;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-574x1024.jpg\";s:5:\"width\";i:574;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(499,73,'_wp_attached_file','2014/06/big-es-responsive.jpg'),(500,73,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:628;s:4:\"file\";s:29:\"2014/06/big-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(501,74,'_wp_attached_file','2014/06/th-77-responsive.jpg'),(502,74,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/06/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(523,76,'_wp_attached_file','2014/06/big-tle-responsive.jpg'),(524,76,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:763;s:6:\"height\";i:1200;s:4:\"file\";s:30:\"2014/06/big-tle-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"big-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"big-tle-responsive-651x1024.jpg\";s:5:\"width\";i:651;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(545,78,'_wp_attached_file','2014/06/big-bt-1.jpg'),(546,78,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-1-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(547,79,'_wp_attached_file','2014/06/big-bt-2.jpg'),(548,79,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:860;s:4:\"file\";s:20:\"2014/06/big-bt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-2-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(549,80,'_wp_attached_file','2014/06/big-bt-3.jpg'),(550,80,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-bt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-3-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-3-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(551,81,'_wp_attached_file','2014/06/big-bt-4.jpg'),(552,81,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:661;s:4:\"file\";s:20:\"2014/06/big-bt-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-bt-4-1024x564.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:564;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(553,82,'_wp_attached_file','2014/06/big-cc-1.jpg'),(554,82,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-1-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-1-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(555,83,'_wp_attached_file','2014/06/big-cc-2.jpg'),(556,83,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:887;s:4:\"file\";s:20:\"2014/06/big-cc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-2-300x221.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:221;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-2-1024x756.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:756;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(557,84,'_wp_attached_file','2014/06/big-cc-3.jpg'),(558,84,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:889;s:4:\"file\";s:20:\"2014/06/big-cc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-cc-3-1024x758.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:758;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(559,85,'_wp_attached_file','2014/06/big-cc-responsive.jpg'),(560,85,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:534;s:6:\"height\";i:1000;s:4:\"file\";s:29:\"2014/06/big-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(561,86,'_wp_attached_file','2014/06/big-es-1.jpg'),(562,86,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:865;s:4:\"file\";s:20:\"2014/06/big-es-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-1-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(563,87,'_wp_attached_file','2014/06/big-es-2.jpg'),(564,87,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-2-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(565,88,'_wp_attached_file','2014/06/big-es-3.jpg'),(566,88,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:866;s:4:\"file\";s:20:\"2014/06/big-es-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-es-3-1024x738.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:738;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(567,89,'_wp_attached_file','2014/06/th-baton1.png'),(568,89,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:450;s:4:\"file\";s:21:\"2014/06/th-baton1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-baton1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-baton1-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(569,90,'_wp_attached_file','2014/06/th-bt-1.jpg'),(570,90,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(571,91,'_wp_attached_file','2014/06/th-bt-2.jpg'),(572,91,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:287;s:4:\"file\";s:19:\"2014/06/th-bt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-2-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(573,92,'_wp_attached_file','2014/06/th-bt-3.jpg'),(574,92,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-bt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(575,93,'_wp_attached_file','2014/06/th-bt-4.jpg'),(576,93,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:220;s:4:\"file\";s:19:\"2014/06/th-bt-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-bt-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-bt-4-300x165.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(577,94,'_wp_attached_file','2014/06/th-cc-1.jpg'),(578,94,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-1-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(579,95,'_wp_attached_file','2014/06/th-cc-2.jpg'),(580,95,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-2-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(581,96,'_wp_attached_file','2014/06/th-cc-3.jpg'),(582,96,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:296;s:4:\"file\";s:19:\"2014/06/th-cc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-cc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-cc-3-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(585,98,'_wp_attached_file','2014/06/th-es-1.jpg'),(586,98,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-es-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(587,99,'_wp_attached_file','2014/06/th-es-2.jpg'),(588,99,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-2-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(589,100,'_wp_attached_file','2014/06/th-es-3.jpg'),(590,100,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:289;s:4:\"file\";s:19:\"2014/06/th-es-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-es-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-es-3-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(663,101,'_wp_attached_file','2014/06/big-kk-1.jpg'),(664,101,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:863;s:4:\"file\";s:20:\"2014/06/big-kk-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-1-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-1-1024x736.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:736;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(665,102,'_wp_attached_file','2014/06/big-kk-2.jpg'),(666,102,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:759;s:4:\"file\";s:20:\"2014/06/big-kk-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-2-1024x647.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:647;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(667,103,'_wp_attached_file','2014/06/big-kk-3.jpg'),(668,103,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:353;s:4:\"file\";s:20:\"2014/06/big-kk-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"big-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-3-1024x301.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:301;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(669,104,'_wp_attached_file','2014/06/big-kk-4.jpg'),(670,104,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:483;s:4:\"file\";s:20:\"2014/06/big-kk-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-kk-4-1024x412.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:412;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(671,105,'_wp_attached_file','2014/06/big-mc-1.jpg'),(672,105,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:545;s:4:\"file\";s:20:\"2014/06/big-mc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-1-1024x465.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:465;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(673,106,'_wp_attached_file','2014/06/big-mc-2.jpg'),(674,106,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:443;s:4:\"file\";s:20:\"2014/06/big-mc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-mc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-mc-2-300x110.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-mc-2-1024x378.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:378;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(675,107,'_wp_attached_file','2014/06/big-sb-1.jpg'),(676,107,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-sb-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(677,108,'_wp_attached_file','2014/06/big-sb-2.jpg'),(678,108,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:764;s:4:\"file\";s:20:\"2014/06/big-sb-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-2-1024x651.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:651;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(679,109,'_wp_attached_file','2014/06/big-sb-3.jpg'),(680,109,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:762;s:4:\"file\";s:20:\"2014/06/big-sb-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-sb-3-1024x650.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:650;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(681,110,'_wp_attached_file','2014/06/big-tc-1.jpg'),(682,110,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:823;s:4:\"file\";s:20:\"2014/06/big-tc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-1-1024x702.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:702;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(683,111,'_wp_attached_file','2014/06/big-tc-2.jpg'),(684,111,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:819;s:4:\"file\";s:20:\"2014/06/big-tc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-2-1024x698.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:698;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(685,112,'_wp_attached_file','2014/06/big-tc-3.jpg'),(686,112,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:822;s:4:\"file\";s:20:\"2014/06/big-tc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tc-3-1024x701.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:701;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(687,113,'_wp_attached_file','2014/06/big-tc-responsive.jpg'),(688,113,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1090;s:6:\"height\";i:1484;s:4:\"file\";s:29:\"2014/06/big-tc-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tc-responsive-752x1024.jpg\";s:5:\"width\";i:752;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(689,114,'_wp_attached_file','2014/06/big-tt-1.jpg'),(690,114,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:760;s:4:\"file\";s:20:\"2014/06/big-tt-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-1-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-1-1024x648.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:648;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(691,115,'_wp_attached_file','2014/06/big-tt-2.jpg'),(692,115,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:758;s:4:\"file\";s:20:\"2014/06/big-tt-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-2-1024x646.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:646;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(693,116,'_wp_attached_file','2014/06/big-tt-3.jpg'),(694,116,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:755;s:4:\"file\";s:20:\"2014/06/big-tt-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-tt-3-300x188.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-tt-3-1024x644.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:644;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(695,117,'_wp_attached_file','2014/06/big-tt-responsive.jpg'),(696,117,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:790;s:6:\"height\";i:1478;s:4:\"file\";s:29:\"2014/06/big-tt-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-tt-responsive-547x1024.jpg\";s:5:\"width\";i:547;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(697,118,'_wp_attached_file','2014/06/th-kk-1.jpg'),(698,118,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:288;s:4:\"file\";s:19:\"2014/06/th-kk-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-1-300x216.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(699,119,'_wp_attached_file','2014/06/th-kk-2.jpg'),(700,119,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-kk-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(701,120,'_wp_attached_file','2014/06/th-kk-3.jpg'),(702,120,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:118;s:4:\"file\";s:19:\"2014/06/th-kk-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-3-150x118.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:118;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"th-kk-3-300x88.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(703,121,'_wp_attached_file','2014/06/th-kk-4.jpg'),(704,121,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:161;s:4:\"file\";s:19:\"2014/06/th-kk-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-kk-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-kk-4-300x120.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(705,122,'_wp_attached_file','2014/06/th-mc-1.jpg'),(706,122,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:182;s:4:\"file\";s:19:\"2014/06/th-mc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-1-300x136.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(707,123,'_wp_attached_file','2014/06/th-mc-2.jpg'),(708,123,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:148;s:4:\"file\";s:19:\"2014/06/th-mc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-mc-2-150x148.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:148;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-mc-2-300x111.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(709,124,'_wp_attached_file','2014/06/th-sb-1.jpg'),(710,124,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-sb-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(711,125,'_wp_attached_file','2014/06/th-sb-2.jpg'),(712,125,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:255;s:4:\"file\";s:19:\"2014/06/th-sb-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-2-300x191.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(713,126,'_wp_attached_file','2014/06/th-sb-3.jpg'),(714,126,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:254;s:4:\"file\";s:19:\"2014/06/th-sb-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-sb-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-sb-3-300x190.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(715,127,'_wp_attached_file','2014/06/th-tc-1.jpg'),(716,127,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(717,128,'_wp_attached_file','2014/06/th-tc-2.jpg'),(718,128,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:273;s:4:\"file\";s:19:\"2014/06/th-tc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-2-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(719,129,'_wp_attached_file','2014/06/th-tc-3.jpg'),(720,129,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:274;s:4:\"file\";s:19:\"2014/06/th-tc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tc-3-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(721,130,'_wp_attached_file','2014/06/th-tc-responsive.jpg'),(722,130,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:545;s:4:\"file\";s:28:\"2014/06/th-tc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tc-responsive-220x300.jpg\";s:5:\"width\";i:220;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(723,131,'_wp_attached_file','2014/06/th-tt-1.jpg'),(724,131,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(725,132,'_wp_attached_file','2014/06/th-tt-2.jpg'),(726,132,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:19:\"2014/06/th-tt-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-2-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(727,133,'_wp_attached_file','2014/06/th-tt-3.jpg'),(728,133,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:252;s:4:\"file\";s:19:\"2014/06/th-tt-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-tt-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-tt-3-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(729,134,'_wp_attached_file','2014/06/th-tt-responsive.jpg'),(730,134,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:748;s:4:\"file\";s:28:\"2014/06/th-tt-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-tt-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(839,135,'_wp_attached_file','2014/06/th-cc-responsive.jpg'),(840,135,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:655;s:4:\"file\";s:28:\"2014/06/th-cc-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-cc-responsive-160x300.jpg\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(841,136,'_wp_attached_file','2014/06/th-es-responsive.jpg'),(842,136,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:549;s:4:\"file\";s:28:\"2014/06/th-es-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-es-responsive-191x300.jpg\";s:5:\"width\";i:191;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(843,137,'_wp_attached_file','2014/06/th-tle-1.jpg'),(844,137,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:253;s:4:\"file\";s:20:\"2014/06/th-tle-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"th-tle-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-tle-1-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(845,138,'_wp_attached_file','2014/06/th-tle-responsive.jpg'),(846,138,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:550;s:4:\"file\";s:29:\"2014/06/th-tle-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"th-tle-responsive-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(901,139,'_edit_last','1'),(902,139,'_edit_lock','1402276997:1'),(903,139,'cfs_fields','a:4:{i:0;a:8:{s:2:\"id\";s:2:\"12\";s:4:\"name\";s:8:\"projects\";s:5:\"label\";s:8:\"Projects\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:17:\"Project - {label}\";s:12:\"button_label\";s:7:\"Add Row\";}}i:1;a:8:{s:2:\"id\";s:2:\"13\";s:4:\"name\";s:9:\"thumbnail\";s:5:\"label\";s:9:\"Thumbnail\";s:4:\"type\";s:4:\"file\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:12:\"return_value\";s:3:\"url\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"14\";s:4:\"name\";s:5:\"label\";s:5:\"label\";s:5:\"Label\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:2;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"15\";s:4:\"name\";s:3:\"url\";s:5:\"label\";s:3:\"URL\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:12;s:6:\"weight\";i:3;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(904,139,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:8:\"home.php\";}}}'),(905,139,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(936,140,'_wp_attached_file','2014/06/stockvault-dramatic-landscape106482.jpg'),(937,140,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1000;s:4:\"file\";s:47:\"2014/06/stockvault-dramatic-landscape106482.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:47:\"stockvault-dramatic-landscape106482-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:48:\"stockvault-dramatic-landscape106482-1024x682.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:682;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:4.9000000000000004;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:5:\"E5600\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"5.69\";s:3:\"iso\";s:2:\"50\";s:13:\"shutter_speed\";s:18:\"0.0022805017103763\";s:5:\"title\";s:0:\"\";}}'),(940,141,'_wp_attached_file','2014/06/stockvault-path-in-nature124348.jpg'),(941,141,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:43:\"2014/06/stockvault-path-in-nature124348.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:43:\"stockvault-path-in-nature124348-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:44:\"stockvault-path-in-nature124348-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(946,142,'_edit_last','1'),(947,142,'_edit_lock','1427902204:1'),(956,145,'_wp_attached_file','2014/06/stockvault-cabot-trail-hdr133670.jpg'),(957,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:800;s:4:\"file\";s:44:\"2014/06/stockvault-cabot-trail-hdr133670.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"stockvault-cabot-trail-hdr133670-300x160.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:45:\"stockvault-cabot-trail-hdr133670-1024x546.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:546;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(966,150,'_edit_last','1'),(967,150,'_edit_lock','1402369491:1'),(968,150,'cfs_fields','a:6:{i:0;a:8:{s:2:\"id\";s:2:\"17\";s:4:\"name\";s:10:\"categories\";s:5:\"label\";s:10:\"Categories\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:0;s:6:\"weight\";i:0;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:24:\"Skill - {category_title}\";s:12:\"button_label\";s:12:\"Add Category\";}}i:1;a:8:{s:2:\"id\";s:2:\"18\";s:4:\"name\";s:14:\"category_title\";s:5:\"label\";s:14:\"Category Title\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:1;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:2;a:8:{s:2:\"id\";s:2:\"22\";s:4:\"name\";s:5:\"color\";s:5:\"label\";s:5:\"Color\";s:4:\"type\";s:5:\"color\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:2;s:7:\"options\";a:1:{s:8:\"required\";s:1:\"0\";}}i:3;a:8:{s:2:\"id\";s:2:\"19\";s:4:\"name\";s:6:\"skills\";s:5:\"label\";s:6:\"Skills\";s:4:\"type\";s:4:\"loop\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:17;s:6:\"weight\";i:3;s:7:\"options\";a:3:{s:11:\"row_display\";s:1:\"0\";s:9:\"row_label\";s:31:\"Skill - {skill} - {percentage}%\";s:12:\"button_label\";s:9:\"Add Skill\";}}i:4;a:8:{s:2:\"id\";s:2:\"20\";s:4:\"name\";s:5:\"skill\";s:5:\"label\";s:5:\"Skill\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:4;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}i:5;a:8:{s:2:\"id\";s:2:\"21\";s:4:\"name\";s:10:\"percentage\";s:5:\"label\";s:10:\"Percentage\";s:4:\"type\";s:4:\"text\";s:5:\"notes\";s:0:\"\";s:9:\"parent_id\";i:19;s:6:\"weight\";i:5;s:7:\"options\";a:2:{s:13:\"default_value\";s:0:\"\";s:8:\"required\";s:1:\"0\";}}}'),(969,150,'cfs_rules','a:1:{s:14:\"page_templates\";a:2:{s:8:\"operator\";s:2:\"==\";s:6:\"values\";a:1:{i:0;s:10:\"skills.php\";}}}'),(970,150,'cfs_extras','a:3:{s:5:\"order\";s:1:\"0\";s:7:\"context\";s:6:\"normal\";s:11:\"hide_editor\";s:1:\"0\";}'),(1271,151,'_menu_item_type','custom'),(1272,151,'_menu_item_menu_item_parent','0'),(1273,151,'_menu_item_object_id','151'),(1274,151,'_menu_item_object','custom'),(1275,151,'_menu_item_target',''),(1276,151,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1277,151,'_menu_item_xfn',''),(1278,151,'_menu_item_url','https://thesocietea.org/resume'),(1821,154,'_edit_last','1'),(1822,154,'_edit_lock','1424875012:1'),(1957,158,'_edit_last','1'),(1958,158,'_edit_lock','1403184805:1'),(1963,167,'_edit_last','1'),(1964,167,'_edit_lock','1404151981:1'),(2385,172,'_edit_last','1'),(2386,172,'_edit_lock','1409793896:1'),(2387,172,'_syntaxhighlighter_encoded','1'),(2774,74,'_edit_lock','1405377184:1'),(2775,206,'_wp_attached_file','2014/07/big-json-1.jpg'),(2776,206,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:720;s:6:\"height\";i:276;s:4:\"file\";s:22:\"2014/07/big-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-1-300x115.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2777,207,'_wp_attached_file','2014/07/big-json-2.jpg'),(2778,207,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:870;s:6:\"height\";i:212;s:4:\"file\";s:22:\"2014/07/big-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2779,208,'_wp_attached_file','2014/07/big-json-3.jpg'),(2780,208,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:334;s:4:\"file\";s:22:\"2014/07/big-json-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"big-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-json-3-1024x285.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:285;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2781,209,'_wp_attached_file','2014/07/big-json-4.jpg'),(2782,209,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:770;s:6:\"height\";i:808;s:4:\"file\";s:22:\"2014/07/big-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2783,210,'_wp_attached_file','2014/07/th-json-1.jpg'),(2784,210,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:153;s:4:\"file\";s:21:\"2014/07/th-json-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-1-300x114.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:114;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2785,211,'_wp_attached_file','2014/07/th-json-2.jpg'),(2786,211,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:657;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-2-300x73.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2787,212,'_wp_attached_file','2014/07/th-json-3.jpg'),(2788,212,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:575;s:6:\"height\";i:160;s:4:\"file\";s:21:\"2014/07/th-json-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"th-json-3-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2789,213,'_wp_attached_file','2014/07/th-json-4.jpg'),(2790,213,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:420;s:4:\"file\";s:21:\"2014/07/th-json-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-json-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-json-4-285x300.jpg\";s:5:\"width\";i:285;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2791,214,'_edit_last','1'),(2792,214,'_edit_lock','1408399735:1'),(2811,215,'_wp_attached_file','2014/07/big-77-1.jpg'),(2812,215,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:686;s:4:\"file\";s:20:\"2014/07/big-77-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"big-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"big-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"big-77-1-1024x585.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:585;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2813,216,'_wp_attached_file','2014/07/big-77-responsive.jpg'),(2814,216,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:794;s:6:\"height\";i:1288;s:4:\"file\";s:29:\"2014/07/big-77-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"big-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"big-77-responsive-631x1024.jpg\";s:5:\"width\";i:631;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2815,217,'_wp_attached_file','2014/07/th-77-1.jpg'),(2816,217,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:229;s:4:\"file\";s:19:\"2014/07/th-77-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"th-77-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"th-77-1-300x171.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2817,218,'_wp_attached_file','2014/07/th-77-responsive.jpg'),(2818,218,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:649;s:4:\"file\";s:28:\"2014/07/th-77-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"th-77-responsive-184x300.jpg\";s:5:\"width\";i:184;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2861,220,'_edit_last','1'),(2862,220,'_edit_lock','1426913109:1'),(2863,220,'_syntaxhighlighter_encoded','1'),(2864,226,'_wp_attached_file','2014/07/vim_tutor.jpg'),(2865,226,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:393;s:4:\"file\";s:21:\"2014/07/vim_tutor.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"vim_tutor-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"vim_tutor-300x235.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:235;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2872,233,'_edit_last','1'),(2873,233,'_edit_lock','1424874874:1'),(2874,233,'_syntaxhighlighter_encoded','1'),(2878,233,'dsq_thread_id','2929367235'),(2881,172,'dsq_thread_id','2929382650'),(2893,220,'dsq_thread_id','2932682347'),(2894,154,'dsq_thread_id','2932682419'),(2903,167,'dsq_thread_id','2933729832'),(2904,158,'dsq_thread_id','2933729884'),(2907,142,'dsq_thread_id','2933750176'),(2911,73,'_edit_lock','1408301920:1'),(2988,252,'_edit_last','1'),(2989,252,'_edit_lock','1408399686:1'),(2996,253,'_wp_attached_file','2014/08/big-odoc-1.jpg'),(2997,253,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:692;s:4:\"file\";s:22:\"2014/08/big-odoc-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-1-1024x590.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:590;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(2998,254,'_wp_attached_file','2014/08/big-odoc-2.jpg'),(2999,254,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:691;s:4:\"file\";s:22:\"2014/08/big-odoc-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-2-1024x589.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:589;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3000,255,'_wp_attached_file','2014/08/big-odoc-3.jpg'),(3001,255,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:693;s:4:\"file\";s:22:\"2014/08/big-odoc-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-3-1024x591.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:591;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3002,256,'_wp_attached_file','2014/08/big-odoc-4.jpg'),(3003,256,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:1047;s:4:\"file\";s:22:\"2014/08/big-odoc-4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-odoc-4-586x1024.jpg\";s:5:\"width\";i:586;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3004,257,'_wp_attached_file','2014/08/th-odoc-1.jpg'),(3005,257,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3006,258,'_wp_attached_file','2014/08/th-odoc-2.jpg'),(3007,258,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:230;s:4:\"file\";s:21:\"2014/08/th-odoc-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-2-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3008,259,'_wp_attached_file','2014/08/th-odoc-3.jpg'),(3009,259,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:231;s:4:\"file\";s:21:\"2014/08/th-odoc-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-3-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3010,260,'_wp_attached_file','2014/08/th-odoc-4.jpg'),(3011,260,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:524;s:4:\"file\";s:21:\"2014/08/th-odoc-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-odoc-4-171x300.jpg\";s:5:\"width\";i:171;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(3048,252,'project_type','Web Site'),(3049,252,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3050,252,'role','Full-Stack Developer'),(3051,252,'link','http://new.okcommerce.gov/'),(3052,252,'company','Staplegun'),(3053,252,'company_link','http://staplegun.us/'),(3054,252,'thumbnail','257'),(3055,252,'image','253'),(3056,252,'caption','Home Page'),(3057,252,'thumbnail','258'),(3058,252,'image','254'),(3059,252,'caption','Subpage'),(3060,252,'thumbnail','259'),(3061,252,'image','255'),(3062,252,'caption','Popup Form'),(3063,252,'thumbnail','260'),(3064,252,'image','256'),(3065,252,'caption','Responsive Design'),(3066,63,'project_type','Web Site'),(3067,63,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3068,63,'role','Full-Stack Developer'),(3069,63,'link','http://77nrg.staplegun.us/'),(3070,63,'company','Staplegun'),(3071,63,'company_link','http://staplegun.us/'),(3072,63,'thumbnail','217'),(3073,63,'image','215'),(3074,63,'caption','Home Page Top (Video Background)'),(3075,63,'thumbnail','56'),(3076,63,'image','48'),(3077,63,'caption','Home Page Bottom (Parallax Background)'),(3078,63,'thumbnail','57'),(3079,63,'image','49'),(3080,63,'caption','Subpage'),(3081,63,'thumbnail','218'),(3082,63,'image','216'),(3083,63,'caption','Responsive Design'),(3084,64,'project_type','Web Site'),(3085,64,'languages','HTML5, Sass, Javascript, PHP (Wordpress)'),(3086,64,'role','Full-Stack Developer'),(3087,64,'link','http://www.enviro-ok.com/'),(3088,64,'company','Staplegun'),(3089,64,'company_link','http://staplegun.us/'),(3090,64,'thumbnail','98'),(3091,64,'image','86'),(3092,64,'caption','Home Page'),(3093,64,'thumbnail','99'),(3094,64,'image','87'),(3095,64,'caption','Subpage with Interactive 3D Images'),(3096,64,'thumbnail','100'),(3097,64,'image','88'),(3098,64,'caption','Subpage with Multiple Job Openings'),(3099,64,'thumbnail','136'),(3100,64,'image','73'),(3101,64,'caption','Responsive Design'),(3120,214,'project_type','Web Application'),(3121,214,'languages','Node.js, Faye.js'),(3122,214,'role','Back-End Developer'),(3123,214,'link','https://github.com/Staplegun-US/json-api-websocket-wrapper'),(3124,214,'company','Staplegun'),(3125,214,'company_link','http://staplegun.us/'),(3126,214,'thumbnail','213'),(3127,214,'image','209'),(3128,214,'caption','Example Stock Ticker Using JSON API Websocket Wrapper'),(3129,214,'thumbnail','212'),(3130,214,'image','208'),(3131,214,'caption','HTML Interface'),(3132,214,'thumbnail','210'),(3133,214,'image','206'),(3134,214,'caption','Server Logs'),(3135,214,'thumbnail','211'),(3136,214,'image','207'),(3137,214,'caption','Sample Config File'),(3138,68,'project_type','Ruby Gem'),(3139,68,'languages','Ruby'),(3140,68,'role','Back-End Developer'),(3141,68,'link','https://github.com/brightbit/markdown_checkboxes'),(3142,68,'company','Brightbit'),(3143,68,'company_link','http://brightbit.com/'),(3144,68,'thumbnail','123'),(3145,68,'image','106'),(3146,68,'caption','Rendering Markdown Checkboxes'),(3147,68,'thumbnail','122'),(3148,68,'image','105'),(3149,68,'caption','Editing Markdown Checkboxes Text'),(3150,38,'project_type','Web Site'),(3151,38,'languages','HTML5, Sass, Javascript, PHP (ModX)'),(3152,38,'role','Full-Stack Developer'),(3153,38,'link','http://totalenvironmentinc.com/'),(3154,38,'company','Staplegun'),(3155,38,'company_link','http://staplegun.us/'),(3156,38,'thumbnail','137'),(3157,38,'image','51'),(3158,38,'caption','Home Page'),(3159,38,'thumbnail','61'),(3160,38,'image','53'),(3161,38,'caption','Contact Page'),(3162,38,'thumbnail','62'),(3163,38,'image','54'),(3164,38,'caption','Sub Page with Lightbox'),(3165,38,'thumbnail','138'),(3166,38,'image','76'),(3167,38,'caption','Responsive Design'),(3336,261,'_edit_last','1'),(3337,261,'_edit_lock','1424879340:1'),(3338,261,'_syntaxhighlighter_encoded','1'),(3351,261,'dsq_thread_id','2953640271'),(3363,282,'_edit_last','1'),(3364,282,'_edit_lock','1410983185:1'),(3365,282,'_syntaxhighlighter_encoded','1'),(3367,282,'dsq_thread_id','2966714576'),(3934,301,'_edit_last','1'),(3935,301,'_edit_lock','1412391546:1'),(4265,305,'_edit_last','1'),(4266,305,'_edit_lock','1409866484:1'),(4269,305,'_syntaxhighlighter_encoded','1'),(4359,305,'dsq_thread_id','2986163533'),(4869,301,'dsq_thread_id','3081164551'),(5183,335,'_menu_item_type','custom'),(5184,335,'_menu_item_menu_item_parent','0'),(5185,335,'_menu_item_object_id','335'),(5186,335,'_menu_item_object','custom'),(5187,335,'_menu_item_target',''),(5188,335,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(5189,335,'_menu_item_xfn',''),(5190,335,'_menu_item_url','http://labs.thesocietea.org'),(5343,336,'_edit_last','1'),(5344,336,'_edit_lock','1412543328:1'),(5345,337,'_wp_attached_file','2014/10/big-onie-1.jpg'),(5346,337,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:780;s:4:\"file\";s:22:\"2014/10/big-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5347,338,'_wp_attached_file','2014/10/big-onie-2.jpg'),(5348,338,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:776;s:4:\"file\";s:22:\"2014/10/big-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5349,339,'_wp_attached_file','2014/10/big-onie-3.jpg'),(5350,339,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:782;s:4:\"file\";s:22:\"2014/10/big-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5351,340,'_wp_attached_file','2014/10/big-onie-responsive.jpg'),(5352,340,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:700;s:6:\"height\";i:1081;s:4:\"file\";s:31:\"2014/10/big-onie-responsive.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"big-onie-responsive-194x300.jpg\";s:5:\"width\";i:194;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"big-onie-responsive-663x1024.jpg\";s:5:\"width\";i:663;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5353,341,'_wp_attached_file','2014/10/th-onie-1.jpg'),(5354,341,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:351;s:4:\"file\";s:21:\"2014/10/th-onie-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-1-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5355,342,'_wp_attached_file','2014/10/th-onie-2.jpg'),(5356,342,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:349;s:4:\"file\";s:21:\"2014/10/th-onie-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-2-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5357,343,'_wp_attached_file','2014/10/th-onie-3.jpg'),(5358,343,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2014/10/th-onie-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-onie-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-onie-3-300x234.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5359,344,'_wp_attached_file','2014/10/th-onie-responsive.jpg'),(5360,344,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:438;s:4:\"file\";s:30:\"2014/10/th-onie-responsive.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"th-onie-responsive-300x292.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:292;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(5361,336,'project_type','Web Site'),(5362,336,'languages','HTML5, Sass, Javascript'),(5363,336,'role','Full-Stack Developer'),(5364,336,'link','http://chooseonepercent.com/'),(5365,336,'company','Staplegun'),(5366,336,'company_link','http://staplegun.us/'),(5367,336,'thumbnail','341'),(5368,336,'image','337'),(5369,336,'caption','Home Page - Top'),(5370,336,'thumbnail','343'),(5371,336,'image','339'),(5372,336,'caption','Home Page - Bottom (Parallax Footer)'),(5373,336,'thumbnail','342'),(5374,336,'image','338'),(5375,336,'caption','Home Page - Spanish'),(5376,336,'thumbnail','344'),(5377,336,'image','340'),(5378,336,'caption','Responsive Design'),(5379,65,'project_type','Web Application'),(5380,65,'languages','Ember.js, Handlebars, Ruby on Rails, Faye.js, PostgreSQL'),(5381,65,'role','Back-End Developer - Team'),(5382,65,'link',''),(5383,65,'company','Brightbit'),(5384,65,'company_link','http://brightbit.com/'),(5385,65,'thumbnail','118'),(5386,65,'image','101'),(5387,65,'caption','Chat Room View'),(5388,65,'thumbnail','102'),(5389,65,'image','102'),(5390,65,'caption','Edit User View'),(5391,65,'thumbnail','120'),(5392,65,'image','103'),(5393,65,'caption','Edit Messages Instantly'),(5394,65,'thumbnail','121'),(5395,65,'image','104'),(5396,65,'caption','Log In View'),(5576,346,'_edit_last','1'),(5577,346,'_edit_lock','1415996550:1'),(5659,346,'dsq_thread_id','3093844327'),(5738,357,'_edit_last','1'),(5739,357,'_edit_lock','1421867672:1'),(5740,357,'_syntaxhighlighter_encoded','1'),(5741,357,'_oembed_286a0db3c7806c6f1856a0198b270234','{{unknown}}'),(6051,357,'dsq_thread_id','3157997784'),(8091,381,'_edit_last','1'),(8092,381,'_edit_lock','1427479904:1'),(8108,383,'_edit_last','1'),(8109,383,'_edit_lock','1421958922:1'),(8114,383,'dsq_thread_id','3446070632'),(8145,388,'title','Galleries'),(8146,388,'name','galleries'),(8147,388,'has_variations',''),(8148,388,'variation','0'),(8149,388,'filter','raw'),(8150,388,'returns','WyJpbWFnZSJd'),(8151,388,'aliases','WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXQ=='),(8152,388,'id_field','ID'),(8153,389,'title','Albums'),(8154,389,'name','albums'),(8155,389,'has_variations',''),(8156,389,'variation','0'),(8157,389,'filter','raw'),(8158,389,'returns','WyJnYWxsZXJ5IiwiYWxidW0iXQ=='),(8159,389,'aliases','WyJhbGJ1bSJd'),(8160,389,'id_field','ID'),(8161,390,'title','Tags'),(8162,390,'name','tags'),(8163,390,'has_variations',''),(8164,390,'variation','0'),(8165,390,'filter','raw'),(8166,390,'returns','WyJpbWFnZSJd'),(8167,390,'aliases','WyJ0YWciLCJpbWFnZV90YWciLCJpbWFnZV90YWdzIl0='),(8168,390,'id_field','ID'),(8169,391,'title','Random Images'),(8170,391,'has_variations','1'),(8171,391,'name','random_images'),(8172,391,'variation','0'),(8173,391,'filter','raw'),(8174,391,'returns','WyJpbWFnZSJd'),(8175,391,'aliases','WyJyYW5kb20iLCJyYW5kb21faW1hZ2UiXQ=='),(8176,391,'id_field','ID'),(8177,392,'title','Recent images'),(8178,392,'name','recent_images'),(8179,392,'has_variations',''),(8180,392,'variation','0'),(8181,392,'filter','raw'),(8182,392,'returns','WyJpbWFnZSJd'),(8183,392,'aliases','WyJyZWNlbnQiLCJyZWNlbnRfaW1hZ2UiXQ=='),(8184,392,'id_field','ID'),(8185,393,'name','none'),(8186,393,'title','No lightbox'),(8187,393,'code',''),(8188,393,'styles',''),(8189,393,'scripts',''),(8190,393,'filter','raw'),(8191,393,'values','W10='),(8192,393,'i18n','W10='),(8193,393,'id_field','ID'),(8194,393,'display_settings','W10='),(8195,394,'name','lightbox'),(8196,394,'title','Lightbox'),(8197,394,'code','class=\'ngg_lightbox\''),(8198,394,'styles','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.css'),(8199,394,'scripts','photocrati-lightbox#jquery.lightbox/jquery.lightbox-0.5.min.js\nphotocrati-lightbox#jquery.lightbox/nextgen_lightbox_init.js'),(8200,394,'filter','raw'),(8201,394,'values','eyJuZXh0Z2VuX2xpZ2h0Ym94X2xvYWRpbmdfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1pY28tbG9hZGluZy5naWYiLCJuZXh0Z2VuX2xpZ2h0Ym94X2Nsb3NlX2J0bl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLWNsb3NlLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX3ByZXZfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1wcmV2LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYnRuX25leHRfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJ0bi1uZXh0LmdpZiIsIm5leHRnZW5fbGlnaHRib3hfYmxhbmtfaW1nX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1ibGFuay5naWYifQ=='),(8202,394,'i18n','W10='),(8203,394,'id_field','ID'),(8204,394,'display_settings','W10='),(8205,395,'name','fancybox'),(8206,395,'title','Fancybox'),(8207,395,'code','class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"'),(8208,395,'styles','photocrati-lightbox#fancybox/jquery.fancybox-1.3.4.css'),(8209,395,'scripts','photocrati-lightbox#fancybox/jquery.easing-1.3.pack.js\nphotocrati-lightbox#fancybox/jquery.fancybox-1.3.4.pack.js\nphotocrati-lightbox#fancybox/nextgen_fancybox_init.js'),(8210,395,'filter','raw'),(8211,395,'values','W10='),(8212,395,'i18n','W10='),(8213,395,'id_field','ID'),(8214,395,'display_settings','W10='),(8215,396,'name','highslide'),(8216,396,'title','Highslide'),(8217,396,'code','class=\"highslide\" onclick=\"return hs.expand(this, {slideshowGroup: \'%GALLERY_NAME%\'});\"'),(8218,396,'styles','photocrati-lightbox#highslide/highslide.css'),(8219,396,'scripts','photocrati-lightbox#highslide/highslide-full.packed.js\nphotocrati-lightbox#highslide/nextgen_highslide_init.js'),(8220,396,'filter','raw'),(8221,396,'values','eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifQ=='),(8222,396,'i18n','eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9'),(8223,396,'id_field','ID'),(8224,396,'display_settings','W10='),(8225,397,'name','shutter'),(8226,397,'title','Shutter'),(8227,397,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8228,397,'styles','photocrati-lightbox#shutter/shutter.css'),(8229,397,'scripts','photocrati-lightbox#shutter/shutter.js\nphotocrati-lightbox#shutter/nextgen_shutter.js'),(8230,397,'filter','raw'),(8231,397,'values','W10='),(8232,397,'i18n','eyJtc2dMb2FkaW5nIjoiTCBPIEEgRCBJIE4gRyIsIm1zZ0Nsb3NlIjoiQ2xpY2sgdG8gQ2xvc2UifQ=='),(8233,397,'id_field','ID'),(8234,397,'display_settings','W10='),(8235,398,'name','shutter2'),(8236,398,'title','Shutter 2'),(8237,398,'code','class=\"shutterset_%GALLERY_NAME%\"'),(8238,398,'styles','photocrati-lightbox#shutter_reloaded/shutter.css'),(8239,398,'scripts','photocrati-lightbox#shutter_reloaded/shutter.js\nphotocrati-lightbox#shutter_reloaded/nextgen_shutter_reloaded.js'),(8240,398,'filter','raw'),(8241,398,'values','W10='),(8242,398,'i18n','WyJQcmV2aW91cyIsIk5leHQiLCJDbG9zZSIsIkZ1bGwgU2l6ZSIsIkZpdCB0byBTY3JlZW4iLCJJbWFnZSIsIm9mIiwiTG9hZGluZy4uLiJd'),(8243,398,'id_field','ID'),(8244,398,'display_settings','W10='),(8245,399,'name','thickbox'),(8246,399,'title','Thickbox'),(8247,399,'code','class=\'thickbox\' rel=\'%GALLERY_NAME%\''),(8248,399,'styles','wordpress#thickbox'),(8249,399,'scripts','photocrati-lightbox#thickbox/nextgen_thickbox_init.js\nwordpress#thickbox'),(8250,399,'filter','raw'),(8251,399,'values','W10='),(8252,399,'i18n','eyJuZXh0IjoiTmV4dCAmZ3Q7IiwicHJldiI6IiZsdDsgUHJldiIsImltYWdlIjoiSW1hZ2UiLCJvZiI6Im9mIiwiY2xvc2UiOiJDbG9zZSIsIm5vaWZyYW1lcyI6IlRoaXMgZmVhdHVyZSByZXF1aXJlcyBpbmxpbmUgZnJhbWVzLiBZb3UgaGF2ZSBpZnJhbWVzIGRpc2FibGVkIG9yIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZW0uIn0='),(8253,399,'id_field','ID'),(8254,399,'display_settings','W10='),(8255,400,'title','NextGEN Basic Compact Album'),(8256,400,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/compact_preview.jpg'),(8257,400,'default_source','albums'),(8258,400,'view_order','10200'),(8259,400,'name','photocrati-nextgen_basic_compact_album'),(8260,400,'installed_at_version','2.0.66.37'),(8261,400,'filter','raw'),(8262,400,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8263,400,'id_field','ID'),(8264,400,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJnYWxsZXJ5X2Rpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIn0='),(8265,401,'title','NextGEN Basic Extended Album'),(8266,401,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/extended_preview.jpg'),(8267,401,'default_source','albums'),(8268,401,'view_order','10210'),(8269,401,'name','photocrati-nextgen_basic_extended_album'),(8270,401,'installed_at_version','2.0.66.37'),(8271,401,'filter','raw'),(8272,401,'entity_types','WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),(8273,401,'id_field','ID'),(8274,401,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwidGVtcGxhdGUiOiIiLCJvdmVycmlkZV90aHVtYm5haWxfc2V0dGluZ3MiOjAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwidGh1bWJuYWlsX3F1YWxpdHkiOjEwMCwidGh1bWJuYWlsX2Nyb3AiOnRydWUsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifQ=='),(8275,402,'title','NextGEN Basic Thumbnails'),(8276,402,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/thumb_preview.jpg'),(8277,402,'default_source','galleries'),(8278,402,'view_order','10000'),(8279,402,'name','photocrati-nextgen_basic_thumbnails'),(8280,402,'installed_at_version','2.0.66.37'),(8281,402,'filter','raw'),(8282,402,'entity_types','WyJpbWFnZSJd'),(8283,402,'id_field','ID'),(8284,402,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJpbWFnZXNfcGVyX3BhZ2UiOiIyMCIsIm51bWJlcl9vZl9jb2x1bW5zIjowLCJ0aHVtYm5haWxfd2lkdGgiOjEyMCwidGh1bWJuYWlsX2hlaWdodCI6OTAsInNob3dfYWxsX2luX2xpZ2h0Ym94IjowLCJhamF4X3BhZ2luYXRpb24iOjAsInVzZV9pbWFnZWJyb3dzZXJfZWZmZWN0IjowLCJ0ZW1wbGF0ZSI6IiIsImRpc3BsYXlfbm9faW1hZ2VzX2Vycm9yIjoxLCJkaXNhYmxlX3BhZ2luYXRpb24iOjAsInNob3dfc2xpZGVzaG93X2xpbmsiOjEsInNsaWRlc2hvd19saW5rX3RleHQiOiJbU2hvdyBzbGlkZXNob3ddIiwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfcXVhbGl0eSI6IjEwMCIsInRodW1ibmFpbF9jcm9wIjoxLCJ0aHVtYm5haWxfd2F0ZXJtYXJrIjowLCJwaWNsZW5zX2xpbmtfdGV4dCI6IltTaG93IFBpY0xlbnNdIiwic2hvd19waWNsZW5zX2xpbmsiOjAsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8285,403,'title','NextGEN Basic Slideshow'),(8286,403,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/slideshow_preview.jpg'),(8287,403,'default_source','galleries'),(8288,403,'view_order','10010'),(8289,403,'name','photocrati-nextgen_basic_slideshow'),(8290,403,'installed_at_version','2.0.66.37'),(8291,403,'filter','raw'),(8292,403,'entity_types','WyJpbWFnZSJd'),(8293,403,'id_field','ID'),(8294,403,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8295,404,'title','NextGEN Basic ImageBrowser'),(8296,404,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_imagebrowser/static/preview.jpg'),(8297,404,'default_source','galleries'),(8298,404,'view_order','10020'),(8299,404,'name','photocrati-nextgen_basic_imagebrowser'),(8300,404,'installed_at_version','2.0.66.37'),(8301,404,'filter','raw'),(8302,404,'entity_types','WyJpbWFnZSJd'),(8303,404,'id_field','ID'),(8304,404,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),(8305,405,'title','NextGEN Basic SinglePic'),(8306,405,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_singlepic/static/preview.gif'),(8307,405,'default_source','galleries'),(8308,405,'view_order','10060'),(8309,405,'name','photocrati-nextgen_basic_singlepic'),(8310,405,'installed_at_version','2.0.66.37'),(8311,405,'filter','raw'),(8312,405,'entity_types','WyJpbWFnZSJd'),(8313,405,'id_field','ID'),(8314,405,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ3aWR0aCI6IiIsImhlaWdodCI6IiIsIm1vZGUiOiIiLCJkaXNwbGF5X3dhdGVybWFyayI6MCwiZGlzcGxheV9yZWZsZWN0aW9uIjowLCJmbG9hdCI6IiIsImxpbmsiOiIiLCJsaW5rX3RhcmdldCI6Il9ibGFuayIsInF1YWxpdHkiOjEwMCwiY3JvcCI6MCwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0='),(8315,406,'title','NextGEN Basic TagCloud'),(8316,406,'preview_image_relpath','/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_tagcloud/static/preview.gif'),(8317,406,'default_source','tags'),(8318,406,'view_order','10100'),(8319,406,'name','photocrati-nextgen_basic_tagcloud'),(8320,406,'installed_at_version','2.0.66.37'),(8321,406,'filter','raw'),(8322,406,'entity_types','WyJpbWFnZSJd'),(8323,406,'id_field','ID'),(8324,406,'settings','eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJkaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsIm51bWJlciI6NDV9'),(8325,407,'filter','raw'),(8326,407,'id_field','ID'),(8327,408,'filter','raw'),(8328,408,'id_field','ID'),(8329,409,'filter','raw'),(8330,409,'id_field','ID'),(8331,410,'filter','raw'),(8332,410,'id_field','ID'),(8798,381,'_syntaxhighlighter_encoded','1'),(8800,381,'_oembed_9dc20beeef6461f9c5efb3524dbf60a4','{{unknown}}'),(8801,381,'_oembed_7e554423ce8327dc8f05893a85da539e','{{unknown}}'),(8802,381,'_oembed_7061682afbac650ece3c83cc7fd58af3','{{unknown}}'),(8840,421,'_wp_attached_file','2014/06/oea_big_1.jpg'),(8841,421,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:705;s:4:\"file\";s:21:\"2014/06/oea_big_1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_1-1024x602.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:602;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8842,422,'_wp_attached_file','2014/06/oea_big_2.jpg'),(8843,422,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:793;s:4:\"file\";s:21:\"2014/06/oea_big_2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_2-1024x677.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:677;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8844,423,'_wp_attached_file','2014/06/oea_big_3.jpg'),(8845,423,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:790;s:4:\"file\";s:21:\"2014/06/oea_big_3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_3-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_3-1024x674.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:674;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8846,424,'_wp_attached_file','2014/06/oea_big_4.jpg'),(8847,424,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:817;s:4:\"file\";s:21:\"2014/06/oea_big_4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"oea_big_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"oea_big_4-300x204.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"oea_big_4-1024x697.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:697;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8848,425,'_wp_attached_file','2014/06/oea_th_1.jpg'),(8849,425,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:264;s:4:\"file\";s:20:\"2014/06/oea_th_1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_1-300x176.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:176;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8850,426,'_wp_attached_file','2014/06/oea_th_2.jpg'),(8851,426,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:297;s:4:\"file\";s:20:\"2014/06/oea_th_2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_2-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8852,427,'_wp_attached_file','2014/06/oea_th_3.jpg'),(8853,427,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:296;s:4:\"file\";s:20:\"2014/06/oea_th_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_3-300x197.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:197;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8854,428,'_wp_attached_file','2014/06/oea_th_4.jpg'),(8855,428,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:307;s:4:\"file\";s:20:\"2014/06/oea_th_4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"oea_th_4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"oea_th_4-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(8904,429,'_edit_last','1'),(8905,429,'_edit_lock','1424465532:1'),(8924,429,'project_type','Web Application'),(8925,429,'languages','HTML5, Sass, Javascript, Browserify'),(8926,429,'role','Full-Stack Developer'),(8927,429,'link','http://notohighstakes.com/'),(8928,429,'company','Staplegun'),(8929,429,'company_link','http://staplegun.us/'),(8930,429,'thumbnail','428'),(8931,429,'image','424'),(8932,429,'caption','No To High Stakes - Top'),(8933,429,'thumbnail','427'),(8934,429,'image','423'),(8935,429,'caption','No To High Stakes - Bottom'),(8936,429,'thumbnail','426'),(8937,429,'image','422'),(8938,429,'caption','Find Your Representatives'),(8939,429,'thumbnail','425'),(8940,429,'image','421'),(8941,429,'caption','Facebook Your Rep'),(8946,381,'dsq_thread_id','3533827247'),(9315,30,'header_image','35'),(9316,30,'post_type','project'),(9317,66,'project_type','Web Application'),(9318,66,'languages','Ruby on Rails, Javascript, PostgreSQL'),(9319,66,'role','Developer'),(9320,66,'link',''),(9321,66,'company','Brightbit'),(9322,66,'company_link','http://brightbit.com/'),(9323,66,'thumbnail','90'),(9324,66,'image','78'),(9325,66,'caption','Home Page (No Icons)'),(9326,66,'thumbnail','91'),(9327,66,'image','79'),(9328,66,'caption','Index View (No Icons)'),(9329,66,'thumbnail','92'),(9330,66,'image','80'),(9331,66,'caption','Show View (No Icons)'),(9332,66,'thumbnail','93'),(9333,66,'image','81'),(9334,66,'caption','Edit View (No Icons)'),(9335,67,'project_type','Web Application'),(9336,67,'languages','Ruby on Rails, Javascript, PostgreSQL, E-Commerce (Stripe)'),(9337,67,'role','Back-End Developer - Team'),(9338,67,'link',''),(9339,67,'company','Brightbit'),(9340,67,'company_link','http://brightbit.com/'),(9341,67,'thumbnail','124'),(9342,67,'image','107'),(9343,67,'caption','Home Page'),(9344,67,'thumbnail','125'),(9345,67,'image','108'),(9346,67,'caption','Timeslots Index View'),(9347,67,'thumbnail','126'),(9348,67,'image','109'),(9349,67,'caption','New Booking View - Payments Handled via Stripe API'),(9350,438,'_wp_attached_file','2014/06/go_wiki_th.jpg'),(9351,438,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:850;s:6:\"height\";i:450;s:4:\"file\";s:22:\"2014/06/go_wiki_th.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"go_wiki_th-300x159.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:159;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9425,443,'_edit_last','2'),(9426,443,'_edit_lock','1430240325:2'),(9470,443,'_syntaxhighlighter_encoded','1'),(9489,459,'_edit_last','1'),(9490,459,'_edit_lock','1427819003:1'),(9492,460,'_wp_attached_file','2015/02/intervals_big_1.jpg'),(9493,460,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:254;s:4:\"file\";s:27:\"2015/02/intervals_big_1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_1-300x64.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:64;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"intervals_big_1-1024x217.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:217;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9494,461,'_wp_attached_file','2015/02/intervals_big_2.jpg'),(9495,461,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1156;s:6:\"height\";i:292;s:4:\"file\";s:27:\"2015/02/intervals_big_2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_2-300x76.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"intervals_big_2-1024x259.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:259;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9496,462,'_wp_attached_file','2015/02/intervals_big_3.jpg'),(9497,462,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:716;s:6:\"height\";i:176;s:4:\"file\";s:27:\"2015/02/intervals_big_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"intervals_big_3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"intervals_big_3-300x74.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:74;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9498,463,'_wp_attached_file','2015/02/intervals_th_2.jpg'),(9499,463,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:800;s:6:\"height\";i:202;s:4:\"file\";s:26:\"2015/02/intervals_th_2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"intervals_th_2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"intervals_th_2-300x76.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9500,464,'_wp_attached_file','2015/02/intervals_th_3.jpg'),(9501,464,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:147;s:4:\"file\";s:26:\"2015/02/intervals_th_3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"intervals_th_3-150x147.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:147;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"intervals_th_3-300x74.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:74;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9526,443,'dsq_thread_id','3554000310'),(9530,466,'_edit_last','2'),(9531,466,'_edit_lock','1433991898:2'),(9589,469,'_edit_last','1'),(9590,469,'_edit_lock','1425688648:1'),(9593,469,'_oembed_07581c7489b26ab32c7829f2c88186cc','{{unknown}}'),(9624,479,'_wp_attached_file','2015/03/The-Societea.png'),(9625,479,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:566;s:6:\"height\";i:193;s:4:\"file\";s:24:\"2015/03/The-Societea.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"The-Societea-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"The-Societea-300x102.png\";s:5:\"width\";i:300;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9627,466,'dsq_thread_id','3563652563'),(9655,487,'_edit_last','2'),(9656,487,'_edit_lock','1430427188:2'),(9660,487,'_syntaxhighlighter_encoded','1'),(9676,487,'dsq_thread_id','3568537732'),(9687,499,'_menu_item_type','custom'),(9688,499,'_menu_item_menu_item_parent','0'),(9689,499,'_menu_item_object_id','499'),(9690,499,'_menu_item_object','custom'),(9691,499,'_menu_item_target',''),(9692,499,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(9693,499,'_menu_item_xfn',''),(9694,499,'_menu_item_url','http://beer.thesocietea.org'),(9718,469,'dsq_thread_id','3574191829'),(9933,504,'_edit_last','2'),(9934,504,'_edit_lock','1430426925:2'),(9935,504,'_syntaxhighlighter_encoded','1'),(9941,504,'dsq_thread_id','3595899285'),(9953,515,'_edit_last','1'),(9954,515,'_edit_lock','1427818160:1'),(9955,516,'_wp_attached_file','2015/03/resume-big-1.jpg'),(9956,516,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:818;s:4:\"file\";s:24:\"2015/03/resume-big-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-1-1024x698.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:698;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9957,517,'_wp_attached_file','2015/03/resume-big-2.jpg'),(9958,517,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:846;s:4:\"file\";s:24:\"2015/03/resume-big-2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-2-300x212.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-2-1024x722.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:722;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9959,518,'_wp_attached_file','2015/03/resume-big-3.jpg'),(9960,518,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:844;s:4:\"file\";s:24:\"2015/03/resume-big-3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-3-300x211.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"resume-big-3-1024x720.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:720;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9961,519,'_wp_attached_file','2015/03/resume-big-4.jpg'),(9962,519,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:544;s:6:\"height\";i:800;s:4:\"file\";s:24:\"2015/03/resume-big-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"resume-big-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"resume-big-4-204x300.jpg\";s:5:\"width\";i:204;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9963,520,'_wp_attached_file','2015/03/resume-th-1.jpg'),(9964,520,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:273;s:4:\"file\";s:23:\"2015/03/resume-th-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-1-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9965,521,'_wp_attached_file','2015/03/resume-th-2.jpg'),(9966,521,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:282;s:4:\"file\";s:23:\"2015/03/resume-th-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-2-300x212.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9967,522,'_wp_attached_file','2015/03/resume-th-3.jpg'),(9968,522,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:281;s:4:\"file\";s:23:\"2015/03/resume-th-3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-3-300x211.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(9969,523,'_wp_attached_file','2015/03/resume-th-4.jpg'),(9970,523,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:441;s:4:\"file\";s:23:\"2015/03/resume-th-4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"resume-th-4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"resume-th-4-204x300.jpg\";s:5:\"width\";i:204;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10207,524,'_edit_last','2'),(10208,524,'_edit_lock','1430240542:2'),(10209,524,'_syntaxhighlighter_encoded','1'),(10244,524,'dsq_thread_id','3617070074'),(10749,544,'_wp_attached_file','2015/03/big-resumehaus1.jpg'),(10750,544,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:828;s:4:\"file\";s:27:\"2015/03/big-resumehaus1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"big-resumehaus1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"big-resumehaus1-300x207.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:207;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"big-resumehaus1-1024x707.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:707;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10751,545,'_wp_attached_file','2015/03/th-resumehaus1.jpg'),(10752,545,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:311;s:4:\"file\";s:26:\"2015/03/th-resumehaus1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"th-resumehaus1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"th-resumehaus1-300x207.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:207;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10753,515,'project_type','Web Application'),(10754,515,'languages','HTML5, CSS, Bootstrap, Craft CMS (PHP), Twig'),(10755,515,'role','Full-Stack Developer'),(10756,515,'link','http://resumehaus.com'),(10757,515,'company','Personal Project'),(10758,515,'company_link',''),(10759,515,'thumbnail','545'),(10760,515,'image','544'),(10761,515,'caption','Home Page'),(10762,515,'thumbnail','521'),(10763,515,'image','517'),(10764,515,'caption','Professional Experience & Skill Bars'),(10765,515,'thumbnail','522'),(10766,515,'image','518'),(10767,515,'caption','Multiple Theme Options'),(10768,515,'thumbnail','523'),(10769,515,'image','519'),(10770,515,'caption','Responsive Design'),(10771,459,'project_type','Custom Browser Extension / Web Server'),(10772,459,'languages','Userscripts, Javascript, Ruby (Sinatra), Browserify'),(10773,459,'role','Back-End Developer'),(10774,459,'link',''),(10775,459,'company','Staplegun'),(10776,459,'company_link','http://staplegun.us'),(10777,459,'thumbnail','460'),(10778,459,'image','460'),(10779,459,'caption','Custom Cross-Browser Ext.'),(10780,459,'thumbnail','463'),(10781,459,'image','463'),(10782,459,'caption','Client-Side: Custom Edits to Intervals Web Page'),(10783,459,'thumbnail','464'),(10784,459,'image','462'),(10785,459,'caption','Server-Side: Sinatra Web Server Logs'),(10787,4,'thumbnail','545'),(10788,4,'label','Resume Haus'),(10789,4,'url','http://resumehaus.com'),(10790,4,'thumbnail','257'),(10791,4,'label','OK Commerce'),(10792,4,'url','http://new.okcommerce.gov'),(10793,4,'thumbnail','428'),(10794,4,'label','OEA'),(10795,4,'url','http://notohighstakes.com/'),(10796,4,'thumbnail','341'),(10797,4,'label','ONIE'),(10798,4,'url','http://chooseonepercent.com/'),(10799,4,'thumbnail','217'),(10800,4,'label','77 Energy'),(10801,4,'url','http://77nrg.com'),(10802,4,'thumbnail','98'),(10803,4,'label','Enviro Systems'),(10804,4,'url','http://www.enviro-ok.com/'),(10805,4,'thumbnail','137'),(10806,4,'label','Total Environment'),(10807,4,'url','http://totalenvironmentinc.com/'),(10808,4,'thumbnail','94'),(10809,4,'label','Carnegie Chart'),(10810,4,'url','http://labs.thesocietea.org/carnegie-chart/'),(10811,546,'_wp_attached_file','2015/03/big-hydro1.jpg'),(10812,546,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:700;s:4:\"file\";s:22:\"2015/03/big-hydro1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro1-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro1-1024x597.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:597;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10813,547,'_wp_attached_file','2015/03/big-hydro2.jpg'),(10814,547,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:698;s:4:\"file\";s:22:\"2015/03/big-hydro2.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro2-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro2-1024x596.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:596;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10815,548,'_wp_attached_file','2015/03/big-hydro3.jpg'),(10816,548,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:698;s:4:\"file\";s:22:\"2015/03/big-hydro3.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro3-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro3-1024x596.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:596;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10817,549,'_wp_attached_file','2015/03/big-hydro4.jpg'),(10818,549,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:837;s:4:\"file\";s:22:\"2015/03/big-hydro4.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro4-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro4-1024x714.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:714;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10819,550,'_wp_attached_file','2015/03/big-hydro5.jpg'),(10820,550,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:835;s:4:\"file\";s:22:\"2015/03/big-hydro5.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro5-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro5-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro5-1024x713.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:713;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10821,551,'_wp_attached_file','2015/03/big-hydro6.jpg'),(10822,551,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:835;s:4:\"file\";s:22:\"2015/03/big-hydro6.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro6-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro6-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro6-1024x713.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:713;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10823,552,'_wp_attached_file','2015/03/big-hydro7.jpg'),(10824,552,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:747;s:4:\"file\";s:22:\"2015/03/big-hydro7.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro7-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro7-300x187.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:187;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"big-hydro7-1024x637.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:637;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10825,553,'_wp_attached_file','2015/03/big-hydro8.jpg'),(10826,553,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:633;s:6:\"height\";i:1000;s:4:\"file\";s:22:\"2015/03/big-hydro8.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"big-hydro8-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"big-hydro8-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10827,554,'_wp_attached_file','2015/03/th-hydro1.jpg'),(10828,554,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro1-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10829,555,'_wp_attached_file','2015/03/th-hydro2.jpg'),(10830,555,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro2-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10831,556,'_wp_attached_file','2015/03/th-hydro3.jpg'),(10832,556,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2015/03/th-hydro3.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro3-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro3-300x175.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10833,557,'_wp_attached_file','2015/03/th-hydro4.jpg'),(10834,557,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:314;s:4:\"file\";s:21:\"2015/03/th-hydro4.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro4-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro4-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10835,558,'_wp_attached_file','2015/03/th-hydro5.jpg'),(10836,558,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2015/03/th-hydro5.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro5-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro5-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10837,559,'_wp_attached_file','2015/03/th-hydro6.jpg'),(10838,559,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:313;s:4:\"file\";s:21:\"2015/03/th-hydro6.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro6-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro6-300x209.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10839,560,'_wp_attached_file','2015/03/th-hydro7.jpg'),(10840,560,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:450;s:6:\"height\";i:280;s:4:\"file\";s:21:\"2015/03/th-hydro7.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro7-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro7-300x187.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:187;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10841,561,'_wp_attached_file','2015/03/th-hydro8.jpg'),(10842,561,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:631;s:4:\"file\";s:21:\"2015/03/th-hydro8.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"th-hydro8-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"th-hydro8-190x300.jpg\";s:5:\"width\";i:190;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(10843,562,'_edit_last','2'),(10844,562,'_edit_lock','1427902239:2'),(10971,562,'project_type','Web Application'),(10972,562,'languages','Ruby on Rails, Angular JS, Hypermedia, Foundation, PostgreSQL, Mandrill, Inbound Emails, Heroku, Workers'),(10973,562,'role','Full-Stack Developer'),(10974,562,'link','http://hydro.stplgn.us'),(10975,562,'company','Staplegun'),(10976,562,'company_link','http://staplegun.us'),(10977,562,'thumbnail','554'),(10978,562,'image','546'),(10979,562,'caption','Login Screen. Authorization using Basic & Token Authentication according to HTTP 1.1 Spec'),(10980,562,'thumbnail','555'),(10981,562,'image','547'),(10982,562,'caption','Dashboard - main table using ngTable'),(10983,562,'thumbnail','556'),(10984,562,'image','548'),(10985,562,'caption','New Order screen using Foundation layouts'),(10986,562,'thumbnail','557'),(10987,562,'image','549'),(10988,562,'caption','Edit Order screen - only visible before submitting'),(10989,562,'thumbnail','558'),(10990,562,'image','550'),(10991,562,'caption','Order Show screen - Images will lightbox - Comments also created from inbound email responses'),(10992,562,'thumbnail','559'),(10993,562,'image','551'),(10994,562,'caption','Manage Organization. Using ng-select and pulling data from third-party Intervals API'),(10995,562,'thumbnail','560'),(10996,562,'image','552'),(10997,562,'caption','Admins can edit fields on a per-template basis anytime'),(10998,562,'thumbnail','561'),(10999,562,'image','553'),(11000,562,'caption','Responsive Design'),(11007,564,'_edit_last','2'),(11008,564,'_edit_lock','1430240552:2'),(11011,564,'_syntaxhighlighter_encoded','1'),(11581,589,'_wp_attached_file','2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png'),(11582,589,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1112;s:6:\"height\";i:446;s:4:\"file\";s:48:\"2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.03.28-PM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.03.28-PM-300x120.png\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\";s:5:\"width\";i:1024;s:6:\"height\";i:411;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(11583,589,'_wp_attachment_image_alt','ngrok'),(11586,593,'_wp_attached_file','2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png'),(11587,593,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:812;s:6:\"height\";i:368;s:4:\"file\";s:48:\"2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.19.45-PM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2015-04-10-at-3.19.45-PM-300x136.png\";s:5:\"width\";i:300;s:6:\"height\";i:136;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(11588,593,'_wp_attachment_image_alt','ngrok logs'),(11688,16,'header_image','141'),(11689,16,'post_type','post'),(12429,607,'_edit_last','2'),(12430,607,'_edit_lock','1430240593:2'),(14976,72,'dsq_thread_id','3802290693'),(15321,642,'_edit_last','2'),(15322,642,'_edit_lock','1433991829:2'),(15323,642,'_oembed_4a821518bbfbb619a4175af5e69f5c47','{{unknown}}'),(15324,642,'_oembed_a1cf398b0d5296e6b5e884b6663bee3e','{{unknown}}'),(15326,642,'_oembed_1ed93e4b3e55c80042c58a249f520e03','{{unknown}}'),(15327,642,'_oembed_d118c929d60e60214ac78ed565898f3b','{{unknown}}'),(15328,642,'_oembed_f93e1679b1bdd9e35e602feed6806db9','{{unknown}}'),(15329,642,'_oembed_eddc781efd077ef75fdc2f6e9c447994','{{unknown}}'),(15330,642,'_oembed_6ecdab2af88c20123bd66c9348f4bf39','{{unknown}}'),(15331,642,'_oembed_7fac7f55a894efbe7308ebf711437d0a','{{unknown}}'),(15332,642,'_oembed_77f6c5905309c04097e8d9d6ea345f9e','{{unknown}}'),(15333,642,'_oembed_52fa1ae0ea45c46ff7bc7599114043a9','{{unknown}}'),(15334,642,'_oembed_5adb91b1acb6176b0da898fb73b2595e','{{unknown}}'),(15335,642,'_oembed_38b9535b5298d11e37bfd71201e81f33','{{unknown}}'),(15338,642,'dsq_thread_id','3831716911'),(15462,655,'_edit_last','2'),(15463,655,'_edit_lock','1434052828:2'),(15464,655,'_syntaxhighlighter_encoded','1'),(15465,660,'_wp_attached_file','2015/06/ancestor_chain.jpg'),(15466,660,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:396;s:6:\"height\";i:552;s:4:\"file\";s:26:\"2015/06/ancestor_chain.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"ancestor_chain-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"ancestor_chain-215x300.jpg\";s:5:\"width\";i:215;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(15467,661,'_wp_attached_file','2015/06/ruby_object_model.png'),(15468,661,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:579;s:6:\"height\";i:440;s:4:\"file\";s:29:\"2015/06/ruby_object_model.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"ruby_object_model-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"ruby_object_model-300x228.png\";s:5:\"width\";i:300;s:6:\"height\";i:228;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:11:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";s:11:\"orientation\";i:0;}}'),(15532,564,'dsq_thread_id','3843475888'),(15838,13,'header_image','145'),(15839,13,'post_type',''),(15840,13,'category_title','Development'),(15841,13,'color','#00e7ad'),(15842,13,'skill','Ruby / Rails'),(15843,13,'percentage','98'),(15844,13,'skill','Angular.js'),(15845,13,'percentage','93'),(15846,13,'skill','Wordpress'),(15847,13,'percentage','92'),(15848,13,'skill','Ember.js'),(15849,13,'percentage','90'),(15850,13,'skill','Node.js'),(15851,13,'percentage','84'),(15852,13,'skill','Relational Databases'),(15853,13,'percentage','90'),(15854,13,'skill','NoSQL Databases'),(15855,13,'percentage','86'),(15856,13,'skill','PHP'),(15857,13,'percentage','80'),(15858,13,'skill','Java'),(15859,13,'percentage','70'),(15860,13,'skill','C / C++'),(15861,13,'percentage','70'),(15862,13,'skill','HTTP & REST APIs'),(15863,13,'percentage','95'),(15864,13,'skill','Go'),(15865,13,'percentage','60'),(15866,13,'category_title','Design'),(15867,13,'color','#146fe7'),(15868,13,'skill','HTML5'),(15869,13,'percentage','98'),(15870,13,'skill','CSS / Sass'),(15871,13,'percentage','96'),(15872,13,'skill','Javascript / jQuery'),(15873,13,'percentage','94'),(15874,13,'skill','Responsive Design'),(15875,13,'percentage','90'),(15876,13,'skill','D3.js'),(15877,13,'percentage','80'),(15878,13,'skill','Zurb Foundation'),(15879,13,'percentage','85'),(15880,13,'skill','Page & Image Optimization'),(15881,13,'percentage','94'),(15882,13,'skill','Browser Support (IE8+)'),(15883,13,'percentage','88'),(15884,13,'skill','Gimp'),(15885,13,'percentage','83'),(15886,13,'skill','SEO'),(15887,13,'percentage','80'),(15888,13,'skill','Accessibility'),(15889,13,'percentage','90'),(15890,13,'category_title','Dev Tools'),(15891,13,'color','#ff5e00'),(15892,13,'skill','Git'),(15893,13,'percentage','100'),(15894,13,'skill','Vim'),(15895,13,'percentage','98'),(15896,13,'skill','Shell'),(15897,13,'percentage','94'),(15898,13,'skill','Tmux'),(15899,13,'percentage','90'),(15900,13,'skill','Grunt.js'),(15901,13,'percentage','95'),(15902,13,'skill','Sass'),(15903,13,'percentage','94'),(15904,13,'skill','Coffeescript'),(15905,13,'percentage','90'),(15906,13,'skill','Browserify'),(15907,13,'percentage','85'),(15908,13,'skill','Haml / Slim'),(15909,13,'percentage','87'),(15910,13,'skill','Gtk+'),(15911,13,'percentage','84'),(15912,13,'skill','DNS'),(15913,13,'percentage','85'),(15914,13,'skill','Heroku'),(15915,13,'percentage','85');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`),
  KEY `post_name` (`post_name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=698 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (4,2,'2014-06-02 22:41:51','2014-06-02 22:41:51','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','publish','open','open','','home','','','2015-03-31 16:26:26','2015-03-31 16:26:26','',0,'http://localhost:8000/?page_id=4',0,'page','',0),(5,2,'2014-06-02 22:41:51','2014-06-02 22:41:51','','Home','','inherit','open','open','','4-revision-v1','','','2014-06-02 22:41:51','2014-06-02 22:41:51','',4,'http://localhost:8000/?p=5',0,'revision','',0),(6,2,'2014-06-03 03:57:47','2014-06-03 03:57:47','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','publish','open','open','','about','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',0,'http://localhost:8000/?page_id=6',0,'page','',1),(7,2,'2014-06-03 03:57:47','2014-06-03 03:57:47','','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 03:57:47','2014-06-03 03:57:47','',6,'http://localhost:8000/?p=7',0,'revision','',0),(8,2,'2014-06-03 04:30:00','2014-06-03 04:30:00','','Subpage','','publish','closed','closed','','subpage','','','2014-06-10 23:14:17','2014-06-10 23:14:17','',0,'http://localhost:8000/?post_type=cfs&#038;p=8',0,'cfs','',0),(9,2,'2014-06-03 04:30:22','2014-06-03 04:30:22','','beer-header','','inherit','open','open','','beer-header','','','2014-06-03 04:30:22','2014-06-03 04:30:22','',6,'http://thesocietea.org/wp-content/uploads/2014/06/beer-header.jpg',0,'attachment','image/jpeg',0),(13,2,'2014-06-03 04:35:26','2014-06-03 04:35:26','<h2>As a Developer</h2>\r\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n<h2>As a Speaker</h2>\r\nI am available as a speaker and have given the following talks in the past:\r\n\r\n<strong>General</strong>\r\n\r\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\r\n\r\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\r\n\r\n\r\n\r\n<strong>Ruby</strong>\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\r\n\r\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/metaprogramming-ruby-talk\" target=\"_blank\">Metaprogramming in Ruby</a> - 40-45 min\r\n\r\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review modifying existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, the various <em>eval</em> methods, and much more. There are plenty of interactive code examples I go through with each new topic.\r\n\r\n<hr class=\"short\" />','Hire Me','','publish','open','open','','hire-me','','','2015-06-13 00:06:57','2015-06-13 00:06:57','',0,'http://localhost:8000/?page_id=13',0,'page','',0),(14,2,'2014-06-03 04:35:26','2014-06-03 04:35:26','','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-03 04:35:26','2014-06-03 04:35:26','',13,'http://localhost:8000/?p=14',0,'revision','',0),(16,2,'2014-06-03 04:35:37','2014-06-03 04:35:37','Below you\'ll find my blog posts. You can check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','publish','open','closed','','blog','','','2015-04-15 22:12:16','2015-04-15 22:12:16','',0,'http://localhost:8000/?page_id=16',0,'page','',0),(17,2,'2014-06-03 04:35:37','2014-06-03 04:35:37','','Blog','','inherit','open','open','','16-revision-v1','','','2014-06-03 04:35:37','2014-06-03 04:35:37','',16,'http://localhost:8000/?p=17',0,'revision','',0),(25,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','25','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=25',1,'nav_menu_item','',0),(26,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','26','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=26',2,'nav_menu_item','',0),(27,2,'2014-06-03 04:39:06','2014-06-03 04:39:06',' ','','','publish','open','open','','27','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=27',7,'nav_menu_item','',0),(30,2,'2014-06-03 04:44:37','2014-06-03 04:44:37','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','publish','open','open','','projects','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',0,'http://localhost:8000/?page_id=30',0,'page','',1),(31,2,'2014-06-03 04:44:37','2014-06-03 04:44:37','','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-03 04:44:37','2014-06-03 04:44:37','',30,'http://localhost:8000/?p=31',0,'revision','',0),(32,2,'2014-06-03 04:44:54','2014-06-03 04:44:54',' ','','','publish','open','open','','32','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=32',3,'nav_menu_item','',0),(33,2,'2014-06-03 04:46:17','2014-06-03 04:46:17','<p style=\"color: #000000;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus luctus libero vel laoreet ornare. Vestibulum non porttitor eros. Curabitur nulla nulla, eleifend in mi ac, accumsan sodales est. Nulla et orci nec massa rhoncus ultrices. Praesent quis arcu et diam euismod consectetur vitae sed sapien. Suspendisse pulvinar tempor gravida. Cras urna felis, viverra aliquam magna ac, imperdiet sodales leo. Proin cursus condimentum mi eu lacinia. Aenean quis dolor volutpat, vehicula ante in, malesuada augue. Nunc purus purus, vulputate vitae ornare vitae, pellentesque nec nisl. Duis eu accumsan lacus, eu lobortis leo. Donec vel mi lacus. Nunc risus risus, ullamcorper sed mi vel, sodales viverra leo. Pellentesque tincidunt at tellus id dictum. Vivamus euismod tempus magna a venenatis. Nunc at sagittis metus, eu mollis urna.</p>\r\n<p style=\"color: #000000;\">Proin scelerisque at odio vitae porttitor. Aenean purus lorem, consequat sit amet magna et, tristique condimentum augue. Ut convallis dapibus volutpat. Sed interdum, velit eu feugiat euismod, purus nulla tincidunt lorem, at molestie arcu libero ac leo. Nam ultricies mauris neque, et tincidunt magna tincidunt eu. Morbi id elementum massa. Donec iaculis magna purus, vel scelerisque sem molestie nec. Pellentesque ipsum purus, posuere pretium rhoncus ac, lacinia sed enim. Morbi non feugiat dolor. Fusce bibendum ullamcorper urna, non volutpat neque pharetra ac. Morbi ut ipsum non lacus pharetra luctus suscipit eu diam. Curabitur sodales vitae mi ac feugiat. Nulla egestas vel enim eu dictum.</p>\r\n<p style=\"color: #000000;\">Integer urna leo, dapibus elementum malesuada ut, commodo id risus. Donec sed sem sit amet libero gravida bibendum. Nullam a faucibus velit. In viverra eu ante id fringilla. Fusce vulputate suscipit leo rhoncus molestie. Pellentesque non libero id velit cursus placerat. Maecenas ac neque mauris. Etiam faucibus lectus ante. Nam adipiscing tristique fermentum. Aenean dolor dui, ultrices sed enim sed, pretium tempus purus. In luctus massa neque, et luctus metus accumsan a. Sed sed commodo ante. Vestibulum tempus cursus tincidunt. Suspendisse non lorem sit amet lectus interdum gravida.</p>','About','','inherit','open','open','','6-revision-v1','','','2014-06-03 04:46:17','2014-06-03 04:46:17','',6,'http://localhost:8000/?p=33',0,'revision','',0),(34,2,'2014-06-06 05:09:43','2014-06-06 05:09:43','','About','','inherit','open','open','','6-revision-v1','','','2014-06-06 05:09:43','2014-06-06 05:09:43','',6,'http://localhost:8000/?p=34',0,'revision','',0),(35,2,'2014-06-06 18:05:54','2014-06-06 18:05:54','','stockvault--atlantic-sunset135250','','inherit','open','open','','stockvault-atlantic-sunset135250','','','2014-06-06 18:05:54','2014-06-06 18:05:54','',30,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-atlantic-sunset135250.jpg',0,'attachment','image/jpeg',0),(36,2,'2014-06-06 18:11:31','2014-06-06 18:11:31','Check out some of the projects I\'ve worked on recently:','Projects','','inherit','open','open','','30-revision-v1','','','2014-06-06 18:11:31','2014-06-06 18:11:31','',30,'http://localhost:8000/?p=36',0,'revision','',0),(37,2,'2014-06-06 18:14:38','2014-06-06 18:14:38','','Project Fields','','publish','closed','closed','','project-screenshots','','','2014-06-06 21:53:44','2014-06-06 21:53:44','',0,'http://localhost:8000/?post_type=cfs&#038;p=37',0,'cfs','',0),(38,2,'2014-06-06 18:15:59','2014-06-06 18:15:59','This is Total Environment Inc.','Total Environment Inc.','','publish','closed','closed','','total-environment-inc','','','2014-08-18 22:11:45','2014-08-18 22:11:45','',0,'http://localhost:8000/?post_type=project&#038;p=38',12,'project','',0),(39,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-77nrg','','inherit','open','open','','th-77nrg','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-77nrg.png',0,'attachment','image/png',0),(40,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-baton','','inherit','open','open','','th-baton','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton.png',0,'attachment','image/png',0),(41,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-carnegie-chart','','inherit','open','open','','th-carnegie-chart','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-carnegie-chart.png',0,'attachment','image/png',0),(42,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-enviro','','inherit','open','open','','th-enviro','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-enviro.png',0,'attachment','image/png',0),(43,2,'2014-06-06 18:30:10','2014-06-06 18:30:10','','th-soundingboard','','inherit','open','open','','th-soundingboard','','','2014-06-06 18:30:10','2014-06-06 18:30:10','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-soundingboard.png',0,'attachment','image/png',0),(44,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-chart','','inherit','open','open','','th-tea-chart','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-chart.png',0,'attachment','image/png',0),(45,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tea-timers','','inherit','open','open','','th-tea-timers','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tea-timers.png',0,'attachment','image/png',0),(46,2,'2014-06-06 18:30:11','2014-06-06 18:30:11','','th-tle','','inherit','open','open','','th-tle','','','2014-06-06 18:30:11','2014-06-06 18:30:11','',38,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle.png',0,'attachment','image/png',0),(47,2,'2014-06-06 21:03:45','2014-06-06 21:03:45','','big-77-1','','inherit','open','open','','big-77-1','','','2014-06-06 21:03:45','2014-06-06 21:03:45','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-1.jpg',0,'attachment','image/jpeg',0),(48,2,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-2','','inherit','open','open','','big-77-2','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-2.jpg',0,'attachment','image/jpeg',0),(49,2,'2014-06-06 21:03:46','2014-06-06 21:03:46','','big-77-3','','inherit','open','open','','big-77-3','','','2014-06-06 21:03:46','2014-06-06 21:03:46','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-3.jpg',0,'attachment','image/jpeg',0),(50,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-77-4','','inherit','open','open','','big-77-4','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-4.jpg',0,'attachment','image/jpeg',0),(51,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-1','','inherit','open','open','','big-tle-1','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-1.jpg',0,'attachment','image/jpeg',0),(52,2,'2014-06-06 21:03:47','2014-06-06 21:03:47','','big-tle-2','','inherit','open','open','','big-tle-2','','','2014-06-06 21:03:47','2014-06-06 21:03:47','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-2.jpg',0,'attachment','image/jpeg',0),(53,2,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-3','','inherit','open','open','','big-tle-3','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-3.jpg',0,'attachment','image/jpeg',0),(54,2,'2014-06-06 21:03:48','2014-06-06 21:03:48','','big-tle-4','','inherit','open','open','','big-tle-4','','','2014-06-06 21:03:48','2014-06-06 21:03:48','',0,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-4.jpg',0,'attachment','image/jpeg',0),(55,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-1','','inherit','open','open','','th-77-1','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-1.jpg',0,'attachment','image/jpeg',0),(56,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-2','','inherit','open','open','','th-77-2','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-2.jpg',0,'attachment','image/jpeg',0),(57,2,'2014-06-06 21:04:04','2014-06-06 21:04:04','','th-77-3','','inherit','open','open','','th-77-3','','','2014-06-06 21:04:04','2014-06-06 21:04:04','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-3.jpg',0,'attachment','image/jpeg',0),(58,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-77-4','','inherit','open','open','','th-77-4','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-4.jpg',0,'attachment','image/jpeg',0),(60,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-2','','inherit','open','open','','th-tle-2','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-2.jpg',0,'attachment','image/jpeg',0),(61,2,'2014-06-06 21:04:05','2014-06-06 21:04:05','','th-tle-3','','inherit','open','open','','th-tle-3','','','2014-06-06 21:04:05','2014-06-06 21:04:05','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-3.jpg',0,'attachment','image/jpeg',0),(62,2,'2014-06-06 21:04:06','2014-06-06 21:04:06','','th-tle-4','','inherit','open','open','','th-tle-4','','','2014-06-06 21:04:06','2014-06-06 21:04:06','',0,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-4.jpg',0,'attachment','image/jpeg',0),(63,2,'2014-06-06 21:10:11','2014-06-06 21:10:11','This is 77 Energy','77 Energy','','publish','closed','closed','','77-energy','','','2014-08-18 22:10:40','2014-08-18 22:10:40','',0,'http://localhost:8000/?post_type=project&#038;p=63',4,'project','',0),(64,2,'2014-06-08 03:04:15','2014-06-08 03:04:15','','Enviro Systems','','publish','closed','closed','','enviro-systems','','','2014-08-18 22:10:49','2014-08-18 22:10:49','',0,'http://localhost:8000/?post_type=project&#038;p=64',9,'project','',0),(65,2,'2014-06-08 03:12:01','2014-06-08 03:12:01','','Kikuchat 2.0','','publish','closed','closed','','kikuchat-2-0','','','2014-10-05 21:11:33','2014-10-05 21:11:33','',0,'http://localhost:8000/?post_type=project&#038;p=65',7,'project','',0),(66,2,'2014-06-08 03:13:44','2014-06-08 03:13:44','','Baton','','publish','closed','closed','','baton','','','2015-02-25 14:29:13','2015-02-25 14:29:13','',0,'http://localhost:8000/?post_type=project&#038;p=66',11,'project','',0),(67,2,'2014-06-08 03:15:11','2014-06-08 03:15:11','','Soundingboard','','publish','closed','closed','','soundingboard','','','2015-02-25 14:29:33','2015-02-25 14:29:33','',0,'http://localhost:8000/?post_type=project&#038;p=67',13,'project','',0),(68,2,'2014-06-08 03:18:14','2014-06-08 03:18:14','','Markdown Checkboxes','','publish','closed','closed','','markdown-checkboxes','','','2014-08-18 22:11:30','2014-08-18 22:11:30','',0,'http://localhost:8000/?post_type=project&#038;p=68',8,'project','',0),(72,2,'2014-06-08 04:08:14','2014-06-08 04:08:14','','big-77-responsive','','inherit','open','open','','big-77-responsive','','','2014-06-08 04:08:14','2014-06-08 04:08:14','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(73,2,'2014-06-08 04:08:15','2014-06-08 04:08:15','','big-es-responsive','','inherit','open','open','','big-es-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-responsive.jpg',0,'attachment','image/jpeg',0),(74,2,'2014-06-08 04:08:15','2014-06-08 04:08:15','','th-77-responsive','','inherit','open','open','','th-77-responsive','','','2014-06-08 04:08:15','2014-06-08 04:08:15','',63,'http://thesocietea.org/wp-content/uploads/2014/06/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(76,2,'2014-06-08 05:59:32','2014-06-08 05:59:32','','big-tle-responsive','','inherit','open','open','','big-tle-responsive','','','2014-06-08 05:59:32','2014-06-08 05:59:32','',38,'http://thesocietea.org/wp-content/uploads/2014/06/big-tle-responsive.jpg',0,'attachment','image/jpeg',0),(78,2,'2014-06-08 06:09:38','2014-06-08 06:09:38','','big-bt-1','','inherit','open','open','','big-bt-1','','','2014-06-08 06:09:38','2014-06-08 06:09:38','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-1.jpg',0,'attachment','image/jpeg',0),(79,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-2','','inherit','open','open','','big-bt-2','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-2.jpg',0,'attachment','image/jpeg',0),(80,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-3','','inherit','open','open','','big-bt-3','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-3.jpg',0,'attachment','image/jpeg',0),(81,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-bt-4','','inherit','open','open','','big-bt-4','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-bt-4.jpg',0,'attachment','image/jpeg',0),(82,2,'2014-06-08 06:09:39','2014-06-08 06:09:39','','big-cc-1','','inherit','open','open','','big-cc-1','','','2014-06-08 06:09:39','2014-06-08 06:09:39','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-1.jpg',0,'attachment','image/jpeg',0),(83,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-2','','inherit','open','open','','big-cc-2','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-2.jpg',0,'attachment','image/jpeg',0),(84,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-3','','inherit','open','open','','big-cc-3','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-3.jpg',0,'attachment','image/jpeg',0),(85,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-cc-responsive','','inherit','open','open','','big-cc-responsive','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-cc-responsive.jpg',0,'attachment','image/jpeg',0),(86,2,'2014-06-08 06:09:40','2014-06-08 06:09:40','','big-es-1','','inherit','open','open','','big-es-1','','','2014-06-08 06:09:40','2014-06-08 06:09:40','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-1.jpg',0,'attachment','image/jpeg',0),(87,2,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-2','','inherit','open','open','','big-es-2','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-2.jpg',0,'attachment','image/jpeg',0),(88,2,'2014-06-08 06:09:41','2014-06-08 06:09:41','','big-es-3','','inherit','open','open','','big-es-3','','','2014-06-08 06:09:41','2014-06-08 06:09:41','',64,'http://thesocietea.org/wp-content/uploads/2014/06/big-es-3.jpg',0,'attachment','image/jpeg',0),(89,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-baton','','inherit','open','open','','th-baton-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-baton1.png',0,'attachment','image/png',0),(90,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-1','','inherit','open','open','','th-bt-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-1.jpg',0,'attachment','image/jpeg',0),(91,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-2','','inherit','open','open','','th-bt-2','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-2.jpg',0,'attachment','image/jpeg',0),(92,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-3','','inherit','open','open','','th-bt-3','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-3.jpg',0,'attachment','image/jpeg',0),(93,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-bt-4','','inherit','open','open','','th-bt-4','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-bt-4.jpg',0,'attachment','image/jpeg',0),(94,2,'2014-06-08 06:10:00','2014-06-08 06:10:00','','th-cc-1','','inherit','open','open','','th-cc-1','','','2014-06-08 06:10:00','2014-06-08 06:10:00','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-1.jpg',0,'attachment','image/jpeg',0),(95,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-2','','inherit','open','open','','th-cc-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-2.jpg',0,'attachment','image/jpeg',0),(96,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-cc-3','','inherit','open','open','','th-cc-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-3.jpg',0,'attachment','image/jpeg',0),(98,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-1','','inherit','open','open','','th-es-1','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-1.jpg',0,'attachment','image/jpeg',0),(99,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-2','','inherit','open','open','','th-es-2','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-2.jpg',0,'attachment','image/jpeg',0),(100,2,'2014-06-08 06:10:01','2014-06-08 06:10:01','','th-es-3','','inherit','open','open','','th-es-3','','','2014-06-08 06:10:01','2014-06-08 06:10:01','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-3.jpg',0,'attachment','image/jpeg',0),(101,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-1','','inherit','open','open','','big-kk-1','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-1.jpg',0,'attachment','image/jpeg',0),(102,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-2','','inherit','open','open','','big-kk-2','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-2.jpg',0,'attachment','image/jpeg',0),(103,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-3','','inherit','open','open','','big-kk-3','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-3.jpg',0,'attachment','image/jpeg',0),(104,2,'2014-06-09 00:32:37','2014-06-09 00:32:37','','big-kk-4','','inherit','open','open','','big-kk-4','','','2014-06-09 00:32:37','2014-06-09 00:32:37','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-kk-4.jpg',0,'attachment','image/jpeg',0),(105,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-1','','inherit','open','open','','big-mc-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-1.jpg',0,'attachment','image/jpeg',0),(106,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-mc-2','','inherit','open','open','','big-mc-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-mc-2.jpg',0,'attachment','image/jpeg',0),(107,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-1','','inherit','open','open','','big-sb-1','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-1.jpg',0,'attachment','image/jpeg',0),(108,2,'2014-06-09 00:32:38','2014-06-09 00:32:38','','big-sb-2','','inherit','open','open','','big-sb-2','','','2014-06-09 00:32:38','2014-06-09 00:32:38','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-2.jpg',0,'attachment','image/jpeg',0),(109,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-sb-3','','inherit','open','open','','big-sb-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-sb-3.jpg',0,'attachment','image/jpeg',0),(110,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-1','','inherit','open','open','','big-tc-1','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-1.jpg',0,'attachment','image/jpeg',0),(111,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-2','','inherit','open','open','','big-tc-2','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-2.jpg',0,'attachment','image/jpeg',0),(112,2,'2014-06-09 00:32:39','2014-06-09 00:32:39','','big-tc-3','','inherit','open','open','','big-tc-3','','','2014-06-09 00:32:39','2014-06-09 00:32:39','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-3.jpg',0,'attachment','image/jpeg',0),(113,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tc-responsive','','inherit','open','open','','big-tc-responsive','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tc-responsive.jpg',0,'attachment','image/jpeg',0),(114,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-1','','inherit','open','open','','big-tt-1','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-1.jpg',0,'attachment','image/jpeg',0),(115,2,'2014-06-09 00:32:40','2014-06-09 00:32:40','','big-tt-2','','inherit','open','open','','big-tt-2','','','2014-06-09 00:32:40','2014-06-09 00:32:40','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-2.jpg',0,'attachment','image/jpeg',0),(116,2,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-3','','inherit','open','open','','big-tt-3','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-3.jpg',0,'attachment','image/jpeg',0),(117,2,'2014-06-09 00:32:41','2014-06-09 00:32:41','','big-tt-responsive','','inherit','open','open','','big-tt-responsive','','','2014-06-09 00:32:41','2014-06-09 00:32:41','',65,'http://thesocietea.org/wp-content/uploads/2014/06/big-tt-responsive.jpg',0,'attachment','image/jpeg',0),(118,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-1','','inherit','open','open','','th-kk-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-1.jpg',0,'attachment','image/jpeg',0),(119,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-2','','inherit','open','open','','th-kk-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-2.jpg',0,'attachment','image/jpeg',0),(120,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-3','','inherit','open','open','','th-kk-3','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-3.jpg',0,'attachment','image/jpeg',0),(121,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-kk-4','','inherit','open','open','','th-kk-4','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-kk-4.jpg',0,'attachment','image/jpeg',0),(122,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-1','','inherit','open','open','','th-mc-1','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-1.jpg',0,'attachment','image/jpeg',0),(123,2,'2014-06-09 00:33:22','2014-06-09 00:33:22','','th-mc-2','','inherit','open','open','','th-mc-2','','','2014-06-09 00:33:22','2014-06-09 00:33:22','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-mc-2.jpg',0,'attachment','image/jpeg',0),(124,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-1','','inherit','open','open','','th-sb-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-1.jpg',0,'attachment','image/jpeg',0),(125,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-2','','inherit','open','open','','th-sb-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-2.jpg',0,'attachment','image/jpeg',0),(126,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-sb-3','','inherit','open','open','','th-sb-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-sb-3.jpg',0,'attachment','image/jpeg',0),(127,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-1','','inherit','open','open','','th-tc-1','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-1.jpg',0,'attachment','image/jpeg',0),(128,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-2','','inherit','open','open','','th-tc-2','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-2.jpg',0,'attachment','image/jpeg',0),(129,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-3','','inherit','open','open','','th-tc-3','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-3.jpg',0,'attachment','image/jpeg',0),(130,2,'2014-06-09 00:33:23','2014-06-09 00:33:23','','th-tc-responsive','','inherit','open','open','','th-tc-responsive','','','2014-06-09 00:33:23','2014-06-09 00:33:23','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tc-responsive.jpg',0,'attachment','image/jpeg',0),(131,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-1','','inherit','open','open','','th-tt-1','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-1.jpg',0,'attachment','image/jpeg',0),(132,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-2','','inherit','open','open','','th-tt-2','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-2.jpg',0,'attachment','image/jpeg',0),(133,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-3','','inherit','open','open','','th-tt-3','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-3.jpg',0,'attachment','image/jpeg',0),(134,2,'2014-06-09 00:33:24','2014-06-09 00:33:24','','th-tt-responsive','','inherit','open','open','','th-tt-responsive','','','2014-06-09 00:33:24','2014-06-09 00:33:24','',65,'http://thesocietea.org/wp-content/uploads/2014/06/th-tt-responsive.jpg',0,'attachment','image/jpeg',0),(135,2,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-cc-responsive','','inherit','open','open','','th-cc-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-cc-responsive.jpg',0,'attachment','image/jpeg',0),(136,2,'2014-06-09 00:59:45','2014-06-09 00:59:45','','th-es-responsive','','inherit','open','open','','th-es-responsive','','','2014-06-09 00:59:45','2014-06-09 00:59:45','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-es-responsive.jpg',0,'attachment','image/jpeg',0),(137,2,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-1','','inherit','open','open','','th-tle-1','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-1.jpg',0,'attachment','image/jpeg',0),(138,2,'2014-06-09 00:59:46','2014-06-09 00:59:46','','th-tle-responsive','','inherit','open','open','','th-tle-responsive','','','2014-06-09 00:59:46','2014-06-09 00:59:46','',64,'http://thesocietea.org/wp-content/uploads/2014/06/th-tle-responsive.jpg',0,'attachment','image/jpeg',0),(139,2,'2014-06-09 01:10:49','2014-06-09 01:10:49','','Home Page Projects','','publish','closed','closed','','home-page-projects','','','2014-06-09 01:25:41','2014-06-09 01:25:41','',0,'http://localhost:8000/?post_type=cfs&#038;p=139',0,'cfs','',0),(140,2,'2014-06-09 22:27:46','2014-06-09 22:27:46','','stockvault-dramatic-landscape106482','','inherit','open','open','','stockvault-dramatic-landscape106482','','','2014-06-09 22:27:46','2014-06-09 22:27:46','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-dramatic-landscape106482.jpg',0,'attachment','image/jpeg',0),(141,2,'2014-06-09 22:32:04','2014-06-09 22:32:04','','stockvault-path-in-nature124348','','inherit','open','open','','stockvault-path-in-nature124348','','','2014-06-09 22:32:04','2014-06-09 22:32:04','',16,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-path-in-nature124348.jpg',0,'attachment','image/jpeg',0),(142,2,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','publish','open','open','','where-i-buy-tea','','','2015-04-01 15:30:04','2015-04-01 15:30:04','',0,'http://localhost:8000/?p=142',0,'post','',1),(143,2,'2014-06-09 22:58:48','2014-06-09 22:58:48','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing &lt;i&gt;exactly&lt;/i&gt; when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-09 22:58:48','2014-06-09 22:58:48','',142,'http://localhost:8000/?p=143',0,'revision','',0),(144,2,'2014-06-10 01:59:45','2014-06-10 01:59:45','I have been drinking tea for about 6 years now, and the quality of tea I have chosen to drink has risen throughout those years. I have moved from purchasing local grocery store tea bags to buying \"whole leaf\" tea that is still in tea bags, all the way to purchasing loose leaf teas by the ounce at local tea stores and Teavana (Amazon, too!)\r\n\r\nHowever, as I have done more research about teas, I have learned that certain teas are kept in storage better than others, and some teas are freshest only in the first year of their life. That means from the moment they\'re picked, they will only have that superior magnificence for a single year. Since the vast majority of teas (not tisanes) are produced in Asia, it typically takes a while before the new season\'s tea leaves are shipped in great quantity to the United States and other western nations.\r\n\r\nI have never actually seen a tea company, be it a commercial tea bag producer, quality loose-leaf tea retailer like Teavana, and other online tea shops, disclose when their teas were plucked and/or shipped to them. However, I have found one tea retailer that goes above and beyond their call of duty to truly try to acquire the freshest and highest quality of tea leaves, and fully disclose all information related to tea quality:\r\n\r\n<a href=\"http://www.teatrekker.com\">Tea Trekker</a>\r\n\r\nMary Lou and Robert Heiss are the owners of this Massachusetts tea shop, and have been in the tea business for decades. They have established personal relationships with tea farmers in Asia and frequently travel to see the new season\'s pluck, as well as create more relationships with new tea farmers. This enables them to source incredibly high-quality teas and have them shipped to the United States very soon after plucking, which allows tea enthusiasts like me to purchase and drink them while knowing <em>exactly</em> when and in what region the tea leaves were plucked. This is perfect and almost necessary knowledge when trying to plan how long each tea can be stored in order to brew them while they are in the freshest state.\r\n\r\nThe Heiss\' also have a wonderful book, which much of The Societea\'s tea data is based off of:\r\n\r\n<a href=\"http://www.amazon.com/The-Tea-Enthusiasts-Handbook-Enjoying/dp/158008804X/ref=sr_1_1?ie=UTF8&amp;qid=1364663260&amp;sr=8-1&amp;keywords=the+tea+enthusiast%27s+handbook\">The Tea Enthusiast\'s Handbook</a>\r\n\r\nI have read this book front-to-back at least twice, and use it often as a reference. If you currently drink tea and wish to learn more about it, and possibly purchase high quality tea as well, then I highly encourage you to check out this book. Beware though, this is a no-fluff book which contains rock solid facts and detail; make sure you\'re in a mental state that\'s ready to learn!\r\n\r\nSo for those of you who have purchased tea in the past and are curious as to where a high-quality tea seller is, look no further; <a href=\"http://teatrekker.com\">Tea Trekker</a> has got you covered.','Where I Buy Tea','','inherit','open','open','','142-revision-v1','','','2014-06-10 01:59:45','2014-06-10 01:59:45','',142,'http://localhost:8000/?p=144',0,'revision','',0),(145,2,'2014-06-10 02:32:09','2014-06-10 02:32:09','','stockvault-cabot-trail---hdr133670','','inherit','open','open','','stockvault-cabot-trail-hdr133670','','','2014-06-10 02:32:09','2014-06-10 02:32:09','',13,'http://thesocietea.org/wp-content/uploads/2014/06/stockvault-cabot-trail-hdr133670.jpg',0,'attachment','image/jpeg',0),(146,2,'2015-06-13 00:00:16','2015-06-13 00:00:16','<h2>As a Speaker</h2>\nI am available as a speaker and have given the following talks in the past:\n\n<strong>General</strong>\n\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\n\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\n\n<strong>Ruby</strong>\n\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\n\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\n\nMetaprogramming in Ruby - 40-45 min\n\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review how to modify existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, gaining access to defined classes just by a string variable, and so much more, all at runtime\n\n<hr class=\"short\" />\n\n<h2>As a Developer</h2>\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.','Hire Me','','inherit','open','open','','13-autosave-v1','','','2015-06-13 00:00:16','2015-06-13 00:00:16','',13,'http://localhost:8000/?p=146',0,'revision','',0),(147,2,'2014-06-10 02:34:57','2014-06-10 02:34:57','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then you\'ve found your guy.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:34:57','2014-06-10 02:34:57','',13,'http://localhost:8000/?p=147',0,'revision','',0),(148,2,'2014-06-10 02:43:56','2014-06-10 02:43:56','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> as well.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:43:56','2014-06-10 02:43:56','',13,'http://localhost:8000/?p=148',0,'revision','',0),(149,2,'2014-06-10 02:47:46','2014-06-10 02:47:46','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a href=\"#\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-10 02:47:46','2014-06-10 02:47:46','',13,'http://localhost:8000/?p=149',0,'revision','',0),(150,2,'2014-06-10 02:50:33','2014-06-10 02:50:33','','Skills','','publish','closed','closed','','skills','','','2014-06-10 03:07:12','2014-06-10 03:07:12','',0,'http://localhost:8000/?post_type=cfs&#038;p=150',0,'cfs','',0),(151,2,'2014-06-10 04:18:26','2014-06-10 04:18:26','','Resume','','publish','open','open','','resume','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://localhost:8000/?p=151',5,'nav_menu_item','',0),(154,2,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','publish','open','open','','vim-as-your-editor','','\nhttp://thesocietea.org/2014/07/how-to-learn-vim/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=154',0,'post','',1),(155,2,'2014-06-11 18:12:41','2014-06-11 18:12:41','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the best ways to learn Vim (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-06-11 18:12:41','2014-06-11 18:12:41','',154,'http://thesocietea.org/2014/06/154-revision-v1/',0,'revision','',0),(156,2,'2014-06-17 02:42:59','2014-06-17 02:42:59','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, any local programming clubs or groups, and even not-in-education adults who are wanting to take the next step as a programmer. I have spoken at high schools in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2014-06-17 02:42:59','2014-06-17 02:42:59','',13,'http://thesocietea.org/2014/06/13-revision-v1/',0,'revision','',0),(158,2,'2014-06-19 03:07:34','2014-06-19 03:07:34','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','publish','open','open','','what-this-site-runs-on-part-1','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=158',0,'post','',4),(159,2,'2014-06-18 23:20:28','2014-06-18 23:20:28','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:20:28','2014-06-18 23:20:28','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(160,2,'2014-06-18 23:46:00','2014-06-18 23:46:00','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS\r\n\r\n<strong>Slight speed boost</strong> - Since the site now interacts with a database, it\'s certainly not faster than a purely static page being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local du','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-18 23:46:00','2014-06-18 23:46:00','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(161,2,'2014-06-19 02:57:46','2014-06-19 02:57:46','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial on a new','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 02:57:46','2014-06-19 02:57:46','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(162,2,'2014-06-19 03:00:55','2014-06-19 03:00:55','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h4>My Initial Planning</h4>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h4>Cons of Using a CMS</h4>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:00:55','2014-06-19 03:00:55','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(163,2,'2014-06-19 03:01:24','2014-06-19 03:01:24','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build too like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phase of Wordpress acceptance:\r\n\r\n1 - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n2 - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n3 - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t  reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:01:24','2014-06-19 03:01:24','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(164,2,'2014-06-19 03:06:54','2014-06-19 03:06:54','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Lightning Fast Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:06:54','2014-06-19 03:06:54','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(165,2,'2014-06-19 03:13:57','2014-06-19 03:13:57','Having gained a lot of new front-end skills with my newish job at <a title=\"Staplegun\" href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I decided to give my site a revamp. The old site was a pretty minimal (ahem...terrible) landing page that just gave basic information about myself, as well as external links to some of my projects. Now, I felt like I could finally develop a site that houses more than just external links - so I decided to rebuild it all. I\'m pretty happy with it, and I thought I\'d share the tools, languages, and frameworks I used to build everything\r\n\r\nWhere does the name The Societea come from? We\'ll save that for another post.\r\n\r\nI\'m breaking this topic up into 2 posts; this one will specifically deal with my choice on whether I decided to use a database for my site, and furthermore, a CMS. Let\'s get to it:\r\n<h3>My Initial Planning</h3>\r\nI initially planned to revamp my site into a completely static project that was just straight HTML, CSS, and JS. I was planning to have a static page blog where each blog post would be its own Markdown file, and then to use a server-side build tool like <a title=\"Middleman\" href=\"http://middlemanapp.com/\" target=\"_blank\">Middleman</a> to use ERB and build/rebuild out the pages after each blog post. I would use nginx to load the pages super fast, and most importantly, I would only need a simple Git repo to manage the entire site; no database whatsoever.\r\n\r\nBut, then I started wanting to take it further. What if I wanted to tag my blog posts, and maybe even give some dynamic options on the page to filter blog posts based on tags? I also wanted to show off my projects that I\'ve worked on as well and give them sortable tags as well (languages used, role, company, etc.). Could I make the projects modular code-wise on the site, and split them up into template-like blocks so I didn\'t have to code the exact same html multiple times? Would it be difficult managing posts, projects, and other repeatable chunks? The more I got down to it, the more I felt like I needed to get a database involved.\r\n<h3>How It\'s Implemented</h3>\r\nBased on my needs, I ended up using a database. I ended up using a CMS. Yes, I ended up using <strong>Wordpress</strong>. I\'m using Wordpress, and it\'s exactly what I needed. Through a CMS I\'m able to handle code chunks incredibly easy with posts, projects, and more, and updating anything is so simple. I coded my projects page initially sans-CMS, and I was looking at over 150 lines easily since I was duplicating so much html. Now, by pulling my images and text from a database, that\'s down to 43 lines (including whitespace lines) -- and I\'m using the same template for my blog posts parent page!\r\n\r\nNow I know CMSs aren\'t the cool things developer-wise anymore, but I\'ve come to realize what they are. A tool - nothing more. As a developer, I\'ve gone through 3 phases of Wordpress acceptance:\r\n\r\n<strong>Phase 1</strong> - What\'s Wordpress? *is shown Wordpress* .... Wow, this is awesome! I can make a decent looking site in no time with free themes and plugins!!\r\n\r\n<strong>Phase 2</strong> - Wordpress? Nah, that\'s not cool once you\'re a <em>real</em> web developer. Custom build all the things!\r\n\r\n<strong>Phase 3</strong> - I know what I need. I know what Wordpress does. Wordpress is what I need to organize my site and manage the things I need to manage. I\'ll custom build the site structure and styles myself.\r\n\r\nSo, yes, this site runs on Wordpress, and I\'m loving it. I custom built the theme and have all the visual plugins running purely through javascript, so I\'m literally using a CMS just to manage the content that actually needs managing. Not everything though, mostly just repeatable things.\r\n<h3>Cons of Using a CMS</h3>\r\nThere are some things that were very important to me that I can\'t reap the benefits of anymore due to using a CMS:\r\n\r\n<strong>Slower Page Loads</strong> - Since the site now interacts with a database, it\'s certainly not faster than purely static pages being served up by nginx. Though I really can\'t tell much, I still know that\'s a fact.\r\n\r\n<strong>Version Control Complexity</strong> - Having a database complicates code management. I initially wanted to just be able to push my files up to a Git repo, clone it anywhere, and know it will just run as is. However, now I need to dump the DB into a local dump SQL file, put that in the repo, and then restore the DB based on the dump file. And, if it\'s an initial clone at a new location, I\'ll also need to create the DB user and the actual database itself. It\'s not too much extra work, but it\'s more complicated than just a \'git clone xxx\'.\r\n\r\nSo there you have it. My site uses a CMS, and while there are some cons associated with that, I chose to use one because the benefits outweigh the negatives by a longshot. I know I didn\'t cover much here, but I really wanted to explain my rationale and some of the struggles I was...well...struggling with as I was planning this site.\r\n\r\nNext post will cover specific tools I used to build the site, js plugins, preprocessors, and page optimization. Stay tuned!','What This Site Runs On - Part 1','','inherit','open','open','','158-revision-v1','','','2014-06-19 03:13:57','2014-06-19 03:13:57','',158,'http://thesocietea.org/2014/06/158-revision-v1/',0,'revision','',0),(167,2,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','publish','open','open','','what-this-site-runs-on-part-2','','http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\nhttp://thesocietea.org/about/\nhttp://thesocietea.org/projects/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=167',0,'post','',0),(168,2,'2014-06-30 17:57:14','2014-06-30 17:57:14','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS options such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and cleaffixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 17:57:14','2014-06-30 17:57:14','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(169,2,'2014-06-30 18:11:26','2014-06-30 18:11:26','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related to specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:11:26','2014-06-30 18:11:26','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(170,2,'2014-06-30 18:15:25','2014-06-30 18:15:25','Now that we\'ve established that this site is running on Wordpress (wondering why I made that choice? <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\">Read about it</a>), I want to delve in further to talk about what else I\'m using, and the tools I used to build this site. We\'ll start off with languages, language plugins, and then general dev tools.\r\n<h2>Languages</h2>\r\nNo big surprises here:\r\n<ul>\r\n	<li>HTML5</li>\r\n	<li>CSS3</li>\r\n	<li>Javascript</li>\r\n	<li>PHP</li>\r\n</ul>\r\n<h2>Language Plugins</h2>\r\n<a title=\"jQuery\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a> - I think this is a given.\r\n\r\n<a title=\"Sass\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a> - Sass is a preprocessor for CSS which gives you a bunch of extra neat CSS enhancements such as modular mixins, functions, variables, style nesting, and even conditionals. It\'s ruby gem, so it integrates very well with Rails projects.\r\n\r\n<a title=\"Compass\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a> - Compass is a sass framework that gives you a lot of baseline modules for you to include in your CSS. I use it mostly so I don\'t have to write the same style 4 times when all that\'s changing are the prefix (incredibly handy for gradients).\r\n\r\n<a title=\"Susy\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy</a> - Susy is a sass plugin that gives you grid control over your web page. No longer do you have to worry about floating and clearfixing things yourself, Susy will do that for you (and it makes for very, very easy responsive design).\r\n\r\n<a title=\"Skrollr\" href=\"https://github.com/Prinzhorn/skrollr\" target=\"_blank\">Skrollr</a> - Skrollr is a javascript parallax plugin. I use it largely on the <a title=\"About\" href=\"http://thesocietea.org/about/\" target=\"_blank\">about</a> page, but you can see it on every subpage header, and the home page. Very, very easy to use, given how powerful it is.\r\n\r\n<a title=\"Sidr\" href=\"http://www.berriart.com/sidr/\" target=\"_blank\">Sidr</a> - javascript plugin for the responsive nav. Don\'t know what I\'m talking about? View the site on a tablet, phone, or just shrink the screen down and see how the nav changes.\r\n\r\n<a title=\"Typed.js\" href=\"http://www.mattboldt.com/demos/typed-js/\" target=\"_blank\">Typed.js</a> - javascript plugin for the typing animation that you see at the top of the home page. It\'s a really cool effect, and the plugin is really simple to use.\r\n\r\n<a title=\"Magnific Popup\" href=\"http://dimsemenov.com/plugins/magnific-popup/\" target=\"_blank\">Magnific Popup</a> - javascript plugin for the lightbox functionality - you can see this on my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page. Lightboxes allow you to show thumbnails on your page which are much smaller in size than the real image itself; this allows you to have a speedy page load and only load your images when the user shows they want to see them. It\'s responsive by default, and, yup you guessed it, very simple to use.\r\n<h2>Dev Tools</h2>\r\n<a title=\"Nginx\" href=\"http://nginx.com/\" target=\"_blank\">Nginx</a> - Lightning quick web server to serve up my pages. It\'s usually this or apache, and nginx always wins in my book.\r\n\r\n<a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> - Grunt is a build automation tool which does so, so much for me. It automatically handles all of my SASS compilation and CSS minification, Coffeescript compilation and JS minification, image minification, and more. If you haven\'t looked into a build automation tool before, I highly recommend you look into Grunt. Your productivity will skyrocket.\r\n\r\nImage Minification - Not really a tool, but I specifically minified every single image on my site through Photoshop, and further through Grunt\'s <a title=\"Image Min\" href=\"https://github.com/gruntjs/grunt-contrib-imagemin\" target=\"_blank\">image min</a> plugin. Just as an example, my home page has over 10 images, and combined with the entire page load including CSS and JS, it\'s not even half a megabyte. Without image minification, that could easily top several megabytes. Check out the <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> page too - it has almost 40 images and the whole page load is just barely over a megabyte!\r\n\r\n<a title=\"Real Favicon Generator\" href=\"http://realfavicongenerator.net/\" target=\"_blank\">Real Favicon Generator</a> - This favicon generator takes a square image that you have and builds out the 20+ favicons that your site needs to look good on every single device. It even gives you several tips and suggestions along the way.\r\n\r\n<a title=\"Vim\" href=\"http://www.vim.org/\" target=\"_blank\">Vim</a>, <a title=\"Zsh\" href=\"http://www.zsh.org/\" target=\"_blank\">Zsh</a>, and <a title=\"Tmux\" href=\"http://tmux.sourceforge.net/\" target=\"_blank\">Tmux</a> - I won\'t explain these since they\'re not related specifically to this site, but these 3 tools alone keep me incredibly productive.\r\n\r\nAnd that\'s it! Everything that my site currently runs on has been listed here and in the <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">previous blog post</a>. Hope you enjoyed reading about my tools, and let me know if you have anything else I should be checking out!','What This Site Runs On - Part 2','','inherit','open','open','','167-revision-v1','','','2014-06-30 18:15:25','2014-06-30 18:15:25','',167,'http://thesocietea.org/2014/06/167-revision-v1/',0,'revision','',0),(172,2,'2014-07-11 02:03:02','2014-07-11 02:03:02','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','publish','open','open','','developing-for-accessibility','','\nhttp://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=172',0,'post','',0),(173,2,'2014-07-11 01:42:00','2014-07-11 01:42:00','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"color: #444444;\">[code language=\"html\"]</span><br style=\"color: #444444;\" />&lt;img src=\"some-source\" alt=\"A cool image of a penguin. Just chillin.\" /&gt;<br style=\"color: #444444;\" /><span style=\"color: #444444;\">[/code]</span>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:42:00','2014-07-11 01:42:00','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(174,2,'2014-07-11 01:51:21','2014-07-11 01:51:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code language=\"html\"]&lt;/span&gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&amp;lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&amp;gt;&lt;br style=&quot;color: #444444;&quot; /&gt;&lt;span style=&quot;color: #444444;&quot;&gt;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:21','2014-07-11 01:51:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(175,2,'2014-07-11 01:51:52','2014-07-11 01:51:52','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:51:52','2014-07-11 01:51:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(176,2,'2014-07-11 01:54:15','2014-07-11 01:54:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[php]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/php]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:54:15','2014-07-11 01:54:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(177,2,'2014-07-11 01:55:01','2014-07-11 01:55:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:01','2014-07-11 01:55:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(178,2,'2014-07-11 01:55:23','2014-07-11 01:55:23','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;&lt;/pre&gt;\r\n&lt;pre&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:55:23','2014-07-11 01:55:23','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(179,2,'2014-07-11 01:57:09','2014-07-11 01:57:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]\r\n&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;\r\n[/html]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 01:57:09','2014-07-11 01:57:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(180,2,'2014-07-11 02:02:38','2014-07-11 02:02:38','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]your code here[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:38','2014-07-11 02:02:38','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(181,2,'2014-07-11 02:02:53','2014-07-11 02:02:53','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means.\r\n\r\nDeveloping an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing.\r\n\r\nLet\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:02:53','2014-07-11 02:02:53','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(182,2,'2014-07-11 02:03:42','2014-07-11 02:03:42','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]var test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:03:42','2014-07-11 02:03:42','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(183,2,'2014-07-11 02:07:34','2014-07-11 02:07:34','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n<pre>```javascript\r\nvar test;\r\n```</pre>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:34','2014-07-11 02:07:34','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(184,2,'2014-07-11 02:07:49','2014-07-11 02:07:49','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[code lang=\"js\"]`\r\nvar test;[/code]\r\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:07:49','2014-07-11 02:07:49','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(185,2,'2014-07-11 02:09:52','2014-07-11 02:09:52','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</h3>\n\n<pre>```javascript\nvar test;\n```</pre>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:09:52','2014-07-11 02:09:52','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(186,2,'2014-07-11 02:10:12','2014-07-11 02:10:12','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>javascript\nvar test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:12','2014-07-11 02:10:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(187,2,'2014-07-11 02:10:24','2014-07-11 02:10:24','<p>Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience. This doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development. Notice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:</p>\n\n<h3>Image and Link Attributes</h3>\n\n<p>If there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:</p>\n\n<p><code>var test;</code></p>\n','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:10:24','2014-07-11 02:10:24','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(188,2,'2014-07-11 02:11:36','2014-07-11 02:11:36','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<code>var test;</code>','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 02:11:36','2014-07-11 02:11:36','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(189,2,'2014-07-11 18:14:59','2014-07-11 18:14:59','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:14:59','2014-07-11 18:14:59','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(190,2,'2014-07-11 18:22:54','2014-07-11 18:22:54','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:22:54','2014-07-11 18:22:54','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(191,2,'2014-07-11 18:23:55','2014-07-11 18:23:55','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\" title=\"example-filename.php\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:23:55','2014-07-11 18:23:55','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(192,2,'2014-07-11 18:24:15','2014-07-11 18:24:15','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\"> </span>\r\n\r\n[css autolinks=\"false\" classname=\"myclass\" collapse=\"false\" firstline=\"1\" gutter=\"true\" highlight=\"1-3,6,9\" htmlscript=\"false\" light=\"false\" padlinenumbers=\"false\" smarttabs=\"true\" tabsize=\"4\" toolbar=\"true\"]your code here[/css]\r\n\r\n\r\n\r\n[html 1=\"&lt;pre&gt;padlinenumbers=&quot;true&quot;&lt;/pre&gt;\" 2=\"&lt;pre&gt;\" language=\"&lt;/pre&gt;\"]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:24:15','2014-07-11 18:24:15','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(193,2,'2014-07-11 18:25:09','2014-07-11 18:25:09','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n&nbsp;\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:25:09','2014-07-11 18:25:09','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(194,2,'2014-07-11 18:27:45','2014-07-11 18:27:45','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;\">\r\n</span>\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 18:27:45','2014-07-11 18:27:45','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(195,2,'2014-07-11 20:58:21','2014-07-11 20:58:21','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]&lt;/pre&gt;\r\n&lt;pre&gt;&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:58:21','2014-07-11 20:58:21','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(196,2,'2014-07-11 20:59:13','2014-07-11 20:59:13','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h3>Image and Link Attributes</h3>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h3>Noticeable Focus Status for Links</h3>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:13','2014-07-11 20:59:13','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(197,2,'2014-07-11 20:59:48','2014-07-11 20:59:48','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n&nbsp;','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 20:59:48','2014-07-11 20:59:48','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(198,2,'2014-07-11 21:19:01','2014-07-11 21:19:01','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:19:01','2014-07-11 21:19:01','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(199,2,'2014-07-11 21:21:26','2014-07-11 21:21:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:26','2014-07-11 21:21:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(200,2,'2014-07-11 21:21:46','2014-07-11 21:21:46','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it really needs down in the actual build phase of development. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:21:46','2014-07-11 21:21:46','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(201,2,'2014-07-11 21:22:12','2014-07-11 21:22:12','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to in the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:12','2014-07-11 21:22:12','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(202,2,'2014-07-11 21:22:26','2014-07-11 21:22:26','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible is ensuring that all users - whether disabled in some way or not - can not only access your but interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:22:26','2014-07-11 21:22:26','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(203,2,'2014-07-11 21:28:37','2014-07-11 21:28:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind disorders, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s talk about the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding for the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when the link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine look like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is basically a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranamoly, which means they have difficulties seeing green. To learn more about the different types (Protanamoly, Deuteranamoly, Tritanamoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed something huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:28:37','2014-07-11 21:28:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(204,2,'2014-07-11 21:34:50','2014-07-11 21:34:50','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"&quot;mini\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:34:50','2014-07-11 21:34:50','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(205,2,'2014-07-11 21:35:37','2014-07-11 21:35:37','Accessibility is one of those topics that everyone always <em>aims</em> for and remarks how important it is as far as development goes, but it never really gets thought of as much as it needs to during the actual build phase. But wait a minute, let\'s define what accessibility for the web really means. Developing an accessible site means ensuring that all users - whether disabled in some way or not - can not only access your site but also interact with it with the best possible user experience.\r\n\r\nThis doesn\'t entail responsiveness as much (which should always be staple of a new web project these days), but focuses more on building a well structured website so that it is keyboard-navigable, parseable with screen readers, visible to users with color-blind deficiencies, etc. Sure, these users won\'t make up a majority of the users on your sites, but we all know that\'s just an excuse to get out of a little extra planning for development.\r\n\r\nNotice how I said <em>planning for development</em> instead of actual <em>development</em>. That\'s because there\'s really no extra development involved with making an accessible webpage, as long as you know what you\'re doing. Let\'s get into the key areas where developers should focus on in order to make their sites fully accessible:\r\n<h2>Image and Link Attributes</h2>\r\nIf there\'s one thing you know about accessibility, it\'s to put alt tags on your images. Something like this:\r\n\r\n[html]&lt;img src=&quot;some-source&quot; alt=&quot;A cool image of a penguin. Just chillin.&quot; /&gt;[/html]\r\n\r\nBut, don\'t forget about your anchor tags too. Instead of alt attributes, you need to add title attributes here. This isn\'t necessary for all links, but make sure you do them for your icon-font anchors - you know, things like your facebook, twitter, and responsive nav icon:\r\n\r\n[html]&lt;a class=&quot;facebook-icon&quot; title=&quot;Facebook&quot;&gt;&lt;a/&gt;[/html]\r\n\r\n<h2>Use Semantic HTML5 Elements</h2>\r\nHTML5 added some new descriptive container elements that you should learn about if you don\'t know them already. These include nav, section, header, footer, article, and aside. Each of them function just like a div, but have different semantic meanings. For example, <em>nav</em> should be used for your page\'s navigation, <em>aside</em> should be used for non-relavant content, <em>section</em> is a large container which can contain a <em>header, footer, </em>and multiple <em>articles</em>, etc.\r\n\r\nWhile an average user won\'t usually see the difference, it makes for better design architecture, enhances your browser\'s understanding of the content inside of these containers, and allows for more rich screen reading.\r\n<h2>Noticeable Focus Status for Links</h2>\r\nYou probably know about some of the states that an html anchor can be in such as hover or visited, but you may not know about the focus state. The focus state is shown when ... yup, you guesssed it, when a link is focused. Many users don\'t see this phase because it\'s when your keyboard is focused on the element. This is the state when you are typing into an input element, and the state that the \'Submit\' link has when you tab onto it to hit enter.\r\n\r\nMany users do actually use the tab key to navigate through your site, whether for accessibility purposes or just sheer speed, and you need to account for that. There are 2 things I usually do here.\r\n\r\nFirst - I put a default style on all focused links:\r\n\r\n[css]a:focus { outline: 1px solid #ffa500!important; }[/css]\r\n\r\nNext, I usually find the elements that have unique hover effects, and I often times just use the same hover effect for the focus effect. So some elements of mine are structured like this:\r\n\r\n[css]\r\n&amp;:hover, &amp;:focus {\r\n  color: red;\r\n  background-color: white;\r\n}\r\n[/css]\r\n\r\n<h2> Skip Menus</h2>\r\nEvery accessible page should be complete with a skip menu. A skip menu is a menu that is invisible, but becomes visible after you start tabbing through the page. It allows users to skip to certain portions of your page content - this is very important for users who use screen readers or can\'t scroll well. Here\'s an <a href=\"http://new.okcommerce.gov/smart-move/\" target=\"_blank\">example</a> of a solid skip menu I built here at Staplegun. Just start tabbing through the page and you\'ll see what I mean.\r\n\r\nThe code involved is very simple, but I won\'t cloud up this post with it. See my <a title=\"Skip Menu Gist\" href=\"https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666\" target=\"_blank\">skip menu gist</a> if you\'d like to see how to easily build one.\r\n<h2>Test Your Site With a Screen Reader</h2>\r\nMany users require the use of a screen reader to interactive with your site. Luckily, if you\'ve followed the advice laid out thus far, then most of your site should already work fine with a screen reader. This is where you\'ll figure out what links need titles, what images need alt tags, and if you need to fix any of your page layout structure.\r\n\r\nIf you\'re testing in Chrome, I like the screen reader <a title=\"Chrome Vox\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn\" target=\"_blank\">Chrome Vox</a> which is a Chrome extension. It\'s very easy to use from a development standpoint.\r\n<h2>Test For Color Blind Users</h2>\r\nColor blindness isn\'t incredibly common, but common enough that to be a good front-end developer, you need to account for it. This means following a good color scheme where the colors fit together for maximum viewing accessibility. Usually if you use a <a href=\"http://paletton.com/\" target=\"_blank\">color scheme designer</a> of some sort and stick with it, then you\'re in pretty good shape already.\r\n\r\nMost users who are color blind fall into the category of deuteranomoly, which means they have difficulties seeing green. To learn more about the different types (Protanomoly, Deuteranomoly, Tritanomoly, etc.), check out the main <a title=\"Colorblind Types\" href=\"http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/\" target=\"_blank\">Colorblind Awareness site</a>.\r\n\r\nSince most developers aren\'t colorblind, it\'s tough to test for without being in a colorblind user\'s shoes. Well now you can be, with <a title=\"NoCoffee Chrome Extension\" href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US\" target=\"_blank\">NoCoffee</a> - a vision simulator that will easily show you what your web pages look like from the viewpoint of several vision impairments. I have been using this extensively to test color issues on my web pages, and it\'s been incredibly insightful to see what real colorblind users see.\r\n\r\n<hr class=\"short\" />\r\n\r\nAnd that\'s the gist of it! A little bit more than just adding alt tags to your images, but not enough to where you can\'t handle it. Now go out there and develop fully accessible web pages, and get in touch with me if I missed anything huge in this post.','Developing for Accessibility','','inherit','open','open','','172-revision-v1','','','2014-07-11 21:35:37','2014-07-11 21:35:37','',172,'http://thesocietea.org/2014/07/172-revision-v1/',0,'revision','',0),(206,2,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-1','','inherit','open','open','','big-json-1','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-1.jpg',0,'attachment','image/jpeg',0),(207,2,'2014-07-14 22:27:34','2014-07-14 22:27:34','','big-json-2','','inherit','open','open','','big-json-2','','','2014-07-14 22:27:34','2014-07-14 22:27:34','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-2.jpg',0,'attachment','image/jpeg',0),(208,2,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-3','','inherit','open','open','','big-json-3','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-3.jpg',0,'attachment','image/jpeg',0),(209,2,'2014-07-14 22:27:35','2014-07-14 22:27:35','','big-json-4','','inherit','open','open','','big-json-4','','','2014-07-14 22:27:35','2014-07-14 22:27:35','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-json-4.jpg',0,'attachment','image/jpeg',0),(210,2,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-1','','inherit','open','open','','th-json-1','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-1.jpg',0,'attachment','image/jpeg',0),(211,2,'2014-07-14 22:27:45','2014-07-14 22:27:45','','th-json-2','','inherit','open','open','','th-json-2','','','2014-07-14 22:27:45','2014-07-14 22:27:45','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-2.jpg',0,'attachment','image/jpeg',0),(212,2,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-3','','inherit','open','open','','th-json-3','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-3.jpg',0,'attachment','image/jpeg',0),(213,2,'2014-07-14 22:27:46','2014-07-14 22:27:46','','th-json-4','','inherit','open','open','','th-json-4','','','2014-07-14 22:27:46','2014-07-14 22:27:46','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-json-4.jpg',0,'attachment','image/jpeg',0),(214,2,'2014-07-14 22:30:01','2014-07-14 22:30:01','','JSON API Websocket Wrapper','','publish','closed','closed','','json-api-websocket-wrapper','','','2014-08-18 22:11:18','2014-08-18 22:11:18','',0,'http://thesocietea.org/?post_type=project&#038;p=214',6,'project','',0),(215,2,'2014-07-14 22:36:58','2014-07-14 22:36:58','','big-77-1','','inherit','open','open','','big-77-1-2','','','2014-07-14 22:36:58','2014-07-14 22:36:58','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-1.jpg',0,'attachment','image/jpeg',0),(216,2,'2014-07-14 22:36:59','2014-07-14 22:36:59','','big-77-responsive','','inherit','open','open','','big-77-responsive-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/big-77-responsive.jpg',0,'attachment','image/jpeg',0),(217,2,'2014-07-14 22:36:59','2014-07-14 22:36:59','','th-77-1','','inherit','open','open','','th-77-1-2','','','2014-07-14 22:36:59','2014-07-14 22:36:59','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-1.jpg',0,'attachment','image/jpeg',0),(218,2,'2014-07-14 22:37:00','2014-07-14 22:37:00','','th-77-responsive','','inherit','open','open','','th-77-responsive-2','','','2014-07-14 22:37:00','2014-07-14 22:37:00','',0,'http://thesocietea.org/wp-content/uploads/2014/07/th-77-responsive.jpg',0,'attachment','image/jpeg',0),(220,2,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','publish','open','open','','how-to-learn-vim','','\nhttp://thesocietea.org/2014/06/vim-as-your-editor/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=220',0,'post','',1),(221,2,'2014-07-24 17:40:24','2014-07-24 17:40:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:40:24','2014-07-24 17:40:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(222,2,'2014-07-24 17:45:13','2014-07-24 17:45:13','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n\r\n[shell]vimtutor[/shell]\r\n\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:45:13','2014-07-24 17:45:13','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(223,2,'2014-07-24 17:54:44','2014-07-24 17:54:44','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n<h2>Plugins</h2>\r\nThe Vim community is very, very active and is completely focused on productivity.','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 17:54:44','2014-07-24 17:54:44','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(224,2,'2014-07-24 18:00:17','2014-07-24 18:00:17','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:00:17','2014-07-24 18:00:17','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(225,2,'2014-07-24 18:08:45','2014-07-24 18:08:45','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:08:45','2014-07-24 18:08:45','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(226,2,'2014-07-24 18:11:37','2014-07-24 18:11:37','','vim_tutor','','inherit','open','open','','vim_tutor','','','2014-07-24 18:11:37','2014-07-24 18:11:37','',220,'http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg',0,'attachment','image/jpeg',0),(227,2,'2014-07-24 18:11:51','2014-07-24 18:11:51','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignright wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:11:51','2014-07-24 18:11:51','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(228,2,'2014-07-24 18:12:24','2014-07-24 18:12:24','Finally, 7 months latter, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning Vim (which would be **awesome**), or you just came here of your own random volition. Either works for me, but if you have heard of Vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\nPrerequisite: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn Vim, and if so, then to start getting familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and gives you a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for Vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a line into your copy buffer), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using Vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using Vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe Vim community is very, very active and is completely focused on productivity. You can find Vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base Vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, Git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (Very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:12:24','2014-07-24 18:12:24','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(229,2,'2014-07-24 18:18:14','2014-07-24 18:18:14','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\"><img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" /></a>\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-07-24 18:18:14','2014-07-24 18:18:14','',220,'http://thesocietea.org/2014/07/220-revision-v1/',0,'revision','',0),(230,2,'2014-07-28 01:53:58','2014-07-28 01:53:58','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-autosave-v1','','','2014-07-28 01:53:58','2014-07-28 01:53:58','',16,'http://thesocietea.org/2014/07/16-autosave-v1/',0,'revision','',0),(231,2,'2014-07-28 01:55:02','2014-07-28 01:55:02','Below you\'ll find my blog posts. You can also check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-revision-v1','','','2014-07-28 01:55:02','2014-07-28 01:55:02','',16,'http://thesocietea.org/2014/07/16-revision-v1/',0,'revision','',0),(233,2,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','publish','open','open','','getting-familiar-with-bower-and-browserify','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=233',0,'post','',1),(234,2,'2014-08-14 22:47:24','2014-08-14 22:47:24','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple \r\n[code]bower install &lt;package&gt;[/code]\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:24','2014-08-14 22:47:24','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(235,2,'2014-08-14 22:47:28','2014-08-14 22:47:28','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:47:28','2014-08-14 22:47:28','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(236,2,'2014-08-14 22:52:44','2014-08-14 22:52:44','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n<pre>[<span style=\"color: #444444;\">sourcecode language=\"plain\"</span>]bower install &lt;package&gt;[/sourcecode]</pre>\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:44','2014-08-14 22:52:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(237,2,'2014-08-14 22:52:58','2014-08-14 22:52:58','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;plain&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:52:58','2014-08-14 22:52:58','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(238,2,'2014-08-14 22:53:11','2014-08-14 22:53:11','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;bash&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:11','2014-08-14 22:53:11','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(239,2,'2014-08-14 22:53:17','2014-08-14 22:53:17','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[code 1=\"style=&quot;color:\" 2=\"#444444;&quot;&gt;\" 3=\"language=&quot;php&quot;&lt;/span&gt;\" language=\"&lt;span\"]bower install &lt;package&gt;[/code]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:17','2014-08-14 22:53:17','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(240,2,'2014-08-14 22:53:33','2014-08-14 22:53:33','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\n, or you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 22:53:33','2014-08-14 22:53:33','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(241,2,'2014-08-14 23:00:23','2014-08-14 23:00:23','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}&lt;/pre&gt;\r\n&lt;pre&gt;[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:23','2014-08-14 23:00:23','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(242,2,'2014-08-14 23:00:41','2014-08-14 23:00:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]{&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:00:41','2014-08-14 23:00:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(243,2,'2014-08-14 23:01:06','2014-08-14 23:01:06','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[shell]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:06','2014-08-14 23:01:06','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(244,2,'2014-08-14 23:01:54','2014-08-14 23:01:54','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it.</span>\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:01:54','2014-08-14 23:01:54','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(245,2,'2014-08-14 23:09:52','2014-08-14 23:09:52','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n\r\n[shell]bower install[/shell]\r\n\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. This tool seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while writing purely front-end code','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:09:52','2014-08-14 23:09:52','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(246,2,'2014-08-14 23:15:46','2014-08-14 23:15:46','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]&lt;/pre&gt;\r\n&lt;pre style=&quot;color: #000000;&quot;&gt;var $ = require(\'./jquery.min.js\');\r\n\r\n// External Libs\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});&lt;/pre&gt;\r\n&lt;pre&gt;[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:15:46','2014-08-14 23:15:46','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(247,2,'2014-08-14 23:16:32','2014-08-14 23:16:32','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript]\r\nvar $ = require(\'./jquery.min.js\');\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./lib/console-support.js\');\r\nrequire(\'./lib/outbound.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:16:32','2014-08-14 23:16:32','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(248,2,'2014-08-14 23:26:12','2014-08-14 23:26:12','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\"/>\r\n\r\n&nbsp;','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:26:12','2014-08-14 23:26:12','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(249,2,'2014-08-14 23:31:41','2014-08-14 23:31:41','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about not-fun things like manually including files, concatenating scripts together, and manually running build tasks. I\'ve been into Grunt for a while now, which has been key for speeding up my workflow when I\'m working with projects that don\'t have build automation built in (like Rails or Ember-CLI). I had heard \'Bower\' and \'Browserify\' thrown around a on Twitter and local dev meetings, and I knew that my fellow developers were making use of them, so I decided to check them out. Boy am I glad I did, because these are tools that every developer dealing with the client-side should know about.\r\n\r\nWhile Bower and Browserify aren\'t related themselves, I use them together quite a bit which is what makes this combo so powerful. Let\'s start off with a brief bio of what they both are:\r\n<h2>Bower</h2>\r\nBower is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to download.  It fetches<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell Bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a directory at the root of where you run your command into a bower_components directory. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both Javascript and Sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that Bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nNow that we\'ve discussed how to get our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\nBrowserify is a tool which, just like Bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify only allows you to do two things:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll write and eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard $ operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but browserify accounts for modularity, so these files will only be accessible in the scope in which you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into the file bundle.js. This would be the file that you include in your html, and it will be fully built as browser-compatible javascript. That\'s how you do Node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also showed how you can install vendor packages with bower and then include them into your files using browserify, all while writing modular javascript. Now this is a big improvement over manually finding and downloading vendor packages from the internet, and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this method. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t like manual labor like that.\r\n\r\nSo stay tuned, we\'ve got our basics covered here, and next time we can get into maximizing your javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).','Bower and Browserify = Super Asset Building','','inherit','open','open','','233-revision-v1','','','2014-08-14 23:31:41','2014-08-14 23:31:41','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(250,2,'2014-08-15 02:46:25','2014-08-15 02:46:25','Lately I\'ve been getting very into build automation and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been into grunt for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard \'bower\' and \'browserify\' thrown around a on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a \'bower_components\' directory at the root of where you run your command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Noramlize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower gets are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes Bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter Browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is simple; only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together, and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jquery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I am using. By setting jquery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can modularly access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the requirements, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple unminimized libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like Grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating build automation (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 02:46:25','2014-08-15 02:46:25','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(251,2,'2014-08-15 03:00:44','2014-08-15 03:00:44','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"bower.io\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2014-08-15 03:00:44','2014-08-15 03:00:44','',233,'http://thesocietea.org/2014/08/233-revision-v1/',0,'revision','',0),(252,2,'2014-08-18 21:57:29','2014-08-18 21:57:29','','Oklahoma Department of Commerce','','publish','closed','closed','','oklahoma-department-of-commerce','','','2014-08-18 22:10:29','2014-08-18 22:10:29','',0,'http://thesocietea.org/?post_type=project&#038;p=252',3,'project','',0),(253,2,'2014-08-18 21:55:25','2014-08-18 21:55:25','','big-odoc-1','','inherit','open','open','','big-odoc-1','','','2014-08-18 21:55:25','2014-08-18 21:55:25','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-1.jpg',0,'attachment','image/jpeg',0),(254,2,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-2','','inherit','open','open','','big-odoc-2','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-2.jpg',0,'attachment','image/jpeg',0),(255,2,'2014-08-18 21:55:26','2014-08-18 21:55:26','','big-odoc-3','','inherit','open','open','','big-odoc-3','','','2014-08-18 21:55:26','2014-08-18 21:55:26','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-3.jpg',0,'attachment','image/jpeg',0),(256,2,'2014-08-18 21:55:27','2014-08-18 21:55:27','','big-odoc-4','','inherit','open','open','','big-odoc-4','','','2014-08-18 21:55:27','2014-08-18 21:55:27','',252,'http://thesocietea.org/wp-content/uploads/2014/08/big-odoc-4.jpg',0,'attachment','image/jpeg',0),(257,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-1','','inherit','open','open','','th-odoc-1','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-1.jpg',0,'attachment','image/jpeg',0),(258,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-2','','inherit','open','open','','th-odoc-2','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-2.jpg',0,'attachment','image/jpeg',0),(259,2,'2014-08-18 21:55:28','2014-08-18 21:55:28','','th-odoc-3','','inherit','open','open','','th-odoc-3','','','2014-08-18 21:55:28','2014-08-18 21:55:28','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-3.jpg',0,'attachment','image/jpeg',0),(260,2,'2014-08-18 21:55:29','2014-08-18 21:55:29','','th-odoc-4','','inherit','open','open','','th-odoc-4','','','2014-08-18 21:55:29','2014-08-18 21:55:29','',252,'http://thesocietea.org/wp-content/uploads/2014/08/th-odoc-4.jpg',0,'attachment','image/jpeg',0),(261,2,'2014-08-28 14:00:39','2014-08-28 14:00:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','publish','open','open','','building-javascript-with-grunt-bower-browserify','','\nhttp://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=261',0,'post','',12),(262,2,'2014-08-21 12:52:15','2014-08-21 12:52:15','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\n\r\nNow that we have the grunt CLI installed,','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:52:15','2014-08-21 12:52:15','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(263,2,'2014-08-21 12:58:12','2014-08-21 12:58:12','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[json]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\json]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:12','2014-08-21 12:58:12','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(264,2,'2014-08-21 12:58:32','2014-08-21 12:58:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n<pre>[javascript][/javascript]\r\n\"devDependencies\": {\r\n  \"grunt-bower-task\": \"0.4.0\",\r\n  \"grunt-browserify\": \"2.1.4\",\r\n  \"grunt-pagespeed\": \"0.3.0\",\r\n  \"grunt-concurrent\": \"0.5.0\",\r\n  \"browserify\": \"~4.2.3\"\r\n}\r\n[\\javascript]</pre>','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:32','2014-08-21 12:58:32','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(265,2,'2014-08-21 12:58:42','2014-08-21 12:58:42','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[javascript][/javascript]\r\n\r\n\"devDependencies\": { \"grunt-bower-task\": \"0.4.0\", \"grunt-browserify\": \"2.1.4\", \"grunt-pagespeed\": \"0.3.0\", \"grunt-concurrent\": \"0.5.0\", \"browserify\": \"~4.2.3\" } [\\javascript]','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 12:58:42','2014-08-21 12:58:42','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(266,2,'2014-08-21 13:00:09','2014-08-21 13:00:09','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:09','2014-08-21 13:00:09','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(267,2,'2014-08-21 13:00:28','2014-08-21 13:00:28','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n&quot;devDependencies&quot;: {\r\n  &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n  &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n  &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n}\r\n[/code]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:00:28','2014-08-21 13:00:28','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(268,2,'2014-08-21 13:10:37','2014-08-21 13:10:37','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. <strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.\r\n\r\nTo install:\r\n\r\n[shell]npm install[/shell]\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:10:37','2014-08-21 13:10:37','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(269,2,'2014-08-21 13:16:25','2014-08-21 13:16:25','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions.Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNothing exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:16:25','2014-08-21 13:16:25','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(270,2,'2014-08-21 13:29:16','2014-08-21 13:29:16','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:29:16','2014-08-21 13:29:16','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(271,2,'2014-08-21 13:37:18','2014-08-21 13:37:18','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:18','2014-08-21 13:37:18','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(272,2,'2014-08-21 13:37:41','2014-08-21 13:37:41','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\n.\r\n.\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n.\r\n.\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:37:41','2014-08-21 13:37:41','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(273,2,'2014-08-21 13:38:00','2014-08-21 13:38:00','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping as many vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\n&nbsp;','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-21 13:38:00','2014-08-21 13:38:00','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(274,2,'2014-08-22 17:46:28','2014-08-22 17:46:28','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://www.vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2014-08-22 17:46:28','2014-08-22 17:46:28','',220,'http://thesocietea.org/2014/08/220-revision-v1/',0,'revision','',0),(276,2,'2014-08-24 00:12:48','2014-08-24 00:12:48','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\n&nbsp;\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require Common-JS style scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own Common-JS style scripts? No, absolutely not! We can fix this with an awesome browserify plugin called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\nBrowserify-shim','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:12:48','2014-08-24 00:12:48','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(277,2,'2014-08-24 00:34:39','2014-08-24 00:34:39','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re about to get dirty with them both by incorporating them both into grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:34:39','2014-08-24 00:34:39','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(278,2,'2014-08-24 00:35:49','2014-08-24 00:35:49','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am currently choosing to stick with grunt as it still currently maintains a higher market share of adoption.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\n<strong>Note:</strong> As of the writing of this post, version 5.x.x of browserify exists. I am choosing to use browserify v4 because of compatibility issues with another plugin that we\'ll cover in the next blog post. Hopefully this compatibility issue gets resolved quickly, as everyone wants to use the latest versions. Now that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is something like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ul>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ul>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, here browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to use (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to: $ and Modernizr. Lastly, we tell browserify to implement the browserify-shim transformation prior to building out the files.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will our javascript file above work? Yup, 100%.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using bower to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using browserify-shim to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using browserify to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through a task-runner to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do a lot of work for us, another thing to consider is that now we can really write modular code. That\'s a best practice in every language, and having that at our disposal will allow us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:35:49','2014-08-24 00:35:49','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(279,2,'2014-08-24 00:50:36','2014-08-24 00:50:36','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~4.2.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-24 00:50:36','2014-08-24 00:50:36','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(281,2,'2014-08-25 12:19:06','2014-08-25 12:19:06','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensurse that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2014-08-25 12:19:06','2014-08-25 12:19:06','',261,'http://thesocietea.org/2014/08/261-revision-v1/',0,'revision','',0),(282,2,'2014-09-18 14:00:37','2014-09-18 14:00:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','publish','open','open','','using-geojson-files-with-google-maps-api','','\nhttp://thesocietea.org/2014/06/where-i-buy-tea/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=282',0,'post','',0),(283,2,'2014-08-27 18:09:28','2014-08-27 18:09:28','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n\r\n[html]\r\n\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n// Set basic map attributes\r\nvar map, polys = [];\r\nvar mapOptions = {\r\nzoom: 5,\r\ncenter: new google.maps.LatLng(39.16,-100.72)\r\n\r\n};\r\n\r\nmap = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n\r\n[/html]\r\n\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:09:28','2014-08-27 18:09:28','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(284,2,'2014-08-27 18:10:18','2014-08-27 18:10:18','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n\r\n&nbsp;','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:10:18','2014-08-27 18:10:18','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(285,2,'2014-08-27 18:20:26','2014-08-27 18:20:26','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[json title=\"arkansas.geo.json\r\n{\r\n\"type\":\"FeatureCollection\",\r\n\"features\":[\r\n{\r\n\"type\":\"Feature\",\r\n\"id\":\"USA-AR\",\r\n\"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n\"geometry\":{\r\n\"type\":\"Polygon\",\r\n\"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n}\r\n[/json]','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:20:26','2014-08-27 18:20:26','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(286,2,'2014-08-27 18:22:41','2014-08-27 18:22:41','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[json title=\"arkansas.geo.json]\r\n{\r\n  \"type\":\"FeatureCollection\",\r\n  \"features\":[\r\n    {\r\n      \"type\":\"Feature\",\r\n      \"id\":\"USA-AR\",\r\n      \"properties\":{\"fips\":\"05\",\"name\":\"Arkansas\"},\r\n      \"geometry\":{\r\n        \"type\":\"Polygon\",\r\n        \"coordinates\":[[[-94.473842,36.501861],[-90.152536,36.496384],[-90.064905,36.304691],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/json]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:22:41','2014-08-27 18:22:41','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(287,2,'2014-08-27 18:23:14','2014-08-27 18:23:14','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n<pre>[code language=\"title=&quot;arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]</pre>','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:23:14','2014-08-27 18:23:14','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(288,2,'2014-08-27 18:24:34','2014-08-27 18:24:34','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are .geo.json files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],...\r\n      }\r\n    } \r\n  ] \r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:24:34','2014-08-27 18:24:34','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(289,2,'2014-08-27 18:25:51','2014-08-27 18:25:51','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using .geo.json files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-27 18:25:51','2014-08-27 18:25:51','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(290,2,'2014-08-28 12:36:57','2014-08-28 12:36:57','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style the maps you may want to use as you build them out - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var map, polys = [];\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nHowever, while the Google Maps API is certainly awesome, there are some limitations to it - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China the tea you purchase is from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that would show the coordinates for Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 12:36:57','2014-08-28 12:36:57','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(291,2,'2014-08-28 13:05:30','2014-08-28 13:05:30','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:05:30','2014-08-28 13:05:30','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(292,2,'2014-08-28 13:06:33','2014-08-28 13:06:33','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" Well, you\'re in luck. While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you see fit. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or honestly whatever we want! Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any styles. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:06:33','2014-08-28 13:06:33','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(293,2,'2014-08-28 13:10:05','2014-08-28 13:10:05','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, there are countless ways you can use it in your projects. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we have a rendering Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:10:05','2014-08-28 13:10:05','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(294,2,'2014-08-28 13:15:12','2014-08-28 13:15:12','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files with the extension <strong>.geo.json</strong>.\r\n<h2> What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the outline of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\nThese files are what I used to build a small demo app:\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API if you want to see what we discussed here in action.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:15:12','2014-08-28 13:15:12','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(295,2,'2014-08-28 13:20:19','2014-08-28 13:20:19','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"mini\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:19','2014-08-28 13:20:19','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(296,2,'2014-08-28 13:20:37','2014-08-28 13:20:37','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/google_maps_api_demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-08-28 13:20:37','2014-08-28 13:20:37','',282,'http://thesocietea.org/2014/08/282-revision-v1/',0,'revision','',0),(297,2,'2014-08-29 00:02:31','2014-08-29 00:02:31','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that you don\'t use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 00:02:31','2014-08-29 00:02:31','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(298,2,'2014-08-29 13:30:34','2014-08-29 13:30:34','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\n\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, this largely comes off as meaning you don\'t have use the mouse to interact (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\n<ul>\n	<li>Vim makes you lightning fast</li>\n</ul>\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\n<ul>\n	<li>Vim is super customizable</li>\n</ul>\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\n<ul>\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\n</ul>\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\n<ul>\n	<li>Vim is absolutely free</li>\n</ul>\nNo Gimmicks. Nuff\' said here.\n<ul>\n	<li>Vim is used in the terminal itself</li>\n</ul>\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\n\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-autosave-v1','','','2014-08-29 13:30:34','2014-08-29 13:30:34','',154,'http://thesocietea.org/2014/08/154-autosave-v1/',0,'revision','',0),(299,2,'2014-08-29 13:31:15','2014-08-29 13:31:15','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:31:15','2014-08-29 13:31:15','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(300,2,'2014-08-29 13:33:20','2014-08-29 13:33:20','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://vim.org\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2014-08-29 13:33:20','2014-08-29 13:33:20','',154,'http://thesocietea.org/2014/08/154-revision-v1/',0,'revision','',0),(301,2,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','publish','open','open','','programming-concepts-the-stack-and-the-heap','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=301',0,'post','',0),(302,2,'2014-08-31 06:04:37','2014-08-31 06:04:37','Being a developer, we often throw around a lot of words that sounds like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend like we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be unfamiliar about everything that it entails; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more)\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the \'old-school\' topics that we may miss out on these days, but are very important.\r\n\r\nThis will probably turn into a series, as today I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 06:04:37','2014-08-31 06:04:37','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(303,2,'2014-08-31 16:13:56','2014-08-31 16:13:56','Being a developer, we often throw around a lot of words that sound like nonsense to other people. When I say something like \"So I\'ll just make a POST request from the client-side to a server-side API, and that will return the JSON necessary for me to create a client-side object,\" I may be talking in a language that a lot of developers understand, but let\'s not pretend we\'re magic - there\'s still a lot of terminology that we don\'t know.\r\n\r\nI\'d like to take a step back from the stuff we\'re used to, and really dig into some key terms and concepts that we probably hear a lot, but may be a little unfamiliar with; I specifically want to hone in on topics that are at the core of modern-day programming that we don\'t necessarily have to deal with or know (but it always make us better developers to know more).\r\n\r\nAs we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nThis may easily turn into a series, as right now I\'m only focusing on one topic: <strong>the</strong> <strong>stack vs. the heap</strong>.\r\n\r\n&nbsp;','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-08-31 16:13:56','2014-08-31 16:13:56','',301,'http://thesocietea.org/2014/08/301-revision-v1/',0,'revision','',0),(305,2,'2014-09-04 14:00:19','2014-09-04 14:00:19','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','publish','open','open','','power-tools-using-grep-xargs-and-sed','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=305',0,'post','',3),(306,2,'2014-09-02 16:58:11','2014-09-02 16:58:11','I was recently inspired to write this post after I came across a situation where I needed to do a change to multiple files where all I was doing was changing all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a good deal of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\n&nbsp;\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 16:58:11','2014-09-02 16:58:11','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(307,2,'2014-09-02 17:13:00','2014-09-02 17:13:00','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the -G flag:\r\n\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:13:00','2014-09-02 17:13:00','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(308,2,'2014-09-02 17:40:13','2014-09-02 17:40:13','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\n<h2>Combining Them</h2>','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-02 17:40:13','2014-09-02 17:40:13','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(309,2,'2014-09-03 19:25:14','2014-09-03 19:25:14','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-03 19:25:14','2014-09-03 19:25:14','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(310,2,'2014-09-04 00:44:41','2014-09-04 00:44:41','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to do a filter of some sort to find the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level tex editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three base commands that are common across all *nix systems, we can do','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:44:41','2014-09-04 00:44:41','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(311,2,'2014-09-04 00:54:05','2014-09-04 00:54:05','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:54:05','2014-09-04 00:54:05','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(312,2,'2014-09-04 00:56:08','2014-09-04 00:56:08','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the\r\n\r\nbase shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:08','2014-09-04 00:56:08','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(313,2,'2014-09-04 00:56:17','2014-09-04 00:56:17','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <strong>grep</strong>, <strong>xargs</strong>, and <strong>sed</strong>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:56:17','2014-09-04 00:56:17','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(314,2,'2014-09-04 00:58:15','2014-09-04 00:58:15','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou\'ve probably heard of these before, and easily could already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase, and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surring the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 00:58:15','2014-09-04 00:58:15','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(315,2,'2014-09-04 01:00:37','2014-09-04 01:00:37','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -G \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:00:37','2014-09-04 01:00:37','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(316,2,'2014-09-04 01:01:52','2014-09-04 01:01:52','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the -l tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and just print out the filenames. Grep can do much, much more than this, but using it in this way is probably how most developers will use it. Other tools such as Ack and Ag exist that are arguably better than grep, but I wanted to stick with grep since it\'s a common tool that exists on all *nix devices.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - it runs the same command multiple times, but passes in different arguments based on what you gave it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nHere\'s a base example\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the ls command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow, xargs will no longer defaultly pass in the argument at the end of the line, and we instead now have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, short for stream editor, is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, and it will write the output to the standard output, and won\'t update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored; you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:01:52','2014-09-04 01:01:52','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(317,2,'2014-09-04 01:13:30','2014-09-04 01:13:30','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands can\'t be ignored seeing as how you\'ll most likely use them much more often than you would sed. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:13:30','2014-09-04 01:13:30','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(318,2,'2014-09-04 01:16:47','2014-09-04 01:16:47','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 01:16:47','2014-09-04 01:16:47','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(319,2,'2014-09-04 19:48:33','2014-09-04 19:48:33','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\n\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\n\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\n\n<hr class=\"short\" />\n\n<h2>Grep</h2>\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\n\n[shell]cat index.html | grep footer[/shell]\n\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\n\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\n\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\n\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\n\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\n<h2>Xargs</h2>\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\n\nSound too wordy? An example is worth a thousand words:\n\n[shell]ls | xargs -0 -n 1 echo[/shell]\n\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to only accepThe <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\n\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\n\n[shell]ls | xargs -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\n\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\n\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\n<h2>Sed</h2>\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\n\n[shell]sed \'s/start/end/g\' ./*[/shell]\n\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\n\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\n\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\n<h2>Combining Them</h2>\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\n\n[shell]grep vim ./* -l | xargs -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\n\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\n\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-autosave-v1','','','2014-09-04 19:48:33','2014-09-04 19:48:33','',305,'http://thesocietea.org/2014/09/305-autosave-v1/',0,'revision','',0),(320,2,'2014-09-04 19:49:50','2014-09-04 19:49:50','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore accept arguments based on a full line (this is very important; you probably don\'t want xargs breaking up args based on spaces). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:49:50','2014-09-04 19:49:50','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(321,2,'2014-09-04 19:50:49','2014-09-04 19:50:49','I was recently inspired to write this post after I came across a situation where I needed to edit multiple files and change all instances of one word to another (in this case I was changing the word <strong>vim</strong> just to <strong>v</strong>). While this sounds like a simple task, let\'s break this up for a second to see what\'s all entailed: We\'re having to filter the files that contain this word, then we need to spin through each of these files and open them up individually, modify them, and rewrite the file inline to the same filename. It may still sound simple, but we do have a lot of moving parts going on here.\r\n\r\nMany high-level text editors and IDE\'s have the ability to do this for you, which is certainly nice, but what happens if you\'re in an environment where you don\'t have access to those tools? You may say that you\'ll never work away from your personal machine, but it\'s very possible you could log into a VPS or ssh into another user\'s machine where all you have access to are terminal tools. Additionally, the need to do this is not necessarily developer-specific, so if you\'re a systems administrator for example, you easily might not have higher-level editors installed - but you probably have some shell skills. That\'s where three tools come in that are included in the base shell languages we use today: <a title=\"Grep\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\" target=\"_blank\">grep</a>, <a title=\"Xargs\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?xargs\" target=\"_blank\">xargs</a>, and <a title=\"Sed\" href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?sed\" target=\"_blank\">sed</a>.\r\n\r\nYou easily could ahve heard of these before and already know how to use them, and if so, then carry on friend! You\'ve probably nothing more to gain here. But if you\'d like to know just a little bit about how to use them, read on.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Grep</h2>\r\nGrep is base unix search command which will spin through one or many files in order to tell you which files contain your phrase and a little info about where they are located. Here\'s an example of a standard way to use grep:\r\n\r\n[shell]cat index.html | grep footer[/shell]\r\n\r\nThis would print out each line in index.html that contained the word footer. You can also search for phrases that include spaces by surrounding the phrase with quotation marks (they won\'t count as part of the search query). Or you can use grep as a sole command, and not pipe anything to it:\r\n\r\n[shell]grep &quot;this is a phrase&quot; ./*.txt[/shell]\r\n\r\nThis would print out each line in every text file in the current directory that contained the phrase \"this is a phrase.\" Additionally, if we\'re searching through multiple files, we can pass in the <strong>-l</strong> tag to get just the filenames. Grep also has support for regular expressions which can be used with the <strong>-G</strong> option:\r\n\r\n[shell]grep -Gl \'ngrok \\d000$\' ./*[/shell]\r\n\r\nThis would find all instances of a line that ends in \'ngrok *000\' where the * represents any digit, and only the filenames will be printed out. Grep can do much, much more than this, but using as shown here is probably the most common. Other search tools such as <a title=\"Ack\" href=\"http://beyondgrep.com/\" target=\"_blank\">Ack</a> and <a title=\"Ag\" href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\">Ag</a> exist that are geared towards filtering source code, but I wanted to stick with grep since it\'s a common tool that exists on all *nix systems.\r\n<h2>Xargs</h2>\r\nXargs is an awesome command which basically has one job - you give it a command, and it runs that same command multiple times for a certain number of arguments that you give it. If you\'re a programmer, think of it as a loop that executes through a list. Per the man page of xargs, it takes delimited strings from the standard input and executes a utility with the strings as arguments; the utility is repeatedly executed until standard input is exhausted.\r\n\r\nSound too wordy? An example is worth a thousand words:\r\n\r\n[shell]ls | xargs -0 -n 1 echo[/shell]\r\n\r\nThis will run run the echo command as many times as you have files in the current directory, and it will pass in the filename (piped in by the <strong>ls</strong> command) to the echo command, so that it will echo each individual file name. The <b>-0</b> option forces xargs to be line-oriented, and therefore it will accept arguments based on a full new line (this is <strong>very</strong> important; you probably don\'t want xargs breaking up args based on spaces in the same line). The <strong>-n 1</strong> option is used to tell xargs that you want to split the arguments to call only one argument per command iteration. If you specified 2, then you would echo 2 filenames on the same line, and if you leave out the option altogether, then you will just echo once, listing every filename on the same line.\r\n\r\nBy default, xargs adds in the arguments at the end of the command call, but what if we need to use that argument at the beginning or the middle of the line? Well, that\'s completely doable with the <strong>-I</strong> option.\r\n\r\n[shell]ls | xargs -0 -n 1 -I my_var echo &quot;my_var is a file&quot;[/shell]\r\n\r\nNow xargs will no longer defaultly pass in the argument at the end of the line, and we instead have a placeholder for our arguments that we can use wherever we please for our command.\r\n\r\nPretty simple. Xargs does have some more options, but this is the crux of what you use it for: splitting up incoming arguments to be used as a part of another command.\r\n<h2>Sed</h2>\r\nSed, just like xargs, has one job that it does very well. Short for stream editor, sed is a handy little command which will read one or more files (or standard input, if no file is given), apply changes to those files based on a series of commands, and then write the output either in place of the file or to the standard output. How this applies to the user is that you can very easily and quickly replace text in multiple files with this one command. Here\'s a simple example:\r\n\r\n[shell]sed \'s/start/end/g\' ./*[/shell]\r\n\r\nThis will spin through every file in the current directory and replace every instance of the word <strong>start</strong> with <strong>end</strong>, but it will write the output to the standard output and not update the actual files. If we wanted to open up the files, make the changes, and then save them in place (probably how you want to use sed), then we just need to throw in one little option:\r\n\r\n[shell]sed -i \'\' \'s/start/end/g\' ./*[/shell]\r\n\r\nThe <strong>-i</strong> option states that we want to write the files in place and save the backups to the same filename appended by a certain extension. By passing in empty quotes, we skip saving the backups and are only left with the changes to our files. This tool is very powerful; it probably doesn\'t seem like you\'re doing much - but when you can change every instance a phrase to another phrase in 100+ files at a time, with a command under 20 characters, it\'s crazy to think about. Now with great power comes great responsibility. Due to its simplicity, it\'s easy to get carried away with things or not double check yourself. There\'s no undo here, so if you do use sed, make sure you do a dry run without the <strong>-i</strong> option first, and it would be even better if you make these changes in a versioned environment (using something like git) so you can revert changes if you need to.\r\n<h2>Combining Them</h2>\r\nBy combining these three small commands that are common across all *nix systems, we can do some pretty powerful text replacement. Most of the action comes from using sed, but the other commands help gather and prepare everything. So let\'s put together what we\'ve learned into a single command that we can actually use:\r\n\r\n[shell]grep vim ./* -l | xargs -0 -n 1 sed -i \'\' \'s/vim/v/g\'[/shell]\r\n\r\nLook familiar at all? This was the command I mentioned at the beginning of the post that I ran to change all instances of <em>vim</em> to just be <i>v</i> instead. It\'s true, for this particular situation, I could have gotten away with using only sed, but that\'s only because I was searching for the exact term that I was wanting to change. If I wanted to search for all the files that had the phrase <em>Hallabaloo</em>, but still wanted to change the word <em>vim</em> to <em>v</em>, then I would need to write a full command like this.\r\n\r\nSo will you always need to run a command like this? No, but you probably will at some point, and even if you have an easier way to do it than remembering this multipart command, I hope you\'ve at least learned a little bit more about how you can use grep, xargs, and sed in your workflow.','Power Tools: Using Grep, Xargs, and Sed','','inherit','open','open','','305-revision-v1','','','2014-09-04 19:50:49','2014-09-04 19:50:49','',305,'http://thesocietea.org/2014/09/305-revision-v1/',0,'revision','',0),(322,2,'2014-09-05 12:33:20','2014-09-05 12:33:20','Some of you may be familiar with using the client-side <a title=\"Google Maps API\" href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Maps API</a> in your site\'s javascript. It\'s easily the top-of-the-line API for rendering geographical images and data, and so easy to use. Google even provides you with a developer-friendly tool to style your maps - no prior CSS knowledge necessary. As web pages become more interactive, including these types of maps into your sites will become more and more ubiquitous (even for plain static sites).\r\n\r\nTo show you how simple it is, let\'s just create a basic html page:\r\n\r\n[html title=\"map.html\"]\r\n&lt;div id=&quot;map_canvas&quot; style=&quot;display: block; height: 100%;&quot;&gt;&lt;/div&gt;\r\n&lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  // Set basic map attributes\r\n  var mapOptions = {\r\n    zoom: 5,\r\n    center: new google.maps.LatLng(39.16,-100.72)\r\n  };\r\n\r\n  var map = new google.maps.Map(document.getElementById(\'map_canvas\'), mapOptions);\r\n&lt;/script&gt;\r\n[/html]\r\n\r\nAnd wallah, we\'ve built and are rendering a Google Map.\r\n\r\nYou can even add markers on to the map, which would allow you to indicate specific data points at certain geographic locations. These markers can be any shape too, and if you\'re an artist, then you can specify SVG-like paths to get a really fancy marker. We won\'t go into markers though, as that\'s all well documented by Google.\r\n\r\nWhile the Google Maps API is certainly awesome though, it has its limitations - specifically with coloring or highlighting plots of land that you would like to \'stand out\' from the rest. Maybe you want to show which US states are more Republican vs Democratic, or maybe you want to show which countries in Europe you\'ve visited, or perhaps you even want to show which provinces in China you purchase tea from (yes, <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">I am guilty here</a>). By just using the naked Google Maps API libraries, this is impossible. But we don\'t like to accept the word \'impossible,\' and lo and behold, there is in fact a way to do this using some vary fancy files dubbed as <strong>GeoJSON</strong>.\r\n<h2>What are GeoJSON files?</h2>\r\nI\'m glad you asked. Per Wikipedia, GeoJSON is an open standard format for encoding collections of simple geographical features along with their non-spatial attributes using JSON. What this means is that you can specify collections of lat/long points in a JSON file that is representative of a plot of land. Since they\'re usually written in lat/long values, you can be sure that you\'ll get the same result no matter what map API you\'re using. Here\'s an example of a .geo.json file that diagrams the state of Arkansas:\r\n\r\n[code title=\"arkansas.geo.json\"]\r\n{\r\n  &quot;type&quot;:&quot;FeatureCollection&quot;,\r\n  &quot;features&quot;:[\r\n    {\r\n      &quot;type&quot;:&quot;Feature&quot;,\r\n      &quot;id&quot;:&quot;USA-AR&quot;,\r\n      &quot;properties&quot;:{&quot;fips&quot;:&quot;05&quot;,&quot;name&quot;:&quot;Arkansas&quot;},\r\n      &quot;geometry&quot;:{\r\n        &quot;type&quot;:&quot;Polygon&quot;,\r\n        &quot;coordinates&quot;:[[[-94.473842,36.501861],[-90.152536,36.496384],... ]]\r\n      }\r\n    }\r\n  ]\r\n}\r\n[/code]\r\n\r\nNow you\'re probably thinking \"That\'s cool, but what good does this do me?\" While Google can\'t specifically highlight plots of land on its own, it does have support for loading .geo.json files into your map and styling them however you want. This means that we can accomplish what we wanted to earlier: coloring in states, countries, or anything really. Here\'s how we could include this arkansas.geo.json file into our existing map from above:\r\n\r\n[javascript title=\"map.html\"]\r\nmap.data.loadGeoJson(\'./arkansas.geo.json\');\r\n[/javascript]\r\n\r\nAnd that\'s it! This will insert the data from our .geo.json file into our map\'s data - you probably won\'t notice anything though because we don\'t have any fill color. Let\'s add some highlighting to this data:\r\n\r\n[javascript title=\"map.html\"]\r\n// Overlay Styles\r\nmap.data.setStyle({\r\n  fillColor: \'#2687bf\',\r\n  fillOpacity: .3,\r\n  strokeWeight: 0\r\n});\r\n[/javascript]\r\n\r\nPerfect, now our map will specifically color in the state of Arkansas with a translucent blue. And that\'s about all there is to it - now you can create Google Maps that highlight any plot of land you want. To see an example of everything we\'ve discussed here, check out my demo down below.\r\n<h2>Where to get GeoJSON files?</h2>\r\nYou may be left with a question right about now: \"Where am I supposed to find the GeoJSON files I need?\" And that\'s a good question. Luckily, an awesome developer gathered GeoJSON files for every single country in the world, and if you\'re wanting to map out the USA, he even gathered GeoJSON files for every single state AND its cities, all inside of a public GitHub repo.\r\n\r\nCheck it out here: <a href=\"https://github.com/johan/world.geo.json\" target=\"_blank\">https://github.com/johan/world.geo.json</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Live Demo</h2>\r\n<a title=\"GeoJSON Demo\" href=\"http://labs.thesocietea.org/geojson-demo/\" target=\"_blank\">Check out my demo</a> of using GeoJSON with the Google Maps API.\r\n\r\nThe <a href=\"https://github.com/alkrauss48/labs/tree/master/geojson-demo\" target=\"_blank\">source code</a> is freely available too.','Using GeoJSON files with Google Maps API','','inherit','open','open','','282-revision-v1','','','2014-09-05 12:33:20','2014-09-05 12:33:20','',282,'http://thesocietea.org/2014/09/282-revision-v1/',0,'revision','',0),(325,2,'2014-09-17 00:03:04','2014-09-17 00:03:04','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t have understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically variables) is managed, with significantly different strategies\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) fashion, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\"Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to know how large they will be prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and predefined in terms of size, and not global in nature. But what if you need data structures with a more dynamic nature, or global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>','Stack vs Heap: What Are They?','','inherit','open','open','','301-revision-v1','','','2014-09-17 00:03:04','2014-09-17 00:03:04','',301,'http://thesocietea.org/2014/09/301-revision-v1/',0,'revision','',0),(329,2,'2014-10-03 02:11:12','2014-10-03 02:11:12','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a chunk of memory that is completely dynamic, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location to store a variable of some sort, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:11:12','2014-10-03 02:11:12','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(330,2,'2014-10-03 02:12:43','2014-10-03 02:12:43','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with significantly less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a special region of memory that exists on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime because they can\'t ever be resized. Variables allocated on the stack also are always local in nature, since variables placed on the stack are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack exceeds in managing memory with all static and size-predefined variables, and ones not global in nature. But what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store that is allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set upon application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of you machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via pointers, where by definition pointers are a variable whose value is the address of another variable, such as a memory location. By creation a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation, heap resizing, and releasing all memory when the application closes; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations as you are finished with them. Failing to do so can cause memory to become fragmented, which will cause reads from the heap to take longer, and also risks the potential of your application running out of memory completely (thus erring out).\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of sitting on top of the stack. Additionally, improper memory management by the developer can also slow down reading from the heap. However, this shouldn\'t detract from it\'s importance - you absolutely need it to create any type of dynamic or global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store that is managed completely by the CPU, so you don\'t have to do anything extra to use it. However, these benefits force the stack to have a limited size and a logical algorithm for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but you\'re required to manage memory yourself, and it is a bit slower than using the stack (nothing you can typically see with the naked eye though).\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - but even with more modern languages, the difference between the two memory stores can be seen in statically-typed languages like Java and C# where you are unable to dynamically resize an existing array.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-03 02:12:43','2014-10-03 02:12:43','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(331,2,'2014-10-04 02:51:01','2014-10-04 02:51:01','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because those are the variables always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer (or the garbage collector if the language supports one) to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser).','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:51:01','2014-10-04 02:51:01','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(332,2,'2014-10-04 02:57:25','2014-10-04 02:57:25','As we continue to use more advanced programming languages, we\'re able to get some seriously powerful development done with much less code that does increasingly more awesome stuff, but that comes at a price. Since we don\'t deal as often with low-level computation and processing anymore, it\'s only normal that we don\'t always have a full understanding about topics like what the stack is versus the heap, or how compilation really works, or what static vs dynamic typing is, or type introspection, or garbage collection, etc. Now I\'m not saying every developer is ignorant of these, as most of us certainly aren\'t, but I do feel like it\'s worth revisiting some of the <em>old-school</em> important topics that we may miss out on these days.\r\n\r\nI know I\'ve opened up a wormhole of topics just now, but right now I\'m only focusing on one: <strong>the</strong> <strong>stack vs. the heap</strong>. Both the stack and the heap refer to different locations where memory (typically for variables) is managed, but with significantly different strategies.\r\n<h2>The Stack</h2>\r\nThe stack is a region of RAM that gets created on every thread that your application is running on. It works in a LIFO (Last In, First Out) manner, meaning that as soon as you allocate - or \"push\" - memory on to the stack, that chunk of memory will be the first to be deallocated - or \"popped.\" Every time a function declares a new variable, it is \"pushed\" onto the stack, and after that variable falls out of scope (such as when the function closes), that variable will be deallocated from the stack automatically. Once a stack variable is freed, that region of memory becomes available for other stack variables.\r\n\r\nDue to the pushing and popping nature of the stack, memory management is very logical and is able to be handled completely by the CPU; this makes it very quick, especially since each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache. However, there are some cons to this form of strict management. The size of the stack is a fixed value, and allocating more onto the stack than it can hold will result in a stack overflow. The size of the stack is decided when the thread is created, and each variable has a maximum size that it can occupy based on its data type; this prevents certain variables such as integers from ever growing beyond a certain value, and forces more complex data types such as arrays to specify their size prior to runtime since the stack won\'t let them be resized. Variables allocated on the stack also are always local in nature because they are always next in line to be popped (unless more variables are pushed prior to the popping of earlier variables).\r\n\r\nOverall, the stack really exceeds in managing memory in the most efficient way possible - but what if you need data structures that can be dynamic, such as a dynamically sized array, or what if you need global variables? This is where the heap comes into play.\r\n<h2>The Heap</h2>\r\nThe heap is a memory store also in RAM that allows for dynamic memory allocation, and does not work on a stack-like basis; this means there is no notion of pushing and popping variables, and it\'s more just a hub of storage for you to define your variables. Once you allocate a memory location on the heap to store a variable, that variable can be accessed at any point in time not only throughout just the thread, but throughout the application\'s entire life. This is how you can define global variables. Once an application ends, all of the allocated memory locations are reclaimed by the CPU. The heap size is set on application startup, but unlike the stack there are no size restrictions on the heap (aside from the physical limitations of your machine), which means it can get ever larger as you allocate more memory to it. This is what allows you to create variables that can be dynamically resized, since the heap itself is dynamic in size.\r\n\r\nYou interact with the heap via references typically called \'pointers,\' which are variables whose values are the address of another variable, such as a memory location. By creating a pointer, you \'point\' at a memory location on the heap, which is what signifies the initial location of your variable and tells the program where to access the value. Due to the dynamic nature of the heap, it is completely unmanaged by the CPU aside from initial allocation and heap resizing; in non-garbage collected languages such as C and C++, this requires you as the developer to manage memory and to manually free memory locations when they are no longer needed. Failing to do so can create memory leaks and cause memory to become fragmented, which will cause reads from the heap to take longer and makes it difficult to continuously allocate more memory onto the heap.\r\n\r\nCompared to the stack, the heap is slower to access because variables are scattered across memory instead of always sitting at the top of the stack. Improper memory management of the heap can also slow down reading from the heap; however, this shouldn\'t detract from its importance - you absolutely need it to create any type of variable dynamically, or a global variable.\r\n<h2>Final Thoughts</h2>\r\nSo there you have it - the basics of the stack and the heap. In a nutshell, the stack is an amazingly fast memory store with a LIFO allocation algorithm that is managed completely by the CPU, and you don\'t have to manage it at all. However, these benefits force the stack to have a limited size and a specific method for retrieving values, so you are only allowed to allocate fixed memory sizes (i.e. fixed-length variables) and local variables on it. To make up for these limitations, the heap allows you to create dynamically allocated variables during runtime, as well as global variables - but either you or the garbage collector must handle memory management, and it is quite a bit slower than using the stack.\r\n\r\nThe importance of the stack and the heap really comes into play with non-garbage collected languages where you need to manage memory yourself - and while modern languages do abstract away the need for this, they\'re all still doing it under the scenes. Different languages use the stack and the heap differently; C and C++ allocate to the stack automatically, and you as the developer manually have to allocate and deallocate from the heap, where more modern languages such as Go and Java allocate to both the stack and the heap automatically, and have a garbage collector that handles heap deallocation on its own. There are even languages like Ruby and Python where everything is allocated on the heap and don\'t use a stack at all.\r\n\r\nI hope this helped to provide some historic programming knowledge that we tend to miss out on these days! I plan on continuing this series over core programming concepts in future blog posts, which you also may enjoy if you found this interesting. For more information on the stack and the heap, google away - the answers are at your doorstep (or browser)!','Programming Concepts: The Stack and the Heap','','inherit','open','open','','301-revision-v1','','','2014-10-04 02:57:25','2014-10-04 02:57:25','',301,'http://thesocietea.org/2014/10/301-revision-v1/',0,'revision','',0),(333,2,'2014-10-05 04:41:12','2014-10-05 04:41:12','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-autosave-v1','','','2014-10-05 04:41:12','2014-10-05 04:41:12','',30,'http://thesocietea.org/2014/10/30-autosave-v1/',0,'revision','',0),(334,2,'2014-10-05 04:41:15','2014-10-05 04:41:15','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2014-10-05 04:41:15','2014-10-05 04:41:15','',30,'http://thesocietea.org/2014/10/30-revision-v1/',0,'revision','',0),(335,2,'2014-10-05 04:42:29','2014-10-05 04:42:29','','Labs','','publish','open','open','','labs','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://thesocietea.org/?p=335',4,'nav_menu_item','',0),(336,2,'2014-10-05 21:08:53','2014-10-05 21:08:53','','Oklahoma Nutrition Information & Education Project','','publish','closed','closed','','oklahoma-nutrition-information-education-project','','','2014-10-05 21:08:53','2014-10-05 21:08:53','',0,'http://thesocietea.org/?post_type=project&#038;p=336',10,'project','',0),(337,2,'2014-10-05 21:06:43','2014-10-05 21:06:43','','big-onie-1','','inherit','open','open','','big-onie-1','','','2014-10-05 21:06:43','2014-10-05 21:06:43','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-1.jpg',0,'attachment','image/jpeg',0),(338,2,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-2','','inherit','open','open','','big-onie-2','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-2.jpg',0,'attachment','image/jpeg',0),(339,2,'2014-10-05 21:06:44','2014-10-05 21:06:44','','big-onie-3','','inherit','open','open','','big-onie-3','','','2014-10-05 21:06:44','2014-10-05 21:06:44','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-3.jpg',0,'attachment','image/jpeg',0),(340,2,'2014-10-05 21:06:45','2014-10-05 21:06:45','','big-onie-responsive','','inherit','open','open','','big-onie-responsive','','','2014-10-05 21:06:45','2014-10-05 21:06:45','',336,'http://thesocietea.org/wp-content/uploads/2014/10/big-onie-responsive.jpg',0,'attachment','image/jpeg',0),(341,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-1','','inherit','open','open','','th-onie-1','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-1.jpg',0,'attachment','image/jpeg',0),(342,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-2','','inherit','open','open','','th-onie-2','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-2.jpg',0,'attachment','image/jpeg',0),(343,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-3','','inherit','open','open','','th-onie-3','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-3.jpg',0,'attachment','image/jpeg',0),(344,2,'2014-10-05 21:06:46','2014-10-05 21:06:46','','th-onie-responsive','','inherit','open','open','','th-onie-responsive','','','2014-10-05 21:06:46','2014-10-05 21:06:46','',336,'http://thesocietea.org/wp-content/uploads/2014/10/th-onie-responsive.jpg',0,'attachment','image/jpeg',0),(346,2,'2014-11-14 14:00:44','2014-11-14 14:00:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','publish','open','open','','software-licensing-drm-vs-gpl','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=346',0,'post','',0),(347,2,'2014-10-06 18:04:44','2014-10-06 18:04:44','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by the copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:04:44','2014-10-06 18:04:44','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(348,2,'2014-10-06 18:06:22','2014-10-06 18:06:22','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\nDigital Rights Management is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU General Public License (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:06:22','2014-10-06 18:06:22','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(349,2,'2014-10-06 18:07:42','2014-10-06 18:07:42','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> is a good example of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media. Instead of putting a heavy focus on trying to stop copyright pirates, it deals more with the lawful use of music, videos, and other copyrighted works. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software. Several complaints have been held about DRM violating users’ personal rights, and it has widely been known that it is a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and is pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers. This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-06 18:07:42','2014-10-06 18:07:42','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(350,2,'2014-10-07 22:53:55','2014-10-07 22:53:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary licensing scheme. DRM refers to access control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing pirating copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop copying works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is very controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Congress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is a widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. There is no warranty under the GPL, which may seem like a big downfall to this licensing scheme, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for creating a program, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Licensing Schemes, however, are not always beneficial as mentioned above; some proprietary licensing schemes interfere too much with a user’s rights, especially nowadays outside the realm of software, such as requiring gamers to authenticate online to a server to prove the game is legitimate sale even when just playing single player mode. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - DRM gets a pretty bad wrap these days, but it makes a lot of sense for developers who want to make money off of their products.','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 22:53:55','2014-10-07 22:53:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(351,2,'2014-10-07 23:09:04','2014-10-07 23:09:04','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it is necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which require DRM to be increasingly more present in new digital devices and personal computers (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a>?). This would give original publishers even more power to restrict a user’s ability to do how he pleases with software. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:09:04','2014-10-07 23:09:04','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(352,2,'2014-10-07 23:17:23','2014-10-07 23:17:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This legislation would give original publishers even more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and, innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from erroneous errors in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of the software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:17:23','2014-10-07 23:17:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(353,2,'2014-10-07 23:20:23','2014-10-07 23:20:23','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by the publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what you lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:20:23','2014-10-07 23:20:23','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(354,2,'2014-10-07 23:21:53','2014-10-07 23:21:53','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-07 23:21:53','2014-10-07 23:21:53','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(356,2,'2014-10-09 22:28:55','2014-10-09 22:28:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-10-09 22:28:55','2014-10-09 22:28:55','',346,'http://thesocietea.org/2014/10/346-revision-v1/',0,'revision','',0),(357,2,'2014-10-24 15:00:20','2014-10-24 15:00:20','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','publish','open','open','','the-building-of-go-wiki-part-1','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=357',0,'post','',1),(358,2,'2014-10-09 22:35:09','2014-10-09 22:35:09','I recently completed my first true project in Go, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:35:09','2014-10-09 22:35:09','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(359,2,'2014-10-09 22:41:41','2014-10-09 22:41:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n<pre>[go title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  \"net/http\"\r\n  \"./modules/helpers\"\r\n  \"./modules/routes\"\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(\"/view/\", helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(\"/edit/\", helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(\"/save/\", helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(\"/delete/\", helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(\"/\", routes.IndexHandler)\r\n  http.ListenAndServe(\":8080\", nil)\r\n}\r\n[/go]\r\n</pre>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:41:41','2014-10-09 22:41:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(360,2,'2014-10-09 22:49:36','2014-10-09 22:49:36','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"java\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first 2 lines is I\'m reading a config file I have to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP servero on port 8080, and routing different urls to certain handlers. You may notice the use of the keyword \r\n[code]go[/code]\r\n here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 22:49:36','2014-10-09 22:49:36','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(361,2,'2014-10-09 23:25:21','2014-10-09 23:25:21','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nLive site: <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">http://wiki.thesocietea.org/</a>\r\n\r\nGitHub Repo: <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">https://github.com/alkrauss48/labs/tree/master/go/wiki</a>\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:25:21','2014-10-09 23:25:21','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(362,2,'2014-10-09 23:36:13','2014-10-09 23:36:13','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>Handling Routes</h2>','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:36:13','2014-10-09 23:36:13','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(363,2,'2014-10-09 23:40:48','2014-10-09 23:40:48','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:48','2014-10-09 23:40:48','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(364,2,'2014-10-09 23:40:56','2014-10-09 23:40:56','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover using go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:40:56','2014-10-09 23:40:56','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(365,2,'2014-10-09 23:42:41','2014-10-09 23:42:41','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into my main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using to - it forces the function passed to it to run as a goroutine. Go is a systems-level language like C with many improvements; Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:42:41','2014-10-09 23:42:41','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(366,2,'2014-10-09 23:45:07','2014-10-09 23:45:07','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very usefull but not discussed in this post because I don\'t need to communicate between channels. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature - I can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it, and this wraps up how we establish our global config variable:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ll save the rest for the next blog post, where we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and writing some Go in our actual HTML templates that will get compiled to straight HTML (similar to ERB, Twig, Handlebars, etc.).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-09 23:45:07','2014-10-09 23:45:07','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(367,2,'2014-10-10 12:27:52','2014-10-10 12:27:52','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language, I wanted to write about how I built it and go through some of the architecture involved with the wiki both to teach about it and to gather feedback on if I just completely jacked up how Go is supposed to work. So if you\'re a Go developer, or just want to give me feedback anyway, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and it makes it very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a plugin called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file. This is how we do it:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main file (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built ORM for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n<h2>How About the Route Handlers?</h2>\r\nObviously now that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, do some controller logic such as interacting with the DB, and use a templating language to write some Go in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:27:52','2014-10-10 12:27:52','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(368,2,'2014-10-10 12:49:04','2014-10-10 12:49:04','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>, which was a wiki that allows for full CRUD capabilities of entries and is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-10 12:49:04','2014-10-10 12:49:04','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(369,2,'2014-10-13 12:22:03','2014-10-13 12:22:03','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\n\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\nsuper cool girlfriend.','Home','','inherit','open','open','','4-autosave-v1','','','2014-10-13 12:22:03','2014-10-13 12:22:03','',4,'http://thesocietea.org/2014/10/4-autosave-v1/',0,'revision','',0),(370,2,'2014-10-13 12:25:01','2014-10-13 12:25:01','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby,\r\nJavascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my\r\nsuper cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2014-10-13 12:25:01','2014-10-13 12:25:01','',4,'http://thesocietea.org/2014/10/4-revision-v1/',0,'revision','',0),(371,2,'2014-10-13 12:42:52','2014-10-13 12:42:52','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\n<h2>Background</h2>\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\n\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\n\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\n\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\n<h2>My Interests</h2>\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\n\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise.\nPlus, I get to listen to a lot of podcasts, which leads me to...\n\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out.\nMy favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before.\nHowStuffWorks is easily my favorite network of podcasts.\n\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks,\nbrown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types.\nI was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle.\nIt has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\n\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss.\nShe makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;).\nI couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her.\nShe’s an incredibly talented cake decorator too!\n\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-autosave-v1','','','2014-10-13 12:42:52','2014-10-13 12:42:52','',6,'http://thesocietea.org/2014/10/6-autosave-v1/',0,'revision','',0),(372,2,'2014-10-13 12:43:24','2014-10-13 12:43:24','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a href=\"&lt;?php echo get_permalink(30); ?&gt;\">projects</a> to see what I’ve been working on, or you can <a href=\"&lt;?php echo get_permalink(13); ?&gt;\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2014-10-13 12:43:24','2014-10-13 12:43:24','',6,'http://thesocietea.org/2014/10/6-revision-v1/',0,'revision','',0),(374,2,'2014-10-16 22:37:19','2014-10-16 22:37:19','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki to give others a chance to see how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but basically what\'s happening here in the first few lines is that we import some necessary Go packages. Then in the main method I\'m reading a config file in order to set some global configuration, and then I am establishing connections with my MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they can be accessed outside of their main package (after being imported). If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I use here called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering Go is a very recent language, and it handles all of our interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly call those methods on a Page struct instance as if they were a part of the actual struct declaration (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see this happening in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle logic such as interacting with the DB, and use the package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 22:37:19','2014-10-16 22:37:19','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(375,2,'2014-10-16 23:26:06','2014-10-16 23:26:06','I recently completed my first true project in <a title=\"Go Lang\" href=\"https://golang.org/\" target=\"_blank\">Go</a>: a fully RESTful wiki that is persistent through a MongoDB database. Since Go is such an upcoming language that many of us haven\'t been exposed to yet, I wanted to write about how I built it and go through some of the architecture involved with the wiki in case anyone is interested in how Go works. If you have any feedback for me, <a title=\"Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">let me know</a>!\r\n\r\nCheck out the <a href=\"http://wiki.thesocietea.org/\" target=\"_blank\">live site</a> and the <a href=\"https://github.com/alkrauss48/labs/tree/master/go/wiki\" target=\"_blank\">GitHub repo</a>.\r\n<h2>The Main File</h2>\r\nLet\'s jump right into the main file that starts off this wiki:\r\n\r\n[code lang=\"javascript\" title=\"app.go\"]\r\npackage main\r\n\r\nimport (\r\n  &quot;net/http&quot;\r\n  &quot;./modules/helpers&quot;\r\n  &quot;./modules/routes&quot;\r\n)\r\n\r\nfunc main() {\r\n  helpers.ReadConfig()\r\n  helpers.EstablishConnection()\r\n\r\n  // Run all the handlers in their own thread with goroutines\r\n  go http.HandleFunc(&quot;/view/&quot;, helpers.MakeHandler(routes.ViewHandler))\r\n  go http.HandleFunc(&quot;/edit/&quot;, helpers.MakeHandler(routes.EditHandler))\r\n  go http.HandleFunc(&quot;/save/&quot;, helpers.MakeHandler(routes.SaveHandler))\r\n  go http.HandleFunc(&quot;/delete/&quot;, helpers.MakeHandler(routes.DeleteHandler))\r\n  go http.HandleFunc(&quot;/&quot;, routes.IndexHandler)\r\n  http.ListenAndServe(&quot;:8080&quot;, nil)\r\n}\r\n[/code]\r\n\r\nJust like C, C++, and Java, Go looks for a <strong>main</strong> method to start everything off. We\'ll get more into the guts down below, but starting off in the first few lines we\'re importing some necessary Go packages. After that, we\'re reading a config file in order to set some global configuration, and then we\'re establishing connections with the MongoDB collection. The rest of the main method is dedicated to starting a simple HTTP server on port 8080, and routing different urls to certain handlers.\r\n\r\nYou may notice the use of the keyword <strong>go</strong> here; no that\'s not just a fancy way to say I\'m using Go - it forces the function passed to it to run as a goroutine. Go is built around the concept of concurrency, and therefore it\'s very easy to run commands in their own \'goroutine,\' or thread. Additionally, Go also makes it very easy to talk between those threads using \'channels,\' which are very useful, but not discussed in this post because I don\'t need to communicate between goroutines. In fact, I am running each handler in its own goroutine because each handler is very modular in nature, and doesn\'t depend on any other handler.\r\n<h2>Reading Configuration</h2>\r\nReading configuration in Go isn\'t a default feature, but we can do it with the help of a package called <a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\">gcfg</a>, which allows you to create config files similar to an INI file. Here is an example config file structured properly for Go Wiki:\r\n\r\n[code title=\"config.gcfg\"]\r\n; Go Wiki Config\r\n[adapter]\r\nserver = 127.0.0.1\r\nusername = go_wiki\r\npassword = password1\r\ndatabase = go_wiki\r\ncollection = pages\r\n[/code]\r\n\r\nThen in our code, gcfg allows us to create a Go struct (similar to a struct in C, and a class in an OOP language) out of this config file like so:\r\n\r\n[javascript title=\"globals.go\"]\r\ntype Config struct {\r\n  Adapter struct {\r\n    Server string\r\n    Username string\r\n    Password string\r\n    Database string\r\n    Collection string\r\n  }\r\n}\r\n\r\nvar Cfg Config\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc ReadConfig(){\r\n  err := gcfg.ReadFileInto(&amp;globals.Cfg, &quot;config/config.gcfg&quot;)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n[/javascript]\r\n\r\nBecause the Cfg variable and ReadConfig() method start with capital letters, they have public scope and can be accessed outside of their main package after being imported; otherwise, they would be private variables and functions. If the config can\'t be read properly, the program exits with an error.\r\n<h2>Establishing DB Connections</h2>\r\nGo Wiki uses MongoDB, and there\'s a very well-built <a title=\"ORM\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> for Go that I chose to use called <a title=\"mgo\" href=\"https://labix.org/mgo\" target=\"_blank\">mgo</a>. I\'m very impressed with how all-encapsulating mgo is considering how new Go is, and it handles all interactions with the mongo API beautifully. Let\'s take a look at how we use mgo:\r\n\r\n[javascript title=\"globals.go\"]\r\nvar Collection *mgo.Collection\r\n[/javascript]\r\n\r\n\r\n[javascript title=\"helpers.go\"]\r\nfunc EstablishConnection(){\r\n  session, _ := mgo.Dial(\r\n    &quot;mongodb://&quot; +\r\n    globals.Cfg.Adapter.Username + &quot;:&quot; +\r\n    globals.Cfg.Adapter.Password + &quot;@&quot; +\r\n    globals.Cfg.Adapter.Server + &quot;/&quot; +\r\n    globals.Cfg.Adapter.Database)\r\n  globals.Collection = session.DB(&quot;&quot;).C(globals.Cfg.Adapter.Collection)\r\n}\r\n[/javascript]\r\n\r\nThis establishes a connection based off our previously established config, and sets the desired collection to our global <strong>Collection</strong> variable, which is the only collection we deal with in this wiki.\r\n<h2>The Page Struct</h2>\r\nThe core of this wiki revolves around a struct called <strong>Page</strong>. This is the struct that we use to encapsulate our attributes for each wiki entry, and also has methods associated with it such as loading, deleting, and saving an entry to the database. Here is our main page.go file which houses all page-related code:\r\n\r\n[javascript title=\"page.go\"]\r\ntype Page struct {\r\n  Title string\r\n  Body  string\r\n}\r\n\r\nfunc (p *Page) Save() error {\r\n  _, err := globals.Collection.Upsert(bson.M{&quot;title&quot;: p.Title}, p)\r\n  return err\r\n}\r\n\r\nfunc (p *Page) Delete() error {\r\n  err := globals.Collection.Remove(bson.M{&quot;title&quot;: p.Title})\r\n  return err\r\n}\r\n\r\nfunc LoadPage(title string) (*Page, error) {\r\n  result := Page{}\r\n  err := globals.Collection.Find(bson.M{&quot;title&quot;: title}).One(&amp;result)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  return &amp;result, nil\r\n}\r\n[/javascript]\r\n\r\nThere\'s a lot going on here, but in nutshell, we create a Page struct that holds title and body attributes, and then we give it methods for saving, deleting, and loading an entry from the database.\r\n\r\nHere\'s an awesome bit about Go - you may have noticed that the Delete and Save methods are preceded with a set of parameters. In Go, this is what is called the <em>receiver</em>, and it declares the variable that has parent scope over that function; in layman\'s terms, it becomes the \'<strong>this\'</strong> of the function, but assigned to whatever variable you want. If you\'re familiar with javascript, it is similar to running <strong>.bind(this)</strong> after a function call, which redefines the \'this\' value to the scope outside that function.\r\n\r\nFor the Save and Delete functions, we set the receiver as a Page struct so that we can directly use the calling Page instance with all of its attributes in the function (remember that Go is not an OOP language, so the ideas of OOP encapsulation don\'t exist here). We\'ll see how to use these methods in our route handlers.\r\n<h2>How About the Route Handlers?</h2>\r\nNow that we\'ve established our foundation for the Go Wiki, we need to handle the logic that happens when we navigate to the wiki itself and interact with it. But I think we\'ve covered enough here for one day; we\'ve established a firm foundation where we have our ORM set up based up on configurable options, and we\'ve set our architecture up to be able to handle creating and modifying wiki entries. Next time we\'ll cover in-depth using Go\'s <strong>net/http</strong> package to validate and extract parameters from our URL, handle actual logic such as interacting with the DB, and use the net/http package\'s templating language to access our Go variables in our actual HTML templates (similar to how ERB, Twig, Handlebars, etc. work).\r\n\r\nStay tuned!','The Building of Go Wiki - Part 1','','inherit','open','open','','357-revision-v1','','','2014-10-16 23:26:06','2014-10-16 23:26:06','',357,'http://thesocietea.org/2014/10/357-revision-v1/',0,'revision','',0),(377,2,'2014-11-14 20:22:28','2014-11-14 20:22:28','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\n\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\n<h2>What is Software Licensing?</h2>\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\n\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\n<h2>DRM</h2>\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\n\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\n<h2>GPL</h2>\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\n\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\n<h2>Final Thoughts</h2>\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-autosave-v1','','','2014-11-14 20:22:28','2014-11-14 20:22:28','',346,'http://thesocietea.org/2014/11/346-autosave-v1/',0,'revision','',0),(378,2,'2014-11-14 20:23:55','2014-11-14 20:23:55','This post is based off of a paper I wrote in one of my Computer Science classes during college, and has been the only college work I have ever referenced after I graduated. Sounds like an awesome expenditure of money right there, but I can\'t complain. So, let\'s begin:\r\n\r\nSoftware licensing is a contract of agreement between a software publisher and the end-user, basically preventing any type of legal infringement of the software such as modifying code, duplicating discs, and implementing multiple installations. Some sort of software licensing is seen on virtually every application that people use today, and although the practice of software licensing does include restrictions on the user, the ideas behind it are usually moral. Software licensing schemes are used frequently to label different types of rights and restrictions for software. The two types of licensing schemes that we\'ll be talking about here include <a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> (DRM) and the <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">GNU General Public License</a> (GPL), both of which are very prominent.\r\n<h2>What is Software Licensing?</h2>\r\nThe practice of software licensing involves a lot of different ideas, where placing restrictions is just one of them. It serves as sort of a disclaimer to the user, often times releasing the publisher from any or all liability for any unseen events or circumstances that may occur with use of the product - these are often discussed in the End User License Agreement (EULA), or just a general disclaimer if it is a web project.\r\n\r\nSoftware licensing can be divided into two different categories: Proprietary and Open Source. Proprietary software licensing is described as software that is exclusively owned by the publisher, and who can therefore determine the overall rights of a user and how software use should be restricted. Open Source software licensing instills ownership of the software within the user, who is therefore guaranteed unlimited rights to software use so long as it remains under the rights granted by copyright law. The main difference between these two licensing schemes is the effect that they have on the user’s overall rights with the software.\r\n<h2>DRM</h2>\r\n<a title=\"DRM\" href=\"http://en.wikipedia.org/wiki/Digital_rights_management\" target=\"_blank\">Digital Rights Management</a> provides good examples of a proprietary software licensing. DRM refers to access-control technologies used by software publishers to limit the usage of digital media; DRM itself is not an actual software license, but it includes the class of technologies that are most commonly associated with controlling the use of digital content and devices after sale. DRM has gone through two generations, with the first generation solely focusing on preventing the pirating of copy-written software works. Second-generation DRM is typically what we see today, and instead of putting a heavy focus on trying to stop pirated works, it\'s more geared towards controlling the execution, viewing, copying, printing, and altering of works or devices. Although it is meant to provide restrictions for unlawful purposes, DRM often goes beyond its necessary boundaries. The use of DRM is pretty controversial, but several publishers argue that it\'s necessary in order to prevent duplication of software and other illegal violations of intellectual property. Several complaints have been held about DRM violating users’ personal rights, and many believe it to be a disaster to innovation, fair use, and competition. Today, the evolution of DRM in video games specifically can be seen in the new trend of <a href=\"http://en.wikipedia.org/wiki/Always-on_DRM\" target=\"_blank\">always-on DRM</a>, where gamers must maintain an internet connection even just to play single player (Diablo III, SimCity, among others are all culprits).\r\n\r\nCongress, however, strongly backs DRM and continues pushing to create laws which requires DRM to be increasingly more present in new works (anyone remember <a title=\"SOPA\" href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\" target=\"_blank\">SOPA</a> and <a title=\"PIPA\" href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\" target=\"_blank\">PIPA</a>?). This type of legislation would give original publishers more power to restrict a user’s ability, and could easily step into the realm of breaching freedom of speech and innovation. Opponents of DRM often make fun of it by calling it “Digital <em>Restrictions</em> Management,” as they claim there are hardly any rights involved.\r\n<h2>GPL</h2>\r\nThe GNU <a title=\"GPL\" href=\"http://www.gnu.org/copyleft/gpl.html\" target=\"_blank\">General Public License</a> (GPL) is the most widely used free software license which grants virtually unlimited rights to the user. The code of an open source program may be modified to create a new project for instance, a condition that proprietary ownership would never allow, and it must merely include somewhere in the project that it was “based off” the original software. Developers that use the GNU GPL protect the user’s rights by asserting copyright on the software, and by offering the user this license and giving legal permission to copy, distribute and/or modify it. GPL is a <a href=\"http://en.wikipedia.org/wiki/Copyleft\" target=\"_blank\">copylefted</a> licensing scheme, meaning that developers who do build off of an existing product that has a GPL license to create a new product are required to use the same licensing terms; this is in contrast to other popular free software licenses such as the BSD or MIT licenses, which are not copylefted.\r\n\r\nAs is common in free software licenses, there is no warranty under the GPL; this may seem like a big downfall, but it ultimately protects the publisher from unseen errors and circumstances in newer or modified versions of the software. The GPL refuses the use of patents, which many claim restrict development and create unnecessary fees for the use of software.\r\n<h2>Final Thoughts</h2>\r\nOverall, the practice of software licensing aims to be a pretty moral concept, even for proprietary licenses - after all, someone should get credit for writing software, even if it does instill restrictions upon the user. If software licensing were not enforced by publishers, profits could shift dramatically, which ruins the idea of building software in the first place for many people. Proprietary licensing schemes, however, are not always beneficial as mentioned above; some of them remain controversial and interfere too much with a user’s rights, especially nowadays with restrictions such as always-on DRM. Open source licensing schemes entail a much less restrictive air to them, and most users prefer them to proprietary licenses; what they lack, however, is any sort of warranty or guarantee that someone will fix your problem if you decide to use that piece of software. Both have their pros and cons - I think DRM gets a pretty bad wrap these days (and deservedly so in a lot of situations), but it makes a lot of sense for developers who want to make money off of their products. But if you\'re building something that other people or developers can use and is for the general betterment of society, why not give it a free software license like the GPL?','Software Licensing: DRM vs GPL','','inherit','open','open','','346-revision-v1','','','2014-11-14 20:23:55','2014-11-14 20:23:55','',346,'http://thesocietea.org/2014/11/346-revision-v1/',0,'revision','',0),(381,2,'2015-02-20 21:18:13','2015-02-20 21:18:13','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so if you\'re ready, feel free to <a title=\"Building a JSON API with Rails – Part 2: Serialization\" href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\">move onto part 2</a>.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','publish','open','open','','building-a-json-api-with-rails-part-1-getting-started','','\nhttp://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=381',0,'post','',5),(382,2,'2015-01-21 19:22:04','2015-01-21 19:22:04','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Staring Out</h2>','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-01-21 19:22:04','2015-01-21 19:22:04','',381,'http://thesocietea.org/2015/01/381-revision-v1/',0,'revision','',0),(383,2,'2015-01-22 19:21:57','2015-01-22 19:21:57','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','publish','open','open','','brief-blogging-hiatus','','','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=383',0,'post','',0),(384,2,'2015-01-22 19:20:03','2015-01-22 19:20:03','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my time right now (as well as rekindling old ones):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:03','2015-01-22 19:20:03','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(385,2,'2015-01-22 19:20:50','2015-01-22 19:20:50','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies):\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:20:50','2015-01-22 19:20:50','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(386,2,'2015-01-22 19:21:09','2015-01-22 19:21:09','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:09','2015-01-22 19:21:09','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(387,2,'2015-01-22 19:21:44','2015-01-22 19:21:44','Hello world.\r\n\r\nIt\'s been about 2 months since my last blog post, and I had been making it a goal to post about every 2-3 weeks. I was keeping up with that for a few months (surprisingly), but I\'ve taken a little break from blogging. I know that no one regularly expects content from me, which is nice, but it\'s been on my mind that I haven\'t posted lately - which is a little bit stressful to think about. Honestly, I\'m still hacking away at awesome things on a daily basis, but I\'ve found some really neat new hobbies which is where I\'m spending more of my free time right now (as well as rekindling old hobbies).\r\n\r\nSome of these hobbies include:\r\n<ul>\r\n	<li>Minecraft</li>\r\n	<li>Learning to Sew</li>\r\n	<li>Origami</li>\r\n	<li>Reading about beer and the brewing process, and hopefully homebrewing soon</li>\r\n	<li>Learning more about tea and its brewing process</li>\r\n	<li>Building Circuits</li>\r\n	<li>Walking (preferably with my dog)</li>\r\n	<li>Spending more time with people close to me, doing fun and awesome things (like video games).</li>\r\n</ul>\r\nSo that\'s my excuse for not blogging as much. I certainly have time for it, but right now, I\'d rather fill that time with some of these other hobbies - I\'ll get back to it before too long though, because I have a long list of things that I want to write about.\r\n\r\nThanks for keeping up with me this far!','Brief Blogging Hiatus','','inherit','open','open','','383-revision-v1','','','2015-01-22 19:21:44','2015-01-22 19:21:44','',383,'http://thesocietea.org/2015/01/383-revision-v1/',0,'revision','',0),(388,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Galleries','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkdhbGxlcmllcyIsInJldHVybnMiOlsiaW1hZ2UiXSwiYWxpYXNlcyI6WyJnYWxsZXJ5IiwiaW1hZ2VzIiwiaW1hZ2UiXSwibmFtZSI6ImdhbGxlcmllcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=388',0,'gal_display_source','',0),(389,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Albums','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IkFsYnVtcyIsInJldHVybnMiOlsiZ2FsbGVyeSIsImFsYnVtIl0sImFsaWFzZXMiOlsiYWxidW0iXSwibmFtZSI6ImFsYnVtcyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=389',0,'gal_display_source','',0),(390,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=','Tags','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlRhZ3MiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsidGFnIiwiaW1hZ2VfdGFnIiwiaW1hZ2VfdGFncyJdLCJuYW1lIjoidGFncyIsImlkX2ZpZWxkIjoiSUQiLCJoYXNfdmFyaWF0aW9ucyI6ZmFsc2UsInZhcmlhdGlvbiI6MH0=',0,'http://thesocietea.org/?p=390',0,'gal_display_source','',0),(391,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9','Random Images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJhbmRvbSBJbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmFuZG9tIiwicmFuZG9tX2ltYWdlIl0sImhhc192YXJpYXRpb25zIjp0cnVlLCJuYW1lIjoicmFuZG9tX2ltYWdlcyIsImlkX2ZpZWxkIjoiSUQiLCJ2YXJpYXRpb24iOjB9',0,'http://thesocietea.org/?p=391',0,'gal_display_source','',0),(392,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==','Recent images','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJ0aXRsZSI6IlJlY2VudCBpbWFnZXMiLCJyZXR1cm5zIjpbImltYWdlIl0sImFsaWFzZXMiOlsicmVjZW50IiwicmVjZW50X2ltYWdlIl0sIm5hbWUiOiJyZWNlbnRfaW1hZ2VzIiwiaWRfZmllbGQiOiJJRCIsImhhc192YXJpYXRpb25zIjpmYWxzZSwidmFyaWF0aW9uIjowfQ==',0,'http://thesocietea.org/?p=392',0,'gal_display_source','',0),(393,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','none','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibm9uZSIsInRpdGxlIjoiTm8gbGlnaHRib3giLCJjb2RlIjoiIiwidmFsdWVzIjpbXSwiaTE4biI6W10sInN0eWxlcyI6IiIsInNjcmlwdHMiOiIiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=393',0,'lightbox_library','',0),(394,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','lightbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoibGlnaHRib3giLCJ0aXRsZSI6IkxpZ2h0Ym94IiwiY29kZSI6ImNsYXNzPSduZ2dfbGlnaHRib3gnIiwidmFsdWVzIjp7Im5leHRnZW5fbGlnaHRib3hfbG9hZGluZ19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWljby1sb2FkaW5nLmdpZiIsIm5leHRnZW5fbGlnaHRib3hfY2xvc2VfYnRuX3VybCI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9saWdodGJveC1idG4tY2xvc2UuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fcHJldl91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLXByZXYuZ2lmIiwibmV4dGdlbl9saWdodGJveF9idG5fbmV4dF91cmwiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2pxdWVyeS5saWdodGJveFwvbGlnaHRib3gtYnRuLW5leHQuZ2lmIiwibmV4dGdlbl9saWdodGJveF9ibGFua19pbWdfdXJsIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2xpZ2h0Ym94LWJsYW5rLmdpZiJ9LCJpMThuIjpbXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL2pxdWVyeS5saWdodGJveC0wLjUuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjanF1ZXJ5LmxpZ2h0Ym94XC9qcXVlcnkubGlnaHRib3gtMC41Lm1pbi5qc1xucGhvdG9jcmF0aS1saWdodGJveCNqcXVlcnkubGlnaHRib3hcL25leHRnZW5fbGlnaHRib3hfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=394',0,'lightbox_library','',0),(395,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119','fancybox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiZmFuY3lib3giLCJ0aXRsZSI6IkZhbmN5Ym94IiwiY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOltdLCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9qcXVlcnkuZmFuY3lib3gtMS4zLjQuY3NzIiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5lYXNpbmctMS4zLnBhY2suanNcbnBob3RvY3JhdGktbGlnaHRib3gjZmFuY3lib3hcL2pxdWVyeS5mYW5jeWJveC0xLjMuNC5wYWNrLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2ZhbmN5Ym94XC9uZXh0Z2VuX2ZhbmN5Ym94X2luaXQuanMiLCJpZF9maWVsZCI6IklEIiwiZGlzcGxheV9zZXR0aW5ncyI6W119',0,'http://thesocietea.org/?p=395',0,'lightbox_library','',0),(396,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','highslide','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoiaGlnaHNsaWRlIiwidGl0bGUiOiJIaWdoc2xpZGUiLCJjb2RlIjoiY2xhc3M9XCJoaWdoc2xpZGVcIiBvbmNsaWNrPVwicmV0dXJuIGhzLmV4cGFuZCh0aGlzLCB7c2xpZGVzaG93R3JvdXA6ICclR0FMTEVSWV9OQU1FJSd9KTtcIiIsInZhbHVlcyI6eyJuZXh0Z2VuX2hpZ2hzbGlkZV9ncmFwaGljc19kaXIiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvZ3JhcGhpY3MifSwiaTE4biI6eyJjc3NEaXJlY3Rpb24iOiJsdHIiLCJsb2FkaW5nVGV4dCI6IkxvYWRpbmcuLi4iLCJwcmV2aW91c1RleHQiOiJQcmV2aW91cyIsIm5leHRUZXh0IjoiTmV4dCIsIm1vdmVUZXh0IjoiTW92ZSIsImNsb3NlVGV4dCI6IkNsb3NlIiwicmVzaXplVGl0bGUiOiJSZXNpemUiLCJwbGF5VGV4dCI6IlBsYXkiLCJwYXVzZVRleHQiOiJQYXVzZSIsIm1vdmVUaXRsZSI6Ik1vdmUiLCJmdWxsRXhwYW5kVGV4dCI6IjE6MSIsImNsb3NlVGl0bGUiOiJDbG9zZSAoZXNjKSIsInBhdXNlVGl0bGUiOiJQYXVzZSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsImxvYWRpbmdUaXRsZSI6IkNsaWNrIHRvIGNhbmNlbCIsImZvY3VzVGl0bGUiOiJDbGljayB0byBicmluZyB0byBmcm9udCIsImZ1bGxFeHBhbmRUaXRsZSI6IkV4cGFuZCB0byBhY3R1YWwgc2l6ZSAoZikiLCJjcmVkaXRzVGV4dCI6IlBvd2VyZWQgYnkgSGlnaHNsaWRlIEpTIiwicGxheVRpdGxlIjoiUGxheSBzbGlkZXNob3cgKHNwYWNlYmFyKSIsInByZXZpb3VzVGl0bGUiOiJQcmV2aW91cyAoYXJyb3cgbGVmdCkiLCJuZXh0VGl0bGUiOiJOZXh0IChhcnJvdyByaWdodCkiLCJudW1iZXIiOiJJbWFnZSAlMSBvZiAlMiIsImNyZWRpdHNUaXRsZSI6IkdvIHRvIHRoZSBIaWdoc2xpZGUgSlMgaG9tZXBhZ2UiLCJyZXN0b3JlVGl0bGUiOiJDbGljayB0byBjbG9zZSBpbWFnZSwgY2xpY2sgYW5kIGRyYWcgdG8gbW92ZS4gVXNlIGFycm93IGtleXMgZm9yIG5leHQgYW5kIHByZXZpb3VzLiJ9LCJzdHlsZXMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvaGlnaHNsaWRlLWZ1bGwucGFja2VkLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I2hpZ2hzbGlkZVwvbmV4dGdlbl9oaWdoc2xpZGVfaW5pdC5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=396',0,'lightbox_library','',0),(397,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=','shutter','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlciIsInRpdGxlIjoiU2h1dHRlciIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOnsibXNnTG9hZGluZyI6IkwgTyBBIEQgSSBOIEciLCJtc2dDbG9zZSI6IkNsaWNrIHRvIENsb3NlIn0sInN0eWxlcyI6InBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlclwvc2h1dHRlci5jc3MiLCJzY3JpcHRzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyXC9zaHV0dGVyLmpzXG5waG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJcL25leHRnZW5fc2h1dHRlci5qcyIsImlkX2ZpZWxkIjoiSUQiLCJkaXNwbGF5X3NldHRpbmdzIjpbXX0=',0,'http://thesocietea.org/?p=397',0,'lightbox_library','',0),(398,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','shutter2','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoic2h1dHRlcjIiLCJ0aXRsZSI6IlNodXR0ZXIgMiIsImNvZGUiOiJjbGFzcz1cInNodXR0ZXJzZXRfJUdBTExFUllfTkFNRSVcIiIsInZhbHVlcyI6W10sImkxOG4iOlsiUHJldmlvdXMiLCJOZXh0IiwiQ2xvc2UiLCJGdWxsIFNpemUiLCJGaXQgdG8gU2NyZWVuIiwiSW1hZ2UiLCJvZiIsIkxvYWRpbmcuLi4iXSwic3R5bGVzIjoicGhvdG9jcmF0aS1saWdodGJveCNzaHV0dGVyX3JlbG9hZGVkXC9zaHV0dGVyLmNzcyIsInNjcmlwdHMiOiJwaG90b2NyYXRpLWxpZ2h0Ym94I3NodXR0ZXJfcmVsb2FkZWRcL3NodXR0ZXIuanNcbnBob3RvY3JhdGktbGlnaHRib3gjc2h1dHRlcl9yZWxvYWRlZFwvbmV4dGdlbl9zaHV0dGVyX3JlbG9hZGVkLmpzIiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=398',0,'lightbox_library','',0),(399,2,'2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==','thickbox','','draft','open','open','','','','','2015-01-23 23:11:23','0000-00-00 00:00:00','eyJuYW1lIjoidGhpY2tib3giLCJ0aXRsZSI6IlRoaWNrYm94IiwiY29kZSI6ImNsYXNzPSd0aGlja2JveCcgcmVsPSclR0FMTEVSWV9OQU1FJSciLCJ2YWx1ZXMiOltdLCJpMThuIjp7Im5leHQiOiJOZXh0ICZndDsiLCJwcmV2IjoiJmx0OyBQcmV2IiwiaW1hZ2UiOiJJbWFnZSIsIm9mIjoib2YiLCJjbG9zZSI6IkNsb3NlIiwibm9pZnJhbWVzIjoiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIGlubGluZSBmcmFtZXMuIFlvdSBoYXZlIGlmcmFtZXMgZGlzYWJsZWQgb3IgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlbS4ifSwic3R5bGVzIjoid29yZHByZXNzI3RoaWNrYm94Iiwic2NyaXB0cyI6InBob3RvY3JhdGktbGlnaHRib3gjdGhpY2tib3hcL25leHRnZW5fdGhpY2tib3hfaW5pdC5qc1xud29yZHByZXNzI3RoaWNrYm94IiwiaWRfZmllbGQiOiJJRCIsImRpc3BsYXlfc2V0dGluZ3MiOltdfQ==',0,'http://thesocietea.org/?p=399',0,'lightbox_library','',0),(400,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=','NextGEN Basic Compact Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgQ29tcGFjdCBBbGJ1bSIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMifX0=',0,'http://thesocietea.org/?p=400',0,'display_type','',0),(401,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==','NextGEN Basic Extended Album','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgRXh0ZW5kZWQgQWxidW0iLCJlbnRpdHlfdHlwZXMiOlsiYWxidW0iLCJnYWxsZXJ5Il0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2FsYnVtXC9zdGF0aWNcL2V4dGVuZGVkX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJhbGJ1bXMiLCJ2aWV3X29yZGVyIjoxMDIxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19leHRlbmRlZF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJ0ZW1wbGF0ZSI6IiIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyJ9fQ==',0,'http://thesocietea.org/?p=401',0,'display_type','',0),(402,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic Thumbnails','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGh1bWJuYWlscyIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoxMjAsInRodW1ibmFpbF9oZWlnaHQiOjkwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1Nob3cgc2xpZGVzaG93XSIsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3F1YWxpdHkiOiIxMDAiLCJ0aHVtYm5haWxfY3JvcCI6MSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwicGljbGVuc19saW5rX3RleHQiOiJbU2hvdyBQaWNMZW5zXSIsInNob3dfcGljbGVuc19saW5rIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=402',0,'display_type','',0),(403,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=','NextGEN Basic Slideshow','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2xpZGVzaG93IiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2dhbGxlcnlcL3N0YXRpY1wvc2xpZGVzaG93X3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAxMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY19zbGlkZXNob3ciLCJpbnN0YWxsZWRfYXRfdmVyc2lvbiI6IjIuMC42Ni4zNyIsImlkX2ZpZWxkIjoiSUQiLCJzZXR0aW5ncyI6eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MTIwLCJ0aHVtYm5haWxfaGVpZ2h0Ijo5MCwiY3ljbGVfaW50ZXJ2YWwiOjEwLCJjeWNsZV9lZmZlY3QiOiJmYWRlIiwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1Nob3cgdGh1bWJuYWlsc10iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifX0=',0,'http://thesocietea.org/?p=403',0,'display_type','',0),(404,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19','NextGEN Basic ImageBrowser','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgSW1hZ2VCcm93c2VyIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3Nlclwvc3RhdGljXC9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfaW1hZ2Vicm93c2VyIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn19',0,'http://thesocietea.org/?p=404',0,'display_type','',0),(405,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==','NextGEN Basic SinglePic','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2luZ2xlcGljIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjAuNjYuMzciLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwid2lkdGgiOiIiLCJoZWlnaHQiOiIiLCJtb2RlIjoiIiwiZGlzcGxheV93YXRlcm1hcmsiOjAsImRpc3BsYXlfcmVmbGVjdGlvbiI6MCwiZmxvYXQiOiIiLCJsaW5rIjoiIiwibGlua190YXJnZXQiOiJfYmxhbmsiLCJxdWFsaXR5IjoxMDAsImNyb3AiOjAsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9fQ==',0,'http://thesocietea.org/?p=405',0,'display_type','',0),(406,2,'2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19','NextGEN Basic TagCloud','','draft','open','open','','','','','2015-01-23 23:11:24','0000-00-00 00:00:00','eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4wLjY2LjM3IiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NX19',0,'http://thesocietea.org/?p=406',0,'display_type','',0),(407,2,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=407',0,'ngg_gallery','',0),(408,2,'2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:53','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=408',0,'ngg_pictures','',0),(409,2,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_pictures','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_pictures&p=409',0,'ngg_pictures','',0),(410,2,'2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=','Untitled ngg_gallery','','draft','open','open','','mixin_nextgen_table_extras','','','2015-01-23 23:12:54','0000-00-00 00:00:00','eyJpZF9maWVsZCI6IklEIn0=',0,'http://thesocietea.org/?post_type=ngg_gallery&p=410',0,'ngg_gallery','',0),(412,2,'2015-02-10 17:06:35','2015-02-10 17:06:35','Hi, I\'m from Edmond, Oklahoma, and I like to program. A lot. My favorite projects are those that are data-heavy involving Ruby, Javascript, APIs, Databases, and more. Then, I always enjoy building a solid, responsive front-end using all the new cool-kid tools.\r\n\r\nOther than coding, I like brewing a hot cup of tea, listening to podcasts, walking my dog, and hanging out with my super cool girlfriend.','Home','','inherit','open','open','','4-revision-v1','','','2015-02-10 17:06:35','2015-02-10 17:06:35','',4,'http://thesocietea.org/2015/02/4-revision-v1/',0,'revision','',0),(414,2,'2015-02-18 19:43:01','2015-02-18 19:43:01','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\n\r\nrails-api new my_blog\r\n\r\ncd my_blog\r\n\r\n[/shell]\r\n','Building an API with Rails - Part 1','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:43:01','2015-02-18 19:43:01','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(415,2,'2015-02-18 19:47:17','2015-02-18 19:47:17','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle the first two tasks in this post, and save authentication for part 2. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:47:17','2015-02-18 19:47:17','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(416,2,'2015-02-18 19:49:28','2015-02-18 19:49:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[ruby]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/ruby]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:28','2015-02-18 19:49:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(417,2,'2015-02-18 19:49:43','2015-02-18 19:49:43','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:49:43','2015-02-18 19:49:43','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(418,2,'2015-02-18 19:57:33','2015-02-18 19:57:33','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n has_many :posts\r\n has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\nhas_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n\r\n[shell]rake db:seed[/shell]\r\n','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 19:57:33','2015-02-18 19:57:33','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(419,2,'2015-02-18 20:11:14','2015-02-18 20:11:14','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\n&nbsp;\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:14','2015-02-18 20:11:14','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(420,2,'2015-02-18 20:11:51','2015-02-18 20:11:51','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators to create API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-18 20:11:51','2015-02-18 20:11:51','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(421,2,'2015-02-20 20:46:23','2015-02-20 20:46:23','','oea_big_1','','inherit','open','open','','oea_big_1','','','2015-02-20 20:46:23','2015-02-20 20:46:23','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_1.jpg',0,'attachment','image/jpeg',0),(422,2,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_2','','inherit','open','open','','oea_big_2','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_2.jpg',0,'attachment','image/jpeg',0),(423,2,'2015-02-20 20:46:24','2015-02-20 20:46:24','','oea_big_3','','inherit','open','open','','oea_big_3','','','2015-02-20 20:46:24','2015-02-20 20:46:24','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_3.jpg',0,'attachment','image/jpeg',0),(424,2,'2015-02-20 20:46:25','2015-02-20 20:46:25','','oea_big_4','','inherit','open','open','','oea_big_4','','','2015-02-20 20:46:25','2015-02-20 20:46:25','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_big_4.jpg',0,'attachment','image/jpeg',0),(425,2,'2015-02-20 20:46:26','2015-02-20 20:46:26','','oea_th_1','','inherit','open','open','','oea_th_1','','','2015-02-20 20:46:26','2015-02-20 20:46:26','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_1.jpg',0,'attachment','image/jpeg',0),(426,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_2','','inherit','open','open','','oea_th_2','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_2.jpg',0,'attachment','image/jpeg',0),(427,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_3','','inherit','open','open','','oea_th_3','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_3.jpg',0,'attachment','image/jpeg',0),(428,2,'2015-02-20 20:46:27','2015-02-20 20:46:27','','oea_th_4','','inherit','open','open','','oea_th_4','','','2015-02-20 20:46:27','2015-02-20 20:46:27','',4,'http://thesocietea.org/wp-content/uploads/2014/06/oea_th_4.jpg',0,'attachment','image/jpeg',0),(429,2,'2015-02-20 20:51:13','2015-02-20 20:51:13','','No To High Stakes','','publish','closed','closed','','no-to-high-stakes','','','2015-02-20 20:54:35','2015-02-20 20:54:35','',0,'http://thesocietea.org/?post_type=project&#038;p=429',2,'project','',0),(430,2,'2015-02-20 20:58:26','2015-02-20 20:58:26','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nA popular trend today is to break up your application into different services, i.e. Service Oriented Architecture (SOA). By building an API, not only can you support all of your related apps with this single service, but it also keeps your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 20:58:26','2015-02-20 20:58:26','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(431,2,'2015-02-20 21:11:48','2015-02-20 21:11:48','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (SOA), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:11:48','2015-02-20 21:11:48','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(432,2,'2015-02-20 21:12:28','2015-02-20 21:12:28','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a separate API from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building an API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:12:28','2015-02-20 21:12:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(433,2,'2015-02-20 21:13:11','2015-02-20 21:13:11','How can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!\r\n\r\nP.S. If you want an example API built using the exact technologies I\'ll be discussing in these posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:13:11','2015-02-20 21:13:11','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(434,2,'2015-02-20 21:17:28','2015-02-20 21:17:28','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"mini\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:28','2015-02-20 21:17:28','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(435,2,'2015-02-20 21:17:37','2015-02-20 21:17:37','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (GET)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-20 21:17:37','2015-02-20 21:17:37','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(436,2,'2015-02-21 04:23:59','2015-02-21 04:23:59','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so stay tuned for the next parts as they come out.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-02-21 04:23:59','2015-02-21 04:23:59','',381,'http://thesocietea.org/2015/02/381-revision-v1/',0,'revision','',0),(437,2,'2015-02-25 14:08:53','2015-02-25 14:08:53','Check out some of the larger projects I\'ve worked on. Also, check out my <a title=\"Labs\" href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> page to see some smaller demos and other fun personal projects I\'ve done.','Projects','','inherit','open','open','','30-revision-v1','','','2015-02-25 14:08:53','2015-02-25 14:08:53','',30,'http://thesocietea.org/2015/02/30-revision-v1/',0,'revision','',0),(438,2,'2015-02-25 14:33:05','2015-02-25 14:33:05','','go_wiki_th','','inherit','open','open','','go_wiki_th','','','2015-02-25 14:33:05','2015-02-25 14:33:05','',4,'http://thesocietea.org/wp-content/uploads/2014/06/go_wiki_th.jpg',0,'attachment','image/jpeg',0),(439,2,'2015-02-25 14:36:46','2015-02-25 14:36:46','Lately I\'ve been getting into build automation quite a bit and trying to maximize my workflow productivity without having to worry about the not-fun things like ensuring that I\'m including all my files, concatenating scripts together, and manually running build tasks. I\'ve been using <a title=\"Grunt\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt</a> for a while now, which has been key for speeding up my workflow when I\'m working with new web projects, but I knew there was more out there to explore. I had heard <strong>bower</strong> and <strong>browserify</strong> thrown around on Twitter and at local dev meetings, and I knew that my fellow developers were making use of these tools, so I decided to check them out. Man ... I\'m glad I did, because these are tools that every full-stack developer should know about.\r\n\r\nWhile bower and browserify aren\'t necessarily related, I use them together quite a bit because they\'re both geared specifically towards client-side development, and it\'s this bond which makes them such a powerful combo. Let\'s start off with a bio of what they both are:\r\n<h2>Bower</h2>\r\n<a title=\"Bower\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> is a front-end package manager, and works similar to NPM or RubyGems. You can either install packages one-by-one with a simple\r\n\r\n[shell]bower install &lt;package&gt;[/shell]\r\n\r\nOr you can create a bower.json file in which you specify lists of packages and their versions that you want to fetch.  It gathers<span style=\"color: #543729;\"> and installs packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. No longer do you need to manually download front-end packages from the source site or GitHub - now you just tell bower to do it. Install it with NPM:</span>\r\n\r\n[shell]npm install -g bower[/shell]\r\n\r\nSimilar to NPM, bower will install all packages inside of a <strong>bower_components</strong> directory at the root of where you run the install command. Here\'s what a sample bower.json would look like:\r\n\r\n[code]\r\n{\r\n  &quot;name&quot;: &quot;Package Name&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~1.11.1&quot;,\r\n    &quot;modernizr&quot;: &quot;~2.8.3&quot;,\r\n    &quot;normalize-scss&quot;: &quot;~3.0.1&quot;\r\n  }\r\n}[/code]\r\n\r\nAnd would be installed with a simple\r\n\r\n[shell]bower install[/shell]\r\n\r\nThis will fetch the specificed version of jQuery, Modernizr, and Normalize-SCSS. Notice how there\'s both javascript and sass in there? Bower isn\'t language specific, so you can get javascript, css, sass, less, and much more. The files that bower retrieves are meant to be physically included into your project, so the bower_components directory is very clean and well structured.\r\n\r\nSo what makes bower any better than the other common package managers like NPM and RubyGems? Well, none of them are necessarily <em>better</em> than the other - they all handle specific types of packages. All three of these package managers allow you to list out your dependencies and versions, and will ensure that the full dependency tree is met. However, NPM and RubyGems are more geared towards server-side development and also allow the installation of global executable commands. Bower is much simpler in that it is only meant to find the front-end packages that you need, and dish them out for you.\r\n\r\nNow that we\'ve discussed how to gather our client-side packages in a clean, agile, and no-hassle manner, let\'s talk about how we can build them all together and include just one bundle into our main html. Enter browserify.\r\n<h2>Browserify</h2>\r\n<a title=\"Browserify\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> is a tool which, just like bower, gives your client-side workflow a serious improvement; this tool, however, is javascript specific. Browserify seems to be steeped in a lot of mystery and confusion, and a lot of developers stray away from it without really understanding the benefits. Browserify is honestly really simple; it only does two things for you:\r\n<ul>\r\n	<li>It allows you to use node-style require() calls in your client-side javascript</li>\r\n	<li>It gives you a CLI to bundle those files together and compile them down into javascript that the browser can understand</li>\r\n</ul>\r\nThat\'s it! With browserify, you can write modular code the \'node way\' while at the same time writing purely front-end code. Here\'s how to install it:\r\n\r\n[shell]npm install -g browserify[/shell]\r\n\r\nAnd here\'s an example file that we\'ll eventually compile with browserify:\r\n\r\n[javascript title=\"main.js\"]\r\nvar $ = require(\'jquery\');\r\n\r\n// External Libs&lt;/pre&gt;\r\nrequire(\'./bower_components/lib1/lib1.js\');\r\nrequire(\'./bower_components/lib2/lib2.js\');\r\n\r\n$(document).ready(function(){\r\n  $(\'body\').append(\'&lt;p&gt;This Works&lt;/p&gt;\');\r\n});\r\n[/javascript]\r\n\r\nThis file includes jQuery (required in a way that assumes it\'s installed as a node package), as well as two external libs that I\'m using. By setting jQuery to a variable, I am able to use the standard <strong>$</strong> operator and have it only be accessible within the scope of this file. Because the other two files aren\'t set to variables, they are loaded just within the general scope of the file, as if they had already been included in that page\'s html.\r\n\r\nBy having these external files installed with bower, I can access their source files directly with the help of browserify. This is similar to using the @import function in sass, but because browserify accounts for modularity, these files will only be accessible in the scope that you require them.\r\n\r\nLast but not least, let\'s build this puppy:\r\n\r\n[shell]browserify main.js -o bundle.js[/shell]\r\n\r\nThis will run through our main.js file, gather all of the required files, and build it all into a file called bundle.js. This would be the file that you include in your html, and it will be written in browser-compatible javascript. That\'s how you do node - the browser way.\r\n\r\n<hr class=\"short\" />\r\n\r\nSo at this point, we\'ve established a good footing on bower and browserify, both of which are tools geared towards making your front-end workflow as efficient and clean as possible. We also discussed how you can install vendor packages with bower and then include them directly into your javascript using browserify, allowing you to write modular front-end code. Now this is a big improvement over manually finding and downloading vendor packages from the internet and muddying up your html by including multiple libraries (not to mention ignoring the concept of scope altogether), but we can still improve on this workflow. After all, we\'re having to manually run the browserify command every time we want to rebundle our files - and we don\'t enjoy manual labor like that.\r\n\r\nSo what can we do? Well, I mentioned I\'ve been getting into build automation lately, so I bet we can standardize this workflow and give instructions to a tool like grunt to do all the work for us. We covered our basics here, so next time we can get into maximizing our javascript building by incorporating a task runner (as well as a few other tricks I\'ll show you).\r\n\r\nStay tuned for the next post: Building Javascript with Grunt, Bower, Browserify.','Getting Familiar with Bower and Browserify','','inherit','open','open','','233-revision-v1','','','2015-02-25 14:36:46','2015-02-25 14:36:46','',233,'http://thesocietea.org/2015/02/233-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (440,2,'2015-02-25 14:38:57','2015-02-25 14:38:57','I\'ve been using Vim as my editor for the past couple years, and just like most people who use it, I\'ve grown to live and die by it. Vim is a wonderful text editor specifically geared towards coding (even though I\'m known to use it for building shopping lists, and other gangster....lists), and you should really check it out if you work with the Linux terminal a lot.\r\n\r\nLet\'s review what <a href=\"http://www.vim.org/\" target=\"_blank\">Vim</a> is. Vim is a modal text editor that is incredibly customizable - you can pick your own color schemes, look and feel, key mappings, plugins, and even build your own plugins as well. Modal means that vim has different modes such as insert, visual, and normal mode. Due to these different modes, vim allows you to never have to use the mouse to interact - it\'s all keyboard (this might blow your mind if you\'ve never heard of this concept before). People use Vim for a variety of reasons, and usually don\'t ever look back once they\'ve started using it. Let\'s review why you should start using Vim, if you don\'t already:\r\n<ul>\r\n	<li>Vim makes you lightning fast</li>\r\n</ul>\r\nIt\'s true, the top reason people love vim is because once you\'ve gotten decently good at it, you become so quick at editing code. Vim is also a skill that you can keep getting better at, so that means you can keep getting faster and faster. Being able to completely, and I mean completely, code all day without ever having to lift a single finger off of your keyboard....that\'s power, my friend. Raw power\r\n<ul>\r\n	<li>Vim is super customizable</li>\r\n</ul>\r\nYes, I\'m sure your editor allows you to choose color themes. If you\'re using one of the proprietary text editors like TextMate and Sublime Text, I\'m sure you are granted a lot of customizable options as well, but vim...it\'s just different. Sure you can customize your colors and key shortcuts, but that\'s just baby steps. Vim has such a following of developers that build cool plugins...it\'s just amazing. You can find such powerful plugins (and powerful pre-built combinations of plugins like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/spf13/spf13-vim\">spf13</a>) that allow you to do exactly what you need, with nothing but a few keystrokes. Heck, you can even develop your own plugins if you\'re badass enough.\r\n<ul>\r\n	<li>Vim is cross-platform completely (Even for you Windows guys)</li>\r\n</ul>\r\nYou can use Vim on any platform - Windows. Mac OS, and all the Linux distributions. TextMate is a popular editor (costs about $50), but it only works on Mac. Sublime Text is also a big editor that is indeed cross-platform too, but still costs a good $70ish bucks for a full license to use it. This leads me to my next point...\r\n<ul>\r\n	<li>Vim is absolutely free</li>\r\n</ul>\r\nNo Gimmicks. Nuff\' said here.\r\n<ul>\r\n	<li>Vim is used in the terminal itself</li>\r\n</ul>\r\nThis might not be as a big of a deal to some developers, but if you program on a VPS that uses linux (sorry TextMate), then it\'s often much easier to do everything you need to by just ssh-ing into your server and coding straight from the terminal. This is where vim is in its native environment, and thrives like a pure machine. Sure, vim has a graphical version as well (MacVim for Mac OS, GVim for everything else), but it\'s basically the same as Vim with a larger default color sets. If you do own a VPS and don\'t use vim, then I really recommend you look into it.\r\n\r\nThere are many more reasons why you could and would want to use vim, but if I haven\'t convinced you already, then nothing\'s gonna do it. Do some googling on vim though and see if you want to check it out. If you do, then stay tuned; the next blog post will be on the <a title=\"How to Learn Vim\" href=\"http://thesocietea.org/2014/07/how-to-learn-vim/\">best ways to learn Vim</a> (and trust me, there\'s a bunch of them).','Vim as Your Editor?','','inherit','open','open','','154-revision-v1','','','2015-02-25 14:38:57','2015-02-25 14:38:57','',154,'http://thesocietea.org/2015/02/154-revision-v1/',0,'revision','',0),(441,2,'2015-02-25 14:42:12','2015-02-25 14:42:12','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She makes me a better person in all the areas that I would otherwise fail miserably at, like being thoughtful, building relationships with people, and keeping the house clean ;). I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-25 14:42:12','2015-02-25 14:42:12','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(442,2,'2015-02-25 15:42:32','2015-02-25 15:42:32','This post is continuation of a previous post covering bower and browserify; if you haven\'t read it yet, I highly recommend you start off by reading <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">Getting Familiar with Bower and Browserify</a> before starting here. Let\'s review our goals regarding javascript building that we landed upon at the end of the last post:\r\n\r\n<strong>Goal:</strong> We want to automate the gathering actions of bower and javascript-building actions of browserify in our workflow to make for a seriously powerful javascript pipeline that we don\'t have to continually maintain.\r\n\r\nWe\'ve covered a brief intro into bower and browserify, and now we\'re ready to get our hands dirty with them both by using them with grunt.\r\n<h2>Installing Grunt</h2>\r\nIf you\'re unfamiliar with what grunt.js is, or build automation in general, please check out the <a title=\"Grunt.js\" href=\"http://gruntjs.com/\" target=\"_blank\">grunt.js homepage</a> for an introduction. Despite the rising popularity of Gulp (another build automation tool), I am choosing to stick with grunt as it currently still has a larger plugin community.\r\n\r\nAssuming you already have bower and browserify installed (if you don\'t, see the <a title=\"Getting Familiar with Bower and Browserify\" href=\"http://thesocietea.org/2014/08/getting-familiar-with-bower-and-browserify/\" target=\"_blank\">last post</a>), then all we need to install is the grunt CLI:\r\n\r\n[shell]npm install -g grunt-cli[/shell]\r\n\r\nNow that we have the grunt CLI installed, we need to establish a package.json file for our project in order to install the rest of the grunt plugins we\'ll use.\r\n<h2>Installing Grunt Plugins</h2>\r\nCreate a new package.json at the root of your project folder, or update your existing one, to include the following devDependencies:\r\n\r\n[code title=\"package.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt-bower-task&quot;: &quot;0.4.0&quot;,\r\n    &quot;grunt-browserify&quot;: &quot;2.1.4&quot;,\r\n    &quot;browserify&quot;: &quot;~5.10.1&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nLet\'s also create a bare bones bower.json file with some base libraries:\r\n\r\n[code title=\"bower.json\"]\r\n{\r\n  &quot;name&quot;: &quot;project name&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,,\r\n    modernizr&quot;: &quot;~2.8.3&quot;\r\n  }\r\n}\r\n[/code]\r\n\r\nTo install node modules:\r\n\r\n[shell]npm install[/shell]\r\n\r\nThis will install the bower and browserify grunt tasks, as well as verifying that you have the regular browserify module installed. Let\'s hold off on installing our bower components yet, we\'ll let grunt take care of that.\r\n\r\nNow that we have everything set up, we can finally start our Gruntfile. Let\'s start off with the basics:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n  })\r\n}\r\n[/javascript]\r\n\r\n<h2>Creating the Gruntfile</h2>\r\nWe don\'t have anything exciting yet - just a basic Gruntfile skeleton. Let\'s start off our workflow by automating our bower component installation:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nmodule.exports = function (grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON(\'package.json\')\r\n    bower : {\r\n      install : {\r\n        options : {\r\n          targetDir : \'vendor/bower_components\',\r\n          layout : \'byComponent\',\r\n          verbose: true,\r\n          cleanup: true\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n[/javascript]\r\n\r\nThese settings are customizable, but I\'m a fan of dumping all my vendor packages into a /vendor directory. The layout attribute states that the package will be within its own folder (as opposed to default js/css/etc. folders that bower likes to use), and the cleanup option ensures that prior to the install command being run, the directory will be wiped out.\r\n\r\nNow we can install our bower components like so:\r\n\r\n[shell]grunt bower:install[/shell]\r\n\r\nWe will now have jQuery and Modernizr installed in /vendor/bower_components. Perfect - now let\'s get to using those files with the help of browserify. Let\'s add this to our Gruntfile:\r\n\r\n[javascript title=\"Gruntfile.js\"]\r\nbrowserify : {\r\n  app : {\r\n    files : { \'build/app.js\' : [\'src/js/app.js\'] }\r\n  }\r\n}\r\n[/javascript]\r\n\r\nThis will take a javascript source file (or many) and build it out into a browserify bundle that is browser friendly. So our end goal is to create a bundle from a file like this:\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nBut can we do this? Alas, no, not yet. We have three problems:\r\n<ol>\r\n	<li>While we have jQuery and modernizr installed through bower, browserify has no idea where they\'re located, so we can\'t just require them like we are - we would need to require exact script locations.</li>\r\n	<li>With modular programming, we would need to assign jQuery to the <strong>$</strong> variable, and modernizr to the <strong>Modernizr</strong> variable before we could use them in that way.</li>\r\n	<li>Browserify can only require <a title=\"CommonJS\" href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\">CommonJS style</a> scripts ... so basically modules, and while the scripts we have for jQuery and modernizr <em>may be</em> built as modules, we can\'t be sure. Plus, we still want to be able to require other vendor scripts even if they\'re not modules.</li>\r\n</ol>\r\nSo have we come this far for me to tell you we can\'t do anything, and you can only use browserify for your own CommonJS style scripts? No, absolutely not! We can fix this with an awesome node module called browserify-shim.\r\n<h2>Adding Browserify-Shim</h2>\r\n<a title=\"Browserify-Shim\" href=\"https://github.com/thlorenz/browserify-shim\" target=\"_blank\">Browserify-shim</a> is a node module which allows you to include non-CommonJS style scripts into browserify\'s require command, and to also assign them to aliases that you can use in your scripts. You can check out the GitHub repo to see all the features, but we\'ll just go over installation and implementation here.\r\n\r\nInstall (as a devDependency here):\r\n\r\n[shell]npm install -D browserify-shim[/shell]\r\n\r\nAnd then add this to your package.json:\r\n\r\n[code title=\"package.json\"]\r\n&quot;browser&quot;: {\r\n  &quot;jquery&quot;: &quot;./vendor/bower_components/jquery/jquery.js&quot;,\r\n  &quot;modernizr&quot;: &quot;./vendor/bower_components/modernizr/modernizr.js&quot;\r\n},\r\n&quot;browserify-shim&quot;: {\r\n  &quot;jquery&quot;: &quot;$&quot;,\r\n  &quot;modernizr&quot;: &quot;Modernizr&quot;\r\n},\r\n&quot;browserify&quot;: {\r\n  &quot;transform&quot;: [ &quot;browserify-shim&quot; ]\r\n}\r\n[/code]\r\n\r\nIn a nutshell, browserify-shim is exposing our jQuery and modernizr packages as a different name for browserify to look for (jquery and modernizr, respectively), and then we are aliasing the modules to the variables we\'re used to using: $ and Modernizr. Lastly, we tell browserify to run browserify-shim prior to building out the files, which is what allows all of this to happen.\r\n\r\nBrowserify-shim can do even more than this, but that\'s all we need it for. Now will this javascript work?\r\n\r\n[javascript title=\"src/js/app.js\"]\r\nrequire(\'jquery\');\r\nrequire(\'modernizr\');\r\n\r\n$(document).ready(function){\r\n  // do stuff!\r\n});\r\n[/javascript]\r\n\r\nYup, 100% as long as we\'re using grunt to build our javascript.\r\n<h2>Summary</h2>\r\nI know we\'ve covered a lot here, but if you can implement this workflow into your javascript pipeline, you\'ll seriously boost your productivity. To review everything we\'re doing here:\r\n<ul>\r\n	<li>Using <strong>bower</strong> to simplify how we get our vendor scripts, as well as managing versions easily.</li>\r\n	<li>Using <strong>browserify-shim</strong> to turn all non-CommonJS scripts into browserify-compatible modules.</li>\r\n	<li>Using <strong>browserify</strong> to write modular javascript code, and build everything we want into a small amount of organized bundles.</li>\r\n	<li>Running everything through <strong>grunt</strong> to handle all the tedious work for us, so we can concentrate on the fun stuff.</li>\r\n</ul>\r\nWhile the big benefit here is that we have really improved our workflow to allow powerful services to do the work for us, another thing to consider is that now we can really true modular code. That\'s a best practice in every language, and having that at our disposal allows us to write clean, beautiful javascript that is very readable and very debuggable.\r\n\r\nYou made it to the end, and now at least have some familiarity with using bower and browserify in your project. Give it a try and see how you feel about your new javascript build process. I promise you won\'t be disappointed!','Building Javascript with Grunt, Bower, Browserify','','inherit','open','open','','261-revision-v1','','','2015-02-25 15:42:32','2015-02-25 15:42:32','',261,'http://thesocietea.org/2015/02/261-revision-v1/',0,'revision','',0),(443,2,'2015-03-27 14:00:16','2015-03-27 14:00:16','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]gem \'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','publish','open','open','','building-a-json-api-with-rails-part-2-serialization','','http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\nhttps://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/','2015-04-28 17:00:59','2015-04-28 17:00:59','',0,'http://thesocietea.org/?p=443',0,'post','',7),(444,2,'2015-02-25 18:53:49','2015-02-25 18:53:49','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. In the last post, we focused on setting a basic JSON API up using Rails and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 18:53:49','2015-02-25 18:53:49','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(445,2,'2015-02-25 19:01:03','2015-02-25 19:01:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting a basic JSON API up using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:03','2015-02-25 19:01:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(446,2,'2015-02-25 19:01:38','2015-02-25 19:01:38','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s (or objects\', if querying the <em>index</em> action) attributes based entirely on the database record. This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:01:38','2015-02-25 19:01:38','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(447,2,'2015-02-25 19:03:03','2015-02-25 19:03:03','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:03','2015-02-25 19:03:03','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(448,2,'2015-02-25 19:03:41','2015-02-25 19:03:41','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling this response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:03:41','2015-02-25 19:03:41','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(449,2,'2015-02-25 19:04:30','2015-02-25 19:04:30','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-25 19:04:30','2015-02-25 19:04:30','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(450,2,'2015-02-26 19:02:57','2015-02-26 19:02:57','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n\r\n[shell]\r\n\r\ngem install active_model_serializers -v 0.8.3\r\n\r\n[/shell]\r\n\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\n\r\nAnd that will create the following file:\r\n\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\n\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\nattributes :id\r\nend\r\n\r\n[/ruby]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:02:57','2015-02-26 19:02:57','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(451,2,'2015-02-26 19:05:46','2015-02-26 19:05:46','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n&nbsp;\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:05:46','2015-02-26 19:05:46','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(452,2,'2015-02-26 19:09:11','2015-02-26 19:09:11','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User model for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? Now go ahead and run the serializers for the remaining Post and Comment models, and then we\'ll get into some configuration:\r\n\r\n\r\n[shell]\r\n\r\nrails g serializer post\r\n\r\nrails g serializer comment\r\n\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:09:11','2015-02-26 19:09:11','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(453,2,'2015-02-26 19:29:25','2015-02-26 19:29:25','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key, and are now returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when your query you User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are not return each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because it\'s only meant for specific serialization cases, you don\'t want to dirty up the model files. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable. Nifty, huh? <strong>Pro Tip</strong>: You can also serialize model methods in this same way, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old JSON syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:29:25','2015-02-26 19:29:25','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(454,2,'2015-02-26 19:36:45','2015-02-26 19:36:45','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which has three relational tables associated with it: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to \'serialize\' our API? Currently when we make a GET request to, or \'hit,\' one of our API endpoints (like user or post), we get back that object\'s attributes based entirely on the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that get real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, all of them using gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nAll of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with if you use AMS.','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-26 19:36:45','2015-02-26 19:36:45','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(456,2,'2015-02-27 14:08:09','2015-02-27 14:08:09','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 7 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:09','2015-02-27 14:08:09','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(457,2,'2015-02-27 14:08:48','2015-02-27 14:08:48','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 30+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:08:48','2015-02-27 14:08:48','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(458,2,'2015-02-27 14:11:30','2015-02-27 14:11:30','My name is Aaron Krauss. I’m a Full Stack developer based out of Edmond, Oklahoma (near Oklahoma City). I was born in Germany in 1990, grew up in a German culture for 6 years, and still speak moderately fluent German. I currently work at Staplegun Inc. as a web developer and designer, and engage in miscellaneous development on my own time.\r\n<h2>Background</h2>\r\nI have been coding since I was 14 in my first high school programming class, and I’ve become a major polyglot programmer since then. Starting with <span class=\"hi\">Visual Basic</span> (anyone remember that?), I then went on to learn <span class=\"hi\">Java</span>, <span class=\"hi\">C</span>, <span class=\"hi\">C++</span>, <span class=\"hi\">HTML</span>, <span class=\"hi\">CSS</span>, <span class=\"hi\">VB.NET</span>, <span class=\"hi\">C#</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL DBs</span>, <span class=\"hi\">Ruby</span>, <span class=\"hi\">Python</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">Shell</span>, <span class=\"hi\">Git</span>, <span class=\"hi\">Io</span>, <span class=\"hi\">Prolog</span>…. The list could go on and on.\r\n\r\nI’ve gotten to work on some pretty cool things in my past, such as a Lego Mindstorm robotics project, a Term Frequency/Inverse Document Frequency search engine, interactive web forms for the FAA, and that was all just while in college. I’ve learned a ton more since then.\r\n\r\nMy background is that of a back-end developer, specializing in object-oriented programming in both software and web development. I prefer to program in a Unix-based environment, utilizing the terminal heavily for everything. My main skills here are <span class=\"hi\">Ruby/Rails</span>, <span class=\"hi\">PHP</span>, <span class=\"hi\">SQL</span>, <span class=\"hi\">NoSQL</span>, <span class=\"hi\">APIs</span>, and <span class=\"hi\">Ember.js</span>.\r\n\r\nRecently, I’ve been doing a lot of front-end development, getting my hands dirty with a bunch of <span class=\"hi\">HTML5</span>, <span class=\"hi\">Sass</span>, <span class=\"hi\">Javascript</span>, <span class=\"hi\">Grunt.js</span>, and CMSs like <span class=\"hi\">Wordpress</span>, <span class=\"hi\">ModX</span>, and <span class=\"hi\">Craft.</span> I have used <span class=\"hi\">Foundation</span> heavily in the past, and a bit of <span class=\"hi\">Bootstrap</span>, but now I choose to build my own responsive styles using just a tiny sass plugin to provide a grid. Check out my <a title=\"Projects\" href=\"http://thesocietea.org/projects/\" target=\"_blank\">projects</a> to see what I’ve been working on, or you can <a title=\"Hire Me\" href=\"http://thesocietea.org/hire-me/\" target=\"_blank\">hire me</a> if you have a cool project and need a remote developer!\r\n<h2>My Interests</h2>\r\nI love <span class=\"hi\">tea</span>. Not your everyday grocery store tea though. I purchase my tea from a special vendor with direct tea farmer relationships so that I can know exactly what province it was plucked in, and what month it was plucked. Sound intense? It is.\r\n\r\nI love <span class=\"hi\">walking my dog.</span> I find it super relaxing, I get to experience raw sunlight (something us developers don’t do often enough) and I’m giving both me and my dog exercise. Plus, I get to listen to a lot of podcasts, which leads me to...\r\n\r\nI love <span class=\"hi\">podcasts</span>. I’m currently subscribed to 25+ podcasts, updating regularly anywhere from daily to a few times a year, and I usually knock them all out. My favorites are those where I can walk away thinking I gained a chunk of tangible knowledge that I didn’t have before. HowStuffWorks is easily my favorite network of podcasts.\r\n\r\nI love <span class=\"hi\">beer</span>. I love experiencing all the different kinds of beer, with more malty types such as stouts, bocks, brown ales, and scotch ales being my favorites; I even made my own beer chart to categorize all the different beer types. I was born in Germany, so maybe it stems from that a little bit. You’ll never see me go to a bar and order a bottle. It has to be on tap. My friends call me a beer snob, but I just don’t want to appreciate it unless it’s in its finest form.\r\n\r\nI love <span class=\"hi\">Layla</span>. We have been dating for over 8 years, and it’s been nothing but bliss. She\'s the coolest, most down-to-earth person I\'ve ever met, and it\'s so awesome to be the lucky guy who gets to have her. I couldn’t imagine a life without her, and hanging out with her – doing anything – is always my favorite thing to do. I love her. She’s an incredibly talented cake decorator too!\r\n\r\n<span class=\"hi\">Note:</span> View this page on a non-mobile device or up-to-date browser to see some really neat parallax effects!','About','','inherit','open','open','','6-revision-v1','','','2015-02-27 14:11:30','2015-02-27 14:11:30','',6,'http://thesocietea.org/2015/02/6-revision-v1/',0,'revision','',0),(459,2,'2015-02-27 15:28:15','2015-02-27 15:28:15','','Intervals Browser Extension','','publish','closed','closed','','intervals-browser-extension','','','2015-03-31 16:14:35','2015-03-31 16:14:35','',0,'http://thesocietea.org/?post_type=project&#038;p=459',5,'project','',0),(460,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_1','','inherit','open','open','','intervals_big_1','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_1.jpg',0,'attachment','image/jpeg',0),(461,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_2','','inherit','open','open','','intervals_big_2','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_2.jpg',0,'attachment','image/jpeg',0),(462,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_big_3','','inherit','open','open','','intervals_big_3','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_big_3.jpg',0,'attachment','image/jpeg',0),(463,2,'2015-02-27 15:26:15','2015-02-27 15:26:15','','intervals_th_2','','inherit','open','open','','intervals_th_2','','','2015-02-27 15:26:15','2015-02-27 15:26:15','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_th_2.jpg',0,'attachment','image/jpeg',0),(464,2,'2015-02-27 15:26:16','2015-02-27 15:26:16','','intervals_th_3','','inherit','open','open','','intervals_th_3','','','2015-02-27 15:26:16','2015-02-27 15:26:16','',459,'http://thesocietea.org/wp-content/uploads/2015/02/intervals_th_3.jpg',0,'attachment','image/jpeg',0),(465,2,'2015-02-27 19:22:28','2015-02-27 19:22:28','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nStay tuned!','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-02-27 19:22:28','2015-02-27 19:22:28','',443,'http://thesocietea.org/2015/02/443-revision-v1/',0,'revision','',0),(466,2,'2015-09-25 12:00:56','2015-09-25 12:00:56','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We\'re an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become a part of me over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','future','open','open','','whats-with-the-name','','','2015-06-11 03:07:18','2015-06-11 03:07:18','',0,'http://thesocietea.org/?p=466',0,'post','',0),(467,2,'2015-02-27 19:52:47','2015-02-27 19:52:47','<strong>The Societea</strong>. What does that even mean, and why is it the domain for someone\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a>, and was pretty good friends with my fellow developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where they would drink the tea that I brewed everyday. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea. We also took occasional 15 minute breaks to walk around the complex sometimes, so that was also a foundation of our camaraderie.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who cared about the name being \"The Societea\" instead of \"ADF Tea,\" but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first public site that I would officially own. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to me. I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n\r\n&nbsp;\r\n\r\nwas I didn\'t really have any reason to build a site completely to showcase myself, since I didn\'t have much dev work to show, nor was I too interested in blogging at the time.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-02-27 19:52:47','2015-02-27 19:52:47','',466,'http://thesocietea.org/2015/02/466-revision-v1/',0,'revision','',0),(468,2,'2015-02-27 19:53:07','2015-02-27 19:53:07','<strong>The Societea</strong>. What does that even mean, and why is it the domain for someone\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a>, and was pretty good friends with my fellow developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where they would drink the tea that I brewed everyday. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea. We also took occasional 15 minute breaks to walk around the complex sometimes, so that was also a foundation of our camaraderie.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who cared about the name being \"The Societea\" instead of \"ADF Tea,\" but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first public site that I would officially own. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to me. I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-02-27 19:53:07','2015-02-27 19:53:07','',466,'http://thesocietea.org/2015/02/466-revision-v1/',0,'revision','',0),(469,2,'2015-03-06 14:00:47','2015-03-06 14:00:47','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2><a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a></h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','publish','open','open','','launched-labs-and-my-beer-adventure','','\nhttp://thesocietea.org/2014/06/what-this-site-runs-on-part-1/','2015-04-01 15:29:47','2015-04-01 15:29:47','',0,'http://thesocietea.org/?p=469',0,'post','',0),(470,2,'2015-03-01 21:13:50','2015-03-01 21:13:50','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made for them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are mostly HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that\'s I\'m running as a web server as a wiki tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I built my main The Societea site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase other projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only caveat is that you have to give attribution in the footer to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free.\r\n\r\nCheck out my labs here: http://labs.thesocietea.org\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\n&nbsp;\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-01 21:13:50','2015-03-01 21:13:50','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(471,2,'2015-03-02 00:37:22','2015-03-02 00:37:22','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are mostly HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that\'s I\'m running as a web server as a wiki tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I built my main The Societea site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase other projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only caveat is that you have to give attribution in the footer to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free.\r\n\r\nCheck out my labs here: http://labs.thesocietea.org\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st I have always been a fan of beer and the history of beer styles, especially craft beer, but it had been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc. This also led to me not drinking as many unique beers as I would have liked. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be content based, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and no fancy custom design. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie in my beer blog directly into my personal site, since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a a file-based DB, it\'s so easy to deploy to different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:37:22','2015-03-02 00:37:22','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(472,2,'2015-03-02 00:52:13','2015-03-02 00:52:13','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).<img class=\"alignright\" src=\"http://cdn.travelllll.com/ghost/ghost.png\" alt=\"Ghost Logo\" width=\"800\" height=\"400\" />\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:52:13','2015-03-02 00:52:13','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(473,2,'2015-03-02 00:52:41','2015-03-02 00:52:41','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety).\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nBoth of these new projects are running side-by-side my main site on my $5/month Digital Ocean VPS, which has easily been my best tech purchase so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo.','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 00:52:41','2015-03-02 00:52:41','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(474,2,'2015-03-02 01:00:08','2015-03-02 01:00:08','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be seen by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. I manage code through Git, which you probably already knew since each project is tied to its own GitHub repo. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 01:00:08','2015-03-02 01:00:08','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(475,2,'2015-03-02 01:05:46','2015-03-02 01:05:46','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2>Labs</h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-02 01:05:46','2015-03-02 01:05:46','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(476,2,'2015-03-03 03:22:35','2015-03-03 03:22:35','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nI think at this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. At this same time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 03:22:35','2015-03-03 03:22:35','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(477,2,'2015-03-03 14:10:43','2015-03-03 14:10:43','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website?\r\n<h2>History of The Societea</h2>\r\nWelcome wee lads and lasses, and prepare yee for a tale. A long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:10:43','2015-03-03 14:10:43','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(478,2,'2015-03-03 14:11:24','2015-03-03 14:11:24','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 5 or 6 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:11:24','2015-03-03 14:11:24','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(479,2,'2015-03-03 14:15:51','2015-03-03 14:15:51','','The Societea','','inherit','open','open','','the-societea','','','2015-03-03 14:15:51','2015-03-03 14:15:51','',466,'http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png',0,'attachment','image/png',0),(480,2,'2015-03-03 14:16:04','2015-03-03 14:16:04','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<a href=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\"><img class=\" size-full wp-image-479 aligncenter\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" /></a>\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:16:04','2015-03-03 14:16:04','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(481,2,'2015-03-03 14:16:35','2015-03-03 14:16:35','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-medium\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:16:35','2015-03-03 14:16:35','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(482,2,'2015-03-03 14:17:07','2015-03-03 14:17:07','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\" wp-image-479 size-medium alignright\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:17:07','2015-03-03 14:17:07','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(483,2,'2015-03-03 14:18:33','2015-03-03 14:18:33','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\n\r\n<img class=\" wp-image-479 size-medium alignright\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea-300x102.png\" alt=\"The Societea\" width=\"300\" height=\"102\" />This gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n&nbsp;\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:18:33','2015-03-03 14:18:33','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(484,2,'2015-03-03 14:20:15','2015-03-03 14:20:15','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We are an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become <em>a part of me</em> over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:20:15','2015-03-03 14:20:15','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(485,2,'2015-03-03 14:29:08','2015-03-03 14:29:08','<strong>The Societea</strong>. What does that even mean, and why is it the domain for some developer\'s personal website? Ah but wait, where are my manners. Welcome wee lads and lasses, and prepare ye for a tale.\r\n<h2>History of The Societea</h2>\r\nA long, long time ago back in early 2013, I was employed at a place in Edmond, OK called <a href=\"https://adfitech.com\" target=\"_blank\">Adfitech</a> with a group of other cool developers. I\'ve always been a big tea guy (don\'t believe me? Check out <a title=\"Where I Buy Tea\" href=\"http://thesocietea.org/2014/06/where-i-buy-tea/\" target=\"_blank\">where I buy my tea</a>), and spread my influence a little bit to my dev buddies, at least enough to where we would all brew and drink tea while we worked. This went on for a couple months or so, and I brought up that we need to create a club or group of some sort, since we all drink tea.  We threw some ideas around and kind of came up with <strong>ADF TEA</strong>, with ADF being short for Adfitech.\r\nThis gained enough traction (keep in mind, we\'re a group of 4 or 5 max) for Alex, one of our graphic designers, to create an actual logo for ADF TEA. It was pretty boss to say the least, but something still seemed too jagged about that group name. I brought up the fact that we\'re kind of like a \"society\" of some sort since we all had pretty similar interests (tea, technology, video games, etc.), and when I chatted it around couple times, I started to realize the phonetic similarities between <em>society</em> and <em>tea</em>. So, I just dropped the -y off of society, and <strong>the</strong> <strong>societea</strong> was born.\r\n\r\n<img class=\"aligncenter wp-image-479 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2015/03/The-Societea.png\" alt=\"The Societea\" width=\"566\" height=\"193\" />\r\n<h2>Why make it a website?</h2>\r\nAt this point, I was really the only one who was pretty excited about defining a name for our little group, but I rolled with it nonetheless. During this time, I was looking to purchase my very first domain for my first real public site. This was back in my pre-web-development days when I specifically developed for software applications, so I was a pretty big noob to say the least (I mean, I used <a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a> as my domain registrar, as well as opting for shared hosting), and had no intention of dedicating a full site to myself; I just wanted something to start my presence on the internet.\r\n\r\nI wanted to purchase <strong>aaronkrauss.com</strong>, but that was already taken - so I thought back at what other URL might fit, and I settled on <strong>thesocietea.com</strong> since that was the quasi-name of our little group at work. Well, for whatever reason, that domain was also unavailable, but the <span style=\"text-decoration: underline;\">.org</span> extension wasn\'t. Little lightbulbs went off in my head, and I thought \"Wait! We\'re an organization (kind of) - so I can buy the .org!\" And bam. I bought it.\r\n<h2>The Original Site</h2>\r\nWhen I first started working on this site, I used Wordpress - but instead of developing anything, I selected a free theme and just added content (remember, web developer noob at this time). Like I said - I didn\'t want to dedicate a whole site to me just yet, so I thought about what I wanted to put on this site. Obviously, tea was a given; I loaded it with some information and pictures about all different kinds of tea - but that wasn\'t enough. I thought deep and hard about how to make this site worth it, and I thought back to one of my high school passions: video games. Not just regular video games though - playing video games with other people. Community gaming, like as in a LAN party.\r\n\r\nI talked it over with my little group, and I was pretty impressed that everyone kind of liked the idea. I brought up all getting together on an evening at <a href=\"http://the404okc.com/\" target=\"_blank\">the 404</a> in downtown OKC for a night of video gaming and tea drinking - and everyone was actually going to do it. We were going to have a real game night - I was so pumped! I put up all the information and game ideas on the societea website, as well as linked it to a Google Calendar to track the event.\r\n\r\nWell, life events happened and the game night didn\'t end up panning out, and we never did schedule another game night, but that\'s the story about how the societea came to be.\r\n<h2>That Brings Us to Today</h2>\r\nThe site remained kind of dormant for about a year, aside from remaining a portal for some tiny personal projects I was working on, but after I started working at <a href=\"http://staplegun.us\" target=\"_blank\">Staplegun</a>, I gained enough front-end skills to really build a website promoting myself as a developer. I thought about dropping this domain since it didn\'t really make sense anymore, but <strong>aaronkrauss.com</strong> still wasn\'t available, and my girlfriend Layla brought up that I can\'t drop it because it\'s become a part of me over the past year. So I thought about it, and she was right - it was my first domain to ever buy, and the original mission was so representative of my interests. I was proud of what it was, and I hope to bring it back someday and really have a community video game night. So I kept it and rebuilt everything from scratch - and I plan to keep hacking on it for the foreseeable future. Because it is me. The Societea will always be a part of me.\r\n\r\n&nbsp;\r\n\r\n&nbsp;','What\'s with the Name?','','inherit','open','open','','466-revision-v1','','','2015-03-03 14:29:08','2015-03-03 14:29:08','',466,'http://thesocietea.org/2015/03/466-revision-v1/',0,'revision','',0),(487,2,'2015-04-17 17:00:36','2015-04-17 17:00:36','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\" target=\"_blank\">the next post</a> where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.\r\n\r\n<a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\" target=\"_blank\">Part 4: Implementing Authenticatation</a>','Building a JSON API with Rails – Part 3: Authentication Strategies','','publish','open','open','','building-a-json-api-with-rails-part-3-authentication-strategies','','\nhttps://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/','2015-04-30 20:55:29','2015-04-30 20:55:29','',0,'http://thesocietea.org/?p=487',0,'post','',2),(488,2,'2015-03-04 14:43:14','2015-03-04 14:43:14','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type,','Building a JSON API with Rails – Part 2: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:43:14','2015-03-04 14:43:14','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(489,2,'2015-03-04 14:54:47','2015-03-04 14:54:47','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 2: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:54:47','2015-03-04 14:54:47','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(490,2,'2015-03-04 14:55:32','2015-03-04 14:55:32','We just wrapped up our discussion on serialization in the last post, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:55:32','2015-03-04 14:55:32','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(491,2,'2015-03-04 14:56:29','2015-03-04 14:56:29','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as Content-Type, Host, User-Agent, Cookie, etc. and the one we use to authenticate is called Authorization. The first part of our header is the word <em>Basic</em>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 14:56:29','2015-03-04 14:56:29','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(492,2,'2015-03-04 15:00:58','2015-03-04 15:00:58','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work. However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or requires certain privileges to view. That may be okay if you\'re building a completely public API that can be used by any one at any point in time, such as a wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication methodology works according to the HTTP spec and what options are available to you. You can always use a third-party authentication source like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. Last but not least, the second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded.</a> You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fullyHTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token authentication.\r\n<h4>Token Authentication</h4>','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-04 15:00:58','2015-03-04 15:00:58','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(493,2,'2015-03-05 02:49:35','2015-03-05 02:49:35','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h4>Token-Based Authentication</h4>\r\nWe received a token back from our request using basic authentication, and now we\'re going to use','Building a JSON API with Rails – Part 3: Authentication','','inherit','open','open','','487-revision-v1','','','2015-03-05 02:49:35','2015-03-05 02:49:35','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(494,2,'2015-03-05 03:54:12','2015-03-05 03:54:12','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h4>Basic Authentication</h4>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h4>Token-Based Authentication</h4>\r\nWe received a token in our response from our request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 03:54:12','2015-03-05 03:54:12','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(495,2,'2015-03-05 04:18:12','2015-03-05 04:18:12','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - there\'s no security implemented. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of the post. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. You might ask what that looks like, and here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token in our response from our request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we set on the User model); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nWe got our token! We can change our Authorization header to be like, and use it this way this for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user, and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your username and password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 04:18:12','2015-03-05 04:18:12','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(496,2,'2015-03-05 04:56:11','2015-03-05 04:56:11','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without any notion of data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we\'re saying that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 04:56:11','2015-03-05 04:56:11','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(498,2,'2015-03-05 15:54:11','2015-03-05 15:54:11','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for the next part where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-03-05 15:54:11','2015-03-05 15:54:11','',487,'http://thesocietea.org/2015/03/487-revision-v1/',0,'revision','',0),(499,2,'2015-03-05 16:16:59','2015-03-05 16:16:59','','Beer','','publish','open','open','','beer','','','2015-04-02 18:16:15','2015-04-02 18:16:15','',0,'http://thesocietea.org/?p=499',6,'nav_menu_item','',0),(501,2,'2015-03-07 00:28:38','2015-03-07 00:28:38','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>My Beer Adventure</h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-autosave-v1','','','2015-03-07 00:28:38','2015-03-07 00:28:38','',469,'http://thesocietea.org/2015/03/469-autosave-v1/',0,'revision','',0),(502,2,'2015-03-07 00:28:59','2015-03-07 00:28:59','Two smaller personal projects that I\'ve been working on have officially launched, and I couldn\'t be more excited: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> and <a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a>. Here\'s a description of what they both are and some of the tech choices I made behind them.\r\n<h2><a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a></h2>\r\n<a href=\"http://labs.thesocietea.org\" target=\"_blank\">Labs</a> is a small project of mine that I built in order to showcase some of the smaller projects that I do on my own that aren\'t necessarily big enough to promote as an entire site (or even their own GitHub repo). In fact, the entire labs project is a <a href=\"https://github.com/alkrauss48/labs\" target=\"_blank\">single GitHub repo</a>, and I intend to keep it that way. The projects that I choose to be a part of labs are geared to be more visual demos - things that you could navigate to a URL and see an actual representation of what I\'ve been working on, without having to install anything. For the most part, this limits me to projects that are HTML, CSS, and Javascript, but I\'ve even got a project in Go up there that I\'m running as a web server to be a wiki that\'s tied to a MongoDB database.\r\n\r\nThe site is fully responsive, and while I designed this main site completely from scratch, I didn\'t want to spend as much time building my labs site since I wanted it specifically to showcase <em>other</em> projects. I dug around for a bit, and came across a neat site called <a href=\"http://html5up.net/\" target=\"_blank\">HTML5 Up</a> that has several clean, well-built site templates that are completely free to use. The only small caveat is that you have to give attribution somewhere to its creator, <a href=\"https://twitter.com/n33co\" target=\"_blank\">@n33co</a>, but if you\'d rather not give attribution, then you can purchase a very inexpensive license to get instant access to all of his amazing templates completely attribution-free. I want the developer of HTML5 Up to be known by everyone, so I\'m proud to give credit where credit is due.\r\n\r\nCheck out my labs here: <a href=\"http://labs.thesocietea.org\" target=\"_blank\">http://labs.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2><a href=\"http://beer.thesocietea.org\" target=\"_blank\">My Beer Adventure</a></h2>\r\nSince around my 21st birthday, I\'ve been a fan of beer and the history of beer styles, especially with the craft beer movement going on. However, it\'s been a long time since I really spent any time towards learning more about beer styles, beer history, beer brewing methodology, etc., and I also haven\'t been drinking as many unique beers as I\'ve been wanting to. So, I made a New Year\'s Resolution for 2015 to drink a new beer every single week - a resolution which I have happily abided by so far. I\'ve been documenting my beer selections via <a href=\"https://instagram.com/thecodeboss/\" target=\"_blank\">my Instagram</a> account, and it was brought up by one of my developer buddies that I should start actually blogging about my choices.\r\n\r\nI liked this idea because not only would it be easier to share with everyone my beer choices through 2015, but I would have a dedicated spot where I could share my experiences with each beer besides Instagram. Similar to my labs project though, since my main purpose for this blog would be to share content, I didn\'t want to spend a whole lot of time on design. This beer blog could even be simpler than my labs project too, since all I needed was a blog and nothing fancy. My main site runs on Wordpress (see <a title=\"What This Site Runs On – Part 1\" href=\"http://thesocietea.org/2014/06/what-this-site-runs-on-part-1/\" target=\"_blank\">why I made that choice</a>), which has been an excellent CMS for all my various content, but I didn\'t need anything that heavy for this blog. Additionally, I didn\'t want to tie my beer blog directly into my personal site since I\'m trying to keep my main site pretty developer-centric.\r\n\r\nThere are a bunch of neat blogging options out there that aren\'t Wordpress, or even PHP based at all. <a href=\"http://jekyllrb.com/\" target=\"_blank\">Jekyll</a>, <a href=\"http://octopress.org/\" target=\"_blank\">Octopress</a>, <a href=\"https://middlemanapp.com/\" target=\"_blank\">Middleman</a>, etc., but I wanted to try a newer option that\'s been gaining a lot of traction lately ... <a href=\"https://ghost.org/\" target=\"_blank\">Ghost</a>.\r\n\r\nGhost is a node.js based blogging engine that has gotten <a href=\"https://github.com/tryghost/Ghost\" target=\"_blank\">over 3,000 forks</a> on GitHub - enough to pretty much verify that it remains a stable blogging option. Their slogan is \"Just a blogging platform,\" which is exactly what it is - a blog. Nothing more. You write your posts using <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown</a>, you can download and use different themes, and you can manage multiple users on a single install - but that\'s the extent of Ghost\'s core. Need static pages? If you can build them in Markdown, then you can use Ghost, but anything else and you\'re better off with another platform.\r\n\r\nGhost can be installed and used by either cloning the base repo, or installing it as a node module using npm. It\'s insanely easy to get going, and because it uses sqlite which is a file-based DB, it\'s so easy to sync deployments across different environments. Ghost is always free for developers, but even if you\'re not a coder, they provide hosting options that handle the install for you (you just need to shell some monthly bucks for that nicety). You can check out the <a href=\"https://github.com/alkrauss48/my-beer-adventure\" target=\"_blank\">GitHup repo</a> for My Beer Adventure which shows Ghost installed as an npm module.\r\n\r\nCheck out My Beer Adventure blog here: <a href=\"http://beer.thesocietea.org\" target=\"_blank\">http://beer.thesocietea.org</a>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nAs far as deployment goes, both of these new projects are deployed side-by-side with my main site on my $5/month Digital Ocean VPS, which has easily been the best tech purchase I\'ve made so far. Labs is strictly a client-side project, so all it\'s using in order to run is the nginx web server, but with My Beer Adventure being a node project, I\'m running it using nginx and the <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\">forever</a> npm package which runs the node process as a daemon.\r\n\r\nDon\'t worry, the next post will return to our Rails API series - I just wanted to promote these small projects and discuss the tech behind them!','Launched: Labs and My Beer Adventure','','inherit','open','open','','469-revision-v1','','','2015-03-07 00:28:59','2015-03-07 00:28:59','',469,'http://thesocietea.org/2015/03/469-revision-v1/',0,'revision','',0),(504,2,'2015-04-30 18:00:01','2015-04-30 18:00:01','After reading the last post discussing <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','publish','open','open','','building-a-json-api-with-rails-part-4-implementing-authentication','','\nhttps://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/','2015-04-30 20:50:25','2015-04-30 20:50:25','',0,'http://thesocietea.org/?p=504',0,'post','',8),(505,2,'2015-03-14 21:51:19','2015-03-14 21:51:19','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]get :token, controller: \'application\'[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\n&lt;pre&gt;def token\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 21:51:19','2015-03-14 21:51:19','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(507,2,'2015-03-14 22:00:05','2015-03-14 22:00:05','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'&lt;/pre&gt;\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can make for an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the Authorization header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint now, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle this the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:00:05','2015-03-14 22:00:05','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(508,2,'2015-03-14 22:09:14','2015-03-14 22:09:14','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Submission</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'&lt;/pre&gt;\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end \r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:09:14','2015-03-14 22:09:14','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(509,2,'2015-03-14 22:19:00','2015-03-14 22:19:00','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and make it with cURL:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using Basic Authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nSimple enough, right? Now when a user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 1: Handling Every Other Request</h2>','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 22:19:00','2015-03-14 22:19:00','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(510,2,'2015-03-14 23:14:09','2015-03-14 23:14:09','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>Basic Authentication</strong> for our initial username/password submission, and then <strong>Token-Based</strong> <strong>Authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, and I promise nothing but code this time:\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will submit our username and password and get back our token. To do that, add this in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nNow, to handle this route, we\'re going to add an action in our <strong>application_controller.rb</strong>, since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update that action with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for Basic Authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all the code that we need to add to our token method. As you can see, we are authenticating the user to verify they exist in our database and that their password matches up. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file that we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and make it with cURL:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using Basic Authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nSimple enough, right? Now when a user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe\'ve now got our token back for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store that cookie in some format like a cookie, session storage, local storage, etc. We won\'t go into that here though. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created authenticate_user_from_token method on every single request, except when the user is requesting the initial token (since they don\'t have a token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. ','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-14 23:14:09','2015-03-14 23:14:09','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(511,2,'2015-03-15 00:14:35','2015-03-15 00:14:35','After having read the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request, in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route where we will receive back our token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there since this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you plain-text inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include this module in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact token since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store that token in some storage structure like a cookie, session storage, local storage, etc. We won\'t go into that here though. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created authenticate_user_from_token method on every single request, except when the user is requesting the initial token (since they don\'t have a token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-15 00:14:35','2015-03-15 00:14:35','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(512,2,'2015-03-15 03:27:05','2015-03-15 03:27:05','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\n<h2>Phase 1: The Initial Request</h2>\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\n\n[ruby title=\"config/routes.rb\"]\nget :token, controller: \'application\'\n[/ruby]\n\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n\nend\n[/ruby]\n\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n  authenticate_with_http_basic do |email, password|\n  end\nend\n[/ruby]\n\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\n\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\n[/ruby]\n\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\n\nLet\'s finish out this token action:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\ndef token\n  authenticate_with_http_basic do |email, password|\n    user = User.find_by(email: email)\n    if user &amp;&amp; user.password == password\n      render json: { token: user.auth_token }\n    else\n      render json: { error: \'Incorrect credentials\' }, status: 401\n    end\n  end\nend\n[/ruby]\n\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\n\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\n\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\n\n[ruby]\nBase64.encode64(&quot;user@example.com:password&quot;)\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\n[/ruby]\n\nNow we can build our request and issue it with cURL:\n\n[shell]\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\n[/shell]\n\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\n\n[shell]\n{token: null}\n[/shell]\n\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\n\n[ruby title=\"app/models/user.rb\"]\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\n[/ruby]\n\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\n\n[shell]rake db:reset[/shell]\n\nAfter the database is reset, we can rerun our initial request to get a valid token:\n\n[shell]\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\n\n# Returns ...\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\n[/shell]\n\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\n<h2>Phase 2: Handling Every Other Request</h2>\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\n[/shell]\n\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\nbefore_filter :authenticate_user_from_token, except: [:token]\n\nprivate\n\ndef authenticate_user_from_token\n\nend\n[/ruby]\n\nWe\'re adding a before_filter hook that will call the <strong>authenticate_user_from_token</strong> method we\'re creating on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n\ndef authenticate_user_from_token\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\n    render json: { error: \'Bad Token\'}, status: 401\n  end\nend\n[/ruby]\n\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <strong>token</strong> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\n\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\n\nAs an example, if we submit this request again that we did earlier:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\n[/shell]\n\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\n\n[shell]\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\n[/shell]\n\nThen we will receive the following error:\n\n[shell]\n{error: \'Bad Token\'}\n[/shell]\n\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was architecting this API. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n# before_filter :authenticate_user_from_token, except: [:token]\n[/ruby]\n\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\n<h2>Finale</h2>\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a collective overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so we\'re not quite done yet.\n\nAs always, stay tuned!\n\n<hr class=\"short\" />\n\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-autosave-v1','','','2015-03-15 03:27:05','2015-03-15 03:27:05','',504,'http://thesocietea.org/2015/03/504-autosave-v1/',0,'revision','',0),(513,2,'2015-03-15 03:19:09','2015-03-15 03:19:09','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-03-15 03:19:09','2015-03-15 03:19:09','',504,'http://thesocietea.org/2015/03/504-revision-v1/',0,'revision','',0),(515,2,'2015-03-15 04:06:41','2015-03-15 04:06:41','','Resume Haus','','publish','closed','closed','','resume-builder','','','2015-03-31 16:11:40','2015-03-31 16:11:40','',0,'http://thesocietea.org/?post_type=project&#038;p=515',0,'project','',0),(516,2,'2015-03-15 04:04:50','2015-03-15 04:04:50','','resume-big-1','','inherit','open','open','','resume-big-1','','','2015-03-15 04:04:50','2015-03-15 04:04:50','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-1.jpg',0,'attachment','image/jpeg',0),(517,2,'2015-03-15 04:04:51','2015-03-15 04:04:51','','resume-big-2','','inherit','open','open','','resume-big-2','','','2015-03-15 04:04:51','2015-03-15 04:04:51','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-2.jpg',0,'attachment','image/jpeg',0),(518,2,'2015-03-15 04:04:52','2015-03-15 04:04:52','','resume-big-3','','inherit','open','open','','resume-big-3','','','2015-03-15 04:04:52','2015-03-15 04:04:52','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-3.jpg',0,'attachment','image/jpeg',0),(519,2,'2015-03-15 04:04:52','2015-03-15 04:04:52','','resume-big-4','','inherit','open','open','','resume-big-4','','','2015-03-15 04:04:52','2015-03-15 04:04:52','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-big-4.jpg',0,'attachment','image/jpeg',0),(520,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-1','','inherit','open','open','','resume-th-1','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-1.jpg',0,'attachment','image/jpeg',0),(521,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-2','','inherit','open','open','','resume-th-2','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-2.jpg',0,'attachment','image/jpeg',0),(522,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-3','','inherit','open','open','','resume-th-3','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-3.jpg',0,'attachment','image/jpeg',0),(523,2,'2015-03-15 04:04:53','2015-03-15 04:04:53','','resume-th-4','','inherit','open','open','','resume-th-4','','','2015-03-15 04:04:53','2015-03-15 04:04:53','',515,'http://thesocietea.org/wp-content/uploads/2015/03/resume-th-4.jpg',0,'attachment','image/jpeg',0),(524,2,'2015-05-22 18:00:39','2015-05-22 18:00:39','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','publish','open','open','','building-a-simple-web-server-with-sinatra','','','2015-04-28 17:02:22','2015-04-28 17:02:22','',0,'http://thesocietea.org/?p=524',0,'post','',1),(525,2,'2015-03-19 17:41:53','2015-03-19 17:41:53','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell a few different instances out where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid CORS or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <strong>Sinatra</strong>.\r\n<h2>What is Sinatra?</h2>\r\n&nbsp;','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:41:53','2015-03-19 17:41:53','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(526,2,'2015-03-19 17:44:11','2015-03-19 17:44:11','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\"><strong>Sinatra</strong></a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:44:11','2015-03-19 17:44:11','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(527,2,'2015-03-19 17:45:09','2015-03-19 17:45:09','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:45:09','2015-03-19 17:45:09','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(528,2,'2015-03-19 17:46:47','2015-03-19 17:46:47','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen:\r\n\r\n[shell]bundle install[/shell]','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 17:46:47','2015-03-19 17:46:47','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(529,2,'2015-03-19 18:02:07','2015-03-19 18:02:07','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job.\r\n<h2>Getting Deeper</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 18:02:07','2015-03-19 18:02:07','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(530,2,'2015-03-19 18:03:03','2015-03-19 18:03:03','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-19 18:03:03','2015-03-19 18:03:03','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(531,2,'2015-03-20 17:54:57','2015-03-20 17:54:57','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a post endpoint. You might have noticed something though - we have a strange :id field in our route string. That indicates a parameter value that you can access via a global params variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons\r\n<h2>Deploying to Heroku</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 17:54:57','2015-03-20 17:54:57','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(532,2,'2015-03-20 17:55:25','2015-03-20 17:55:25','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons\r\n<h2>Deploying to Heroku</h2>','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 17:55:25','2015-03-20 17:55:25','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(533,2,'2015-03-20 18:08:51','2015-03-20 18:08:51','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:08:51','2015-03-20 18:08:51','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(534,2,'2015-03-20 18:15:14','2015-03-20 18:15:14','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAnd that\'s all you need to do! You just need to require the main app file that you just wrote, and then tell Sinatra to do it\'s thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra and that\'s hosted completely freely by Heroku.','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:15:14','2015-03-20 18:15:14','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(535,2,'2015-03-20 18:21:35','2015-03-20 18:21:35','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other microframeworks. Sinatra\'s popularity has inspired similar frameworks in other languages too, like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others.</a>\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:21:35','2015-03-20 18:21:35','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(536,2,'2015-03-20 18:23:52','2015-03-20 18:23:52','You might have run into a few different scenarios in which you need (or want) some type of server-side logic to happen on the web, but you don\'t need anything massive such as common frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript (lol)</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-20 18:23:52','2015-03-20 18:23:52','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(537,2,'2015-03-21 04:47:29','2015-03-21 04:47:29','Finally, 7 months later, I\'m following up with my first vim blog post about <a title=\"Vim as Your Editor?\" href=\"http://thesocietea.org/2014/06/vim-as-your-editor/\">why you should use vim</a>. If you\'ve made it here, then you\'re either seriously interested in learning vim (which would be <em>awesome</em>), or you just came here of your own random volition. Either works for me, but if you have heard of vim and are just a little bit hesitant to learn it, then fear no more. I\'m going to teach you the best methods to learn vim.\r\n\r\n<strong>Prerequisite</strong>: You must have vim installed if it isn\'t already. You can do this through the homebrew, apt-get, yum, or any other package manager your system supports. You do not need graphical vim (GVim or MacVim).\r\n<h3>Vim Tutor</h3>\r\n<img class=\"alignnone wp-image-226 size-full\" src=\"http://thesocietea.org/wp-content/uploads/2014/07/vim_tutor.jpg\" alt=\"vim_tutor\" width=\"500\" height=\"393\" />\r\n\r\nIf you open up your shell, type in the command\r\n\r\n[shell]vimtutor[/shell]\r\n\r\nThis will open up the Vim Tutor, which is a nice little interactive program that teaches you how to use Vim. This is my preferred way to learn Vim, and if you are on your first go around, it will probably take about 30 minutes to complete. You don\'t need any other resources - just your terminal (not even a mouse!).\r\n\r\nWhen I initially learned vim, I completed this short course about 4-5 times the full way through. Naturally after the first time, you get much quicker, and the lessons become more of a refresher. I suggest using the Vim Tutor initially to see if you really want to learn vim, and if so, then continue using it to get familiar with the basics.\r\n\r\n<strong>Note:</strong> Vim is not difficult to learn, but you will be slow for the first week or so. That\'s natural. Roger Federer didn\'t win Wimbledon his professional first year either.\r\n<h3>Vim Golf</h3>\r\n<a title=\"Vim Golf\" href=\"http://vimgolf.com/\" target=\"_blank\">Vim Golf</a> is a ruby gem which you can install and is a game-based method to learning vim. A common concept of vim is considering how many keystrokes you need to use in order to get something done; obviously, the less you use, the quicker you are, and therefore you want as few as possible. This the idea behind Vim Golf - you are trying to get a <em>low</em> keystroke score.\r\n\r\nFor installation and running, please check out their website. There you can see some of the challenges and other people\'s scores, and the whole Vim Golf project is also on github. I haven\'t personally used Vim Golf, but I know people who have, and they had great success with it.\r\n<h3>Just Start Using It</h3>\r\nThere are a plethora of other tutorials out there for vim because people know it\'s not the simplest thing in the world to grasp, but in my experience, once you start to understand the basics (which you will through the Vim Tutor) then I suggest just getting out there and trying to really use it as your editor.\r\n\r\nRemember, you will be slow, and you will forget things. And certain things will seem more difficult than they should be at first (like copying a section of code for pasting), but trust me, if anything seems unnecessarily hard in vim, then there\'s definitely an easier way to do it and I encourage you to Google it.\r\n\r\nOnce you get out there and really start using vim, give yourself 2 weeks to really see how you feel. If you\'re on a huge project on a short deadline, then use your preferred editor to get your work done quickly, but make sure you don\'t forget about using vim. It takes some practice to learn...but it is so incredibly rewarding.\r\n\r\n&nbsp;\r\n<h2>Extras</h2>\r\n<h3>Plugins</h3>\r\nThe vim community is very, very active and is completely focused on productivity. You can find vim channels on StackOverflow, as well as various twitter accounts created solely for publishing cool vim stuff.\r\n\r\nVim by itself is powerful, but relatively basic. You can add on so much to the base vim installation through plugins. For example, my editor has autocomplete (like Microsoft\'s Intellisense), shortcuts based on what file type I\'m in, custom color scheming, commenting shortcuts, git diff integration, auto coloring of hex values, and so much more.\r\n\r\nThese all can be found on Github, and I recommend using the powerful <a title=\"Vundle\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\">Vundle</a> tool for downloading and installing plugins (very similar to a ruby Gemfile).\r\n<h3>Plugin/Colorscheme Distributions</h3>\r\nIf you don\'t want to worry about customizing your vim colorschemes and plugins, then guess what ... you don\'t have to! There are 2 massively popular vim distrubutions which come complete with multiple colorschemes and very useful plugins. The two are:\r\n<ul>\r\n	<li><a title=\"Janus\" href=\"https://github.com/carlhuda/janus\" target=\"_blank\">Janus</a></li>\r\n	<li><a title=\"Spf13\" href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\">Spf13</a></li>\r\n</ul>\r\nWhile I currently have my own set of vim customizations that sit on top of <a title=\"Thoughtbot Dotfiles\" href=\"https://github.com/thoughtbot/dotfiles\" target=\"_blank\">Thoughtbot\'s minimal vim config</a>, I previously used Janus for a little over a year. I really, really liked it, and it was the moment that I started feeling comfortable with vim that I started to check it out. Let me just say, my productivity skyrocketed.\r\n\r\nBoth distributions come with a base set of colorschemes and awesome plugins, and you can even add more plugins on top of that if you find some you\'d like to use. I highly recommend using a vim distribution as your first step at getting into vim customization.\r\n\r\nThat\'s it! I hope you start using vim, and if you do, <a title=\"Aaron Krauss Twitter\" href=\"https://twitter.com/thecodeboss\" target=\"_blank\">tweet at me</a> to let me know!','How to Learn Vim','','inherit','open','open','','220-revision-v1','','','2015-03-21 04:47:29','2015-03-21 04:47:29','',220,'http://thesocietea.org/2015/03/220-revision-v1/',0,'revision','',0),(538,2,'2015-03-22 15:05:48','2015-03-22 15:05:48','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\n<ul>\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\n	<li>To provide a simple API to interact with a database</li>\n	<li>To easily render HTML pages with dynamic content</li>\n</ul>\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\n<h2>What is Sinatra?</h2>\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\n<h2>Getting Started</h2>\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\n\n[ruby title=\"Gemfile\"]\ngem \'sinatra\'\n[/ruby]\n\nThen to install sinatra, run:\n\n[shell]bundle install[/shell]\n\nNow let\'s create our actual main app.rb file:\n\n[ruby title=\"app.rb\"]\nrequire \'sinatra\'\n\nget \'/\' do\n  puts \'hello world\'\nend\n[/ruby]\n\nAnd that\'s literally all you need for the simplest web server. Run your app using:\n\n[ruby]ruby app.rb[/ruby]\n\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\n<h2>Getting Deeper</h2>\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\n\n[ruby title=\"app.rb\"]\npost \'/post\' do\n  # Create a post\nend\n\nput \'/post/:id\' do\n  # Update a post\nend\n\ndelete \'/post/:id\' do\n  # Delete a post\nend\n[/ruby]\n\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\n\nHere\'s an example:\n\n[ruby title=\"app.rb\"]\nput \'/post/:id\' do\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\nend\n[/ruby]\n\n<h2>Rendering Views</h2>\nWant to render a template when a route is navigated to? That\'s easy:\n\n[ruby title=\"app.rb\"]\nget \'/\' do\n  erb :index\nend\n[/ruby]\n\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\n\n[ruby title=\"app.rb\"]\nget \'/\' do\n  haml :index, :format =&gt; :html5\nend\n[/ruby]\n\nJust make sure you have the gem required!\n<h2>Handling JSON Responses</h2>\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\n\n[ruby title=\"app.rb\"]\nget \'/post/:id\' do\n  content_type :json\n\n  @post = Post.find(params[:id])\n  @post.attributes.to_json # JSON Response\nend\n[/ruby]\n\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\n<h2>Handling Errors</h2>\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\n\n[ruby title=\"app.rb\"]\n# Unprocessable Entity\nerror 422 do\n  { error: &quot;You haz an error&quot; }\nend\n[/ruby]\n\nNow if you want to manually throw that error from a controller, you would do that like this:\n\n[ruby title=\"app.rb\"]\n# Unprocessable Entity\nget \'/\' do\n  return 422\nend\n[/ruby]\n\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\n\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\n\n[ruby title=\"config.ru\"]\nrequire \'./app\'\n\nrun Sinatra::Application\n[/ruby]\n\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\n\n[shell]git push heroku master[/shell]\n\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\n\n<hr class=\"short\" />\n\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\n\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-autosave-v1','','','2015-03-22 15:05:48','2015-03-22 15:05:48','',524,'http://thesocietea.org/2015/03/524-autosave-v1/',0,'revision','',0),(539,2,'2015-03-22 14:58:37','2015-03-22 14:58:37','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really has some traction behind it. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to hose it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 14:58:37','2015-03-22 14:58:37','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(540,2,'2015-03-22 15:05:17','2015-03-22 15:05:17','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out their <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 15:05:17','2015-03-22 15:05:17','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(541,2,'2015-03-22 15:06:10','2015-03-22 15:06:10','You might have run into a few different scenarios in which you need some type of server-side logic to happen on the web, but you don\'t need anything massive to warrant the use of large frameworks like Rails, Django, Grails, ASP.Net, etc. No, you haven\'t run into those situations? I doubt that, but let me spell out a few different instances where you might want this:\r\n<ul>\r\n	<li>To proxy a client-side HTTP request, either to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\">CORS</a> or to avoid Javascript</li>\r\n	<li>To relay HTTP requests from one site to another, formatting data along the way.</li>\r\n	<li>To provide a simple API to interact with a database</li>\r\n	<li>To easily render HTML pages with dynamic content</li>\r\n</ul>\r\nThe list goes on and on, but the point I\'m trying to make is that this need does exist. What do you do when you need something like this, but don\'t want to make a large project? Different languages have different mini-frameworks to handle this need, and today we\'re going to be talking about one that really played a role in starting this mini-framework movement. Ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a>.\r\n<h2>What is Sinatra?</h2>\r\nStraight from the main site, Sinatra is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for quickly creating web applications in Ruby with minimal effort. There is heavy emphasis on the \"minimal effort\" part of that definition, as you\'re about to see.\r\n<h2>Getting Started</h2>\r\nTo get started, create an empty directory. Inside that directory, create a Gemfile and add the following to it:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'sinatra\'\r\n[/ruby]\r\n\r\nThen to install sinatra, run:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow let\'s create our actual main app.rb file:\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'sinatra\'\r\n\r\nget \'/\' do\r\n  puts \'hello world\'\r\nend\r\n[/ruby]\r\n\r\nAnd that\'s literally all you need for the simplest web server. Run your app using:\r\n\r\n[ruby]ruby app.rb[/ruby]\r\n\r\nAnd Sinatra will start up a default WEBrick server (just like Rails) on port 4567. Navigate to http://localhost:4567 now and you\'ll see a blank screen. If you use your browser to navigate there, you won\'t see anything, but you can look at your server logs to see the \'hello world\' response. Look at that - we just created a simple web server. It doesn\'t do much right now, but you\'re a programmer - that\'s your job to make it do real stuff.\r\n<h2>Getting Deeper</h2>\r\nSinatra, just like most web frameworks, has a concept of routes in order to handle various HTTP request types - with the most common requests abiding by a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>ful architecture. Currently, our app just handles one GET request, as is identified by the <strong>get</strong> method call which accepts a route string and a block. To handle POST, PUT, or DELETE requests, you can write handlers such as:\r\n\r\n[ruby title=\"app.rb\"]\r\npost \'/post\' do\r\n  # Create a post\r\nend\r\n\r\nput \'/post/:id\' do\r\n  # Update a post\r\nend\r\n\r\ndelete \'/post/:id\' do\r\n  # Delete a post\r\nend\r\n[/ruby]\r\n\r\nWe just defined 4 basic handlers that would respond to various request types to a <strong>post</strong> endpoint. You might have noticed something though - we have a strange <strong>:id</strong> field in our route string. That indicates a parameter value that you can access via a global <strong>params</strong> variable, much like how a Rails controller works. This means that PUT requests to both /post/1 and /post/3 would activate the same handler, but you have easy access to your unique parameter.\r\n\r\nHere\'s an example:\r\n\r\n[ruby title=\"app.rb\"]\r\nput \'/post/:id\' do\r\n  @post = Post.find(params[:id]) # Assuming ActiveRecord is installed\r\nend\r\n[/ruby]\r\n\r\n<h2>Rendering Views</h2>\r\nWant to render a template when a route is navigated to? That\'s easy:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  erb :index\r\nend\r\n[/ruby]\r\n\r\nAnd this will pull up the template found in views/index.erb. You can also easily swap out ERB for a templating engine of your choice, like Haml or Slim:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/\' do\r\n  haml :index, :format =&gt; :html5\r\nend\r\n[/ruby]\r\n\r\nJust make sure you have the gem required!\r\n<h2>Handling JSON Responses</h2>\r\nA lot of the reasons I listed in the intro as to why you might want to use Sinatra involve nothing graphical - just some logic happening. You may even want to handle JSON responses for your request, and Sinatra makes that a breeze. Just call the content_type method and define that you want to use JSON:\r\n\r\n[ruby title=\"app.rb\"]\r\nget \'/post/:id\' do\r\n  content_type :json\r\n\r\n  @post = Post.find(params[:id])\r\n  @post.attributes.to_json # JSON Response\r\nend\r\n[/ruby]\r\n\r\nIt\'s that easy! You can define your content_type on an application-level, but it adds a little more complexity that you can get into yourself if you choose to use Sinatra. Still, it\'s super easy.\r\n<h2>Handling Errors</h2>\r\nYou can\'t beat error handling in Sinatra. It\'s so simple, and follows the same format as our other handlers have followed. Let\'s say you want to catch a 422 error - that means unprocessable entity. Here\'s how you would define it:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nerror 422 do\r\n  { error: &quot;You haz an error&quot; }\r\nend\r\n[/ruby]\r\n\r\nNow if you want to manually throw that error from a controller, you would do that like this:\r\n\r\n[ruby title=\"app.rb\"]\r\n# Unprocessable Entity\r\nget \'/\' do\r\n  return 422\r\nend\r\n[/ruby]\r\n\r\nSinatra will see your return value and know to call the 422 error code handler. This means that you probably shouldn\'t return single integer values from your RESTful controllers - but you probably don\'t do that anyway.\r\n<h2>Deploying to <a href=\"https://www.heroku.com/\" target=\"_blank\">Heroku</a></h2>\r\nLast but not least, possibly one of my favorite things about using Sinatra is that it is fully Heroku supported! This means that you don\'t even have to worry about manually deploying this app - Heroku will handle everything and you can slap it on a free heroku domain to get up and running right away. If you\'re unfamiliar with Heroku or how to get going with a heroku app, check out their <a href=\"https://devcenter.heroku.com/start\" target=\"_blank\">Getting Started</a> page.\r\n\r\nIn order to tell Heroku how to run our Sinatra app, we need to add either a Procfile or a config.ru. We\'ll choose to do a config.ru to tell Heroku to run it as a <a href=\"http://rack.github.io/\" target=\"_blank\">rack</a> app, but a Procfile is just as easy. Create this file at the root level of your project dir (the same directory where your app.rb should currently be):\r\n\r\n[ruby title=\"config.ru\"]\r\nrequire \'./app\'\r\n\r\nrun Sinatra::Application\r\n[/ruby]\r\n\r\nAll we\'re doing here is requiring the main app file that you just wrote, and then telling Sinatra to do its thing. Now commit all of your work with Git and push this whole repo up to your heroku account:\r\n\r\n[shell]git push heroku master[/shell]\r\n\r\nAnd watch while the magic happens. You\'ve just created a simple web server using Sinatra, and Heroku is happy to host it for you completely free of charge.\r\n\r\n<hr class=\"short\" />\r\n\r\nThere\'s so much more Sinatra can do, and we just touched on some very light basics. If you need a full blown RESTful application hooked up to a large relational database, then yeah, use a framework that\'s geared towards handling that large scale. But if you need something small or medium in size, then check out Sinatra or some other micro-frameworks. Sinatra\'s popularity has inspired similar frameworks in other languages too like Java\'s <a href=\"http://sparkjava.com/\" target=\"_blank\">Spark</a>, Python\'s <a href=\"http://flask.pocoo.org/\" target=\"_blank\">Flask</a>, PHP\'s <a href=\"http://www.slimframework.com/\" target=\"_blank\">Slim</a>, and <a href=\"http://en.wikipedia.org/wiki/Sinatra_%28software%29#Frameworks_inspired_by_Sinatra\" target=\"_blank\">a bunch of others</a>.\r\n\r\nFor more about using Sinatra, check out the <a href=\"http://www.sinatrarb.com/intro.html\" target=\"_blank\">documentation</a>. Next time we\'ll talk about some neat tools you can use to help debug your Sinatra app before you deploy. Happy building!','Building a Simple Web Server with Sinatra','','inherit','open','open','','524-revision-v1','','','2015-03-22 15:06:10','2015-03-22 15:06:10','',524,'http://thesocietea.org/2015/03/524-revision-v1/',0,'revision','',0),(543,2,'2015-03-27 18:11:43','2015-03-27 18:11:43','<strong>Foreword</strong>: If you want to skip all the reading and just see an example API built using the exact technologies I\'ll be discussing in this series of posts, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk\" target=\"_blank\">GitHub repo</a> over a Ruby talk I gave where we live-coded a full API.\r\n\r\n<hr class=\"short\" />\r\n\r\nHow can you go about supporting your Angular/Ember/Backbone app, iOS app, Android app, Windows phone app, etc., all with a single back-end? Here’s how: by breaking up your backend server into its own API service, and Rails is just the framework to help make it simple and awesome.\r\n\r\nThis service separation is dubbed Service Oriented Architecture (<a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>), and by following it and building a JSON API that\'s separate from the front-end, you\'ll be able to support all of your related apps with this single service and keep your back-end incredibly simple, logical, and easily maintainable.\r\n\r\nIn order to build a solid API, we\'re going to break our goal up into 3 different tasks:\r\n<ul>\r\n	<li>Build out our models and our data</li>\r\n	<li>Serialize our data</li>\r\n	<li>Add Authentication</li>\r\n</ul>\r\nAdding authentication is always an optional step, but most of the time you\'re going to want to prevent unauthorized users from accessing your API. We\'re going to tackle just the first task in this post, and save the rest for the next two parts. Ready to start? Good.\r\n<h2>Starting Out</h2>\r\nFirst off, we need to install a gem called <strong>rails-api</strong> to our global gem list:\r\n\r\n[shell]gem install rails-api[/shell]\r\n\r\nRails-api is a gem that acts very similar to the standard <strong>rails</strong> gem, but has modified generators that write API-specific code. Let\'s start a project:\r\n\r\n[shell]\r\nrails-api new my_blog\r\ncd my_blog\r\n[/shell]\r\n\r\nAs you can probably see, we\'re going to be creating a blog, and it will have the following database structure:\r\n<ul>\r\n	<li>User has many Posts</li>\r\n	<li>User has many Comments</li>\r\n	<li>Posts has many Comments</li>\r\n</ul>\r\n<h2>Building the API</h2>\r\nJust a simple 3-table database will suffice, so let\'s use the rails-api generators to scaffold out our 3 models:\r\n\r\n[shell]\r\nrails-api g scaffold user email:string password:string auth_token:string\r\nrails-api g scaffold post title:string body:text user:references\r\nrails-api g scaffold comment body:text user:references post:references\r\nrake db:migrate\r\n[/shell]\r\n\r\nIf you\'re familiar with Rails, then this looks very familiar to you. In fact, you can probably tell very easily what each attribute\'s purpose is - except for <strong>auth_token</strong> perhaps. We\'re going to make use of that attribute later on when we discuss and build in authentication, so don\'t worry about it for now.\r\n\r\nAfter you migrate your database, then you have a fully functioning API! Start up your local rails server and navigate to\r\n\r\n[code]http://localhost:3000/users[/code]\r\n\r\nto see your API live. It should look like an empty array set, which is what we want - just pure JSON.\r\n<h2>Seeding the Database</h2>\r\nIf you want to add some seeds to populate your database, you can add this code to your db/seeds.rb file:\r\n\r\n[ruby title=\"db/seeds.rb\"]\r\n\r\nu1 = User.create(email: \'user@example.com\', password: \'password\')\r\nu2 = User.create(email: \'user2@example.com\', password: \'password\')\r\n\r\np1 = u1.posts.create(title: \'First Post\', body: \'An Airplane\')\r\np2 = u1.posts.create(title: \'Second Post\', body: \'A Train\')\r\n\r\np3 = u2.posts.create(title: \'Third Post\', body: \'A Truck\')\r\np4 = u2.posts.create(title: \'Fourth Post\', body: \'A Boat\')\r\n\r\np3.comments.create(body: &quot;This post was terrible&quot;, user: u1)\r\np4.comments.create(body: &quot;This post was the best thing in the whole world&quot;, user: u1)\r\n\r\n[/ruby]\r\n\r\nNow, all you need to do to run these seeds is update your User and Post model files with the necessary <b>has_many</b> relationships like so:\r\n\r\n[ruby title=\"app/model/user.rb\"]\r\nclass User &lt; ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\n\r\n[ruby title=\"app/model/post.rb\"]\r\nclass Post &lt; ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n[/ruby]\r\n\r\nAnd then run the seed command to pre-populate your database:\r\n\r\n[shell]rake db:seed[/shell]\r\n\r\nNow your database has real data!\r\n<h2>Issuing Requests</h2>\r\nBecause we scaffolded our resources, we created controllers that are fully capable of handling the standard HTTP requests types: <strong>GET</strong>, <strong>POST</strong>, <strong>PUT/PATCH</strong>, and <strong>DELETE</strong>. If you\'re a little unfamiliar with these names, you can map it to the common <strong>CRUD</strong> acronym:\r\n<ul>\r\n	<li><strong>C</strong>reate (POST)</li>\r\n	<li><strong>R</strong>ead (GET)</li>\r\n	<li><strong>U</strong>pdate (PUT/PATCH)</li>\r\n	<li><strong>D</strong>elete (DELETE)</li>\r\n</ul>\r\nThe URLs for issuing any of these requests are:\r\n\r\n[code]\r\nhttp://localhost:3000/users\r\nhttp://localhost:3000/posts\r\nhttp://localhost:3000/comments\r\n[/code]\r\n\r\nYou can obviously issue GET requests by visiting these pages in your browser, or you can use the <strong>curl</strong> command from your terminal (or similar command) to issue any of these requests. Everything will work as expected.\r\n<h2>That\'s it?</h2>\r\nNo, of course that\'s not it, but look at what we\'ve done so far - we\'ve built a relational database with a fully functioning JSON API on top that can handle any of the 4 main request types, and we did it in practically no time flat. We have a lot more to talk about such as serialization, authentication, and an overview post discussing some of the bigger questions that come up when you\'re building an API, so if you\'re ready, feel free to <a title=\"Building a JSON API with Rails – Part 2: Serialization\" href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\">move onto part 2</a>.\r\n\r\nHappy API Building!','Building a JSON API with Rails - Part 1: Getting Started','','inherit','open','open','','381-revision-v1','','','2015-03-27 18:11:43','2015-03-27 18:11:43','',381,'http://thesocietea.org/2015/03/381-revision-v1/',0,'revision','',0),(544,2,'2015-03-31 16:10:49','2015-03-31 16:10:49','','big-resumehaus1','','inherit','open','open','','big-resumehaus1','','','2015-03-31 16:10:49','2015-03-31 16:10:49','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-resumehaus1.jpg',0,'attachment','image/jpeg',0),(545,2,'2015-03-31 16:10:50','2015-03-31 16:10:50','','th-resumehaus1','','inherit','open','open','','th-resumehaus1','','','2015-03-31 16:10:50','2015-03-31 16:10:50','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-resumehaus1.jpg',0,'attachment','image/jpeg',0),(546,2,'2015-03-31 16:39:55','2015-03-31 16:39:55','','big-hydro1','','inherit','open','open','','big-hydro1','','','2015-03-31 16:39:55','2015-03-31 16:39:55','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro1.jpg',0,'attachment','image/jpeg',0),(547,2,'2015-03-31 16:39:56','2015-03-31 16:39:56','','big-hydro2','','inherit','open','open','','big-hydro2','','','2015-03-31 16:39:56','2015-03-31 16:39:56','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro2.jpg',0,'attachment','image/jpeg',0),(548,2,'2015-03-31 16:39:57','2015-03-31 16:39:57','','big-hydro3','','inherit','open','open','','big-hydro3','','','2015-03-31 16:39:57','2015-03-31 16:39:57','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro3.jpg',0,'attachment','image/jpeg',0),(549,2,'2015-03-31 16:39:57','2015-03-31 16:39:57','','big-hydro4','','inherit','open','open','','big-hydro4','','','2015-03-31 16:39:57','2015-03-31 16:39:57','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro4.jpg',0,'attachment','image/jpeg',0),(550,2,'2015-03-31 16:39:58','2015-03-31 16:39:58','','big-hydro5','','inherit','open','open','','big-hydro5','','','2015-03-31 16:39:58','2015-03-31 16:39:58','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro5.jpg',0,'attachment','image/jpeg',0),(551,2,'2015-03-31 16:40:00','2015-03-31 16:40:00','','big-hydro6','','inherit','open','open','','big-hydro6','','','2015-03-31 16:40:00','2015-03-31 16:40:00','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro6.jpg',0,'attachment','image/jpeg',0),(552,2,'2015-03-31 16:40:00','2015-03-31 16:40:00','','big-hydro7','','inherit','open','open','','big-hydro7','','','2015-03-31 16:40:00','2015-03-31 16:40:00','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro7.jpg',0,'attachment','image/jpeg',0),(553,2,'2015-03-31 16:40:01','2015-03-31 16:40:01','','big-hydro8','','inherit','open','open','','big-hydro8','','','2015-03-31 16:40:01','2015-03-31 16:40:01','',0,'http://thesocietea.org/wp-content/uploads/2015/03/big-hydro8.jpg',0,'attachment','image/jpeg',0),(554,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro1','','inherit','open','open','','th-hydro1','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro1.jpg',0,'attachment','image/jpeg',0),(555,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro2','','inherit','open','open','','th-hydro2','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro2.jpg',0,'attachment','image/jpeg',0),(556,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro3','','inherit','open','open','','th-hydro3','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro3.jpg',0,'attachment','image/jpeg',0),(557,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro4','','inherit','open','open','','th-hydro4','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro4.jpg',0,'attachment','image/jpeg',0),(558,2,'2015-03-31 16:40:02','2015-03-31 16:40:02','','th-hydro5','','inherit','open','open','','th-hydro5','','','2015-03-31 16:40:02','2015-03-31 16:40:02','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro5.jpg',0,'attachment','image/jpeg',0),(559,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro6','','inherit','open','open','','th-hydro6','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro6.jpg',0,'attachment','image/jpeg',0),(560,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro7','','inherit','open','open','','th-hydro7','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro7.jpg',0,'attachment','image/jpeg',0),(561,2,'2015-03-31 16:40:03','2015-03-31 16:40:03','','th-hydro8','','inherit','open','open','','th-hydro8','','','2015-03-31 16:40:03','2015-03-31 16:40:03','',0,'http://thesocietea.org/wp-content/uploads/2015/03/th-hydro8.jpg',0,'attachment','image/jpeg',0),(562,2,'2015-03-31 16:48:25','2015-03-31 16:48:25','','Hydro','','publish','closed','closed','','hydro','','','2015-04-01 15:33:02','2015-04-01 15:33:02','',0,'http://thesocietea.org/?post_type=project&#038;p=562',1,'project','',0),(564,2,'2015-06-12 17:00:42','2015-06-12 17:00:42','This is the second part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional ruby testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. CURL can help with that. To issue a GET request using cURL, run:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging tool isn\'t specific to Sinatra - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the scope of the currently executing line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to get deep in debugging. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in a <em>group: :development</em> block if you\'d like too, since you\'ll never use pry in production. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nInclude it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow restart your Sinatra server and let\'s check out pry in action. If you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Let\'s go ahead and make that GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you\'re now in the scope in which your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type <strong>exit</strong> to resume normal runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok gives you.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">the main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nTo expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nNgrok will then take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> in the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture above, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs, ngrok tracks and displays which requests were made to which resources:\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we made a request to localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these are some of my favorite tools that I\'ve used lately. Sinatra is a really powerful mini web framework if you\'re familiar with ruby, and if you don\'t know much about it then feel free to check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using Sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can therefore use them in a lot of different situations - which I recommend you do. Regardless of which tools you do use to test your web servers, I hope I provided you with at least a couple more ideas on how to manually debug your web projects.\r\n\r\nHappy building!','Debugging a Simple Web Server','','publish','open','open','','debugging-a-simple-web-server','','\nhttps://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra','2015-04-28 17:02:32','2015-04-28 17:02:32','',0,'https://thesocietea.org/?p=564',0,'post','',0),(565,2,'2015-04-01 18:59:49','2015-04-01 18:59:49','','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 18:59:49','2015-04-01 18:59:49','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(566,2,'2015-04-01 19:12:07','2015-04-01 19:12:07','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n\r\nExpose the web server\r\n\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:12:07','2015-04-01 19:12:07','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(567,2,'2015-04-01 19:19:14','2015-04-01 19:19:14','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose the web server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:19:14','2015-04-01 19:19:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(568,2,'2015-04-01 19:20:58','2015-04-01 19:20:58','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose the web server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:20:58','2015-04-01 19:20:58','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(569,2,'2015-04-01 19:21:56','2015-04-01 19:21:56','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:9292, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:21:56','2015-04-01 19:21:56','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(570,2,'2015-04-01 19:36:36','2015-04-01 19:36:36','This is a continuation of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we will not be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are many other posts about how to do that.\r\n\r\nFor starters, you can test your web server manually by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-01 19:36:36','2015-04-01 19:36:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(571,2,'2015-04-02 22:21:39','2015-04-02 22:21:39','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups. I have spoken at high schools, universities, and local user groups in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 30 - 40 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-04-02 22:21:39','2015-04-02 22:21:39','',13,'https://thesocietea.org/2015/04/13-revision-v1/',0,'revision','',0),(572,2,'2015-04-02 22:22:06','2015-04-02 22:22:06','If you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n\r\nOn another note, I am also available as a speaker, specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups. I have spoken at high schools, universities, and local user groups in the past, and currently give a <a title=\"Programming Speaking Outline\" href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">talk</a> that usually ranges from 40 - 45 minutes.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-04-02 22:22:06','2015-04-02 22:22:06','',13,'https://thesocietea.org/2015/04/13-revision-v1/',0,'revision','',0),(574,2,'2015-04-09 22:32:14','2015-04-09 22:32:14','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\n<h2>Expose Your Web Server</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:32:14','2015-04-09 22:32:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(575,2,'2015-04-09 22:42:30','2015-04-09 22:42:30','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567 --data &quot;param1=value1&amp;param2=value2&quot;\r\n[/shell]\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:42:30','2015-04-09 22:42:30','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(576,2,'2015-04-09 22:43:28','2015-04-09 22:43:28','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:43:28','2015-04-09 22:43:28','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(577,2,'2015-04-09 22:54:21','2015-04-09 22:54:21','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"][/ruby]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:54:21','2015-04-09 22:54:21','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(578,2,'2015-04-09 22:55:36','2015-04-09 22:55:36','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\nbinding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging!\r\n\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-09 22:55:36','2015-04-09 22:55:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(579,2,'2015-04-10 14:32:33','2015-04-10 14:32:33','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging!\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 14:32:33','2015-04-10 14:32:33','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(580,2,'2015-04-10 14:52:54','2015-04-10 14:52:54','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action.\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 14:52:54','2015-04-10 14:52:54','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(581,2,'2015-04-10 15:08:42','2015-04-10 15:08:42','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:08:42','2015-04-10 15:08:42','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(582,2,'2015-04-10 15:09:21','2015-04-10 15:09:21','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server with Ngrok and Thin','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:09:21','2015-04-10 15:09:21','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(583,2,'2015-04-10 15:09:36','2015-04-10 15:09:36','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server - but, we won\'t be covering conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:09:36','2015-04-10 15:09:36','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(584,2,'2015-04-10 15:11:01','2015-04-10 15:11:01','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing using libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:11:01','2015-04-10 15:11:01','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(585,2,'2015-04-10 15:11:22','2015-04-10 15:11:22','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:11:22','2015-04-10 15:11:22','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(586,2,'2015-04-10 15:12:28','2015-04-10 15:12:28','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n<hr class=\"short\" />\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:12:28','2015-04-10 15:12:28','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(587,2,'2015-04-10 15:13:11','2015-04-10 15:13:11','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 4 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 4 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n	<li><a href=\"http://code.macournoyer.com/thin/\" target=\"_blank\">Thin</a> + SSL</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Spin up a Server over SSL - Locally and Free</h2>\r\n&nbsp;','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:13:11','2015-04-10 15:13:11','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(588,2,'2015-04-10 15:15:19','2015-04-10 15:15:19','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 15:15:19','2015-04-10 15:15:19','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(589,2,'2015-04-10 20:13:32','2015-04-10 20:13:32','','ngrok','','inherit','open','open','','screen-shot-2015-04-10-at-3-03-28-pm','','','2015-04-10 20:13:44','2015-04-10 20:13:44','',564,'https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png',0,'attachment','image/png',0),(590,2,'2015-04-10 20:13:47','2015-04-10 20:13:47','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<a href=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM.png\"><img class=\"alignnone size-medium wp-image-589\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-300x120.png\" alt=\"ngrok\" width=\"300\" height=\"120\" /></a>','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:13:47','2015-04-10 20:13:47','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(591,2,'2015-04-10 20:14:25','2015-04-10 20:14:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\"alignright wp-image-589 size-large\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:14:25','2015-04-10 20:14:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(592,2,'2015-04-10 20:14:48','2015-04-10 20:14:48','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:14:48','2015-04-10 20:14:48','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(593,2,'2015-04-10 20:20:03','2015-04-10 20:20:03','','ngrok logs','','inherit','open','open','','screen-shot-2015-04-10-at-3-19-45-pm','','','2015-04-10 20:20:10','2015-04-10 20:20:10','',564,'https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png',0,'attachment','image/png',0),(594,2,'2015-04-10 20:20:27','2015-04-10 20:20:27','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" class=\"aligncenter size-full wp-image-593\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:20:27','2015-04-10 20:20:27','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(595,2,'2015-04-10 20:20:45','2015-04-10 20:20:45','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-medium\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM-300x136.png\" alt=\"ngrok logs\" width=\"300\" height=\"136\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:20:45','2015-04-10 20:20:45','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(596,2,'2015-04-10 20:21:25','2015-04-10 20:21:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:21:25','2015-04-10 20:21:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(597,2,'2015-04-10 20:27:06','2015-04-10 20:27:06','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about Ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a URL for your server on localhost:4567, and now anyone can have access to your server!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:27:06','2015-04-10 20:27:06','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(598,2,'2015-04-10 20:27:59','2015-04-10 20:27:59','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url http://58a4d66f.ngrok.com the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:27:59','2015-04-10 20:27:59','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(599,2,'2015-04-10 20:29:17','2015-04-10 20:29:17','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to our root endpoint at our ngrok URL, our interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:29:17','2015-04-10 20:29:17','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(600,2,'2015-04-10 20:40:25','2015-04-10 20:40:25','This is a continuation of the previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, and in this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s a lot more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:40:25','2015-04-10 20:40:25','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(601,2,'2015-04-10 20:43:14','2015-04-10 20:43:14','This is the second part of a previous post where we discussed <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">building a simple web server</a> with Sinatra, so if you may want to start there if you haven\'t already done so. In this post we\'ll be reviewing how you can easily debug that web server we built using ruby\'s <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> framework.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server; what we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to do that, and we\'re going to focus on manual testing.\r\n\r\nFor starters, you can test your web server by just spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to http://localhost:4567, and see your web server. But that will only get you so far seeing as how you can only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\nThe 3 main debugging tools we\'re going to use are:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issue Requests with cURL</h2>\r\nChances are that you\'ve heard of cURL and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:43:14','2015-04-10 20:43:14','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(602,2,'2015-04-10 20:52:40','2015-04-10 20:52:40','This is the next part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (Assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. While most HTTP requests are probaby GET requests, that\'s no excuse to not test the others, and that\'s where cURL comes in. To issue a GET request:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser too.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging method isn\'t specific to Sinatra or even web development specifically - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the current line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to check it out. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in group: :development block if you\'d like too, since you\'ll never use pry inproduction. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nNow you can include it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow if you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Now restart your Sinatra server and let\'s check out pry in action. First off, let\'s make that simple GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you are in the scope where your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type exit to resume runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok provides.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">its main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nAnd now to expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nAnd then ngrok will take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs too, ngrok tracks and displays which requests were made to which resources.\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we were on localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these cover some of my favorite tools that I\'ve used lately. My personal recommendation for a web server framework if you\'re familiar with ruby is Sinatra, and if you don\'t know much about it, you should check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can use them in a lot of situations - which I recommend you do. Whatever tools you do use to test and debug your web servers, I hope I provided at least a couple more ideas that you can employ.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 20:52:40','2015-04-10 20:52:40','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(603,2,'2015-04-10 21:20:05','2015-04-10 21:20:05','This is the second part of a short series on how to build a web server using Sinatra. <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">In the previous post</a> we discussed the initial buildout of a simple <a href=\"http://www.sinatrarb.com/\">Sinatra</a> web server, so to make sure we\'re all on the same page, you may want to start there if you haven\'t read it already. In this post we\'ll be reviewing how you can easily debug that web server.\r\n<h2>Debugging Tools</h2>\r\nWe\'re going to talk about 3 debugging tools you can use in order to fully test your web server:\r\n<ul>\r\n	<li><a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a></li>\r\n	<li><a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a></li>\r\n	<li><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></li>\r\n</ul>\r\nWhat we won\'t be covering however are conventional ruby testing libraries such as TestUnit, RSpec, Cucumber, etc. There are a lot of other posts about how to use those tools, and we\'re going to focus specifically on manual testing.\r\n\r\nFor starters, you can test your web server just by spinning it up (assuming your app is set up like <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">the previous post</a>):\r\n\r\n[shell]ruby app.rb[/shell]\r\n\r\nYou can now open up your browser and navigate to <strong>http://localhost:4567</strong> to see your web server. But that will only get you so far since you can really only issue GET requests that way - plus it\'s slow and tedious. We can do a lot better.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Issuing Requests with cURL</h2>\r\nChances are that you\'ve heard of <a href=\"http://curl.haxx.se/\" target=\"_blank\">cURL</a> and may use it regularly, but if you haven\'t, it\'s a super neat tool that allows you to issue HTTP requests from the command line. While browsers do have the capability to issue any type of HTTP request, as a user you\'re mostly limited to just GET requests. CURL can help with that. To issue a GET request using cURL, run:\r\n\r\n[shell]curl http://127.0.0.1:4567[/shell]\r\n\r\nAnd you\'ll get back an HTML response saying that Sinatra doesn\'t know how to handle that route. You\'ll also see in your server logs that a GET request was made:\r\n\r\n[code]\r\n127.0.0.1 - - [09/Apr/2015 17:38:43] &quot;GET / HTTP/1.1&quot; 404 437 0.0006\r\n[/code]\r\n\r\nLet\'s check out some other request types:\r\n\r\n[shell]\r\n# POST request\r\ncurl -X POST http://127.0.0.1:4567/posts --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# PUT request\r\ncurl -X PUT http://127.0.0.1:4567/posts/1 --data &quot;param1=value1&amp;param2=value2&quot;\r\n\r\n# DELETE request\r\ncurl -X DELETE http://127.0.0.1:4567/posts/1\r\n[/shell]\r\n\r\nNow you have the full capabilities to issue any request you want to your web server without ever leaving your command line - assuming you like the command line. This ends up being much faster than manual requests through your browser.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Breakpoints with Pry</h2>\r\nThis next debugging tool isn\'t specific to Sinatra - you can apply it to any ruby development you do. There\'s a good chance you\'ve heard about it too, and perhaps even use it. I\'m talking about the gem called <a href=\"https://github.com/pry/pry\" target=\"_blank\">pry</a>.\r\n\r\nPry is an immensely handy tool that any ruby developer should have in his/her arsenal. It allows you to halt the runtime of any script and expose the scope of the currently executing line in an interactive <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\">REPL</a> (Read-Eval-Print-Loop) shell that allows you to debug any issues you have. This is very similar to how a lot of IDE\'s work (and even Chrome Dev Tools when debugging javascript) in that you set your <strong>breakpoints</strong> at a certain line and your code stops executing there to allow you to debug the current state of your program. I like pry because regardless of what tools you use to execute your script (IDE, command line, etc.), pry still works the exact same way - it halts your script and allows you to get deep in debugging. It\'s environment agnostic!\r\n\r\nTo install pry, add the gem to your Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\r\ngem \'pry\'\r\n[/ruby]\r\n\r\nYou can wrap it up in a <em>group: :development</em> block if you\'d like too, since you\'ll never use pry in production. Now install it:\r\n\r\n[shell]bundle install[/shell]\r\n\r\nInclude it in your main script and give it a whirl.\r\n\r\n[ruby title=\"app.rb\"]\r\nrequire \'pry\'\r\n\r\nget \'/\' do\r\n  binding.pry # Execution stops here!\r\nend\r\n[/ruby]\r\n\r\nNow restart your Sinatra server and let\'s check out pry in action. If you make a GET request to your root endpoint, your request will look like it hangs forever, but really your program is just waiting on you to finish debugging! Let\'s go ahead and make that GET request to our root endpoint via curl:\r\n\r\n[shell]\r\ncurl http://127.0.0.1:4567\r\n[/shell]\r\n\r\nAnd then if you look at your server logs, you\'ll notice it has turned into a REPL you can play with!\r\n\r\n[ruby]\r\n    13:\r\n    14: get \'/\' do\r\n =&gt; 15:   binding.pry\r\n    16: end\r\n    17:\r\n    18: post \'/posts\' do\r\n    19:   # POST stuff ...\r\n    20:\r\n\r\n[1] pry(#&lt;Sinatra::Application&gt;)&gt;\r\n[/ruby]\r\n\r\nThis is an interactive shell just like IRB and works the exact same way, except that you\'re now in the scope in which your program stopped, so you have access to all the variables, objects, classes, methods, etc. that you normally would at that point in runtime.\r\n\r\nWhenever you\'re done, just type <strong>exit</strong> to resume normal runtime. There\'s a ton more you can do with pry, but I\'ll let you <a href=\"https://github.com/pry/pry\" target=\"_blank\">explore the docs</a> to see what all it has to offer.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Expose Your Web Server with Ngrok</h2>\r\nLastly, I want to talk about ngrok. <a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a> is a wonderful dev tool that allows you to securely expose any of your localhost ports to a publicly accessible URL. What that means is that you can use ngrok to create a public URL that maps to your server on localhost:4567, and now anyone can have access to it!\r\n\r\nBefore we get into ngrok too much, let me explain why this is so nice. Because the purpose of this web server is to handle remotely small tasks, there\'s a good chance that you don\'t want to put a ton of time into building testing frameworks or scaffolding out a needless client-side app to talk to your web server. There\'s also a good chance that you\'re integrating this web server with something that already exists, such as a third-party API or external database - and those services can\'t see your localhost. But they can sure see a public URL, which is what ngrok gives you.\r\n\r\nNgrok is available for download as a binary file at <a href=\"https://ngrok.com/\" target=\"_blank\">the main site</a>, but it\'s also installable as a global npm module, so we\'ll install it that way:\r\n\r\n[shell]\r\nnpm install ngrok -g\r\n[/shell]\r\n\r\nTo expose the port that our web server is running on, we just run:\r\n\r\n[shell]\r\nngrok 4567\r\n[/shell]\r\n\r\nNgrok will then take over our terminal pane and show us the public URLs it created:\r\n\r\n<img class=\" wp-image-589 size-large aligncenter\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.03.28-PM-1024x411.png\" alt=\"ngrok\" width=\"640\" height=\"257\" />\r\n\r\nWe can now access the url <strong>http://58a4d66f.ngrok.com</strong> in the exact same way as localhost:4567 - and all external services can see that URL. You could even navigate to another website and use chrome dev tools to issue an HTTP request via AJAX to our web server, and it will all work. As you can see in the picture above, ngrok also creates a URL that uses HTTP over SSL, so you can even integrate it with fully secure sites too. Just like normal server logs, ngrok tracks and displays which requests were made to which resources:\r\n\r\n<img class=\"aligncenter wp-image-593 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/04/Screen-Shot-2015-04-10-at-3.19.45-PM.png\" alt=\"ngrok logs\" width=\"812\" height=\"368\" />\r\n\r\nPretty neat, huh? You may not always need ngrok for your web server, but it\'s a great tool to have in your dev toolbox for any project. Exposing your localhost to a public URL for testing purposes is a game changer when you just quickly want to see how things might work in production.\r\n\r\nThe last neat thing about ngrok is that it still allows you to use your other debug tools too, like pry. Earlier we placed a breakpoint in our GET handler for our root endpoint using pry, which allowed us to stop the runtime of our program to debug it. Because ngrok merely maps our localhost ports to public URLs, all the code is exactly the same and updates in real-time (no need to restart ngrok, ever), so if you make a GET request to the root endpoint of our ngrok URL, the interactive REPL through pry will still get triggered in our normal Sinatra server logs, just as if we made a request to localhost!\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nThough there\'s many more ways you can test your web server, these are some of my favorite tools that I\'ve used lately. Sinatra is a really powerful mini web framework if you\'re familiar with ruby, and if you don\'t know much about it then feel free to check out my first post on <a href=\"https://thesocietea.org/2015/05/building-a-simple-web-server-with-sinatra\" target=\"_blank\">how to build a web server</a> using Sinatra.\r\n\r\nToday we went over:\r\n<ul>\r\n	<li>using <strong>cURL</strong> to issue requests quickly</li>\r\n	<li>using <strong>pry</strong> to debug our ruby scripts through breakpoints and REPLs</li>\r\n	<li>using <strong>ngrok</strong> to expose our localhost ports to a public URL</li>\r\n</ul>\r\nNone of these tools are specific to Sinatra or even mini web-servers in general, and you can therefore use them in a lot of different situations - which I recommend you do. Regardless of which tools you do use to test your web servers, I hope I provided you with at least a couple more ideas on how to manually debug your web projects.\r\n\r\nHappy building!','Debugging a Simple Web Server','','inherit','open','open','','564-revision-v1','','','2015-04-10 21:20:05','2015-04-10 21:20:05','',564,'https://thesocietea.org/2015/04/564-revision-v1/',0,'revision','',0),(604,2,'2015-04-15 22:12:16','2015-04-15 22:12:16','Below you\'ll find my blog posts. You can check out the <a title=\"RSS Feed\" href=\"http://thesocietea.org/feed/\">RSS feed</a> too.','Blog','','inherit','open','open','','16-revision-v1','','','2015-04-15 22:12:16','2015-04-15 22:12:16','',16,'https://thesocietea.org/2015/04/16-revision-v1/',0,'revision','',0),(605,2,'2015-04-17 17:04:29','2015-04-17 17:04:29','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS:\r\n\r\n[shell]gem install active_model_serializers -v 0.8.3[/shell]\r\n\r\nAMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-17 17:04:29','2015-04-17 17:04:29','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(607,2,'2015-07-24 18:00:42','2015-07-24 18:00:42','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is executing it.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language execution style isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','future','open','open','','programming-concepts-compiled-and-interpreted-languages','','','2015-04-28 17:03:13','2015-04-28 17:03:13','',0,'https://thesocietea.org/?p=607',0,'post','',0),(608,2,'2015-04-24 17:41:01','2015-04-24 17:41:01','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>Compilation</h2>\r\n<h2>Interpretation</h2>','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 17:41:01','2015-04-24 17:41:01','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(609,2,'2015-04-24 19:25:35','2015-04-24 19:25:35','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>tl;dr</h2>\r\nA compiled language is one where the program, once compiled, is expressed in the instructions of the target machine. An interpreted language is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change the possible functions\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 19:25:35','2015-04-24 19:25:35','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(610,2,'2015-04-24 20:59:42','2015-04-24 20:59:42','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today - but are topics that most developers using higher level languages don\'t ever need to deal with, so we don\'t have the best understanding about them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will also help you out. Today\'s topic: Compilation and Interpretation.\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into actual code that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>tl;dr</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages that we can code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and/or interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\n<strong>Compilation</strong> is where the program, once compiled, is expressed in the instructions of the target machine. <strong>Interpretation</strong> is where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change any possibilities with how you write the actual program; what this means is that languages that strictly employ compilation vs both will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compilation and Interpretation','','inherit','open','open','','607-revision-v1','','','2015-04-24 20:59:42','2015-04-24 20:59:42','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(611,2,'2015-04-24 21:10:05','2015-04-24 21:10:05','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages one or both of these technologies. Some developers talk about entire programming languages as being <em>compiled languages</em> or <em>interpreted languages</em>, but the truth is that most languages use both of these techniques to produce machine-runnable code. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and/or interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\n<strong>Compilation</strong> is where the program, once compiled, is expressed in the instructions of the target machine. <strong>Interpretation</strong> is where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation, interpretation, or both will not change any possibilities with how you write the actual program; what this means is that languages that strictly employ compilation vs both will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compilation</h2>\r\n&nbsp;\r\n<h2>Interpretation</h2>\r\n&nbsp;','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:10:05','2015-04-24 21:10:05','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(612,2,'2015-04-24 21:12:35','2015-04-24 21:12:35','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\n&nbsp;\r\n<h2>Interpreted Languages</h2>\r\n&nbsp;','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:12:35','2015-04-24 21:12:35','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(613,2,'2015-04-24 21:28:24','2015-04-24 21:28:24','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantaged of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious.\r\n<h2>Interpreted Languages</h2>\r\n<h4> Bytecode Languages</h4>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:28:24','2015-04-24 21:28:24','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(614,2,'2015-04-24 21:28:43','2015-04-24 21:28:43','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Because all of these events happen prior to runtime of the actual program, whether a programming language employs compilation or interpretation will not change any possibilities with how you write the actual program; what this means is that either type of language will not change what kind of code you can write - unlike other concepts such as type systems in which dynamic typing allows for metaprogramming, while static typing does not. Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantaged of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious.\r\n<h2>Interpreted Languages</h2>\r\n<h3> Bytecode Languages</h3>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-24 21:28:43','2015-04-24 21:28:43','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(615,2,'2015-04-26 19:00:04','2015-04-26 19:00:04','After reading the last post discussing <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-04-26 19:00:04','2015-04-26 19:00:04','',504,'https://thesocietea.org/2015/04/504-revision-v1/',0,'revision','',0),(616,2,'2015-04-27 15:07:51','2015-04-27 15:07:51','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\n<h2>Serialization</h2>\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\n\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\n<h2>Setting It Up</h2>\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\n<ul>\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\n</ul>\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\n\nLet\'s install AMS by adding it to our Gemfile:\n\n[ruby title=\"Gemfile\"]\'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\n\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\n\n[shell]rails g serializer user[/shell]\n\nAnd that will create the following file:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id\nend\n[/ruby]\n\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\n\n[code title=\"http://localhost:3000/users\"]\n{users: [{id: 1},{id: 2}]}\n[/code]\n\nThis is different from what we\'ve seen in two ways.\n<ol>\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\n</ol>\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\n\n[shell]\nrails g serializer post\nrails g serializer comment\n[/shell]\n\n<h2>Configuring the Serializers</h2>\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at\nend\n[/ruby]\n\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at\n\n  has_many :posts\nend\n[/ruby]\n\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\n\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\n\n[ruby title=\"app/serializers/user_serializer.rb\"]\nclass UserSerializer &lt; ActiveModel::Serializer\n  attributes :id, :email, :created_at, :say_hello\n\n  has_many :posts\n\n  def say_hello\n    &quot;Hello #{object.email}!&quot;\n  end\nend\n[/ruby]\n\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\n\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\n\n[ruby title=\"app/controllers/application_controller.rb\"]\n def default_serializer_options\n   { root: false }\n end\n[/ruby]\n\n<h2>Wrap Up</h2>\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\n\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\n\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-autosave-v1','','','2015-04-27 15:07:51','2015-04-27 15:07:51','',443,'https://thesocietea.org/2015/04/443-autosave-v1/',0,'revision','',0),(617,2,'2015-04-27 15:07:52','2015-04-27 15:07:52','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]\'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-27 15:07:52','2015-04-27 15:07:52','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(618,2,'2015-04-27 15:08:58','2015-04-27 15:08:58','Welcome to part 2 of our API building adventure. If you haven\'t read <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">Part 1: Getting Started</a> yet, then I highly recommend you go through that post real quick to make sure we\'re all on the same page. We\'ll be continuing to develop on our Blog API which uses three relational tables: <strong>User</strong>, <strong>Post</strong>, and <strong>Comment</strong>. In the last post, we focused on setting up a basic JSON API using Rails, preparing our database, and reviewing how to issue requests to that API. Today, we\'re going to take the power of our API to another level with <a href=\"http://en.wikipedia.org/wiki/Serialization\" target=\"_blank\">serialization</a>.\r\n<h2>Serialization</h2>\r\nSo what exactly does it mean to <em>serialize</em> our API? Currently when we make a GET request to one of our API endpoints (like <strong>/users/1</strong> or <strong>/posts/1</strong>), we get back all of that object\'s attributes from the database record (or multiple objects\' attributes, if querying an <em>index</em> action). This might seem okay at first, but let me give you an example of how this is undesirable. When we query <strong>/users/1</strong>, we will get all of that user\'s data - including the unencrypted password. That\'s a huge security flaw. Additionally, what if we wanted to query that same endpoint and return each of that user\'s posts in addition to their user attributes? We can\'t do that right now. That\'s where serialization will help us.\r\n\r\nWe employ serialization in APIs to properly handle the response from our GET requests to the API and format the data exactly how we want. Could we handle this directly in the controllers? Yes, but that gets real messy real quick, and it all goes back to our concept of <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a> - Service Oriented Architecture. Controllers are meant to handle the business logic of our app, and not focus on formatting a response - but handling response data is exactly what serializers are for, so let\'s use them and keep our API clean and modular!\r\n<h2>Setting It Up</h2>\r\nThere are different ways we can apply serialization in Rails, and all of them involve gems. The three most common serialization gems are:\r\n<ul>\r\n	<li><a href=\"https://github.com/rails-api/active_model_serializers\" target=\"_blank\">ActiveModelSerializers</a></li>\r\n	<li><a href=\"https://github.com/nesquena/rabl\" target=\"_blank\">Rabl</a></li>\r\n	<li><a href=\"https://github.com/rails/jbuilder\" target=\"_blank\">JBuilder</a></li>\r\n</ul>\r\nEach of these gems are very well supported and have hundreds of forks on GitHub, but I prefer to use ActiveModelSerializers (AMS) - predominantly because right out of the box it plays very nicely with Ember.js via Ember Data\'s <a href=\"http://emberjs.com/api/data/classes/DS.ActiveModelAdapter.html\" target=\"_blank\">ActiveModel Adapter</a>. If you\'ve used Ember, then you know it\'s very powerful, but you have to play by its rules - and using AMS allows you to do that. If you don\'t use Ember, AMS is still a wonderful serializer and is very Rails-esque in syntax.\r\n\r\nLet\'s install AMS by adding it to our Gemfile:\r\n\r\n[ruby title=\"Gemfile\"]gem \'active_model_serializers\', \'~&gt; 0.8.3\'[/ruby]\r\n\r\nThen run a bundle install. AMS comes built-in with generators, so to create a serializer for our User resource for instance, we just run:\r\n\r\n[shell]rails g serializer user[/shell]\r\n\r\nAnd that will create the following file:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id\r\nend\r\n[/ruby]\r\n\r\nNow, if you navigate to your <strong>/users</strong> URL, you should see JSON that looks like this:\r\n\r\n[code title=\"http://localhost:3000/users\"]\r\n{users: [{id: 1},{id: 2}]}\r\n[/code]\r\n\r\nThis is different from what we\'ve seen in two ways.\r\n<ol>\r\n	<li>We now have a root <strong>users</strong> key and are returning a JSON object instead of an array of JSON objects.</li>\r\n	<li>We are only rendering the id, and no other data on the User objects. That means no more exposed passwords!</li>\r\n</ol>\r\nSee how simple that was? This same serialization pattern will also carry over for all of your controller actions that handle GET requests that return JSON. Now go ahead and run the serializers for the remaining Post and Comment resources, and then we\'ll get into some configuration:\r\n\r\n[shell]\r\nrails g serializer post\r\nrails g serializer comment\r\n[/shell]\r\n\r\n<h2>Configuring the Serializers</h2>\r\nWe won\'t go into full configuration options here, as you\'re better off checking the AMS <a href=\"https://github.com/rails-api/active_model_serializers/tree/0-8-stable\">documentation</a> for that, but we\'ll go into the core options that will help you the most. If you want to return more model fields than just your ID, then you just need to add them to the <strong>attributes</strong> method call like so:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\nend\r\n[/ruby]\r\n\r\nAnd now when you query your User endpoints, you\'ll receive the <em>email</em> and <em>created_at</em> fields too - easy as pie! But that\'s not all. Let\'s say you wanted to query a User endpoint and return each of those user\'s posts too. Well that\'s easy, and here\'s where you really see the Rails-y design of AMS:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at\r\n\r\n  has_many :posts\r\nend\r\n[/ruby]\r\n\r\nAnd wallah! You are now returning each user\'s posts when you query a user - and the JSON data for each post will also follow the configuration in the serializer created for the Post resource.\r\n\r\nI just have one last serializer configuration I wanted to share. Occasionally, you may want to modify the data that you return in JSON, but because this specific alteration is only meant for serialization cases, you don\'t want to dirty up the model files by creating a model method. AMS provides a solution for that. You can create a method inside your serializer and therein access the current object being serialized, and then call that method with the same syntax as if it were an attribute on that object. Doesn\'t make sense? Take a look at this example:\r\n\r\n[ruby title=\"app/serializers/user_serializer.rb\"]\r\nclass UserSerializer &lt; ActiveModel::Serializer\r\n  attributes :id, :email, :created_at, :say_hello\r\n\r\n  has_many :posts\r\n\r\n  def say_hello\r\n    &quot;Hello #{object.email}!&quot;\r\n  end\r\nend\r\n[/ruby]\r\n\r\nNow our serializer would spit out a <strong>say_hello</strong> JSON key that would have as its value the word \"Hello\" followed by that user\'s email address. You access the current serialized object via the \'object\' variable inside of any method you define inside your serializer. Nifty, huh? <strong>Pro Tip</strong>: You can also add model methods into your <strong>attributes</strong> method call, and don\'t have to redefine them in the serializer.\r\n\r\nOne last thing (didn\'t I already say that above?): If you don\'t like the JSON syntax of having a root key like <strong>user</strong> or whatever resource you\'re querying, then you can go back to the old syntax we had where it strictly returns either just the JSON representation of the object (e.g. show), or an array of JSON objects (e.g. index). You just have to add a short method in your application_controller.rb to set it globally:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n def default_serializer_options\r\n   { root: false }\r\n end\r\n[/ruby]\r\n\r\n<h2>Wrap Up</h2>\r\nThat\'s it for serializer configuration that we\'re going to cover in this post, but there\'s a lot of other neat options you can play with using AMS. As I mentioned earlier, I initially chose AMS over other serialization gems because of how nicely it plays with Ember.js, but it\'s built to be completely agnostic of whatever front-end framework you use. For example, I\'m currently working on a large Angular.js app, and AMS is still my chosen serialization gem of choice because it does everything I need it to (and beautifully at that).\r\n\r\nWe\'ve now covered the actual <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">building of an API</a> and serializing our JSON response to format it exactly like we want. Technically this is all you need in your server-side API, but I want to review one more very important topic: <strong>Authentication</strong>. After all, there\'s a big chance that you plan to build an API that houses personal data that you don\'t want everybody in the whole world to be able to query. In the next post, we\'ll cover how to authenticate your requests so that only you can access your personal data, and no one else can!\r\n\r\nCheck out the next part in this series: <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\">Authentication Strategies</a>','Building a JSON API with Rails – Part 2: Serialization','','inherit','open','open','','443-revision-v1','','','2015-04-27 15:08:58','2015-04-27 15:08:58','',443,'https://thesocietea.org/2015/04/443-revision-v1/',0,'revision','',0),(619,2,'2015-04-27 20:19:44','2015-04-27 20:19:44','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Some of the concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation is a new technique that helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n<h3> Bytecode Languages</h3>\r\nBytecode languages are a form of language that generally fall under the category of interpreted languages, but end up employing both compilation and interpretation to execute code.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:19:44','2015-04-27 20:19:44','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(620,2,'2015-04-27 20:44:16','2015-04-27 20:44:16','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n<h2> Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:44:16','2015-04-27 20:44:16','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(621,2,'2015-04-27 20:45:53','2015-04-27 20:45:53','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"mini\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:45:53','2015-04-27 20:45:53','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(622,2,'2015-04-27 20:46:07','2015-04-27 20:46:07','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed Common Intermediate Language in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM. In a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to interpret the code as a standard interpreter would.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:46:07','2015-04-27 20:46:07','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(623,2,'2015-04-27 20:55:33','2015-04-27 20:55:33','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages.\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:55:33','2015-04-27 20:55:33','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(624,2,'2015-04-27 20:58:42','2015-04-27 20:58:42','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 20:58:42','2015-04-27 20:58:42','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(625,2,'2015-04-27 21:05:07','2015-04-27 21:05:07','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li>Dynamic typing</li>\r\n	<li>Smaller executable program size</li>\r\n	<li>Dynamic scoping</li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:05:07','2015-04-27 21:05:07','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(626,2,'2015-04-27 21:45:13','2015-04-27 21:45:13','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first compile it (who would have guessed?). Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:45:13','2015-04-27 21:45:13','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(627,2,'2015-04-27 21:58:27','2015-04-27 21:58:27','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time, but with the advent of new interpreter technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted through its various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:58:27','2015-04-27 21:58:27','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(628,2,'2015-04-27 21:59:57','2015-04-27 21:59:57','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">Just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, Just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but at a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Final Words</h2>\r\nMost languages today can either be compiled or interpreted through its various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and allow for neat development concepts such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 21:59:57','2015-04-27 21:59:57','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(629,2,'2015-04-27 22:06:55','2015-04-27 22:06:55','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI hope you learned a little bit! There were no code examples here - but I really feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Leave a comment if you want to see any specific P<strong>rogramming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 22:06:55','2015-04-27 22:06:55','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(630,2,'2015-04-27 22:08:29','2015-04-27 22:08:29','As with my previous Programming Concepts post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not understand them. Just like learning another programming language will make you a better developer, understanding the core of how all programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>\r\n\r\nAs developers, we often come across terms such as \"the compiler\" or \"the interpreter\" as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we really gloss over these days without really understanding them. Compilation and Interpretation are at the core of how programming languages are converted into a format that the computer knows how to execute, and thus literally every language leverages these technologies. Let\'s take a look at what these concepts really are.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-27 22:08:29','2015-04-27 22:08:29','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(631,2,'2015-04-28 16:07:10','2015-04-28 16:07:10','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nComputers can only execute code that is in a language native to the machine\'s operating system - also known as \"machine code.\" Machine code is undecipherable by humans, which is why we built programming languages to code in in order to tell the computer the set of instructions we want it to run. We depend on tools such as compilation and interpretation in order to get our written code into a form that the computer knows how to execute.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages are that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2> Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:07:10','2015-04-28 16:07:10','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(632,2,'2015-04-28 16:19:48','2015-04-28 16:19:48','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Lisp, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Just as how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future.','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:19:48','2015-04-28 16:19:48','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(633,2,'2015-04-28 16:42:51','2015-04-28 16:42:51','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is running the executable.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language paradigm isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:42:51','2015-04-28 16:42:51','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(634,2,'2015-04-28 16:53:40','2015-04-28 16:53:40','As with my previous <strong>Programming Concepts</strong> post over <a title=\"Programming Concepts: The Stack and the Heap\" href=\"https://thesocietea.org/2014/10/programming-concepts-the-stack-and-the-heap/\">the Stack vs. the Heap</a>, in this series I\'m aiming to look back at core computing topics that affect everything about how we develop today, but are topics that most developers using higher level languages don\'t ever need to deal with and thus may not fully understand them (myself included). In the same way that learning another programming language will make you a better developer, understanding the core of how different programming languages work will teach you a lot. Today\'s topic: <strong>Compiled Languages and Interpreted Languages</strong>.\r\n\r\nAs developers, we often come across terms such as the <em>compiler</em> or the <em>interpreter</em> as we read blog posts, articles, StackOverflow answers, etc., but I feel like these are terms that we gloss over these days without really understanding them. Compilation and Interpretation are at the core of how all programming languages are executed; let\'s take a look at how these concepts really work.\r\n<h2>Introduction</h2>\r\nWe depend on tools such as compilation and interpretation in order to get our written code into a form that the computer can execute. Code can either be executed natively through the operating system after it is converted to <em>machine code</em> (via compilation) or can be evaluated line by line through another program which handles executing the code instead of the operating system itself (via interpretation).\r\n\r\nA <strong>compiled</strong> <strong>language</strong> is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. An <strong>interpreted</strong> <strong>language</strong> is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). Both compilation and interpretation offer benefits and pitfalls, which is mainly what we\'re going to talk about.\r\n\r\nBefore we get further, it needs to be said that most programming languages have both compiled implementations and interpretated implementations, and thus you can\'t really classify an entire language as being compiled or interpreted - only a specific implementation. For the sake of simplicity however, I\'ll be referring to either \"compiled languages\" or \"interpreted languages\" for the remainder of the post.\r\n<h2>Compiled Languages</h2>\r\nThe major advantage of compiled languages over interpreted languages is their execution speed. Because compiled languages are converted directly into machine code, they run significantly faster and more efficiently than interpreted languages, especially considering the complexity of statements in some of the more modern scripting languages which are interpreted.\r\n\r\nLower-level languages tend to be compiled because efficiency is usually more of a concern than cross-platform support. Additionally, because compiled languages are converted directly into machine code, this gives the developer much more control over hardware aspects such as memory management and CPU usage. Examples of pure compiled languages include C, C++, Erlang, Haskell, and more modern languages such as Rust and Go.\r\n\r\nSome of the pitfalls of compiled languages are pretty substantial however. In order to run a program written in a compiled language, you need to first manually compile it. Not only is this an extra step in order to run a program, but while you debug the program, you would need to recompile the program each time you want to test your new changes. That can make debugging very tedious. Another detriment of compiled languages is that they are not platform-independent, as the compiled machine code is specific to the machine that is executing it.\r\n<h2>Interpreted Languages</h2>\r\nIn contrast to compiled languages, interpreted languages do not require machine code in order to execute the program; instead, interpreters will run through a program line by line and execute each command. In the early days of interpretation, this posed a disadvantage compared to compiled languages because it took significantly more time to execute the program, but with the advent of new technologies such as <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\">just-in-time compilation</a>, this gap is narrowing. Examples of some common interpreted languages include PHP, Perl, Ruby, and Python. Some of the programming concepts that interpreted languages make easier are:\r\n<ul>\r\n	<li>Platform independence</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" target=\"_blank\">Reflection</a></li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information\" target=\"_blank\">Dynamic typing</a></li>\r\n	<li>Smaller executable program size</li>\r\n	<li><a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\" target=\"_blank\">Dynamic scoping</a></li>\r\n</ul>\r\nThe main disadvantage of interpreted languages is a slower program execution speed compared to compiled languages. However, as mentioned earlier, just-in-time compilation helps by converting frequently executed sequences of interpreted instruction into host machine code.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Bonus: Bytecode Languages</h2>\r\nBytecode languages are a type of programming language that fall under the categories of both compiled and interpreted languages because they employ both compilation and interpretation to execute code. Java and the .Net framework are easily the most common examples of bytecode languages (dubbed <strong>Common Intermediate Language</strong> in .Net). In fact, the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\">Java Virtual Machine</a> (JVM) is such a common virtual machine to interpret bytecode that <a href=\"http://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\">several languages</a> have implementations built to run on the JVM.\r\n\r\nIn a bytecode language, the first step is to <span style=\"text-decoration: underline;\">compile</span> the current program from its human-readable language into bytecode. <strong>Bytecode</strong> is a form of instruction set that is designed to be efficiently executed by an interpreter and is composed of compact numeric codes, constants, and memory references. From this point, the bytecode is passed to a virtual machine which acts as the interpreter, which then proceeds to <span style=\"text-decoration: underline;\">interpret</span> the code as a standard interpreter would.\r\n\r\nIn bytecode languages, there is a delay when the program is first run in order to compile the code into bytecode, but the execution speed is increased considerably compared to standard interpreted languages because the bytecode is optimized for the interpreter. The largest benefit of bytecode languages is platform independence which is typically only available to interpreted languages, but the programs have a much faster execution speed than interpreted languages. Similar to how interpreted languages make use of just-in-time compilation, the virtual machines that interpret bytecode can also make use of this technique to enhance execution speed.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>Overview</h2>\r\nMost languages today can either be compiled or interpreted through their various implementations, making the difference between the two less relevant. One language execution style isn\'t better than the other, but they certainly have their strengths and weaknesses.\r\n\r\nIn a nutshell, compiled languages are the most efficient type of programming language because they execute directly as machine code and can easily utilize more of the hardware specs of the running machine. In turn, this forces a significantly stricter coding style and a single program usually can\'t be run on different operating systems. Interpreted languages on the other hand offer much more diversity in coding style, are platform-independent, and easily allow for dynamic development techniques such as metaprogramming. However, interpreted languages execute much slower than compiled languages - though just-in-time compilation has been helping to speed this up.\r\n\r\nBytecode languages are common as well, and try to utilize the strong points in both compiled and interpreted languages. This allows for programming languages that are platform independent like interpreted languages, while still executing at a speed significantly faster than interpreted languages.\r\n\r\nI know there were no code examples here - but I really wanted to dig into this topic because I feel that this is one of those programming concepts that will always be relevant to us, no matter how abstract our higher-level languages get from the hardware level. Feel free to leave a comment if you want to see any specific <strong>Programming Concepts</strong> posts in the future!','Programming Concepts: Compiled and Interpreted Languages','','inherit','open','open','','607-revision-v1','','','2015-04-28 16:53:40','2015-04-28 16:53:40','',607,'https://thesocietea.org/2015/04/607-revision-v1/',0,'revision','',0),(635,2,'2015-04-30 20:49:23','2015-04-30 20:49:23','After reading the last post discussing <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"http://thesocietea.org/2015/05/building-a-json-api-with-rails-part-3-authentication-strategies\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-04-30 20:49:23','2015-04-30 20:49:23','',504,'https://thesocietea.org/2015/04/504-revision-v1/',0,'revision','',0),(636,2,'2015-04-30 20:50:25','2015-04-30 20:50:25','After reading the last post discussing <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">authentication strategies</a>, we now have a firm understanding on how we\'re going to add authentication into our API. To recap - we\'re going to use <strong>basic authentication</strong> for our initial username/password submission, and then <strong>token-based authentication</strong> on every subsequent request in which we just pass around a token to authenticate ourselves. We didn\'t cover any code last time, but I promise it\'ll be nothing but code this time.\r\n<h2>Phase 1: The Initial Request</h2>\r\nFirst off, we need to add a route that we can access in order to receive a token based on our submitted username and password. To do that, create this route in your <strong>routes.rb</strong> file:\r\n\r\n[ruby title=\"config/routes.rb\"]\r\nget :token, controller: \'application\'\r\n[/ruby]\r\n\r\nTo handle this route, we\'re going to add a <strong>token</strong> action in our <strong>application_controller.rb</strong>. We\'re putting it there because this logic doesn\'t belong to any specific controller:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n\r\nend\r\n[/ruby]\r\n\r\nSimple so far, right? Now to add some actual logic to that action. Let\'s update it with a handy rails method:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThe <strong>authenticate_with_http_basic</strong> method is incredibly helpful, and really shows how Rails can help build an awesome API application. This method will parse the incoming request and look specifically for basic authentication information - which is set in the <em>Authorization</em> header. Not only does it automatically gather data from that header, but it will parse out the Base64 encoded username and password and return them to you as parameters inside of a block! How cool is that! As you can see above, I\'ve appropriately named the two block parameters to represent this data.\r\n\r\nNow if you try navigating to your <strong>/token</strong> endpoint, you\'ll receive an error. That\'s because Rails API is a subset of the base Rails library, and by default doesn\'t include the modules to handle the authenticate_with_http_basic method. You\'ll need to include these modules in your application_controller.rb.\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ninclude ActionController::HttpAuthentication::Basic::ControllerMethods\r\ninclude ActionController::HttpAuthentication::Token::ControllerMethods\r\n[/ruby]\r\n\r\nThe first module is the one we need right now. The second module is included to handle an equally awesome token-based authentication method that we\'ll use here in a bit.\r\n\r\nLet\'s finish out this token action:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\ndef token\r\n  authenticate_with_http_basic do |email, password|\r\n    user = User.find_by(email: email)\r\n    if user &amp;&amp; user.password == password\r\n      render json: { token: user.auth_token }\r\n    else\r\n      render json: { error: \'Incorrect credentials\' }, status: 401\r\n    end\r\n  end\r\nend\r\n[/ruby]\r\n\r\nThat\'s all we need to add to our token action. With this code, we are authenticating the user to verify they exist in our database and that the submitted password matches up with what we have stored for them. If so, we\'ll return their token; otherwise, we return an error.\r\n\r\nFor the duration of this post, we\'ll authenticate ourselves as a user with the username <strong>user@example.com</strong> and a password of <strong>password</strong>. If you included the seeds in your database that\'s specified in the <strong>db/seeds.rb</strong> file we discussed in the <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">very first post</a>, then this user will already exist in your database.\r\n\r\nLet\'s make our first request to get this user\'s token. First off, we need to get the Base64 encoded string of this user\'s username and password. Open up your rails console and type in the following:\r\n\r\n[ruby]\r\nBase64.encode64(&quot;user@example.com:password&quot;)\r\n# This returns dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\r\n[/ruby]\r\n\r\nNow we can build our request and issue it with cURL:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n[/shell]\r\n\r\nThis is a complete and valid request using basic authentication. If everything is set up properly, we should receive this back from the API:\r\n\r\n[shell]\r\n{token: null}\r\n[/shell]\r\n\r\nRight off the bat it looks like we got an error, but everything\'s working exactly as it\'s supposed to. We just haven\'t actually created any tokens for our users yet! By default, we want each user\'s auth_token to be created when that user is created. To do that, we\'ll need to update our user model:\r\n\r\n[ruby title=\"app/models/user.rb\"]\r\nbefore_create -&gt; { self.auth_token = SecureRandom.hex }\r\n[/ruby]\r\n\r\nEasy enough, right? Now when a new user is created, their auth_token will be randomly generated. However, the easiest way to make this happen for our existing users is to reset the database and let the seeds run again. To do that, run:\r\n\r\n[shell]rake db:reset[/shell]\r\n\r\nAfter the database is reset, we can rerun our initial request to get a valid token:\r\n\r\n[shell]\r\ncurl http://localhost:3000/token -H \'Authorization: Basic dXNlckBleGFtcGxlLmNvbTpwYXNzd29yZA==\\n\'\r\n\r\n# Returns ...\r\n{token: &quot;861af99a9dbf5e052b8b55cfc41e69d7&quot;}\r\n[/shell]\r\n\r\nAnd bam! We got our user\'s token! Keep in mind, your token will not be this exact same one since it\'s randomized, but it will be in a similar format. Now we can build our token-based authentication, and feel safe knowing that we\'ll never need to include our personal password in a request again.\r\n<h2>Phase 2: Handling Every Other Request</h2>\r\nWe now have our token for the user that we\'re authenticating as. Since we\'ll be using this token on every subsequent request to this API, you\'ll want to store it in some storage structure like a cookie, session storage, local storage, etc. Now let\'s say we want to make a GET request to <strong>/posts/1</strong> to receive data about the first post. Keeping in mind the token-based authentication format that we discussed in <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the previous post</a>, we will build our request like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIn fact, if you make that request right now, it will go through - but that\'s because we haven\'t built any authentication yet! We want to prevent any resources from being accessed unless the requestor is properly authenticated. To add in the handlers for this authentication, we will again be editing our application_controller.rb:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\nbefore_filter :authenticate_user_from_token, except: [:token]\r\n\r\nprivate\r\n\r\ndef authenticate_user_from_token\r\n\r\nend\r\n[/ruby]\r\n\r\nWe are adding a before_filter hook that will call our created <strong>authenticate_user_from_token</strong> method on every single request, except when the user is requesting the initial token (since they don\'t know their token yet at that point). Let\'s update that authenticate_user_from_token method now:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n\r\ndef authenticate_user_from_token\r\n  unless authenticate_with_http_token { |token, options| User.find_by(auth_token: token) }\r\n    render json: { error: \'Bad Token\'}, status: 401\r\n  end\r\nend\r\n[/ruby]\r\n\r\nAnd this is actually all we need to add. Remember how we used a fancy authenticate_with_http_basic method in our <em>token</em> action to handle basic authentication? We\'re using a similar method here in this hook to handle token-based authentication. The <strong>authenticate_with_http_token</strong> method will look for an incoming request and parse the <em>Authorization</em> header again, but in this case, it looks specifically for a token-based authentication format. We only pass in one value with this form of authentication (which is the token), and you can see above how this method will parse out our token and provide it as a block parameter. We additionally also receive an <em>options</em> parameter, but we won\'t be using that.\r\n\r\nThe logic that we added in our authenticate_user_from_token method will parse an incoming request and validate not only that it is using token-based authentication, but that the token corresponds to an actual user. If the token is valid, then the request continues as normal to <strong>/posts/1</strong>; if the token is invalid (or completely missing), then we will receive an error.\r\n\r\nAs an example, if we submit this request again that we did earlier:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d7\'\r\n[/shell]\r\n\r\nIt will work perfectly and return the first post\'s data. But if we change up the token just a little bit and remove that last character like so:\r\n\r\n[shell]\r\ncurl http://localhost:3000/posts/1 -H \'Authorization: Token token=861af99a9dbf5e052b8b55cfc41e69d\'\r\n[/shell]\r\n\r\nThen we will receive the following error:\r\n\r\n[shell]\r\n{error: \'Bad Token\'}\r\n[/shell]\r\n\r\nAnd that\'s it! You now have a pretty secure API with all the benefits of token-based authentication (don\'t remember those benefits? Review them in <a title=\"Building a JSON API with Rails – Part 3: Authentication Strategies\" href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-3-authentication-strategies/\" target=\"_blank\">the last post</a>). For debugging purposes it\'s often a pain to have to worry about authentication, and I kept that in mind as I was building this architecture. If you ever want to make a request to a resource without having to authenticate, then just comment out the <strong>before_filter</strong> line:\r\n\r\n[ruby title=\"app/controllers/application_controller.rb\"]\r\n# before_filter :authenticate_user_from_token, except: [:token]\r\n[/ruby]\r\n\r\nAnd now all of your requests will go through without worrying about authentication. Just remember to turn it back on before you push anything to production!\r\n<h2>Finale</h2>\r\nYou officially now have a thorough base API with a lot of the major concerns hammered out. This concludes the 3 major points that I wanted to discuss - scaffolding an API, serialization, and authentication. But, I still have a couple more parts I want to cover like <strong>writing tests for an API</strong> as well as a general overview of some other API topics such as <strong>Rails vs Rails API file structure, nested vs. flat routes, CORS, and filtering resources based on query parameters</strong> - so don\'t think we\'re quite done yet.\r\n\r\nAs always, stay tuned!\r\n\r\n<hr class=\"short\" />\r\n\r\nP.S. If you want to see an example JSON API built with Rails using everything that we\'ve discussed so far, check out my <a href=\"https://github.com/alkrauss48/okcrb_api_talk/tree/master/blog-final\" target=\"_blank\">example API GitHub repo</a> based on a talk I gave at a local Ruby meetup.','Building a JSON API with Rails – Part 4: Implementing Authentication','','inherit','open','open','','504-revision-v1','','','2015-04-30 20:50:25','2015-04-30 20:50:25','',504,'https://thesocietea.org/2015/04/504-revision-v1/',0,'revision','',0),(637,2,'2015-04-30 20:55:20','2015-04-30 20:55:20','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\n\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\n<h2>Some Background</h2>\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\n\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\n<h2>Basic Authentication</h2>\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\n\n[code]Authorization: Basic username:password[/code]\n\n<p class=\"newpage\">We\'re doing a few things here:</p>\n\n<ul>\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\n</ul>\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\n\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\n\nSo after it\'s all said and done, our full Authorization request header would look like this:\n\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\n\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\n\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\n<h2>Token-Based Authentication</h2>\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\n\n[code]Authorization = Token token=your_token[/code]\n\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\n\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\n\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\n\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\n\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\n\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\n<h4>Worst Case Scenario</h4>\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\n<ul>\n	<li>You may use that username and/or password on multiple sites</li>\n	<li>You would need to manually change your password if the hacker compromised it</li>\n</ul>\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\n\n<hr class=\"short\" />\n\n<h2>No Code?</h2>\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\n\nSo get ready for <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\">the next post</a> where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.\n\n<a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\">Part 4: Implementing Authenticatation</a>','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-autosave-v1','','','2015-04-30 20:55:20','2015-04-30 20:55:20','',487,'https://thesocietea.org/2015/04/487-autosave-v1/',0,'revision','',0),(638,2,'2015-04-30 20:54:09','2015-04-30 20:54:09','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\">the next post</a> where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-04-30 20:54:09','2015-04-30 20:54:09','',487,'https://thesocietea.org/2015/04/487-revision-v1/',0,'revision','',0),(639,2,'2015-04-30 20:55:29','2015-04-30 20:55:29','We just wrapped up our discussion on serialization <a href=\"http://thesocietea.org/2015/03/building-a-json-api-with-rails-part-2-serialization/\" target=\"_blank\">in the last post</a>, and technically at this point you have a fully functioning base API and don\'t need to do any more work (if you\'ve been following along in this series). However, there\'s one caveat - we don\'t have any security. So far anyone can request data from any endpoint without considering data that\'s private to certain users or data that requires certain privileges to view. That may be okay if you\'re building a completely public API where any user can make any type of request at any point in time, such as a public wiki, but chances are that you need to put at least a little bit of security in there.\r\n\r\nAnd if you still aren\'t biting, wouldn\'t you like to at least know which user is actually making the requests, so that you can tailor some of the data you return to them? You can\'t do that right now, but you\'ll be able to by the end of this topic. Let\'s begin.\r\n<h2>Some Background</h2>\r\nBefore we get into adding code, we need to discuss how different authentication strategies work according to the HTTP spec and what options are available to us. You can always use a third-party authentication package like <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a>, which provides a very high-calibur authentication system that is completely free to use - but a lot of these systems are a tad bit complicated to implement. Should we be building a massive app, this may be something to look into, but since we\'re building a small blog <b>AND</b> the main purpose here is to educate, we\'re going to build our own simple yet very powerful authentication system.\r\n\r\nWe\'re going to use two different authentication methodologies in this app: <strong>Basic</strong> authentication and <strong>Token-Based</strong> authentication. Why use two? Because we\'re using them for different purposes. Check it out.\r\n<h2>Basic Authentication</h2>\r\nBasic authentication is what we\'re going to use to accept a <strong>username</strong> and <strong>password</strong> from the user in order to make the initial authentication request to our application. Whenever you log into any application that asks for a username and password, chances are that they\'re using basic authentication when you make that initial login. Basic authentication is actually a part of the HTTP 1.1 spec under <a href=\"http://tools.ietf.org/html/rfc2617\" target=\"_blank\">rfc 2617</a>, and thus has a specified format that we can use. It looks like this:\r\n\r\n[code]Authorization: Basic username:password[/code]\r\n\r\n<p class=\"newpage\">We\'re doing a few things here:</p>\r\n\r\n<ul>\r\n	<li class=\"newpage\">Setting an HTTP Header called <strong>Authorization</strong></li>\r\n	<li class=\"newpage\">Submitting the value of that header to be \"Basic username:password\"</li>\r\n</ul>\r\nHTTP requests can have headers such as <em>Content-Type</em>, <em>Host</em>, <em>User-Agent</em>, <em>Cookie</em>, etc. and the one we use to authenticate is called <em>Authorization</em>. The first part of our header is the word <strong>Basic</strong>; this is how we state that we\'re using <em>basic</em> authentication instead of a different form of authentication. The second part of our header is the concatenation of our username and password, separated by a colon. But, I left out <strong>one major part</strong>: Our username and password chunk isn\'t in plain text - it\'s <a href=\"http://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 encoded</a>. What does that look like? Here\'s an example with username <span style=\"text-decoration: underline;\">foo</span> and password <span style=\"text-decoration: underline;\">barbaz</span>:\r\n\r\n[code]&quot;foo:barbaz&quot; =&gt; Base64 Encoded = &quot;Zm9vOmJhcmJheg==\\n&quot;[/code]\r\n\r\nSo after it\'s all said and done, our full Authorization request header would look like this:\r\n\r\n[code]Authorization = Basic Zm9vOmJhcmJheg==\\n[/code]\r\n\r\nNow you might ask, why do we Base64 encode the username and password? Your immediate thought might be to add security so that our password isn\'t in plain text, and while it sure looks that way, that\'s not true. We eventually need to decode that username and password block on the server, and there\'s no secret on how to do that - so if anyone gets a hold of that Base64 encoded block while the request is being made, they can decode it in a heartbeat. The real reason Base64 encoding is employed is to make the request header fully URL safe. There are a lot of characters that aren\'t URL safe that we use in our passwords and perhaps even in our usernames, and Base64 encoding ensures that all of that gets encoded into a string that is fully HTTP transferable.\r\n\r\nBack to our app. As I mentioned earlier, we\'re going to use basic authentication to submit our <strong>username</strong>  and <strong>password</strong> to our API, and it will return a <strong>token</strong> to us - a token being just a random hash of letters and/or numbers. So what good does that do us? It does us a lot of good because now we can use token-based authentication.\r\n<h2>Token-Based Authentication</h2>\r\nWe received a token back from our initial request using basic authentication, and now we\'re going to use that token on <strong>every subsequent request</strong> that we make to our API to authenticate ourselves. We do this because it\'s actually a core principle of Representational State Transfer (REST) for the server to not maintain any concept of state, so therefore each unique request is responsible for providing all of the necessary authentication data every single time. Will this be ridiculous to implement? No, it won\'t be bad at all - it just means that we\'re going to set another header on every normal request we make to our API. Although token-based authentication isn\'t specified in the HTTP spec like basic authentication, there is a very agreed upon format to structure your token-based Authorization header that looks very similar to basic authentication:\r\n\r\n[code]Authorization = Token token=your_token[/code]\r\n\r\nSee? Very similar structure, and this one\'s even a little simpler because instead of providing two values, we only have to supply one: our token. Now remember, our token is just a random hash of letters and numbers that don\'t mean anything - so why do we use it? The idea behind passing a token around on every request is that it is a way to represent the user making the request without having to pass around any important data. On our server, we would associate a user with a certain token (if you remember back in <a title=\"Building a JSON API with Rails – Part 1: Getting Started\" href=\"http://thesocietea.org/2015/02/building-a-json-api-with-rails-part-1-getting-started/\" target=\"_blank\">part 1</a>, this is when we\'ll actually use the <strong>auth_token</strong> attribute we created on our User table); because our server is aware of this association, we can authenticate that user solely based on his/her token. That\'s using just one value to authenticate, instead of having to pass around a username and password on every request.\r\n\r\nLet\'s say that we submit our username and password using basic authentication, and our server responds with a 200 (i.e. successful) status code and the following JSON:\r\n\r\n[code]{ token: &quot;a2b38czzzelli888afvx&quot; }[/code]\r\n\r\nThat means we got our token! We can now change our Authorization header to use that token for every normal request we make to our API:\r\n\r\n[code]Authorization = Token token=a2b38czzzelli888afvx[/code]\r\n\r\nAnd this will handle both authorizing us as a valid user and it will let the server know who the requesting user is so that we don\'t have to worry about explicitly telling the server through query parameters or other headers.\r\n<h4>Worst Case Scenario</h4>\r\nWhat happens if that token is compromised? Well the only way that could really happen is if someone is listening to the requests you make via some shared connection like public wifi. If a black-hat hacker does get a hold of your token, then they can make a few requests - but as soon as it\'s discovered that you\'ve been hacked, then we just reset your token. That would require you, the rightful user, to have to log in again, but that\'s all you have to do - the server handles issuing you a new token and authenticating with that one. The hacker that has your old token, he can\'t do anything with it now. That\'s much nicer than having a hacker compromise your actual username and/or password, because:\r\n<ul>\r\n	<li>You may use that username and/or password on multiple sites</li>\r\n	<li>You would need to manually change your password if the hacker compromised it</li>\r\n</ul>\r\nSounds like a pain. This is why token-based authentication has really gained traction over the past several years.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>No Code?</h2>\r\nWe didn\'t touch on any code here, and I apologize for that. But I needed to make sure we covered these authentication strategies before we actually start implementing them so that you know why and how we\'re going to use them. As I mentioned earlier, <a href=\"http://oauth.net/\" target=\"_blank\">OAuth</a> is an example of a great third-party authentication package that takes token-based authentication to the max - but for the sake of simplicity and education, we\'re going to build our own strong auth into our API.\r\n\r\nSo get ready for <a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\" target=\"_blank\">the next post</a> where we\'ll be doing nothing but code. We got through the learning part here, now we can move to the fun stuff. Rails provides some seriously awesome support for these authentication strategies, and now that we know how they work, we can push the power of Rails as an API to the absolute max.\r\n\r\n<a href=\"https://thesocietea.org/2015/04/building-a-json-api-with-rails-part-4-implementing-authentication/\" target=\"_blank\">Part 4: Implementing Authenticatation</a>','Building a JSON API with Rails – Part 3: Authentication Strategies','','inherit','open','open','','487-revision-v1','','','2015-04-30 20:55:29','2015-04-30 20:55:29','',487,'https://thesocietea.org/2015/04/487-revision-v1/',0,'revision','',0),(642,2,'2015-07-03 12:00:10','2015-07-03 12:00:10','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the <strong>Pokémon gameboy games</strong>, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (<strong>Red/Blue/Yellow</strong>), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weaknesses towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the <a href=\"http://bulbapedia.bulbagarden.net/wiki/Elite_Four\" target=\"_blank\">Elite Four</a> until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, <a href=\"http://bulbapedia.bulbagarden.net/wiki/Lance\" target=\"_blank\">Lance</a>, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','future','open','open','','my-pokemon-dream-team','','','2015-06-11 03:06:06','2015-06-11 03:06:06','',0,'https://thesocietea.org/?p=642',0,'post','',0),(643,2,'2015-06-08 15:37:02','2015-06-08 15:37:02','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n\r\n<strong>Charizard </strong>(Fire/Flying)\r\n\r\nFire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n\r\n<strong>Lapras </strong>(Water/Ice)\r\n\r\nI typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n\r\n<strong>Gengar </strong>(Ghost/Poison)\r\n\r\nGhost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n\r\n<strong>Machamp </strong>(Fighting)\r\n\r\nMachamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n\r\n<strong>Raichu</strong> (Electric)\r\n\r\nI know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n\r\n<strong>Dragonite </strong>(Dragon/Flying)\r\n\r\nI usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:37:02','2015-06-08 15:37:02','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(644,2,'2015-06-08 15:38:28','2015-06-08 15:38:28','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n\r\n<strong>Charizard </strong>(Fire/Flying)\r\n\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"260\" height=\"200\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n\r\n<strong>Lapras </strong>(Water/Ice)\r\n\r\nI typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n\r\n<strong>Gengar </strong>(Ghost/Poison)\r\n\r\nGhost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n\r\n<strong>Machamp </strong>(Fighting)\r\n\r\nMachamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n\r\n<strong>Raichu</strong> (Electric)\r\n\r\nI know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n\r\n<strong>Dragonite </strong>(Dragon/Flying)\r\n\r\nI usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:38:28','2015-06-08 15:38:28','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(645,2,'2015-06-08 15:44:03','2015-06-08 15:44:03','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n\r\n<strong>Charizard </strong>(Fire/Flying)\r\n\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n\r\n<strong>Lapras </strong>(Water/Ice)\r\n\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n\r\n<strong>Gengar </strong>(Ghost/Poison)\r\n\r\nGhost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n\r\n<strong>Machamp </strong>(Fighting)\r\n\r\nMachamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n\r\n<strong>Raichu</strong> (Electric)\r\n\r\nI know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n\r\n<strong>Dragonite </strong>(Dragon/Flying)\r\n\r\nI usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:44:03','2015-06-08 15:44:03','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(646,2,'2015-06-08 15:44:47','2015-06-08 15:44:47','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h4><strong>Charizard </strong>(Fire/Flying)</h4>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n\r\n<strong>Lapras </strong>(Water/Ice)\r\n\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n\r\n<strong>Gengar </strong>(Ghost/Poison)\r\n\r\nGhost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n\r\n<strong>Machamp </strong>(Fighting)\r\n\r\nMachamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n\r\n<strong>Raichu</strong> (Electric)\r\n\r\nI know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n\r\n<strong>Dragonite </strong>(Dragon/Flying)\r\n\r\nI usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:44:47','2015-06-08 15:44:47','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (647,2,'2015-06-08 15:45:07','2015-06-08 15:45:07','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n\r\n<strong>Lapras </strong>(Water/Ice)\r\n\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n\r\n<strong>Gengar </strong>(Ghost/Poison)\r\n\r\nGhost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n\r\n<strong>Machamp </strong>(Fighting)\r\n\r\nMachamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n\r\n<strong>Raichu</strong> (Electric)\r\n\r\nI know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n\r\n<strong>Dragonite </strong>(Dragon/Flying)\r\n\r\nI usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:45:07','2015-06-08 15:45:07','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(648,2,'2015-06-08 15:48:22','2015-06-08 15:48:22','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:48:22','2015-06-08 15:48:22','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(649,2,'2015-06-08 15:48:57','2015-06-08 15:48:57','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weakness towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:48:57','2015-06-08 15:48:57','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(650,2,'2015-06-08 15:51:20','2015-06-08 15:51:20','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weaknesses towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the Elite Four until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, Lance, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:51:20','2015-06-08 15:51:20','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(651,2,'2015-06-08 15:56:42','2015-06-08 15:56:42','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the Pokémon gameboy games, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (Red/Blue/Yellow), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weaknesses towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the <a href=\"http://bulbapedia.bulbagarden.net/wiki/Elite_Four\" target=\"_blank\">Elite Four</a> until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, <a href=\"http://bulbapedia.bulbagarden.net/wiki/Lance\" target=\"_blank\">Lance</a>, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-08 15:56:42','2015-06-08 15:56:42','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(653,2,'2015-06-09 13:01:23','2015-06-09 13:01:23','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the <strong>Pokémon gameboy games</strong>, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (<strong>Red/Blue/Yellow</strong>), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weaknesses towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but Gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the <a href=\"http://bulbapedia.bulbagarden.net/wiki/Elite_Four\" target=\"_blank\">Elite Four</a> until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, <a href=\"http://bulbapedia.bulbagarden.net/wiki/Lance\" target=\"_blank\">Lance</a>, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-09 13:01:23','2015-06-09 13:01:23','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(654,2,'2015-06-09 13:04:38','2015-06-09 13:04:38','Attention all Pokémon masters, today I’m going to share the six Pokémon that would make up my absolute perfect, unstoppable dream team. Before I begin, however, I need to give you a few disclaimers:\r\n<ol>\r\n	<li>I’m going to draft and discuss my dream team from the standpoint of playing the <strong>Pokémon gameboy games</strong>, and not anything really related to the show or cards.</li>\r\n	<li>I’ll only be referring to the <a href=\"http://www.giantbomb.com/profile/wakka/lists/the-150-original-pokemon/59579/\" target=\"_blank\">original 150 Pokémon</a> that can be found in the first generation of Pokémon games (<strong>Red/Blue/Yellow</strong>), and not any of the other bajillion that came after.</li>\r\n</ol>\r\nNow with that said, let’s get into the fundamentals of what makes up a dream team.\r\n<h3>Stats</h3>\r\nObviously rule #1 for creating a perfect team is to have Pokémon that have good battle stats; what I mean here is high attack, defense, special attack, special defense, and speed. To break that down, here’s a brief description of each major stat:\r\n<ul>\r\n	<li>Attack – How much damage you do with physical attacks (tackle, body slam, rock throw, gust, etc.)</li>\r\n	<li>Defense – How much damage you can mitigate from physical attacks</li>\r\n	<li>Special Attack – How much damage you do with non-physical attacks (ember, water gun, razor leaf, psychic, etc.)</li>\r\n	<li>Special Defense – How much damage you can mitigate from non-physical attacks</li>\r\n	<li>Speed – Determines who attacks first on each turn (you’d be surprised at how important this one is)</li>\r\n</ul>\r\nObviously no one Pokémon will be the best at all of these, but you have to know what type of Pokémon are best at what stats, and then try to use that to your advantage. For instance, Alakazam (psychic type) has a very high special attack and speed, so that makes it good at 1 hit KOs right off the bat; but if it gets hit even once by a formidable opponent, that’s going to do some major damage. Golem (rock/ground type), on the other hand, has low speed but an incredible defense, so even though it won’t usually go first on a turn, it can handle quite a beating to where it’s okay for it to attack second. You don’t necessarily have to have a team full of Pokémon that maximize each stat, but just make sure that your play style takes advantage of your Pokémon’s best statistics.\r\n<h3>Types</h3>\r\nThere are many types of Pokémon in the first generation (15 to be exact), and you absolutely need to have a team that is diversified among these types. Yeah, sure, you could have a team full of fire Pokémon and maybe do okay in the game, that is, until you fight a Blastoise (water type); that Blastoise will put your fire out in no time, and you’ll be left crying on the sidewalk next to the Pokémon center. Each type of Pokémon has its own strengths and weaknesses towards certain types (except for normal types, which are not super-effective against anything), and you need to pick and choose a team that is able to somehow take the advantage against each type of Pokémon. For example, having a team consisting of a water, fire, grass, flying, rock, and psychic type Pokémon is a rock-solid team right there. Even though those individual types have their own weaknesses, your team is practically guaranteed to have at least one Pokémon be super-effective towards anything that your opponent can throw at you.\r\n<h3>Trainer Experience</h3>\r\nYes, I’m sorry to say that even you as the trainer have to put in some mental effort to make sure you become the ultimate Pokémon master; you can’t rely only on your Pokémon. What I mean here is that you can have a super-charged team all day long (e.g. Charizard, Blastoise, Venasaur, Zapdos, Dragonite, and maybe even a Mewtwo), but if you’re not aware of what your opponent’s Pokémon types are or what their general stat breakdowns are (e.g. high attack, low speed), then you might be in for a tougher time than you think. Most NPC (non-player character) trainers don’t seem to be too smart in this area either, so you can usually slide by them without knowing too much about this, but gym leaders will take you down if you’re not careful. Even if you manage to make it past the gym leaders, don’t even think about battling the <a href=\"http://bulbapedia.bulbagarden.net/wiki/Elite_Four\" target=\"_blank\">Elite Four</a> until you become well versed in the general Pokémon knowledge discussed above.\r\n<h2>Dream Team</h2>\r\nNow that we’ve got the fundamentals out of the way, we can step into what I would consider to be my perfect dream team. Some stats that I particularly value are Attack (both Attack and Special Attack) and Speed. My personal play-style is to try to do as much super-effective damage as fast as I can, with a goal to never let my opponent even get a chance to strike. So, here goes:\r\n<h3><strong>Charizard </strong>(Fire/Flying)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891763-006charizard.png\" alt=\"\" width=\"200\" height=\"154\" />Fire Pokémon are pretty uncommon to come across in your travels, so I typically opt to get the fire Pokémon choice right off the bat. Fire Pokemon can rip grass, bug, and ice types to shreds, and Charizard has got a high speed and special attack to typically make this happen in just one hit. Plus, its secondary flying type allows Charizard to learn the necessary HM 02 (Fly), as well as protects it from those pesky ground-type moves.\r\n<h3><strong>Lapras </strong>(Water/Ice)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891870-131lapras.png\" alt=\"Lapras\" width=\"200\" height=\"185\" />I typically like to choose Pokémon to raise that have at least one evolution, but I make an exception with Lapras. This Pokémon is such a beast with its high HP, high defense, and high special attack, it’s hard to deny the pure power of this ice and water machine. Because surfing is practically essential once you hit mid-game, you need to have a water Pokémon on you at all times; plus, they’re a staple type that is good against fire, rock, and ground, and Lapras’ ice-type help make it also strong against grass, ground (again), and dragon (one of the two types that are super-effective here).\r\n<h3><strong>Gengar </strong>(Ghost/Poison)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1891841-094gengar.png\" alt=\"Gengar\" width=\"200\" height=\"205\" />Ghost Pokémon are the only type in the game that are completely resistant to two Pokémon types (normal <em>and</em> fighting), and Gengar might as well be the king of ghost types. Gengar has sick special attack and speed stats, and although it’s not a psychic type, it can still learn psychic moves which are extremely powerful against fighting and poison type Pokémon. My favorite thing about Gengar is that it is one of the only Pokémon that can learn the Hypnosis/Dream Eater combo; dream eater is the most powerful psychic move, and if that’s not awesome enough, it also replenishes Gengar’s own health in the process (the only caveat is that the opposing Pokémon has to be asleep!). On top of all this, Gengar can still obviously learn ghost type moves which are effective against ghost and psychic types.\r\n<h3><strong>Machamp </strong>(Fighting)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892305-068machamp.png\" alt=\"Machamp\" width=\"200\" height=\"185\" />Machamp is a fighting machine; it has an incredibly high attack power and HP combined with a decent enough speed to usually attack first. Fighting moves work very well against ice, rock, and normal types (which are very common), and Machamp gets a 1.5x damage boost for all fighting moves since that’s the type of Pokémon it is. Machamp can also learn most ground and rock type moves, which are both physical attacks and thus can make good use of Machamp’s high attack stat.\r\n<h3><strong>Raichu</strong> (Electric)</h3>\r\n<img class=\"alignright\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1898248-026raichu.png\" alt=\"Raichu\" width=\"200\" height=\"177\" />I know what you’re thinking: what about Pikachu? No true Pokémon trainer is complete without Ash Ketchum’s favorite! I know, I know, but in the games, Pikachu just doesn’t make the cut; however, its evolution, Raichu, all-be-it a chubby mouse, is crazy fast and has an intense special attack stat with which it can throttle opponents. Raichu’s specialty is obviously electric-type moves, and similar to Machamp, it gets a 1.5x damage boost for all moves of this type. You probably don’t even need that boost though if you play your cards right, because Raichu can usually take down water and flying type Pokémon in a single hit. Raichu’s pure power is best seen when facing an opponent like a Gyarados: Because Gyarados is both water and flying type, Raichu’s moves hit it for 4x damage instead of the usual super-effective 2x. Stack this with the 1.5x multiplier that it gets from being pure electric type, and you get a whopping 6x damage from a single thunderbolt.\r\n<h3><strong>Dragonite </strong>(Dragon/Flying)</h3>\r\n<img class=\"alignleft\" src=\"http://static.giantbomb.com/uploads/scale_small/13/135472/1892692-149dragonite.png\" alt=\"Dragonite\" width=\"190\" height=\"239\" />I usually roll through most of the game with just 5 Pokémon until I get close to end-game (it just helps to make sure my Pokémon get more experience divided among them); that sixth slot is usually reserved for my “fun” or “all-around” Pokémon, and a Dragonite fits that bill perfectly here. Easily the game’s most powerful dragon-type, Dragonite is decked with a high attack, defense, and HP to take down any opponent. Dragon type moves are one of the only types that are good against other dragon types, and they’re fully effective against all types of Pokémon (no damage reduction here!). On top of this, dragon types are resistant to some of the most common Pokémon types (fire, water, grass, electric), and Dragonite itself is very customizable because it can learn a bunch of different TMs and HMs. Plus, the leader of the Elite Four, <a href=\"http://bulbapedia.bulbagarden.net/wiki/Lance\" target=\"_blank\">Lance</a>, is a dragon Pokémon trainer, and it just feels so sweet to beat him at his own game!\r\n\r\n<hr class=\"short\" />\r\n\r\nSo there you have it, my Pokémon dream team. With this spread sitting in the dugout, it’s pretty difficult to lose as long as you know what you’re doing. For all you critics out there though, remember to keep in mind that I’m only referring to the 150 Pokémon in the first generation, back before dark, steel, and fairy were even viable Pokémon types. My dream team would definitely change a bit in future generations with the introduction of these types. So what are your favorite Pokémon? Think you could beat my team in a battle? Comment below and keep this discussion going!','My Pokémon Dream Team','','inherit','open','open','','642-revision-v1','','','2015-06-09 13:04:38','2015-06-09 13:04:38','',642,'https://thesocietea.org/2015/06/642-revision-v1/',0,'revision','',0),(655,2,'2015-08-14 12:00:48','2015-08-14 12:00:48','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User <strong>super</strong> to handle any unintended errors, which will then call the default method_missing handler.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We reviewed Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking around until the end - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','future','open','open','','metaprogramming-in-ruby-part-1','','','2015-06-11 03:05:14','2015-06-11 03:05:14','',0,'https://thesocietea.org/?p=655',0,'post','',0),(656,2,'2015-06-11 01:16:39','2015-06-11 01:16:39','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:16:39','2015-06-11 01:16:39','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(657,2,'2015-06-11 01:18:29','2015-06-11 01:18:29','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# &gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:18:29','2015-06-11 01:18:29','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(658,2,'2015-06-11 01:22:36','2015-06-11 01:22:36','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented. Enter: <b>Open Classes</b>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:22:36','2015-06-11 01:22:36','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(659,2,'2015-06-11 01:23:00','2015-06-11 01:23:00','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:23:00','2015-06-11 01:23:00','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(660,2,'2015-06-11 01:24:17','2015-06-11 01:24:17','','ancestor_chain','','inherit','open','open','','ancestor_chain','','','2015-06-11 01:24:17','2015-06-11 01:24:17','',655,'https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg',0,'attachment','image/jpeg',0),(661,2,'2015-06-11 01:24:17','2015-06-11 01:24:17','','ruby_object_model','','inherit','open','open','','ruby_object_model','','','2015-06-11 01:24:17','2015-06-11 01:24:17','',655,'https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png',0,'attachment','image/png',0),(662,2,'2015-06-11 01:38:50','2015-06-11 01:38:50','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<a href=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\"><img class=\"aligncenter size-full wp-image-661\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" /></a>\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass - also an object - has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<a href=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\"><img class=\"aligncenter size-full wp-image-660\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" /></a>\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:38:50','2015-06-11 01:38:50','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(663,2,'2015-06-11 01:39:25','2015-06-11 01:39:25','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass - also an object - has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:39:25','2015-06-11 01:39:25','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(664,2,'2015-06-11 01:40:19','2015-06-11 01:40:19','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:40:19','2015-06-11 01:40:19','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(665,2,'2015-06-11 01:45:34','2015-06-11 01:45:34','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> uses it heavily. Check this example out.','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:45:34','2015-06-11 01:45:34','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(666,2,'2015-06-11 01:51:48','2015-06-11 01:51:48','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. the <strong>define_method</strong> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 01:51:48','2015-06-11 01:51:48','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(667,2,'2015-06-11 02:04:21','2015-06-11 02:04:21','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BaseObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. the <strong>define_method</strong> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power here comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:04:21','2015-06-11 02:04:21','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(668,2,'2015-06-11 02:34:55','2015-06-11 02:34:55','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>','Metaprogramming in Ruby','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:34:55','2015-06-11 02:34:55','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(669,2,'2015-06-11 02:43:10','2015-06-11 02:43:10','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but <em>metaprogramming</em> typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:43:10','2015-06-11 02:43:10','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(670,2,'2015-06-11 02:43:40','2015-06-11 02:43:40','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime. </strong>However, with metaprogramming, there\'s a reoccuring theme:\r\n<blockquote>Metaprogramming is <strong>powerful</strong>. But use it wisely. Uncle Ben said \"With great power comes great responsibility.\"</blockquote>\r\nHe wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:43:40','2015-06-11 02:43:40','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(671,2,'2015-06-11 02:46:18','2015-06-11 02:46:18','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in <strong>Ruby. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen he said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:46:18','2015-06-11 02:46:18','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(672,2,'2015-06-11 02:46:34','2015-06-11 02:46:34','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen he said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:46:34','2015-06-11 02:46:34','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(673,2,'2015-06-11 02:47:02','2015-06-11 02:47:02','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:47:02','2015-06-11 02:47:02','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(674,2,'2015-06-11 02:47:10','2015-06-11 02:47:10','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nYou want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:47:10','2015-06-11 02:47:10','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(675,2,'2015-06-11 02:47:28','2015-06-11 02:47:28','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:47:28','2015-06-11 02:47:28','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(676,2,'2015-06-11 02:47:40','2015-06-11 02:47:40','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nBut that\'s not very object oriented.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:47:40','2015-06-11 02:47:40','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(677,2,'2015-06-11 02:48:06','2015-06-11 02:48:06','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat get\'s the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:48:06','2015-06-11 02:48:06','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(678,2,'2015-06-11 02:48:18','2015-06-11 02:48:18','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nCool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:48:18','2015-06-11 02:48:18','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(679,2,'2015-06-11 02:49:23','2015-06-11 02:49:23','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you werent the one who originally declared it (e.g. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:49:23','2015-06-11 02:49:23','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(680,2,'2015-06-11 02:49:38','2015-06-11 02:49:38','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (e.g. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The method Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method. This process is called Monkeypatching. It\'s not bad by any means, but be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:49:38','2015-06-11 02:49:38','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(681,2,'2015-06-11 02:51:17','2015-06-11 02:51:17','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called Monkeypatching. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThere are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:51:17','2015-06-11 02:51:17','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(682,2,'2015-06-11 02:52:30','2015-06-11 02:52:30','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this later. For now, let\'s move onto the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:52:30','2015-06-11 02:52:30','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(683,2,'2015-06-11 02:53:17','2015-06-11 02:53:17','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that all objects ultimately inherit from in Ruby. Object includes a module called <strong>Kernel</strong>. And Finally, Object inherits <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default ORM for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:53:17','2015-06-11 02:53:17','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(684,2,'2015-06-11 02:55:37','2015-06-11 02:55:37','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:55:37','2015-06-11 02:55:37','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(685,2,'2015-06-11 02:58:29','2015-06-11 02:58:29','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:58:29','2015-06-11 02:58:29','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(686,2,'2015-06-11 02:59:01','2015-06-11 02:59:01','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a NoMethodError, because Book doesn\'t know how to handle the method read. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:59:01','2015-06-11 02:59:01','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(687,2,'2015-06-11 02:59:45','2015-06-11 02:59:45','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 02:59:45','2015-06-11 02:59:45','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(688,2,'2015-06-11 03:00:29','2015-06-11 03:00:29','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User super to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 03:00:29','2015-06-11 03:00:29','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(689,2,'2015-06-11 03:00:53','2015-06-11 03:00:53','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User <strong>super</strong> to handle any unintended errors.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 03:00:53','2015-06-11 03:00:53','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(690,2,'2015-06-11 03:01:42','2015-06-11 03:01:42','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User <strong>super</strong> to handle any unintended errors, which will then call the default method_missing handler.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We covered a lot here, like Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 03:01:42','2015-06-11 03:01:42','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(691,2,'2015-06-11 03:02:13','2015-06-11 03:02:13','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User <strong>super</strong> to handle any unintended errors, which will then call the default method_missing handler.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We reviewed Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking with me this far - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 03:02:13','2015-06-11 03:02:13','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(692,2,'2015-06-11 03:03:11','2015-06-11 03:03:11','<h2>What is Metaprogramming?</h2>\r\nMetaprogramming is code that writes code for you. But isn\'t that what code generators do, like the rails gem, or yeoman? Or even bytecode compilers?\r\n\r\nYes, but metaprogramming typically refers to something else in Ruby<strong>. </strong>Metaprogramming in ruby refers to code that writes code for you <strong>dynamically. At runtime.</strong> This allows you to do some really cool things like add in a ton of functionality with very few lines of code, but there\'s a catch; you can jack up a lot of things too at the same time and/or end up with practically unreadable code if you\'re not careful. The moral of the story is, in Uncle Ben\'s words:\r\n<blockquote>\"With great power comes great responsibility.\"</blockquote>\r\nWhen Uncle Ben said this, he wasn\'t talking about any <em>real </em><em>life</em> things. He was talking about Metaprogramming.\r\n<h2>Let\'s Get Started</h2>\r\nLet\'s say you want to create a method that will accept a string and strip everything out except for alphanumeric characters:\r\n\r\n[ruby]\r\ndef to_alphanumeric(s)\r\n    s.gsub(/[^\\w\\s]/, \'\')\r\nend\r\n\r\nputs to_alphanumeric(&quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;)\r\n# =&gt; &quot;Aaron is the B0SS&quot;\r\n[/ruby]\r\n\r\nThat gets the job done, but it\'s not very object oriented. Let\'s fix that.\r\n<h2>Open Classes</h2>\r\n\r\n[ruby]\r\nclass String\r\n    def to_alphanumeric\r\n        gsub(/[^\\w\\s]/, \'\')\r\n    end\r\nend\r\n\r\nputs &quot;A&amp;^ar$o%n&amp;* (is&amp;*&amp;))) t&amp;*(*he B0&amp;*S**^S)&quot;.to_alphanumeric\r\n# =&gt;\r\n[/ruby]\r\n\r\nIn ruby, you can break open any existing class and add to it just like this - even if you weren\'t the one who originally declared it (i.e. the String class here is a ruby default class). Cool stuff. Nuff said. However, there\'s a problem with open classes. Check this code out.\r\n\r\n[ruby]\r\nclass Array\r\n    def replace(original, replacement)\r\n        self.map {|e| e == original ? replacement : e }\r\n    end\r\nend\r\n\r\nputs [\'x\', \'y\', \'z\'].replace(\'x\', \'a\')\r\n\r\n# =&gt; a, y, z\r\n[/ruby]\r\n\r\nWe wrote an Array#replace method that takes in 2 arguments, the first of which is the value you want to replace in the array, and the second of which you want to replace the first with.\r\n\r\nThis code works just fine. Why is this a problem? The Array#replace method already exists, and it swaps out the entire array with another array that you provide as an arg. We just overwrote that method, and that\'s bad. We probably didn\'t mean to do that.\r\n\r\nThis process of editing classes in ruby is called <strong>Monkeypatching</strong>. It\'s not bad by any means, but you definitely need to be sure you know what you\'re doing.\r\n<h2>Ruby\'s Object Model</h2>\r\nBefore we get further, we need to talk about how Ruby\'s object model works.\r\n\r\n<img class=\"aligncenter wp-image-661 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ruby_object_model.png\" alt=\"ruby_object_model\" width=\"579\" height=\"440\" />\r\n\r\nThis may look like a confusing diagram, but it neatly lays out how objects, classes, and modules are related in ruby. There are 3 key things of note here:\r\n<ul>\r\n	<li>Instantiated objects (obj1, obj2, obj3) have a class of <strong>MyClass</strong></li>\r\n	<li>MyClass has a class of <strong>Class </strong>(This mean that classes are also objects in Ruby. That\'s tough to wrap your head around, I know)</li>\r\n	<li>While MyClass has a class of Class, it inherits from <strong>Object</strong></li>\r\n</ul>\r\nWe\'ll reference this again later in Part 2. For now, let\'s move on to the Ancestors Chain.\r\n<h2>Ancestors Chain</h2>\r\nThis diagram is a little bit easier to understand, and deals solely with inheritance and module inclusion.\r\n\r\n<img class=\"aligncenter wp-image-660 size-full\" src=\"https://thesocietea.org/wp-content/uploads/2015/06/ancestor_chain.jpg\" alt=\"ancestor_chain\" width=\"396\" height=\"552\" />\r\n\r\nWhen you call a method, Ruby goes right into the class of the receiver and then up the ancestors chain, until it either finds the method or reaches the end of the chain. In this diagram, an object <strong>b</strong> is instantiated from class <strong>Book</strong>. Book has 2 modules included: <strong>Printable </strong>and <b>Document</b>. Book inherits from class <b>Object</b>, which is the class that nearly everything inherits from in Ruby. Object includes a module called <strong>Kernel</strong>. And finally, Object inherits from <b>BasicObject</b> - the absolute parent of every object in Ruby.\r\n\r\nNow that we\'ve got these 2 very important topics down a little - Ruby\'s Object Model and the Ancestors Chain - we can get back to some code.\r\n<h2>Methods</h2>\r\nIn Ruby, you can dynamically create methods and dynamically call methods. And call methods that don\'t even exist - without throwing an error.\r\n<h3>Methods Part 1: Dynamically Defining Methods</h3>\r\nWhy would you want to dynamically define methods? Maybe to reduce code duplication, or to add cool functionality. <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\">ActiveRecord</a> (the default <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\">ORM</a> tool for Rails projects) uses it heavily. Check this example out.\r\n\r\n[ruby]\r\nclass Book &lt; ActiveRecord::Base\r\nend\r\n\r\nb = Book.new\r\nb.title\r\n[/ruby]\r\n\r\nIf you\'re familiar with ActiveRecord, then this looks like nothing out of the ordinary. Even though we don\'t define the title attribute in the Book class, we assume that <em>Book</em> is an ORM wrapper around a Book database table, and that <em>title</em> is an attribute in that table. Thus, we return the title column for that particular database row that <strong>b</strong> represents.\r\n\r\nNormally, calling title on this class should error with a NoMethodError - but ActiveRecord dynamically adds methods just like we\'re about to do. The ActiveRecord code base is a prime example of how you can use metaprogramming to the max.\r\n\r\nLet\'s try this out and create our own methods:\r\n\r\n[ruby]\r\ndef foo\r\n    puts &quot;foo was called&quot;\r\nend\r\n\r\ndef baz\r\n    puts &quot;baz was called&quot;\r\nend\r\n\r\ndef bar\r\n    puts &quot;bar was called&quot;\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nSee the duplication? Let\'s fix that with metaprogramming.\r\n\r\n[ruby]\r\n%w(foo baz bar).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\nfoo\r\nbaz\r\nbar\r\n\r\n# =&gt; foo was called\r\n# =&gt; baz was called\r\n# =&gt; bar was called\r\n[/ruby]\r\n\r\nWhat we\'re doing here is dynamically defining the methods <strong>foo</strong>, <strong>baz</strong>, and <strong>bar</strong>, and then we can call them. The <a href=\"http://ruby-doc.org/core-2.2.0/Module.html#method-i-define_method\" target=\"_blank\">Module#define_method</a> method is something that I personally use a lot, and it\'s so, so helpful. <a href=\"https://github.com/Staplegun-US/intervals_api/blob/master/lib/intervals_api/request_handler.rb#L21\" target=\"_blank\">Here\'s an example</a> of how I used it in a gem I wrote.\r\n\r\nYou can see how much code we saved here - especially if we were writing real methods. BUT - is it worth the added code complexity? That\'s your call.\r\n<h3>Methods Part 2: Dynamically Calling Methods</h3>\r\nHere\'s an example of how to call a method by either the string or symbol name of that method:\r\n\r\n[ruby]\r\n%w(test1 test2 test3 test4 test5).each do |s|\r\n    define_method(s) do\r\n        puts &quot;#{s} was called&quot;\r\n    end\r\nend\r\n\r\n# New Code\r\n\r\n(1..5).each { |n| send(&quot;test#{n}&quot;) }\r\n\r\n# =&gt; test1 was called\r\n# =&gt; test2 was called\r\n# =&gt; test3 was called\r\n# =&gt; test4 was called\r\n# =&gt; test5 was called\r\n[/ruby]\r\n\r\nThe <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-send\" target=\"_blank\">Object#send</a> method is how we can dynamically call methods. Here I\'m spinning through the numbers 1 through 5, and calling a method whose name is dependent on the current variable value. Clutch.\r\n\r\nBecause every object in Ruby inherits from Object, you can also call <em>send</em> as a method on any object to access one of its other methods or attributes - like this:\r\n\r\n[ruby]\r\nclass OKCRB\r\n    def is_boss?\r\n        puts &quot;true&quot;\r\n    end\r\nend\r\n\r\nokcrb = OKCRB.new\r\nokcrb.send(&quot;is_boss?&quot;)\r\n\r\n# =&gt; true\r\n[/ruby]\r\n\r\nThe power with <em>send</em> comes when you want to call a method based on some in-scope situation - often times based off of a variable value. Object#send also allows you to call private functions - so be careful if you\'re not meaning to do that. Use <a href=\"http://ruby-doc.org/core-2.2.2/Object.html#method-i-public_send\" target=\"_blank\">Object#public_send</a> if you can - it does the same thing, but is restricted from accessing private methods and attributes.\r\n<h3>Methods Part 3: Ghost Methods</h3>\r\nWhat happens if we try to execute this code?\r\n\r\n[ruby]\r\nclass Book\r\nend\r\n\r\nb = Book.new\r\nb.read\r\n[/ruby]\r\n\r\nWe would get a <strong>NoMethodError</strong>, because Book doesn\'t know how to handle the method <em>read</em>. But it doesn\'t have to be that way. Let\'s explore <strong>method_missing</strong>.\r\n\r\n[ruby]\r\nclass Book\r\n    def method_missing(method, *args, &amp;block)\r\n        puts &quot;You called: #{method}(#{args.join(\', \')})&quot;\r\n        puts &quot;(You also passed it a block)&quot; if block_given?\r\n    end\r\nend\r\n\r\nb = Book.new\r\n\r\nb.read\r\nb.read(\'a\', \'b\') { &quot;foo&quot; }\r\n\r\n# =&gt; You called: read()\r\n# =&gt; You called read(a, b)\r\n# =&gt; (You also passed it a block)\r\n[/ruby]\r\n\r\n<a href=\"http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\" target=\"_blank\">BasicObject#method_missing</a> provides you an option to build a handler that will automatically get called in the event of a NoMethodError - but before that error ever happens. You are then given as parameters the method name that you tried to call, its arguments, and its block. From there, you can do anything you want.\r\n\r\nWhile this looks really cool, be hesitant to use it unless you have a valid reason, because:\r\n<ul>\r\n	<li>It takes extra time to hit the method_missing handler because you traverse the Ancestor Chain</li>\r\n	<li>If you\'re not careful, you\'ll swallow actual errors uninentionally. User <strong>super</strong> to handle any unintended errors, which will then call the default method_missing handler.</li>\r\n</ul>\r\n\r\n<hr class=\"short\" />\r\n\r\nThat\'s all we\'re going to cover in this first part. We reviewed Open Classes, Ruby\'s Object Model, The Ancestors Chain, Dynamic Method Declarations, Dynamic Method Calling, and Ghost Methods, but there\'s even more in store for Part 2 where we\'ll cover Scopes, Dynamically Defining Classes, Closures (Blocks, Procs, and Lambdas), Various Evals (instance_eval, class_eval, and eval), and Writing a Multi-Purpose Module.\r\n\r\nWe won\'t be covering <a href=\"http://www.integralist.co.uk/posts/eigenclass.html\" target=\"_blank\">Singleton Methods and Eigenclasses</a> however. Those concepts cover a good chunk of metaprogramming in Ruby, but they are in my opinion the most confusing concepts to master and I\'ve never ran into a situation where using them would have made my code much better. So I chose to avoid them altogether, but if you\'re interested in learning more there are tons of articles about them.\r\n\r\nThanks for sticking around until the end - and stay on the lookout for Metaprogramming in Ruby: Part 2!','Metaprogramming in Ruby: Part 1','','inherit','open','open','','655-revision-v1','','','2015-06-11 03:03:11','2015-06-11 03:03:11','',655,'https://thesocietea.org/2015/06/655-revision-v1/',0,'revision','',0),(693,2,'2015-06-12 17:07:33','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2015-06-12 17:07:33','0000-00-00 00:00:00','',0,'https://thesocietea.org/?p=693',0,'post','',0),(694,2,'2015-06-13 00:02:06','2015-06-13 00:02:06','<h2>As a Speaker</h2>\r\nI am available as a speaker and have given the following talks in the past:\r\n\r\n<strong>General</strong>\r\n\r\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\r\n\r\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\r\n\r\n<strong>Ruby</strong>\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\r\n\r\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/metaprogramming-ruby-talk\" target=\"_blank\">Metaprogramming in Ruby</a> - 40-45 min\r\n\r\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review modifying existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, the various <em>eval</em> methods, and much more. There are plenty of interactive code examples I go through with each new topic.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>As a Developer</h2>\r\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-06-13 00:02:06','2015-06-13 00:02:06','',13,'https://thesocietea.org/2015/06/13-revision-v1/',0,'revision','',0),(695,2,'2015-06-13 00:03:12','2015-06-13 00:03:12','<h2>As a Speaker</h2>\r\nI am available as a speaker and have given the following talks in the past:\r\n<h4>General</h4>\r\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\r\n\r\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\r\n\r\n<strong>Ruby</strong>\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\r\n\r\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/metaprogramming-ruby-talk\" target=\"_blank\">Metaprogramming in Ruby</a> - 40-45 min\r\n\r\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review modifying existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, the various <em>eval</em> methods, and much more. There are plenty of interactive code examples I go through with each new topic.\r\n\r\n<hr class=\"short\" />\r\n\r\n<h2>As a Developer</h2>\r\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-06-13 00:03:12','2015-06-13 00:03:12','',13,'https://thesocietea.org/2015/06/13-revision-v1/',0,'revision','',0),(696,2,'2015-06-13 00:04:55','2015-06-13 00:04:55','<h2>As a Developer</h2>\r\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n<h2>As a Speaker</h2>\r\nI am available as a speaker and have given the following talks in the past:\r\n\r\n<strong>General</strong>\r\n\r\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\r\n\r\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\r\n\r\n<hr class=\"short\" />\r\n\r\n<strong>Ruby</strong>\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\r\n\r\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/metaprogramming-ruby-talk\" target=\"_blank\">Metaprogramming in Ruby</a> - 40-45 min\r\n\r\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review modifying existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, the various <em>eval</em> methods, and much more. There are plenty of interactive code examples I go through with each new topic.','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-06-13 00:04:55','2015-06-13 00:04:55','',13,'https://thesocietea.org/2015/06/13-revision-v1/',0,'revision','',0),(697,2,'2015-06-13 00:06:57','2015-06-13 00:06:57','<h2>As a Developer</h2>\r\nIf you\'re looking for a full stack developer with specializations in open-source and other available technologies, then I can help you. I\'m available for remote contract or local, temporary gigs around the Oklahoma City metro area. Whether you need development work, design help, or even training, take a look below at my skill sets and see if I fit your need. Feel free to <a href=\"mailto:alkrauss48@gmail.com\">shoot me an email</a> to learn more.\r\n<h2>As a Speaker</h2>\r\nI am available as a speaker and have given the following talks in the past:\r\n\r\n<strong>General</strong>\r\n\r\n<a href=\"/assets/documents/programming_speaking_outline.pdf\" target=\"_blank\">What to Know as You\'re Becoming a Developer</a> - 40-45 min\r\n\r\nThis talk is specifically geared towards young adults with a serious interest in programming (and already have a little background knowledge). This includes students in AP high school programming classes, vocational classes, college classes, and local development groups.\r\n\r\n\r\n\r\n<strong>Ruby</strong>\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/okcrb-api\" target=\"_blank\">Building a JSON API with Rails</a> - 40-45 min\r\n\r\nIn this talk, I live-code an entire MVC RESTful API using the Rails framework, all the way from scaffolding some models to handling serialization, authentication, and more. Prior knowledge of Ruby on Rails is helpful, but not necessary.\r\n\r\n<a href=\"https://github.com/alkrauss48/talks/tree/master/metaprogramming-ruby-talk\" target=\"_blank\">Metaprogramming in Ruby</a> - 40-45 min\r\n\r\nMetaprogramming is a concept that stretches across languages, but Ruby allows you as the developer to take it to the max and write really powerful (and dangerous) code. In this talk, I review modifying existing classes, ruby\'s object model and the ancestors chain, defining methods dynamically, modifying scope, ruby\'s various closures, the various <em>eval</em> methods, and much more. There are plenty of interactive code examples I go through with each new topic.\r\n\r\n<hr class=\"short\" />','Hire Me','','inherit','open','open','','13-revision-v1','','','2015-06-13 00:06:57','2015-06-13 00:06:57','',13,'https://thesocietea.org/2015/06/13-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (25,2,0),(26,2,0),(27,2,0),(32,2,0),(142,1,0),(142,3,0),(151,2,0),(154,1,0),(158,1,0),(167,1,0),(172,1,0),(220,1,0),(233,1,0),(261,1,0),(282,1,0),(301,1,0),(305,1,0),(335,2,0),(346,1,0),(357,1,0),(381,1,0),(383,1,0),(443,1,0),(466,1,0),(469,1,0),(487,1,0),(499,2,0),(504,1,0),(524,1,0),(564,1,0),(607,1,0),(642,1,0),(655,1,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,21),(2,2,'nav_menu','',0,7),(3,3,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Main Menu','main-menu',0),(3,'tea','tea',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (25,2,'nickname','thecodeboss'),(26,2,'first_name',''),(27,2,'last_name',''),(28,2,'description',''),(29,2,'rich_editing','true'),(30,2,'comment_shortcuts','false'),(31,2,'admin_color','fresh'),(32,2,'use_ssl','0'),(33,2,'show_admin_bar_front','true'),(34,2,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(35,2,'wp_user_level','10'),(36,2,'dismissed_wp_pointers','wp360_locks,wp390_widgets,wp410_dfw'),(38,2,'wp_dashboard_quick_press_last_post_id','693'),(40,2,'wp_user-settings','editor=html&hidetb=1&libraryContent=browse&urlbutton=none&imgsize=full&align=center&wplink=1&advImgDetails=hide'),(41,2,'wp_user-settings-time','1434154013'),(42,2,'nav_menu_recently_edited','2'),(43,2,'managenav-menuscolumnshidden','a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}'),(44,2,'metaboxhidden_nav-menus','a:4:{i:0;s:8:\"add-post\";i:1;s:11:\"add-project\";i:2;s:12:\"add-post_tag\";i:3;s:15:\"add-post_format\";}'),(50,2,'session_tokens','a:2:{s:64:\"838cf8ca25a78638301be1afb3152295bba1b3b8cf77e1d34372f1a47546b277\";a:4:{s:10:\"expiration\";i:1434157615;s:2:\"ip\";s:13:\"68.229.237.68\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36\";s:5:\"login\";i:1433984815;}s:64:\"0b41a24906b09be54770941acc1c34b56f540154b14246a31de90d934539711a\";a:4:{s:10:\"expiration\";i:1434222663;s:2:\"ip\";s:15:\"216.201.130.138\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36\";s:5:\"login\";i:1434049863;}}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (2,'thecodeboss','$P$Bx6dI7ZBqWmqnFzI/Y8ka68Z1Xbql8/','thecodeboss','alkrauss48@gmail.com','','2015-04-01 15:29:07','',0,'thecodeboss');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-06-12 22:12:52
